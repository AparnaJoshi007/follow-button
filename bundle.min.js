(function (crypto$7, require$$0$7, Url, Stream$1, http, https, zlib, require$$2$6, require$$0$8, require$$1$4, require$$1$5, require$$1$6, require$$0$9, require$$0$a) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var crypto__default$1 = /*#__PURE__*/_interopDefaultLegacy(crypto$7);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
	var Url__default = /*#__PURE__*/_interopDefaultLegacy(Url);
	var Stream__default = /*#__PURE__*/_interopDefaultLegacy(Stream$1);
	var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
	var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
	var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
	var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$6);
	var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$8);
	var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
	var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$5);
	var require$$1__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$1$6);
	var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$9);
	var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$a);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire$1 (path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var lib$g = {};

	var cyberConnect = {};

	var ceramicHttpClient = {};

	var utils$w = {};

	var lib$f = {};

	var streamId = {};

	var src$b = {exports: {}};

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	function base$g (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return new Uint8Array() }
	    var psz = 0;
	        // Skip leading spaces.
	    if (source[psz] === ' ') { return }
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip trailing spaces.
	    if (source[psz] === ' ') { return }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) { return buffer }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src$a = base$g;

	const textDecoder$2 = new TextDecoder();
	/**
	 * @param {ArrayBufferView|ArrayBuffer} bytes
	 * @returns {string}
	 */
	const decodeText$1 = (bytes) => textDecoder$2.decode(bytes);

	const textEncoder$1 = new TextEncoder();
	/**
	 * @param {string} text
	 * @returns {Uint8Array}
	 */
	const encodeText$2 = (text) => textEncoder$1.encode(text);

	/**
	 * Returns a new Uint8Array created by concatenating the passed Arrays
	 *
	 * @param {Array<ArrayLike<number>>} arrs
	 * @param {number} length
	 * @returns {Uint8Array}
	 */
	function concat$g (arrs, length) {
	  const output = new Uint8Array(length);
	  let offset = 0;

	  for (const arr of arrs) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }

	  return output
	}

	var util$h = { decodeText: decodeText$1, encodeText: encodeText$2, concat: concat$g };

	const { encodeText: encodeText$1 } = util$h;

	/** @typedef {import('./types').CodecFactory} CodecFactory */
	/** @typedef {import("./types").BaseName} BaseName */
	/** @typedef {import("./types").BaseCode} BaseCode */

	/**
	 * Class to encode/decode in the supported Bases
	 *
	 */
	class Base$4 {
	  /**
	   * @param {BaseName} name
	   * @param {BaseCode} code
	   * @param {CodecFactory} factory
	   * @param {string} alphabet
	   */
	  constructor (name, code, factory, alphabet) {
	    this.name = name;
	    this.code = code;
	    this.codeBuf = encodeText$1(this.code);
	    this.alphabet = alphabet;
	    this.codec = factory(alphabet);
	  }

	  /**
	   * @param {Uint8Array} buf
	   * @returns {string}
	   */
	  encode (buf) {
	    return this.codec.encode(buf)
	  }

	  /**
	   * @param {string} string
	   * @returns {Uint8Array}
	   */
	  decode (string) {
	    for (const char of string) {
	      if (this.alphabet && this.alphabet.indexOf(char) < 0) {
	        throw new Error(`invalid character '${char}' in '${string}'`)
	      }
	    }
	    return this.codec.decode(string)
	  }
	}

	var base$f = Base$4;

	/** @typedef {import('./types').CodecFactory} CodecFactory */

	/**
	 * @param {string} string
	 * @param {string} alphabet
	 * @param {number} bitsPerChar
	 * @returns {Uint8Array}
	 */
	const decode$c = (string, alphabet, bitsPerChar) => {
	  // Build the character lookup table:
	  /** @type {Record<string, number>} */
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }

	  // Count the padding bytes:
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }

	  // Allocate the output:
	  const out = new Uint8Array((end * bitsPerChar / 8) | 0);

	  // Parse the data:
	  let bits = 0; // Number of bits currently in the buffer
	  let buffer = 0; // Bits waiting to be written out, MSB first
	  let written = 0; // Next byte to write
	  for (let i = 0; i < end; ++i) {
	    // Read one character from the string:
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError('Invalid character ' + string[i])
	    }

	    // Append the bits to the buffer:
	    buffer = (buffer << bitsPerChar) | value;
	    bits += bitsPerChar;

	    // Write out some bits if the buffer has a byte's worth:
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 0xff & (buffer >> bits);
	    }
	  }

	  // Verify that we have received just enough bits:
	  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
	    throw new SyntaxError('Unexpected end of data')
	  }

	  return out
	};

	/**
	 * @param {Uint8Array} data
	 * @param {string} alphabet
	 * @param {number} bitsPerChar
	 * @returns {string}
	 */
	const encode$9 = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';

	  let bits = 0; // Number of bits currently in the buffer
	  let buffer = 0; // Bits waiting to be written out, MSB first
	  for (let i = 0; i < data.length; ++i) {
	    // Slurp data into the buffer:
	    buffer = (buffer << 8) | data[i];
	    bits += 8;

	    // Write out as much as we can:
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & (buffer >> bits)];
	    }
	  }

	  // Partial character:
	  if (bits) {
	    out += alphabet[mask & (buffer << (bitsPerChar - bits))];
	  }

	  // Add padding characters until we hit a byte boundary:
	  if (pad) {
	    while ((out.length * bitsPerChar) & 7) {
	      out += '=';
	    }
	  }

	  return out
	};

	/**
	 * RFC4648 Factory
	 *
	 * @param {number} bitsPerChar
	 * @returns {CodecFactory}
	 */
	const rfc4648$3 = (bitsPerChar) => (alphabet) => {
	  return {
	    /**
	     * @param {Uint8Array} input
	     * @returns {string}
	     */
	    encode (input) {
	      return encode$9(input, alphabet, bitsPerChar)
	    },
	    /**
	     * @param {string} input
	     * @returns {Uint8Array}
	     */
	    decode (input) {
	      return decode$c(input, alphabet, bitsPerChar)
	    }
	  }
	};

	var rfc4648_1 = { rfc4648: rfc4648$3 };

	const baseX$4 = src$a;
	const Base$3 = base$f;
	const { rfc4648: rfc4648$2 } = rfc4648_1;
	const { decodeText, encodeText } = util$h;

	/** @typedef {import('./types').CodecFactory} CodecFactory */
	/** @typedef {import('./types').Codec} Codec */
	/** @typedef {import('./types').BaseName} BaseName */
	/** @typedef {import('./types').BaseCode} BaseCode */

	/** @type {CodecFactory} */
	const identity$c = () => {
	  return {
	    encode: decodeText,
	    decode: encodeText
	  }
	};

	/**
	 *
	 * name, code, implementation, alphabet
	 *
	 * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}
	 */
	const constants$7 = [
	  ['identity', '\x00', identity$c, ''],
	  ['base2', '0', rfc4648$2(1), '01'],
	  ['base8', '7', rfc4648$2(3), '01234567'],
	  ['base10', '9', baseX$4, '0123456789'],
	  ['base16', 'f', rfc4648$2(4), '0123456789abcdef'],
	  ['base16upper', 'F', rfc4648$2(4), '0123456789ABCDEF'],
	  ['base32hex', 'v', rfc4648$2(5), '0123456789abcdefghijklmnopqrstuv'],
	  ['base32hexupper', 'V', rfc4648$2(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
	  ['base32hexpad', 't', rfc4648$2(5), '0123456789abcdefghijklmnopqrstuv='],
	  ['base32hexpadupper', 'T', rfc4648$2(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
	  ['base32', 'b', rfc4648$2(5), 'abcdefghijklmnopqrstuvwxyz234567'],
	  ['base32upper', 'B', rfc4648$2(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
	  ['base32pad', 'c', rfc4648$2(5), 'abcdefghijklmnopqrstuvwxyz234567='],
	  ['base32padupper', 'C', rfc4648$2(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
	  ['base32z', 'h', rfc4648$2(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
	  ['base36', 'k', baseX$4, '0123456789abcdefghijklmnopqrstuvwxyz'],
	  ['base36upper', 'K', baseX$4, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
	  ['base58btc', 'z', baseX$4, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
	  ['base58flickr', 'Z', baseX$4, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
	  ['base64', 'm', rfc4648$2(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
	  ['base64pad', 'M', rfc4648$2(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
	  ['base64url', 'u', rfc4648$2(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
	  ['base64urlpad', 'U', rfc4648$2(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
	];

	/** @type {Record<BaseName,Base>} */
	const names$2 = constants$7.reduce((prev, tupple) => {
	  prev[tupple[0]] = new Base$3(tupple[0], tupple[1], tupple[2], tupple[3]);
	  return prev
	}, /** @type {Record<BaseName,Base>} */({}));

	/** @type {Record<BaseCode,Base>} */
	const codes$2 = constants$7.reduce((prev, tupple) => {
	  prev[tupple[1]] = names$2[tupple[0]];
	  return prev
	}, /** @type {Record<BaseCode,Base>} */({}));

	var constants_1$4 = {
	  names: names$2,
	  codes: codes$2
	};

	/**
	 * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
	 *
	 */

	(function (module, exports) {

	const constants = constants_1$4;
	const { encodeText, decodeText, concat } = util$h;

	/** @typedef {import('./base')} Base */
	/** @typedef {import("./types").BaseNameOrCode} BaseNameOrCode */
	/** @typedef {import("./types").BaseCode} BaseCode */
	/** @typedef {import("./types").BaseName} BaseName */

	/**
	 * Create a new Uint8Array with the multibase varint+code.
	 *
	 * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
	 * @param {Uint8Array} buf - The data to be prefixed with multibase.
	 * @returns {Uint8Array}
	 * @throws {Error} Will throw if the encoding is not supported
	 */
	function multibase (nameOrCode, buf) {
	  if (!buf) {
	    throw new Error('requires an encoded Uint8Array')
	  }
	  const { name, codeBuf } = encoding(nameOrCode);
	  validEncode(name, buf);

	  return concat([codeBuf, buf], codeBuf.length + buf.length)
	}

	/**
	 * Encode data with the specified base and add the multibase prefix.
	 *
	 * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
	 * @param {Uint8Array} buf - The data to be encoded.
	 * @returns {Uint8Array}
	 * @throws {Error} Will throw if the encoding is not supported
	 *
	 */
	function encode (nameOrCode, buf) {
	  const enc = encoding(nameOrCode);
	  const data = encodeText(enc.encode(buf));

	  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)
	}

	/**
	 * Takes a Uint8Array or string encoded with multibase header, decodes it and
	 * returns the decoded buffer
	 *
	 * @param {Uint8Array|string} data
	 * @returns {Uint8Array}
	 * @throws {Error} Will throw if the encoding is not supported
	 *
	 */
	function decode (data) {
	  if (data instanceof Uint8Array) {
	    data = decodeText(data);
	  }
	  const prefix = data[0];

	  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet
	  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {
	    data = data.toLowerCase();
	  }
	  const enc = encoding(/** @type {BaseCode} */(data[0]));
	  return enc.decode(data.substring(1))
	}

	/**
	 * Is the given data multibase encoded?
	 *
	 * @param {Uint8Array|string} data
	 */
	function isEncoded (data) {
	  if (data instanceof Uint8Array) {
	    data = decodeText(data);
	  }

	  // Ensure bufOrString is a string
	  if (Object.prototype.toString.call(data) !== '[object String]') {
	    return false
	  }

	  try {
	    const enc = encoding(/** @type {BaseCode} */(data[0]));
	    return enc.name
	  } catch (err) {
	    return false
	  }
	}

	/**
	 * Validate encoded data
	 *
	 * @param {BaseNameOrCode} name
	 * @param {Uint8Array} buf
	 * @returns {void}
	 * @throws {Error} Will throw if the encoding is not supported
	 */
	function validEncode (name, buf) {
	  const enc = encoding(name);
	  enc.decode(decodeText(buf));
	}

	/**
	 * Get the encoding by name or code
	 *
	 * @param {BaseNameOrCode} nameOrCode
	 * @returns {Base}
	 * @throws {Error} Will throw if the encoding is not supported
	 */
	function encoding (nameOrCode) {
	  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {
	    return constants.names[/** @type {BaseName} */(nameOrCode)]
	  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {
	    return constants.codes[/** @type {BaseCode} */(nameOrCode)]
	  } else {
	    throw new Error(`Unsupported encoding: ${nameOrCode}`)
	  }
	}

	/**
	 * Get encoding from data
	 *
	 * @param {string|Uint8Array} data
	 * @returns {Base}
	 * @throws {Error} Will throw if the encoding is not supported
	 */
	function encodingFromData (data) {
	  if (data instanceof Uint8Array) {
	    data = decodeText(data);
	  }

	  return encoding(/** @type {BaseCode} */(data[0]))
	}

	exports = module.exports = multibase;
	exports.encode = encode;
	exports.decode = decode;
	exports.isEncoded = isEncoded;
	exports.encoding = encoding;
	exports.encodingFromData = encodingFromData;
	const names = Object.freeze(constants.names);
	const codes = Object.freeze(constants.codes);
	exports.names = names;
	exports.codes = codes;
	}(src$b, src$b.exports));

	var encode_1$3 = encode$8;

	var MSB$6 = 0x80
	  , REST$6 = 0x7F
	  , MSBALL$3 = ~REST$6
	  , INT$3 = Math.pow(2, 31);

	function encode$8(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;

	  while(num >= INT$3) {
	    out[offset++] = (num & 0xFF) | MSB$6;
	    num /= 128;
	  }
	  while(num & MSBALL$3) {
	    out[offset++] = (num & 0xFF) | MSB$6;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  
	  encode$8.bytes = offset - oldOffset + 1;
	  
	  return out
	}

	var decode$b = read$9;

	var MSB$5 = 0x80
	  , REST$5 = 0x7F;

	function read$9(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length;

	  do {
	    if (counter >= l) {
	      read$9.bytes = 0;
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++];
	    res += shift < 28
	      ? (b & REST$5) << shift
	      : (b & REST$5) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$5)

	  read$9.bytes = counter - offset;

	  return res
	}

	var N1$3 = Math.pow(2,  7);
	var N2$3 = Math.pow(2, 14);
	var N3$3 = Math.pow(2, 21);
	var N4$3 = Math.pow(2, 28);
	var N5$3 = Math.pow(2, 35);
	var N6$3 = Math.pow(2, 42);
	var N7$3 = Math.pow(2, 49);
	var N8$3 = Math.pow(2, 56);
	var N9$3 = Math.pow(2, 63);

	var length$3 = function (value) {
	  return (
	    value < N1$3 ? 1
	  : value < N2$3 ? 2
	  : value < N3$3 ? 3
	  : value < N4$3 ? 4
	  : value < N5$3 ? 5
	  : value < N6$3 ? 6
	  : value < N7$3 ? 7
	  : value < N8$3 ? 8
	  : value < N9$3 ? 9
	  :              10
	  )
	};

	var varint$b = {
	    encode: encode_1$3
	  , decode: decode$b
	  , encodingLength: length$3
	};

	/* eslint quote-props: off */

	/**
	 * Names for all available hashes
	 *
	 * @typedef { "identity" | "sha1" | "sha2-256" | "sha2-512" | "sha3-512" | "sha3-384" | "sha3-256" | "sha3-224" | "shake-128" | "shake-256" | "keccak-224" | "keccak-256" | "keccak-384" | "keccak-512" | "blake3" | "murmur3-128" | "murmur3-32" | "dbl-sha2-256" | "md4" | "md5" | "bmt" | "sha2-256-trunc254-padded" | "ripemd-128" | "ripemd-160" | "ripemd-256" | "ripemd-320" | "x11" | "kangarootwelve" | "sm3-256" | "blake2b-8" | "blake2b-16" | "blake2b-24" | "blake2b-32" | "blake2b-40" | "blake2b-48" | "blake2b-56" | "blake2b-64" | "blake2b-72" | "blake2b-80" | "blake2b-88" | "blake2b-96" | "blake2b-104" | "blake2b-112" | "blake2b-120" | "blake2b-128" | "blake2b-136" | "blake2b-144" | "blake2b-152" | "blake2b-160" | "blake2b-168" | "blake2b-176" | "blake2b-184" | "blake2b-192" | "blake2b-200" | "blake2b-208" | "blake2b-216" | "blake2b-224" | "blake2b-232" | "blake2b-240" | "blake2b-248" | "blake2b-256" | "blake2b-264" | "blake2b-272" | "blake2b-280" | "blake2b-288" | "blake2b-296" | "blake2b-304" | "blake2b-312" | "blake2b-320" | "blake2b-328" | "blake2b-336" | "blake2b-344" | "blake2b-352" | "blake2b-360" | "blake2b-368" | "blake2b-376" | "blake2b-384" | "blake2b-392" | "blake2b-400" | "blake2b-408" | "blake2b-416" | "blake2b-424" | "blake2b-432" | "blake2b-440" | "blake2b-448" | "blake2b-456" | "blake2b-464" | "blake2b-472" | "blake2b-480" | "blake2b-488" | "blake2b-496" | "blake2b-504" | "blake2b-512" | "blake2s-8" | "blake2s-16" | "blake2s-24" | "blake2s-32" | "blake2s-40" | "blake2s-48" | "blake2s-56" | "blake2s-64" | "blake2s-72" | "blake2s-80" | "blake2s-88" | "blake2s-96" | "blake2s-104" | "blake2s-112" | "blake2s-120" | "blake2s-128" | "blake2s-136" | "blake2s-144" | "blake2s-152" | "blake2s-160" | "blake2s-168" | "blake2s-176" | "blake2s-184" | "blake2s-192" | "blake2s-200" | "blake2s-208" | "blake2s-216" | "blake2s-224" | "blake2s-232" | "blake2s-240" | "blake2s-248" | "blake2s-256" | "skein256-8" | "skein256-16" | "skein256-24" | "skein256-32" | "skein256-40" | "skein256-48" | "skein256-56" | "skein256-64" | "skein256-72" | "skein256-80" | "skein256-88" | "skein256-96" | "skein256-104" | "skein256-112" | "skein256-120" | "skein256-128" | "skein256-136" | "skein256-144" | "skein256-152" | "skein256-160" | "skein256-168" | "skein256-176" | "skein256-184" | "skein256-192" | "skein256-200" | "skein256-208" | "skein256-216" | "skein256-224" | "skein256-232" | "skein256-240" | "skein256-248" | "skein256-256" | "skein512-8" | "skein512-16" | "skein512-24" | "skein512-32" | "skein512-40" | "skein512-48" | "skein512-56" | "skein512-64" | "skein512-72" | "skein512-80" | "skein512-88" | "skein512-96" | "skein512-104" | "skein512-112" | "skein512-120" | "skein512-128" | "skein512-136" | "skein512-144" | "skein512-152" | "skein512-160" | "skein512-168" | "skein512-176" | "skein512-184" | "skein512-192" | "skein512-200" | "skein512-208" | "skein512-216" | "skein512-224" | "skein512-232" | "skein512-240" | "skein512-248" | "skein512-256" | "skein512-264" | "skein512-272" | "skein512-280" | "skein512-288" | "skein512-296" | "skein512-304" | "skein512-312" | "skein512-320" | "skein512-328" | "skein512-336" | "skein512-344" | "skein512-352" | "skein512-360" | "skein512-368" | "skein512-376" | "skein512-384" | "skein512-392" | "skein512-400" | "skein512-408" | "skein512-416" | "skein512-424" | "skein512-432" | "skein512-440" | "skein512-448" | "skein512-456" | "skein512-464" | "skein512-472" | "skein512-480" | "skein512-488" | "skein512-496" | "skein512-504" | "skein512-512" | "skein1024-8" | "skein1024-16" | "skein1024-24" | "skein1024-32" | "skein1024-40" | "skein1024-48" | "skein1024-56" | "skein1024-64" | "skein1024-72" | "skein1024-80" | "skein1024-88" | "skein1024-96" | "skein1024-104" | "skein1024-112" | "skein1024-120" | "skein1024-128" | "skein1024-136" | "skein1024-144" | "skein1024-152" | "skein1024-160" | "skein1024-168" | "skein1024-176" | "skein1024-184" | "skein1024-192" | "skein1024-200" | "skein1024-208" | "skein1024-216" | "skein1024-224" | "skein1024-232" | "skein1024-240" | "skein1024-248" | "skein1024-256" | "skein1024-264" | "skein1024-272" | "skein1024-280" | "skein1024-288" | "skein1024-296" | "skein1024-304" | "skein1024-312" | "skein1024-320" | "skein1024-328" | "skein1024-336" | "skein1024-344" | "skein1024-352" | "skein1024-360" | "skein1024-368" | "skein1024-376" | "skein1024-384" | "skein1024-392" | "skein1024-400" | "skein1024-408" | "skein1024-416" | "skein1024-424" | "skein1024-432" | "skein1024-440" | "skein1024-448" | "skein1024-456" | "skein1024-464" | "skein1024-472" | "skein1024-480" | "skein1024-488" | "skein1024-496" | "skein1024-504" | "skein1024-512" | "skein1024-520" | "skein1024-528" | "skein1024-536" | "skein1024-544" | "skein1024-552" | "skein1024-560" | "skein1024-568" | "skein1024-576" | "skein1024-584" | "skein1024-592" | "skein1024-600" | "skein1024-608" | "skein1024-616" | "skein1024-624" | "skein1024-632" | "skein1024-640" | "skein1024-648" | "skein1024-656" | "skein1024-664" | "skein1024-672" | "skein1024-680" | "skein1024-688" | "skein1024-696" | "skein1024-704" | "skein1024-712" | "skein1024-720" | "skein1024-728" | "skein1024-736" | "skein1024-744" | "skein1024-752" | "skein1024-760" | "skein1024-768" | "skein1024-776" | "skein1024-784" | "skein1024-792" | "skein1024-800" | "skein1024-808" | "skein1024-816" | "skein1024-824" | "skein1024-832" | "skein1024-840" | "skein1024-848" | "skein1024-856" | "skein1024-864" | "skein1024-872" | "skein1024-880" | "skein1024-888" | "skein1024-896" | "skein1024-904" | "skein1024-912" | "skein1024-920" | "skein1024-928" | "skein1024-936" | "skein1024-944" | "skein1024-952" | "skein1024-960" | "skein1024-968" | "skein1024-976" | "skein1024-984" | "skein1024-992" | "skein1024-1000" | "skein1024-1008" | "skein1024-1016" | "skein1024-1024" | "poseidon-bls12_381-a2-fc1" | "poseidon-bls12_381-a2-fc1-sc" } HashName
	 */
	/**
	 * Codes for all available hashes
	 *
	 * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode
	 */

	/**
	 * @type { Record<HashName,HashCode> }
	 */
	const names$1 = Object.freeze({
	  'identity': 0x00,
	  'sha1': 0x11,
	  'sha2-256': 0x12,
	  'sha2-512': 0x13,
	  'sha3-512': 0x14,
	  'sha3-384': 0x15,
	  'sha3-256': 0x16,
	  'sha3-224': 0x17,
	  'shake-128': 0x18,
	  'shake-256': 0x19,
	  'keccak-224': 0x1a,
	  'keccak-256': 0x1b,
	  'keccak-384': 0x1c,
	  'keccak-512': 0x1d,
	  'blake3': 0x1e,
	  'murmur3-128': 0x22,
	  'murmur3-32': 0x23,
	  'dbl-sha2-256': 0x56,
	  'md4': 0xd4,
	  'md5': 0xd5,
	  'bmt': 0xd6,
	  'sha2-256-trunc254-padded': 0x1012,
	  'ripemd-128': 0x1052,
	  'ripemd-160': 0x1053,
	  'ripemd-256': 0x1054,
	  'ripemd-320': 0x1055,
	  'x11': 0x1100,
	  'kangarootwelve': 0x1d01,
	  'sm3-256': 0x534d,
	  'blake2b-8': 0xb201,
	  'blake2b-16': 0xb202,
	  'blake2b-24': 0xb203,
	  'blake2b-32': 0xb204,
	  'blake2b-40': 0xb205,
	  'blake2b-48': 0xb206,
	  'blake2b-56': 0xb207,
	  'blake2b-64': 0xb208,
	  'blake2b-72': 0xb209,
	  'blake2b-80': 0xb20a,
	  'blake2b-88': 0xb20b,
	  'blake2b-96': 0xb20c,
	  'blake2b-104': 0xb20d,
	  'blake2b-112': 0xb20e,
	  'blake2b-120': 0xb20f,
	  'blake2b-128': 0xb210,
	  'blake2b-136': 0xb211,
	  'blake2b-144': 0xb212,
	  'blake2b-152': 0xb213,
	  'blake2b-160': 0xb214,
	  'blake2b-168': 0xb215,
	  'blake2b-176': 0xb216,
	  'blake2b-184': 0xb217,
	  'blake2b-192': 0xb218,
	  'blake2b-200': 0xb219,
	  'blake2b-208': 0xb21a,
	  'blake2b-216': 0xb21b,
	  'blake2b-224': 0xb21c,
	  'blake2b-232': 0xb21d,
	  'blake2b-240': 0xb21e,
	  'blake2b-248': 0xb21f,
	  'blake2b-256': 0xb220,
	  'blake2b-264': 0xb221,
	  'blake2b-272': 0xb222,
	  'blake2b-280': 0xb223,
	  'blake2b-288': 0xb224,
	  'blake2b-296': 0xb225,
	  'blake2b-304': 0xb226,
	  'blake2b-312': 0xb227,
	  'blake2b-320': 0xb228,
	  'blake2b-328': 0xb229,
	  'blake2b-336': 0xb22a,
	  'blake2b-344': 0xb22b,
	  'blake2b-352': 0xb22c,
	  'blake2b-360': 0xb22d,
	  'blake2b-368': 0xb22e,
	  'blake2b-376': 0xb22f,
	  'blake2b-384': 0xb230,
	  'blake2b-392': 0xb231,
	  'blake2b-400': 0xb232,
	  'blake2b-408': 0xb233,
	  'blake2b-416': 0xb234,
	  'blake2b-424': 0xb235,
	  'blake2b-432': 0xb236,
	  'blake2b-440': 0xb237,
	  'blake2b-448': 0xb238,
	  'blake2b-456': 0xb239,
	  'blake2b-464': 0xb23a,
	  'blake2b-472': 0xb23b,
	  'blake2b-480': 0xb23c,
	  'blake2b-488': 0xb23d,
	  'blake2b-496': 0xb23e,
	  'blake2b-504': 0xb23f,
	  'blake2b-512': 0xb240,
	  'blake2s-8': 0xb241,
	  'blake2s-16': 0xb242,
	  'blake2s-24': 0xb243,
	  'blake2s-32': 0xb244,
	  'blake2s-40': 0xb245,
	  'blake2s-48': 0xb246,
	  'blake2s-56': 0xb247,
	  'blake2s-64': 0xb248,
	  'blake2s-72': 0xb249,
	  'blake2s-80': 0xb24a,
	  'blake2s-88': 0xb24b,
	  'blake2s-96': 0xb24c,
	  'blake2s-104': 0xb24d,
	  'blake2s-112': 0xb24e,
	  'blake2s-120': 0xb24f,
	  'blake2s-128': 0xb250,
	  'blake2s-136': 0xb251,
	  'blake2s-144': 0xb252,
	  'blake2s-152': 0xb253,
	  'blake2s-160': 0xb254,
	  'blake2s-168': 0xb255,
	  'blake2s-176': 0xb256,
	  'blake2s-184': 0xb257,
	  'blake2s-192': 0xb258,
	  'blake2s-200': 0xb259,
	  'blake2s-208': 0xb25a,
	  'blake2s-216': 0xb25b,
	  'blake2s-224': 0xb25c,
	  'blake2s-232': 0xb25d,
	  'blake2s-240': 0xb25e,
	  'blake2s-248': 0xb25f,
	  'blake2s-256': 0xb260,
	  'skein256-8': 0xb301,
	  'skein256-16': 0xb302,
	  'skein256-24': 0xb303,
	  'skein256-32': 0xb304,
	  'skein256-40': 0xb305,
	  'skein256-48': 0xb306,
	  'skein256-56': 0xb307,
	  'skein256-64': 0xb308,
	  'skein256-72': 0xb309,
	  'skein256-80': 0xb30a,
	  'skein256-88': 0xb30b,
	  'skein256-96': 0xb30c,
	  'skein256-104': 0xb30d,
	  'skein256-112': 0xb30e,
	  'skein256-120': 0xb30f,
	  'skein256-128': 0xb310,
	  'skein256-136': 0xb311,
	  'skein256-144': 0xb312,
	  'skein256-152': 0xb313,
	  'skein256-160': 0xb314,
	  'skein256-168': 0xb315,
	  'skein256-176': 0xb316,
	  'skein256-184': 0xb317,
	  'skein256-192': 0xb318,
	  'skein256-200': 0xb319,
	  'skein256-208': 0xb31a,
	  'skein256-216': 0xb31b,
	  'skein256-224': 0xb31c,
	  'skein256-232': 0xb31d,
	  'skein256-240': 0xb31e,
	  'skein256-248': 0xb31f,
	  'skein256-256': 0xb320,
	  'skein512-8': 0xb321,
	  'skein512-16': 0xb322,
	  'skein512-24': 0xb323,
	  'skein512-32': 0xb324,
	  'skein512-40': 0xb325,
	  'skein512-48': 0xb326,
	  'skein512-56': 0xb327,
	  'skein512-64': 0xb328,
	  'skein512-72': 0xb329,
	  'skein512-80': 0xb32a,
	  'skein512-88': 0xb32b,
	  'skein512-96': 0xb32c,
	  'skein512-104': 0xb32d,
	  'skein512-112': 0xb32e,
	  'skein512-120': 0xb32f,
	  'skein512-128': 0xb330,
	  'skein512-136': 0xb331,
	  'skein512-144': 0xb332,
	  'skein512-152': 0xb333,
	  'skein512-160': 0xb334,
	  'skein512-168': 0xb335,
	  'skein512-176': 0xb336,
	  'skein512-184': 0xb337,
	  'skein512-192': 0xb338,
	  'skein512-200': 0xb339,
	  'skein512-208': 0xb33a,
	  'skein512-216': 0xb33b,
	  'skein512-224': 0xb33c,
	  'skein512-232': 0xb33d,
	  'skein512-240': 0xb33e,
	  'skein512-248': 0xb33f,
	  'skein512-256': 0xb340,
	  'skein512-264': 0xb341,
	  'skein512-272': 0xb342,
	  'skein512-280': 0xb343,
	  'skein512-288': 0xb344,
	  'skein512-296': 0xb345,
	  'skein512-304': 0xb346,
	  'skein512-312': 0xb347,
	  'skein512-320': 0xb348,
	  'skein512-328': 0xb349,
	  'skein512-336': 0xb34a,
	  'skein512-344': 0xb34b,
	  'skein512-352': 0xb34c,
	  'skein512-360': 0xb34d,
	  'skein512-368': 0xb34e,
	  'skein512-376': 0xb34f,
	  'skein512-384': 0xb350,
	  'skein512-392': 0xb351,
	  'skein512-400': 0xb352,
	  'skein512-408': 0xb353,
	  'skein512-416': 0xb354,
	  'skein512-424': 0xb355,
	  'skein512-432': 0xb356,
	  'skein512-440': 0xb357,
	  'skein512-448': 0xb358,
	  'skein512-456': 0xb359,
	  'skein512-464': 0xb35a,
	  'skein512-472': 0xb35b,
	  'skein512-480': 0xb35c,
	  'skein512-488': 0xb35d,
	  'skein512-496': 0xb35e,
	  'skein512-504': 0xb35f,
	  'skein512-512': 0xb360,
	  'skein1024-8': 0xb361,
	  'skein1024-16': 0xb362,
	  'skein1024-24': 0xb363,
	  'skein1024-32': 0xb364,
	  'skein1024-40': 0xb365,
	  'skein1024-48': 0xb366,
	  'skein1024-56': 0xb367,
	  'skein1024-64': 0xb368,
	  'skein1024-72': 0xb369,
	  'skein1024-80': 0xb36a,
	  'skein1024-88': 0xb36b,
	  'skein1024-96': 0xb36c,
	  'skein1024-104': 0xb36d,
	  'skein1024-112': 0xb36e,
	  'skein1024-120': 0xb36f,
	  'skein1024-128': 0xb370,
	  'skein1024-136': 0xb371,
	  'skein1024-144': 0xb372,
	  'skein1024-152': 0xb373,
	  'skein1024-160': 0xb374,
	  'skein1024-168': 0xb375,
	  'skein1024-176': 0xb376,
	  'skein1024-184': 0xb377,
	  'skein1024-192': 0xb378,
	  'skein1024-200': 0xb379,
	  'skein1024-208': 0xb37a,
	  'skein1024-216': 0xb37b,
	  'skein1024-224': 0xb37c,
	  'skein1024-232': 0xb37d,
	  'skein1024-240': 0xb37e,
	  'skein1024-248': 0xb37f,
	  'skein1024-256': 0xb380,
	  'skein1024-264': 0xb381,
	  'skein1024-272': 0xb382,
	  'skein1024-280': 0xb383,
	  'skein1024-288': 0xb384,
	  'skein1024-296': 0xb385,
	  'skein1024-304': 0xb386,
	  'skein1024-312': 0xb387,
	  'skein1024-320': 0xb388,
	  'skein1024-328': 0xb389,
	  'skein1024-336': 0xb38a,
	  'skein1024-344': 0xb38b,
	  'skein1024-352': 0xb38c,
	  'skein1024-360': 0xb38d,
	  'skein1024-368': 0xb38e,
	  'skein1024-376': 0xb38f,
	  'skein1024-384': 0xb390,
	  'skein1024-392': 0xb391,
	  'skein1024-400': 0xb392,
	  'skein1024-408': 0xb393,
	  'skein1024-416': 0xb394,
	  'skein1024-424': 0xb395,
	  'skein1024-432': 0xb396,
	  'skein1024-440': 0xb397,
	  'skein1024-448': 0xb398,
	  'skein1024-456': 0xb399,
	  'skein1024-464': 0xb39a,
	  'skein1024-472': 0xb39b,
	  'skein1024-480': 0xb39c,
	  'skein1024-488': 0xb39d,
	  'skein1024-496': 0xb39e,
	  'skein1024-504': 0xb39f,
	  'skein1024-512': 0xb3a0,
	  'skein1024-520': 0xb3a1,
	  'skein1024-528': 0xb3a2,
	  'skein1024-536': 0xb3a3,
	  'skein1024-544': 0xb3a4,
	  'skein1024-552': 0xb3a5,
	  'skein1024-560': 0xb3a6,
	  'skein1024-568': 0xb3a7,
	  'skein1024-576': 0xb3a8,
	  'skein1024-584': 0xb3a9,
	  'skein1024-592': 0xb3aa,
	  'skein1024-600': 0xb3ab,
	  'skein1024-608': 0xb3ac,
	  'skein1024-616': 0xb3ad,
	  'skein1024-624': 0xb3ae,
	  'skein1024-632': 0xb3af,
	  'skein1024-640': 0xb3b0,
	  'skein1024-648': 0xb3b1,
	  'skein1024-656': 0xb3b2,
	  'skein1024-664': 0xb3b3,
	  'skein1024-672': 0xb3b4,
	  'skein1024-680': 0xb3b5,
	  'skein1024-688': 0xb3b6,
	  'skein1024-696': 0xb3b7,
	  'skein1024-704': 0xb3b8,
	  'skein1024-712': 0xb3b9,
	  'skein1024-720': 0xb3ba,
	  'skein1024-728': 0xb3bb,
	  'skein1024-736': 0xb3bc,
	  'skein1024-744': 0xb3bd,
	  'skein1024-752': 0xb3be,
	  'skein1024-760': 0xb3bf,
	  'skein1024-768': 0xb3c0,
	  'skein1024-776': 0xb3c1,
	  'skein1024-784': 0xb3c2,
	  'skein1024-792': 0xb3c3,
	  'skein1024-800': 0xb3c4,
	  'skein1024-808': 0xb3c5,
	  'skein1024-816': 0xb3c6,
	  'skein1024-824': 0xb3c7,
	  'skein1024-832': 0xb3c8,
	  'skein1024-840': 0xb3c9,
	  'skein1024-848': 0xb3ca,
	  'skein1024-856': 0xb3cb,
	  'skein1024-864': 0xb3cc,
	  'skein1024-872': 0xb3cd,
	  'skein1024-880': 0xb3ce,
	  'skein1024-888': 0xb3cf,
	  'skein1024-896': 0xb3d0,
	  'skein1024-904': 0xb3d1,
	  'skein1024-912': 0xb3d2,
	  'skein1024-920': 0xb3d3,
	  'skein1024-928': 0xb3d4,
	  'skein1024-936': 0xb3d5,
	  'skein1024-944': 0xb3d6,
	  'skein1024-952': 0xb3d7,
	  'skein1024-960': 0xb3d8,
	  'skein1024-968': 0xb3d9,
	  'skein1024-976': 0xb3da,
	  'skein1024-984': 0xb3db,
	  'skein1024-992': 0xb3dc,
	  'skein1024-1000': 0xb3dd,
	  'skein1024-1008': 0xb3de,
	  'skein1024-1016': 0xb3df,
	  'skein1024-1024': 0xb3e0,
	  'poseidon-bls12_381-a2-fc1': 0xb401,
	  'poseidon-bls12_381-a2-fc1-sc': 0xb402
	});

	var constants$6 = { names: names$1 };

	var toString$a = {};

	var basics$4 = {};

	var identity$b = {};

	var base$e = {};

	function base$d(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array);
	    else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${ name } character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src$9 = base$d;
	var _brrp__multiformats_scope_baseX$1 = src$9;

	var baseX$3 = _brrp__multiformats_scope_baseX$1;

	var bytes$9 = {};

	Object.defineProperty(bytes$9, '__esModule', { value: true });

	const empty$4 = new Uint8Array(0);
	const toHex$3 = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');
	const fromHex = hex => {
	  const hexes = hex.match(/../g);
	  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty$4;
	};
	const equals$8 = (aa, bb) => {
	  if (aa === bb)
	    return true;
	  if (aa.byteLength !== bb.byteLength) {
	    return false;
	  }
	  for (let ii = 0; ii < aa.byteLength; ii++) {
	    if (aa[ii] !== bb[ii]) {
	      return false;
	    }
	  }
	  return true;
	};
	const coerce$1 = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
	    return o;
	  if (o instanceof ArrayBuffer)
	    return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);
	const fromString$c = str => new TextEncoder().encode(str);
	const toString$9 = b => new TextDecoder().decode(b);

	bytes$9.coerce = coerce$1;
	bytes$9.empty = empty$4;
	bytes$9.equals = equals$8;
	bytes$9.fromHex = fromHex;
	bytes$9.fromString = fromString$c;
	bytes$9.isBinary = isBinary;
	bytes$9.toHex = toHex$3;
	bytes$9.toString = toString$9;

	Object.defineProperty(base$e, '__esModule', { value: true });

	var baseX$1 = baseX$3;
	var bytes$8 = bytes$9;

	class Encoder$2 {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${ this.prefix }${ this.baseEncode(bytes) }`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder$4 {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      switch (text[0]) {
	      case this.prefix: {
	          return this.baseDecode(text.slice(1));
	        }
	      default: {
	          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
	        }
	      }
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    const decoders = {
	      [this.prefix]: this,
	      ...decoder.decoders || { [decoder.prefix]: decoder }
	    };
	    return new ComposedDecoder$1(decoders);
	  }
	}
	class ComposedDecoder$1 {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    const other = decoder.decoders || { [decoder.prefix]: decoder };
	    return new ComposedDecoder$1({
	      ...this.decoders,
	      ...other
	    });
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
	    }
	  }
	}
	class Codec$1 {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder$2(name, prefix, baseEncode);
	    this.decoder = new Decoder$4(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from$6 = ({name, prefix, encode, decode}) => new Codec$1(name, prefix, encode, decode);
	const baseX$2 = ({prefix, name, alphabet}) => {
	  const {encode, decode} = baseX$1(alphabet, name);
	  return from$6({
	    prefix,
	    name,
	    encode,
	    decode: text => bytes$8.coerce(decode(text))
	  });
	};
	const decode$a = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${ name } character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode$7 = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648$1 = ({name, prefix, bitsPerChar, alphabet}) => {
	  return from$6({
	    prefix,
	    name,
	    encode(input) {
	      return encode$7(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode$a(input, alphabet, bitsPerChar, name);
	    }
	  });
	};

	base$e.Codec = Codec$1;
	base$e.baseX = baseX$2;
	base$e.from = from$6;
	base$e.rfc4648 = rfc4648$1;

	Object.defineProperty(identity$b, '__esModule', { value: true });

	var base$c = base$e;
	var bytes$7 = bytes$9;

	const identity$a = base$c.from({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => bytes$7.toString(buf),
	  decode: str => bytes$7.fromString(str)
	});

	identity$b.identity = identity$a;

	var base2$4 = {};

	Object.defineProperty(base2$4, '__esModule', { value: true });

	var base$b = base$e;

	const base2$3 = base$b.rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});

	base2$4.base2 = base2$3;

	var base8$4 = {};

	Object.defineProperty(base8$4, '__esModule', { value: true });

	var base$a = base$e;

	const base8$3 = base$a.rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});

	base8$4.base8 = base8$3;

	var base10$4 = {};

	Object.defineProperty(base10$4, '__esModule', { value: true });

	var base$9 = base$e;

	const base10$3 = base$9.baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});

	base10$4.base10 = base10$3;

	var base16$4 = {};

	Object.defineProperty(base16$4, '__esModule', { value: true });

	var base$8 = base$e;

	const base16$3 = base$8.rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper$1 = base$8.rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});

	base16$4.base16 = base16$3;
	base16$4.base16upper = base16upper$1;

	var base32$5 = {};

	Object.defineProperty(base32$5, '__esModule', { value: true });

	var base$7 = base$e;

	const base32$4 = base$7.rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper$1 = base$7.rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad$1 = base$7.rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper$1 = base$7.rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex$1 = base$7.rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper$1 = base$7.rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad$1 = base$7.rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper$1 = base$7.rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z$1 = base$7.rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});

	base32$5.base32 = base32$4;
	base32$5.base32hex = base32hex$1;
	base32$5.base32hexpad = base32hexpad$1;
	base32$5.base32hexpadupper = base32hexpadupper$1;
	base32$5.base32hexupper = base32hexupper$1;
	base32$5.base32pad = base32pad$1;
	base32$5.base32padupper = base32padupper$1;
	base32$5.base32upper = base32upper$1;
	base32$5.base32z = base32z$1;

	var base36$4 = {};

	Object.defineProperty(base36$4, '__esModule', { value: true });

	var base$6 = base$e;

	const base36$3 = base$6.baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper$1 = base$6.baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});

	base36$4.base36 = base36$3;
	base36$4.base36upper = base36upper$1;

	var base58$3 = {};

	Object.defineProperty(base58$3, '__esModule', { value: true });

	var base$5 = base$e;

	const base58btc$1 = base$5.baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr$1 = base$5.baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});

	base58$3.base58btc = base58btc$1;
	base58$3.base58flickr = base58flickr$1;

	var base64$4 = {};

	Object.defineProperty(base64$4, '__esModule', { value: true });

	var base$4 = base$e;

	const base64$3 = base$4.rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad$1 = base$4.rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url$1 = base$4.rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad$1 = base$4.rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});

	base64$4.base64 = base64$3;
	base64$4.base64pad = base64pad$1;
	base64$4.base64url = base64url$1;
	base64$4.base64urlpad = base64urlpad$1;

	var sha2$2 = {};

	var hasher$4 = {};

	var digest$5 = {};

	var varint$a = {};

	var encode_1$2 = encode$6;
	var MSB$4 = 128, REST$4 = 127, MSBALL$2 = ~REST$4, INT$2 = Math.pow(2, 31);
	function encode$6(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT$2) {
	    out[offset++] = num & 255 | MSB$4;
	    num /= 128;
	  }
	  while (num & MSBALL$2) {
	    out[offset++] = num & 255 | MSB$4;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode$6.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode$9 = read$8;
	var MSB$1$1 = 128, REST$1$1 = 127;
	function read$8(buf, offset) {
	  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
	  do {
	    if (counter >= l) {
	      read$8.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1$1) << shift : (b & REST$1$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1$1);
	  read$8.bytes = counter - offset;
	  return res;
	}
	var N1$2 = Math.pow(2, 7);
	var N2$2 = Math.pow(2, 14);
	var N3$2 = Math.pow(2, 21);
	var N4$2 = Math.pow(2, 28);
	var N5$2 = Math.pow(2, 35);
	var N6$2 = Math.pow(2, 42);
	var N7$2 = Math.pow(2, 49);
	var N8$2 = Math.pow(2, 56);
	var N9$2 = Math.pow(2, 63);
	var length$2 = function (value) {
	  return value < N1$2 ? 1 : value < N2$2 ? 2 : value < N3$2 ? 3 : value < N4$2 ? 4 : value < N5$2 ? 5 : value < N6$2 ? 6 : value < N7$2 ? 7 : value < N8$2 ? 8 : value < N9$2 ? 9 : 10;
	};
	var varint$9 = {
	  encode: encode_1$2,
	  decode: decode$9,
	  encodingLength: length$2
	};
	var _brrp_varint$1 = varint$9;
	var varint$1$2 = _brrp_varint$1;

	var varint_1$5 = varint$1$2;

	Object.defineProperty(varint$a, '__esModule', { value: true });

	var varint$1$1 = varint_1$5;

	const decode$8 = data => {
	  const code = varint$1$1.decode(data);
	  return [
	    code,
	    varint$1$1.decode.bytes
	  ];
	};
	const encodeTo$1 = (int, target, offset = 0) => {
	  varint$1$1.encode(int, target, offset);
	  return target;
	};
	const encodingLength$1 = int => {
	  return varint$1$1.encodingLength(int);
	};

	varint$a.decode = decode$8;
	varint$a.encodeTo = encodeTo$1;
	varint$a.encodingLength = encodingLength$1;

	Object.defineProperty(digest$5, '__esModule', { value: true });

	var bytes$6 = bytes$9;
	var varint$8 = varint$a;

	const create$3 = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = varint$8.encodingLength(code);
	  const digestOffset = sizeOffset + varint$8.encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  varint$8.encodeTo(code, bytes, 0);
	  varint$8.encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest$1(code, size, digest, bytes);
	};
	const decode$7 = multihash => {
	  const bytes$1 = bytes$6.coerce(multihash);
	  const [code, sizeOffset] = varint$8.decode(bytes$1);
	  const [size, digestOffset] = varint$8.decode(bytes$1.subarray(sizeOffset));
	  const digest = bytes$1.subarray(sizeOffset + digestOffset);
	  if (digest.byteLength !== size) {
	    throw new Error('Incorrect length');
	  }
	  return new Digest$1(code, size, digest, bytes$1);
	};
	const equals$7 = (a, b) => {
	  if (a === b) {
	    return true;
	  } else {
	    return a.code === b.code && a.size === b.size && bytes$6.equals(a.bytes, b.bytes);
	  }
	};
	class Digest$1 {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}

	digest$5.Digest = Digest$1;
	digest$5.create = create$3;
	digest$5.decode = decode$7;
	digest$5.equals = equals$7;

	Object.defineProperty(hasher$4, '__esModule', { value: true });

	var digest$4 = digest$5;

	const from$5 = ({name, code, encode}) => new Hasher$1(name, code, encode);
	class Hasher$1 {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  async digest(input) {
	    if (input instanceof Uint8Array) {
	      const digest$1 = await this.encode(input);
	      return digest$4.create(this.code, digest$1);
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}

	hasher$4.Hasher = Hasher$1;
	hasher$4.from = from$5;

	Object.defineProperty(sha2$2, '__esModule', { value: true });

	var crypto$6 = crypto__default$1["default"];
	var hasher$3 = hasher$4;
	var bytes$5 = bytes$9;

	function _interopDefaultLegacy$1 (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var crypto__default = /*#__PURE__*/_interopDefaultLegacy$1(crypto$6);

	const sha256$7 = hasher$3.from({
	  name: 'sha2-256',
	  code: 18,
	  encode: input => bytes$5.coerce(crypto__default["default"].createHash('sha256').update(input).digest())
	});
	const sha512$2 = hasher$3.from({
	  name: 'sha2-512',
	  code: 19,
	  encode: input => bytes$5.coerce(crypto__default["default"].createHash('sha512').update(input).digest())
	});

	sha2$2.sha256 = sha256$7;
	sha2$2.sha512 = sha512$2;

	var identity$9 = {};

	Object.defineProperty(identity$9, '__esModule', { value: true });

	var hasher$2 = hasher$4;
	var bytes$4 = bytes$9;

	const identity$8 = hasher$2.from({
	  name: 'identity',
	  code: 0,
	  encode: input => bytes$4.coerce(input)
	});

	identity$9.identity = identity$8;

	var raw$1 = {};

	Object.defineProperty(raw$1, '__esModule', { value: true });

	var bytes$3 = bytes$9;

	const name$2 = 'raw';
	const code$1 = 85;
	const encode$5 = node => bytes$3.coerce(node);
	const decode$6 = data => bytes$3.coerce(data);

	raw$1.code = code$1;
	raw$1.decode = decode$6;
	raw$1.encode = encode$5;
	raw$1.name = name$2;

	var json$1 = {};

	Object.defineProperty(json$1, '__esModule', { value: true });

	const textEncoder = new TextEncoder();
	const textDecoder$1 = new TextDecoder();
	const name$1 = 'json';
	const code = 512;
	const encode$4 = node => textEncoder.encode(JSON.stringify(node));
	const decode$5 = data => JSON.parse(textDecoder$1.decode(data));

	json$1.code = code;
	json$1.decode = decode$5;
	json$1.encode = encode$4;
	json$1.name = name$1;

	var src$8 = {};

	var cid$3 = {};

	Object.defineProperty(cid$3, '__esModule', { value: true });

	var varint$7 = varint$a;
	var digest$3 = digest$5;
	var base58$2 = base58$3;
	var base32$3 = base32$5;
	var bytes$2 = bytes$9;

	class CID$3 {
	  constructor(version, code, multihash, bytes) {
	    this.code = code;
	    this.version = version;
	    this.multihash = multihash;
	    this.bytes = bytes;
	    this.byteOffset = bytes.byteOffset;
	    this.byteLength = bytes.byteLength;
	    this.asCID = this;
	    this._baseCache = new Map();
	    Object.defineProperties(this, {
	      byteOffset: hidden,
	      byteLength: hidden,
	      code: readonly,
	      version: readonly,
	      multihash: readonly,
	      bytes: readonly,
	      _baseCache: hidden,
	      asCID: hidden
	    });
	  }
	  toV0() {
	    switch (this.version) {
	    case 0: {
	        return this;
	      }
	    default: {
	        const {code, multihash} = this;
	        if (code !== DAG_PB_CODE) {
	          throw new Error('Cannot convert a non dag-pb CID to CIDv0');
	        }
	        if (multihash.code !== SHA_256_CODE) {
	          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
	        }
	        return CID$3.createV0(multihash);
	      }
	    }
	  }
	  toV1() {
	    switch (this.version) {
	    case 0: {
	        const {code, digest: digest$1} = this.multihash;
	        const multihash = digest$3.create(code, digest$1);
	        return CID$3.createV1(this.code, multihash);
	      }
	    case 1: {
	        return this;
	      }
	    default: {
	        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);
	      }
	    }
	  }
	  equals(other) {
	    return other && this.code === other.code && this.version === other.version && digest$3.equals(this.multihash, other.multihash);
	  }
	  toString(base) {
	    const {bytes, version, _baseCache} = this;
	    switch (version) {
	    case 0:
	      return toStringV0(bytes, _baseCache, base || base58$2.base58btc.encoder);
	    default:
	      return toStringV1(bytes, _baseCache, base || base32$3.base32.encoder);
	    }
	  }
	  toJSON() {
	    return {
	      code: this.code,
	      version: this.version,
	      hash: this.multihash.bytes
	    };
	  }
	  get [Symbol.toStringTag]() {
	    return 'CID';
	  }
	  [Symbol.for('nodejs.util.inspect.custom')]() {
	    return 'CID(' + this.toString() + ')';
	  }
	  static isCID(value) {
	    deprecate(/^0\.0/, IS_CID_DEPRECATION);
	    return !!(value && (value[cidSymbol] || value.asCID === value));
	  }
	  get toBaseEncodedString() {
	    throw new Error('Deprecated, use .toString()');
	  }
	  get codec() {
	    throw new Error('"codec" property is deprecated, use integer "code" property instead');
	  }
	  get buffer() {
	    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
	  }
	  get multibaseName() {
	    throw new Error('"multibaseName" property is deprecated');
	  }
	  get prefix() {
	    throw new Error('"prefix" property is deprecated');
	  }
	  static asCID(value) {
	    if (value instanceof CID$3) {
	      return value;
	    } else if (value != null && value.asCID === value) {
	      const {version, code, multihash, bytes} = value;
	      return new CID$3(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));
	    } else if (value != null && value[cidSymbol] === true) {
	      const {version, multihash, code} = value;
	      const digest$1 = digest$3.decode(multihash);
	      return CID$3.create(version, code, digest$1);
	    } else {
	      return null;
	    }
	  }
	  static create(version, code, digest) {
	    if (typeof code !== 'number') {
	      throw new Error('String codecs are no longer supported');
	    }
	    switch (version) {
	    case 0: {
	        if (code !== DAG_PB_CODE) {
	          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);
	        } else {
	          return new CID$3(version, code, digest, digest.bytes);
	        }
	      }
	    case 1: {
	        const bytes = encodeCID(version, code, digest.bytes);
	        return new CID$3(version, code, digest, bytes);
	      }
	    default: {
	        throw new Error('Invalid version');
	      }
	    }
	  }
	  static createV0(digest) {
	    return CID$3.create(0, DAG_PB_CODE, digest);
	  }
	  static createV1(code, digest) {
	    return CID$3.create(1, code, digest);
	  }
	  static decode(bytes) {
	    const [cid, remainder] = CID$3.decodeFirst(bytes);
	    if (remainder.length) {
	      throw new Error('Incorrect length');
	    }
	    return cid;
	  }
	  static decodeFirst(bytes$1) {
	    const specs = CID$3.inspectBytes(bytes$1);
	    const prefixSize = specs.size - specs.multihashSize;
	    const multihashBytes = bytes$2.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
	    if (multihashBytes.byteLength !== specs.multihashSize) {
	      throw new Error('Incorrect length');
	    }
	    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
	    const digest$1 = new digest$3.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
	    const cid = specs.version === 0 ? CID$3.createV0(digest$1) : CID$3.createV1(specs.codec, digest$1);
	    return [
	      cid,
	      bytes$1.subarray(specs.size)
	    ];
	  }
	  static inspectBytes(initialBytes) {
	    let offset = 0;
	    const next = () => {
	      const [i, length] = varint$7.decode(initialBytes.subarray(offset));
	      offset += length;
	      return i;
	    };
	    let version = next();
	    let codec = DAG_PB_CODE;
	    if (version === 18) {
	      version = 0;
	      offset = 0;
	    } else if (version === 1) {
	      codec = next();
	    }
	    if (version !== 0 && version !== 1) {
	      throw new RangeError(`Invalid CID version ${ version }`);
	    }
	    const prefixSize = offset;
	    const multihashCode = next();
	    const digestSize = next();
	    const size = offset + digestSize;
	    const multihashSize = size - prefixSize;
	    return {
	      version,
	      codec,
	      multihashCode,
	      digestSize,
	      multihashSize,
	      size
	    };
	  }
	  static parse(source, base) {
	    const [prefix, bytes] = parseCIDtoBytes(source, base);
	    const cid = CID$3.decode(bytes);
	    cid._baseCache.set(prefix, source);
	    return cid;
	  }
	}
	const parseCIDtoBytes = (source, base) => {
	  switch (source[0]) {
	  case 'Q': {
	      const decoder = base || base58$2.base58btc;
	      return [
	        base58$2.base58btc.prefix,
	        decoder.decode(`${ base58$2.base58btc.prefix }${ source }`)
	      ];
	    }
	  case base58$2.base58btc.prefix: {
	      const decoder = base || base58$2.base58btc;
	      return [
	        base58$2.base58btc.prefix,
	        decoder.decode(source)
	      ];
	    }
	  case base32$3.base32.prefix: {
	      const decoder = base || base32$3.base32;
	      return [
	        base32$3.base32.prefix,
	        decoder.decode(source)
	      ];
	    }
	  default: {
	      if (base == null) {
	        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
	      }
	      return [
	        source[0],
	        base.decode(source)
	      ];
	    }
	  }
	};
	const toStringV0 = (bytes, cache, base) => {
	  const {prefix} = base;
	  if (prefix !== base58$2.base58btc.prefix) {
	    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);
	  }
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes).slice(1);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const toStringV1 = (bytes, cache, base) => {
	  const {prefix} = base;
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const DAG_PB_CODE = 112;
	const SHA_256_CODE = 18;
	const encodeCID = (version, code, multihash) => {
	  const codeOffset = varint$7.encodingLength(version);
	  const hashOffset = codeOffset + varint$7.encodingLength(code);
	  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
	  varint$7.encodeTo(version, bytes, 0);
	  varint$7.encodeTo(code, bytes, codeOffset);
	  bytes.set(multihash, hashOffset);
	  return bytes;
	};
	const cidSymbol = Symbol.for('@ipld/js-cid/CID');
	const readonly = {
	  writable: false,
	  configurable: false,
	  enumerable: true
	};
	const hidden = {
	  writable: false,
	  enumerable: false,
	  configurable: false
	};
	const version$d = '0.0.0-dev';
	const deprecate = (range, message) => {
	  if (range.test(version$d)) {
	    console.warn(message);
	  } else {
	    throw new Error(message);
	  }
	};
	const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

	cid$3.CID = CID$3;

	Object.defineProperty(src$8, '__esModule', { value: true });

	var cid$2 = cid$3;
	var varint$6 = varint$a;
	var bytes$1 = bytes$9;
	var hasher$1 = hasher$4;
	var digest$2 = digest$5;



	src$8.CID = cid$2.CID;
	src$8.varint = varint$6;
	src$8.bytes = bytes$1;
	src$8.hasher = hasher$1;
	src$8.digest = digest$2;

	Object.defineProperty(basics$4, '__esModule', { value: true });

	var identity$7 = identity$b;
	var base2$2 = base2$4;
	var base8$2 = base8$4;
	var base10$2 = base10$4;
	var base16$2 = base16$4;
	var base32$2 = base32$5;
	var base36$2 = base36$4;
	var base58$1 = base58$3;
	var base64$2 = base64$4;
	var sha2$1 = sha2$2;
	var identity$1$1 = identity$9;
	var raw = raw$1;
	var json = json$1;

	var cid$1 = cid$3;
	var hasher = hasher$4;
	var digest$1 = digest$5;
	var varint$5 = varint$a;
	var bytes = bytes$9;

	const bases$e = {
	  ...identity$7,
	  ...base2$2,
	  ...base8$2,
	  ...base10$2,
	  ...base16$2,
	  ...base32$2,
	  ...base36$2,
	  ...base58$1,
	  ...base64$2
	};
	const hashes = {
	  ...sha2$1,
	  ...identity$1$1
	};
	const codecs$1 = {
	  raw,
	  json
	};

	basics$4.CID = cid$1.CID;
	basics$4.hasher = hasher;
	basics$4.digest = digest$1;
	basics$4.varint = varint$5;
	basics$4.bytes = bytes;
	basics$4.bases = bases$e;
	basics$4.codecs = codecs$1;
	basics$4.hashes = hashes;

	var basics$3 = basics$4;

	function createCodec$5(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string$5 = createCodec$5('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii$5 = createCodec$5('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES$5 = {
	  utf8: string$5,
	  'utf-8': string$5,
	  hex: basics$3.bases.base16,
	  latin1: ascii$5,
	  ascii: ascii$5,
	  binary: ascii$5,
	  ...basics$3.bases
	};

	var bases$d = BASES$5;

	Object.defineProperty(toString$a, '__esModule', { value: true });

	var bases$c = bases$d;

	function toString$8(array, encoding = 'utf8') {
	  const base = bases$c[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	toString$a.toString = toString$8;

	var fromString$b = {};

	Object.defineProperty(fromString$b, '__esModule', { value: true });

	var bases$b = bases$d;

	function fromString$a(string, encoding = 'utf8') {
	  const base = bases$b[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	fromString$b.fromString = fromString$a;

	var concat$f = {};

	Object.defineProperty(concat$f, '__esModule', { value: true });

	function concat$e(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	concat$f.concat = concat$e;

	/**
	 * Multihash implementation in JavaScript.
	 */

	const multibase$1 = src$b.exports;
	const varint$4 = varint$b;
	const { names } = constants$6;
	const { toString: uint8ArrayToString$2 } = toString$a;
	const { fromString: uint8ArrayFromString$3 } = fromString$b;
	const { concat: uint8ArrayConcat$3 } = concat$f;

	const codes$1 = /** @type {import('./types').CodeNameMap} */({});

	// eslint-disable-next-line guard-for-in
	for (const key in names) {
	  const name = /** @type {HashName} */(key);
	  codes$1[names[name]] = name;
	}
	Object.freeze(codes$1);

	/**
	 * Convert the given multihash to a hex encoded string.
	 *
	 * @param {Uint8Array} hash
	 * @returns {string}
	 */
	function toHexString (hash) {
	  if (!(hash instanceof Uint8Array)) {
	    throw new Error('must be passed a Uint8Array')
	  }

	  return uint8ArrayToString$2(hash, 'base16')
	}

	/**
	 * Convert the given hex encoded string to a multihash.
	 *
	 * @param {string} hash
	 * @returns {Uint8Array}
	 */
	function fromHexString (hash) {
	  return uint8ArrayFromString$3(hash, 'base16')
	}

	/**
	 * Convert the given multihash to a base58 encoded string.
	 *
	 * @param {Uint8Array} hash
	 * @returns {string}
	 */
	function toB58String (hash) {
	  if (!(hash instanceof Uint8Array)) {
	    throw new Error('must be passed a Uint8Array')
	  }

	  return uint8ArrayToString$2(multibase$1.encode('base58btc', hash)).slice(1)
	}

	/**
	 * Convert the given base58 encoded string to a multihash.
	 *
	 * @param {string|Uint8Array} hash
	 * @returns {Uint8Array}
	 */
	function fromB58String (hash) {
	  const encoded = hash instanceof Uint8Array
	    ? uint8ArrayToString$2(hash)
	    : hash;

	  return multibase$1.decode('z' + encoded)
	}

	/**
	 * Decode a hash from the given multihash.
	 *
	 * @param {Uint8Array} bytes
	 * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result
	 */
	function decode$4 (bytes) {
	  if (!(bytes instanceof Uint8Array)) {
	    throw new Error('multihash must be a Uint8Array')
	  }

	  if (bytes.length < 2) {
	    throw new Error('multihash too short. must be > 2 bytes.')
	  }

	  const code = /** @type {HashCode} */(varint$4.decode(bytes));
	  if (!isValidCode(code)) {
	    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)
	  }
	  bytes = bytes.slice(varint$4.decode.bytes);

	  const len = varint$4.decode(bytes);
	  if (len < 0) {
	    throw new Error(`multihash invalid length: ${len}`)
	  }
	  bytes = bytes.slice(varint$4.decode.bytes);

	  if (bytes.length !== len) {
	    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString$2(bytes, 'base16')}`)
	  }

	  return {
	    code,
	    name: codes$1[code],
	    length: len,
	    digest: bytes
	  }
	}

	/**
	 * Encode a hash digest along with the specified function code.
	 *
	 * > **Note:** the length is derived from the length of the digest itself.
	 *
	 * @param {Uint8Array} digest
	 * @param {HashName | HashCode} code
	 * @param {number} [length]
	 * @returns {Uint8Array}
	 */
	function encode$3 (digest, code, length) {
	  if (!digest || code === undefined) {
	    throw new Error('multihash encode requires at least two args: digest, code')
	  }

	  // ensure it's a hashfunction code.
	  const hashfn = coerceCode(code);

	  if (!(digest instanceof Uint8Array)) {
	    throw new Error('digest should be a Uint8Array')
	  }

	  if (length == null) {
	    length = digest.length;
	  }

	  if (length && digest.length !== length) {
	    throw new Error('digest length should be equal to specified length.')
	  }

	  const hash = varint$4.encode(hashfn);
	  const len = varint$4.encode(length);
	  return uint8ArrayConcat$3([hash, len, digest], hash.length + len.length + digest.length)
	}

	/**
	 * Converts a hash function name into the matching code.
	 * If passed a number it will return the number if it's a valid code.
	 *
	 * @param {HashName | number} name
	 * @returns {number}
	 */
	function coerceCode (name) {
	  let code = name;

	  if (typeof name === 'string') {
	    if (names[name] === undefined) {
	      throw new Error(`Unrecognized hash function named: ${name}`)
	    }
	    code = names[name];
	  }

	  if (typeof code !== 'number') {
	    throw new Error(`Hash function code should be a number. Got: ${code}`)
	  }

	  // @ts-ignore
	  if (codes$1[code] === undefined && !isAppCode(code)) {
	    throw new Error(`Unrecognized function code: ${code}`)
	  }

	  return code
	}

	/**
	 * Checks if a code is part of the app range
	 *
	 * @param {number} code
	 * @returns {boolean}
	 */
	function isAppCode (code) {
	  return code > 0 && code < 0x10
	}

	/**
	 * Checks whether a multihash code is valid.
	 *
	 * @param {HashCode} code
	 * @returns {boolean}
	 */
	function isValidCode (code) {
	  if (isAppCode(code)) {
	    return true
	  }

	  if (codes$1[code]) {
	    return true
	  }

	  return false
	}

	/**
	 * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
	 *
	 * @param {Uint8Array} multihash
	 * @returns {void}
	 * @throws {Error}
	 */
	function validate (multihash) {
	  decode$4(multihash); // throws if bad.
	}

	/**
	 * Returns a prefix from a valid multihash. Throws an error if it is not valid.
	 *
	 * @param {Uint8Array} multihash
	 * @returns {Uint8Array}
	 * @throws {Error}
	 */
	function prefix (multihash) {
	  validate(multihash);

	  return multihash.subarray(0, 2)
	}

	var src$7 = {
	  names,
	  codes: codes$1,
	  toHexString,
	  fromHexString,
	  toB58String,
	  fromB58String,
	  decode: decode$4,
	  encode: encode$3,
	  coerceCode,
	  isAppCode,
	  validate,
	  prefix,
	  isValidCode
	};

	var encode_1$1 = encode$2;

	var MSB$3 = 0x80
	  , REST$3 = 0x7F
	  , MSBALL$1 = ~REST$3
	  , INT$1 = Math.pow(2, 31);

	function encode$2(num, out, offset) {
	  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
	    encode$2.bytes = 0;
	    throw new RangeError('Could not encode varint')
	  }
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;

	  while(num >= INT$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num /= 128;
	  }
	  while(num & MSBALL$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  
	  encode$2.bytes = offset - oldOffset + 1;
	  
	  return out
	}

	var decode$3 = read$7;

	var MSB$2 = 0x80
	  , REST$2 = 0x7F;

	function read$7(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length;

	  do {
	    if (counter >= l || shift > 49) {
	      read$7.bytes = 0;
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++];
	    res += shift < 28
	      ? (b & REST$2) << shift
	      : (b & REST$2) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$2)

	  read$7.bytes = counter - offset;

	  return res
	}

	var N1$1 = Math.pow(2,  7);
	var N2$1 = Math.pow(2, 14);
	var N3$1 = Math.pow(2, 21);
	var N4$1 = Math.pow(2, 28);
	var N5$1 = Math.pow(2, 35);
	var N6$1 = Math.pow(2, 42);
	var N7$1 = Math.pow(2, 49);
	var N8$1 = Math.pow(2, 56);
	var N9$1 = Math.pow(2, 63);

	var length$1 = function (value) {
	  return (
	    value < N1$1 ? 1
	  : value < N2$1 ? 2
	  : value < N3$1 ? 3
	  : value < N4$1 ? 4
	  : value < N5$1 ? 5
	  : value < N6$1 ? 6
	  : value < N7$1 ? 7
	  : value < N8$1 ? 8
	  : value < N9$1 ? 9
	  :              10
	  )
	};

	var varint$3 = {
	    encode: encode_1$1
	  , decode: decode$3
	  , encodingLength: length$1
	};

	var concat$d = {};

	Object.defineProperty(concat$d, '__esModule', { value: true });

	function concat$c(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	concat$d.concat = concat$c;

	var toString$7 = {};

	var basics$2 = basics$4;

	function createCodec$4(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string$4 = createCodec$4('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii$4 = createCodec$4('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES$4 = {
	  utf8: string$4,
	  'utf-8': string$4,
	  hex: basics$2.bases.base16,
	  latin1: ascii$4,
	  ascii: ascii$4,
	  binary: ascii$4,
	  ...basics$2.bases
	};

	var bases$a = BASES$4;

	Object.defineProperty(toString$7, '__esModule', { value: true });

	var bases$9 = bases$a;

	function toString$6(array, encoding = 'utf8') {
	  const base = bases$9[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	toString$7.toString = toString$6;

	var fromString$9 = {};

	Object.defineProperty(fromString$9, '__esModule', { value: true });

	var bases$8 = bases$a;

	function fromString$8(string, encoding = 'utf8') {
	  const base = bases$8[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	fromString$9.fromString = fromString$8;

	const varint$2 = varint$3;
	const { toString: uint8ArrayToString$1 } = toString$7;
	const { fromString: uint8ArrayFromString$2 } = fromString$9;

	var util$g = {
	  numberToUint8Array,
	  uint8ArrayToNumber,
	  varintUint8ArrayEncode,
	  varintEncode: varintEncode$1
	};

	/**
	 * @param {Uint8Array} buf
	 */
	function uint8ArrayToNumber (buf) {
	  return parseInt(uint8ArrayToString$1(buf, 'base16'), 16)
	}

	/**
	 * @param {number} num
	 */
	function numberToUint8Array (num) {
	  let hexString = num.toString(16);
	  if (hexString.length % 2 === 1) {
	    hexString = '0' + hexString;
	  }
	  return uint8ArrayFromString$2(hexString, 'base16')
	}

	/**
	 * @param {Uint8Array} input
	 */
	function varintUint8ArrayEncode (input) {
	  return Uint8Array.from(varint$2.encode(uint8ArrayToNumber(input)))
	}

	/**
	 * @param {number} num
	 */
	function varintEncode$1 (num) {
	  return Uint8Array.from(varint$2.encode(num))
	}

	/**
	 * @type {import('./generated-types').NameCodeMap}
	 */
	const baseTable$1 = Object.freeze({
	  'identity': 0x00,
	  'cidv1': 0x01,
	  'cidv2': 0x02,
	  'cidv3': 0x03,
	  'ip4': 0x04,
	  'tcp': 0x06,
	  'sha1': 0x11,
	  'sha2-256': 0x12,
	  'sha2-512': 0x13,
	  'sha3-512': 0x14,
	  'sha3-384': 0x15,
	  'sha3-256': 0x16,
	  'sha3-224': 0x17,
	  'shake-128': 0x18,
	  'shake-256': 0x19,
	  'keccak-224': 0x1a,
	  'keccak-256': 0x1b,
	  'keccak-384': 0x1c,
	  'keccak-512': 0x1d,
	  'blake3': 0x1e,
	  'dccp': 0x21,
	  'murmur3-128': 0x22,
	  'murmur3-32': 0x23,
	  'ip6': 0x29,
	  'ip6zone': 0x2a,
	  'path': 0x2f,
	  'multicodec': 0x30,
	  'multihash': 0x31,
	  'multiaddr': 0x32,
	  'multibase': 0x33,
	  'dns': 0x35,
	  'dns4': 0x36,
	  'dns6': 0x37,
	  'dnsaddr': 0x38,
	  'protobuf': 0x50,
	  'cbor': 0x51,
	  'raw': 0x55,
	  'dbl-sha2-256': 0x56,
	  'rlp': 0x60,
	  'bencode': 0x63,
	  'dag-pb': 0x70,
	  'dag-cbor': 0x71,
	  'libp2p-key': 0x72,
	  'git-raw': 0x78,
	  'torrent-info': 0x7b,
	  'torrent-file': 0x7c,
	  'leofcoin-block': 0x81,
	  'leofcoin-tx': 0x82,
	  'leofcoin-pr': 0x83,
	  'sctp': 0x84,
	  'dag-jose': 0x85,
	  'dag-cose': 0x86,
	  'eth-block': 0x90,
	  'eth-block-list': 0x91,
	  'eth-tx-trie': 0x92,
	  'eth-tx': 0x93,
	  'eth-tx-receipt-trie': 0x94,
	  'eth-tx-receipt': 0x95,
	  'eth-state-trie': 0x96,
	  'eth-account-snapshot': 0x97,
	  'eth-storage-trie': 0x98,
	  'eth-receipt-log-trie': 0x99,
	  'eth-reciept-log': 0x9a,
	  'bitcoin-block': 0xb0,
	  'bitcoin-tx': 0xb1,
	  'bitcoin-witness-commitment': 0xb2,
	  'zcash-block': 0xc0,
	  'zcash-tx': 0xc1,
	  'caip-50': 0xca,
	  'streamid': 0xce,
	  'stellar-block': 0xd0,
	  'stellar-tx': 0xd1,
	  'md4': 0xd4,
	  'md5': 0xd5,
	  'bmt': 0xd6,
	  'decred-block': 0xe0,
	  'decred-tx': 0xe1,
	  'ipld-ns': 0xe2,
	  'ipfs-ns': 0xe3,
	  'swarm-ns': 0xe4,
	  'ipns-ns': 0xe5,
	  'zeronet': 0xe6,
	  'secp256k1-pub': 0xe7,
	  'bls12_381-g1-pub': 0xea,
	  'bls12_381-g2-pub': 0xeb,
	  'x25519-pub': 0xec,
	  'ed25519-pub': 0xed,
	  'bls12_381-g1g2-pub': 0xee,
	  'dash-block': 0xf0,
	  'dash-tx': 0xf1,
	  'swarm-manifest': 0xfa,
	  'swarm-feed': 0xfb,
	  'udp': 0x0111,
	  'p2p-webrtc-star': 0x0113,
	  'p2p-webrtc-direct': 0x0114,
	  'p2p-stardust': 0x0115,
	  'p2p-circuit': 0x0122,
	  'dag-json': 0x0129,
	  'udt': 0x012d,
	  'utp': 0x012e,
	  'unix': 0x0190,
	  'thread': 0x0196,
	  'p2p': 0x01a5,
	  'ipfs': 0x01a5,
	  'https': 0x01bb,
	  'onion': 0x01bc,
	  'onion3': 0x01bd,
	  'garlic64': 0x01be,
	  'garlic32': 0x01bf,
	  'tls': 0x01c0,
	  'noise': 0x01c6,
	  'quic': 0x01cc,
	  'ws': 0x01dd,
	  'wss': 0x01de,
	  'p2p-websocket-star': 0x01df,
	  'http': 0x01e0,
	  'swhid-1-snp': 0x01f0,
	  'json': 0x0200,
	  'messagepack': 0x0201,
	  'libp2p-peer-record': 0x0301,
	  'libp2p-relay-rsvp': 0x0302,
	  'car-index-sorted': 0x0400,
	  'sha2-256-trunc254-padded': 0x1012,
	  'ripemd-128': 0x1052,
	  'ripemd-160': 0x1053,
	  'ripemd-256': 0x1054,
	  'ripemd-320': 0x1055,
	  'x11': 0x1100,
	  'p256-pub': 0x1200,
	  'p384-pub': 0x1201,
	  'p521-pub': 0x1202,
	  'ed448-pub': 0x1203,
	  'x448-pub': 0x1204,
	  'ed25519-priv': 0x1300,
	  'secp256k1-priv': 0x1301,
	  'x25519-priv': 0x1302,
	  'kangarootwelve': 0x1d01,
	  'sm3-256': 0x534d,
	  'blake2b-8': 0xb201,
	  'blake2b-16': 0xb202,
	  'blake2b-24': 0xb203,
	  'blake2b-32': 0xb204,
	  'blake2b-40': 0xb205,
	  'blake2b-48': 0xb206,
	  'blake2b-56': 0xb207,
	  'blake2b-64': 0xb208,
	  'blake2b-72': 0xb209,
	  'blake2b-80': 0xb20a,
	  'blake2b-88': 0xb20b,
	  'blake2b-96': 0xb20c,
	  'blake2b-104': 0xb20d,
	  'blake2b-112': 0xb20e,
	  'blake2b-120': 0xb20f,
	  'blake2b-128': 0xb210,
	  'blake2b-136': 0xb211,
	  'blake2b-144': 0xb212,
	  'blake2b-152': 0xb213,
	  'blake2b-160': 0xb214,
	  'blake2b-168': 0xb215,
	  'blake2b-176': 0xb216,
	  'blake2b-184': 0xb217,
	  'blake2b-192': 0xb218,
	  'blake2b-200': 0xb219,
	  'blake2b-208': 0xb21a,
	  'blake2b-216': 0xb21b,
	  'blake2b-224': 0xb21c,
	  'blake2b-232': 0xb21d,
	  'blake2b-240': 0xb21e,
	  'blake2b-248': 0xb21f,
	  'blake2b-256': 0xb220,
	  'blake2b-264': 0xb221,
	  'blake2b-272': 0xb222,
	  'blake2b-280': 0xb223,
	  'blake2b-288': 0xb224,
	  'blake2b-296': 0xb225,
	  'blake2b-304': 0xb226,
	  'blake2b-312': 0xb227,
	  'blake2b-320': 0xb228,
	  'blake2b-328': 0xb229,
	  'blake2b-336': 0xb22a,
	  'blake2b-344': 0xb22b,
	  'blake2b-352': 0xb22c,
	  'blake2b-360': 0xb22d,
	  'blake2b-368': 0xb22e,
	  'blake2b-376': 0xb22f,
	  'blake2b-384': 0xb230,
	  'blake2b-392': 0xb231,
	  'blake2b-400': 0xb232,
	  'blake2b-408': 0xb233,
	  'blake2b-416': 0xb234,
	  'blake2b-424': 0xb235,
	  'blake2b-432': 0xb236,
	  'blake2b-440': 0xb237,
	  'blake2b-448': 0xb238,
	  'blake2b-456': 0xb239,
	  'blake2b-464': 0xb23a,
	  'blake2b-472': 0xb23b,
	  'blake2b-480': 0xb23c,
	  'blake2b-488': 0xb23d,
	  'blake2b-496': 0xb23e,
	  'blake2b-504': 0xb23f,
	  'blake2b-512': 0xb240,
	  'blake2s-8': 0xb241,
	  'blake2s-16': 0xb242,
	  'blake2s-24': 0xb243,
	  'blake2s-32': 0xb244,
	  'blake2s-40': 0xb245,
	  'blake2s-48': 0xb246,
	  'blake2s-56': 0xb247,
	  'blake2s-64': 0xb248,
	  'blake2s-72': 0xb249,
	  'blake2s-80': 0xb24a,
	  'blake2s-88': 0xb24b,
	  'blake2s-96': 0xb24c,
	  'blake2s-104': 0xb24d,
	  'blake2s-112': 0xb24e,
	  'blake2s-120': 0xb24f,
	  'blake2s-128': 0xb250,
	  'blake2s-136': 0xb251,
	  'blake2s-144': 0xb252,
	  'blake2s-152': 0xb253,
	  'blake2s-160': 0xb254,
	  'blake2s-168': 0xb255,
	  'blake2s-176': 0xb256,
	  'blake2s-184': 0xb257,
	  'blake2s-192': 0xb258,
	  'blake2s-200': 0xb259,
	  'blake2s-208': 0xb25a,
	  'blake2s-216': 0xb25b,
	  'blake2s-224': 0xb25c,
	  'blake2s-232': 0xb25d,
	  'blake2s-240': 0xb25e,
	  'blake2s-248': 0xb25f,
	  'blake2s-256': 0xb260,
	  'skein256-8': 0xb301,
	  'skein256-16': 0xb302,
	  'skein256-24': 0xb303,
	  'skein256-32': 0xb304,
	  'skein256-40': 0xb305,
	  'skein256-48': 0xb306,
	  'skein256-56': 0xb307,
	  'skein256-64': 0xb308,
	  'skein256-72': 0xb309,
	  'skein256-80': 0xb30a,
	  'skein256-88': 0xb30b,
	  'skein256-96': 0xb30c,
	  'skein256-104': 0xb30d,
	  'skein256-112': 0xb30e,
	  'skein256-120': 0xb30f,
	  'skein256-128': 0xb310,
	  'skein256-136': 0xb311,
	  'skein256-144': 0xb312,
	  'skein256-152': 0xb313,
	  'skein256-160': 0xb314,
	  'skein256-168': 0xb315,
	  'skein256-176': 0xb316,
	  'skein256-184': 0xb317,
	  'skein256-192': 0xb318,
	  'skein256-200': 0xb319,
	  'skein256-208': 0xb31a,
	  'skein256-216': 0xb31b,
	  'skein256-224': 0xb31c,
	  'skein256-232': 0xb31d,
	  'skein256-240': 0xb31e,
	  'skein256-248': 0xb31f,
	  'skein256-256': 0xb320,
	  'skein512-8': 0xb321,
	  'skein512-16': 0xb322,
	  'skein512-24': 0xb323,
	  'skein512-32': 0xb324,
	  'skein512-40': 0xb325,
	  'skein512-48': 0xb326,
	  'skein512-56': 0xb327,
	  'skein512-64': 0xb328,
	  'skein512-72': 0xb329,
	  'skein512-80': 0xb32a,
	  'skein512-88': 0xb32b,
	  'skein512-96': 0xb32c,
	  'skein512-104': 0xb32d,
	  'skein512-112': 0xb32e,
	  'skein512-120': 0xb32f,
	  'skein512-128': 0xb330,
	  'skein512-136': 0xb331,
	  'skein512-144': 0xb332,
	  'skein512-152': 0xb333,
	  'skein512-160': 0xb334,
	  'skein512-168': 0xb335,
	  'skein512-176': 0xb336,
	  'skein512-184': 0xb337,
	  'skein512-192': 0xb338,
	  'skein512-200': 0xb339,
	  'skein512-208': 0xb33a,
	  'skein512-216': 0xb33b,
	  'skein512-224': 0xb33c,
	  'skein512-232': 0xb33d,
	  'skein512-240': 0xb33e,
	  'skein512-248': 0xb33f,
	  'skein512-256': 0xb340,
	  'skein512-264': 0xb341,
	  'skein512-272': 0xb342,
	  'skein512-280': 0xb343,
	  'skein512-288': 0xb344,
	  'skein512-296': 0xb345,
	  'skein512-304': 0xb346,
	  'skein512-312': 0xb347,
	  'skein512-320': 0xb348,
	  'skein512-328': 0xb349,
	  'skein512-336': 0xb34a,
	  'skein512-344': 0xb34b,
	  'skein512-352': 0xb34c,
	  'skein512-360': 0xb34d,
	  'skein512-368': 0xb34e,
	  'skein512-376': 0xb34f,
	  'skein512-384': 0xb350,
	  'skein512-392': 0xb351,
	  'skein512-400': 0xb352,
	  'skein512-408': 0xb353,
	  'skein512-416': 0xb354,
	  'skein512-424': 0xb355,
	  'skein512-432': 0xb356,
	  'skein512-440': 0xb357,
	  'skein512-448': 0xb358,
	  'skein512-456': 0xb359,
	  'skein512-464': 0xb35a,
	  'skein512-472': 0xb35b,
	  'skein512-480': 0xb35c,
	  'skein512-488': 0xb35d,
	  'skein512-496': 0xb35e,
	  'skein512-504': 0xb35f,
	  'skein512-512': 0xb360,
	  'skein1024-8': 0xb361,
	  'skein1024-16': 0xb362,
	  'skein1024-24': 0xb363,
	  'skein1024-32': 0xb364,
	  'skein1024-40': 0xb365,
	  'skein1024-48': 0xb366,
	  'skein1024-56': 0xb367,
	  'skein1024-64': 0xb368,
	  'skein1024-72': 0xb369,
	  'skein1024-80': 0xb36a,
	  'skein1024-88': 0xb36b,
	  'skein1024-96': 0xb36c,
	  'skein1024-104': 0xb36d,
	  'skein1024-112': 0xb36e,
	  'skein1024-120': 0xb36f,
	  'skein1024-128': 0xb370,
	  'skein1024-136': 0xb371,
	  'skein1024-144': 0xb372,
	  'skein1024-152': 0xb373,
	  'skein1024-160': 0xb374,
	  'skein1024-168': 0xb375,
	  'skein1024-176': 0xb376,
	  'skein1024-184': 0xb377,
	  'skein1024-192': 0xb378,
	  'skein1024-200': 0xb379,
	  'skein1024-208': 0xb37a,
	  'skein1024-216': 0xb37b,
	  'skein1024-224': 0xb37c,
	  'skein1024-232': 0xb37d,
	  'skein1024-240': 0xb37e,
	  'skein1024-248': 0xb37f,
	  'skein1024-256': 0xb380,
	  'skein1024-264': 0xb381,
	  'skein1024-272': 0xb382,
	  'skein1024-280': 0xb383,
	  'skein1024-288': 0xb384,
	  'skein1024-296': 0xb385,
	  'skein1024-304': 0xb386,
	  'skein1024-312': 0xb387,
	  'skein1024-320': 0xb388,
	  'skein1024-328': 0xb389,
	  'skein1024-336': 0xb38a,
	  'skein1024-344': 0xb38b,
	  'skein1024-352': 0xb38c,
	  'skein1024-360': 0xb38d,
	  'skein1024-368': 0xb38e,
	  'skein1024-376': 0xb38f,
	  'skein1024-384': 0xb390,
	  'skein1024-392': 0xb391,
	  'skein1024-400': 0xb392,
	  'skein1024-408': 0xb393,
	  'skein1024-416': 0xb394,
	  'skein1024-424': 0xb395,
	  'skein1024-432': 0xb396,
	  'skein1024-440': 0xb397,
	  'skein1024-448': 0xb398,
	  'skein1024-456': 0xb399,
	  'skein1024-464': 0xb39a,
	  'skein1024-472': 0xb39b,
	  'skein1024-480': 0xb39c,
	  'skein1024-488': 0xb39d,
	  'skein1024-496': 0xb39e,
	  'skein1024-504': 0xb39f,
	  'skein1024-512': 0xb3a0,
	  'skein1024-520': 0xb3a1,
	  'skein1024-528': 0xb3a2,
	  'skein1024-536': 0xb3a3,
	  'skein1024-544': 0xb3a4,
	  'skein1024-552': 0xb3a5,
	  'skein1024-560': 0xb3a6,
	  'skein1024-568': 0xb3a7,
	  'skein1024-576': 0xb3a8,
	  'skein1024-584': 0xb3a9,
	  'skein1024-592': 0xb3aa,
	  'skein1024-600': 0xb3ab,
	  'skein1024-608': 0xb3ac,
	  'skein1024-616': 0xb3ad,
	  'skein1024-624': 0xb3ae,
	  'skein1024-632': 0xb3af,
	  'skein1024-640': 0xb3b0,
	  'skein1024-648': 0xb3b1,
	  'skein1024-656': 0xb3b2,
	  'skein1024-664': 0xb3b3,
	  'skein1024-672': 0xb3b4,
	  'skein1024-680': 0xb3b5,
	  'skein1024-688': 0xb3b6,
	  'skein1024-696': 0xb3b7,
	  'skein1024-704': 0xb3b8,
	  'skein1024-712': 0xb3b9,
	  'skein1024-720': 0xb3ba,
	  'skein1024-728': 0xb3bb,
	  'skein1024-736': 0xb3bc,
	  'skein1024-744': 0xb3bd,
	  'skein1024-752': 0xb3be,
	  'skein1024-760': 0xb3bf,
	  'skein1024-768': 0xb3c0,
	  'skein1024-776': 0xb3c1,
	  'skein1024-784': 0xb3c2,
	  'skein1024-792': 0xb3c3,
	  'skein1024-800': 0xb3c4,
	  'skein1024-808': 0xb3c5,
	  'skein1024-816': 0xb3c6,
	  'skein1024-824': 0xb3c7,
	  'skein1024-832': 0xb3c8,
	  'skein1024-840': 0xb3c9,
	  'skein1024-848': 0xb3ca,
	  'skein1024-856': 0xb3cb,
	  'skein1024-864': 0xb3cc,
	  'skein1024-872': 0xb3cd,
	  'skein1024-880': 0xb3ce,
	  'skein1024-888': 0xb3cf,
	  'skein1024-896': 0xb3d0,
	  'skein1024-904': 0xb3d1,
	  'skein1024-912': 0xb3d2,
	  'skein1024-920': 0xb3d3,
	  'skein1024-928': 0xb3d4,
	  'skein1024-936': 0xb3d5,
	  'skein1024-944': 0xb3d6,
	  'skein1024-952': 0xb3d7,
	  'skein1024-960': 0xb3d8,
	  'skein1024-968': 0xb3d9,
	  'skein1024-976': 0xb3da,
	  'skein1024-984': 0xb3db,
	  'skein1024-992': 0xb3dc,
	  'skein1024-1000': 0xb3dd,
	  'skein1024-1008': 0xb3de,
	  'skein1024-1016': 0xb3df,
	  'skein1024-1024': 0xb3e0,
	  'poseidon-bls12_381-a2-fc1': 0xb401,
	  'poseidon-bls12_381-a2-fc1-sc': 0xb402,
	  'zeroxcert-imprint-256': 0xce11,
	  'fil-commitment-unsealed': 0xf101,
	  'fil-commitment-sealed': 0xf102,
	  'holochain-adr-v0': 0x807124,
	  'holochain-adr-v1': 0x817124,
	  'holochain-key-v0': 0x947124,
	  'holochain-key-v1': 0x957124,
	  'holochain-sig-v0': 0xa27124,
	  'holochain-sig-v1': 0xa37124,
	  'skynet-ns': 0xb19910,
	  'arweave-ns': 0xb29910
	});

	var generatedTable = { baseTable: baseTable$1 };

	/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */
	/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */
	/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */
	/** @typedef {import('./generated-types').CodecName} CodecName */
	/** @typedef {import('./generated-types').CodecConstant} CodecConstant */

	const { baseTable } = generatedTable;
	const varintEncode = util$g.varintEncode;

	const nameToVarint$1 = /** @type {NameUint8ArrayMap} */ ({});
	const constantToCode$1 = /** @type {ConstantCodeMap} */({});
	const codeToName$1 = /** @type {CodeNameMap} */({});

	// eslint-disable-next-line guard-for-in
	for (const name in baseTable) {
	  const codecName = /** @type {CodecName} */(name);
	  const code = baseTable[codecName];
	  nameToVarint$1[codecName] = varintEncode(code);

	  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'));
	  constantToCode$1[constant] = code;

	  if (!codeToName$1[code]) {
	    codeToName$1[code] = codecName;
	  }
	}

	Object.freeze(nameToVarint$1);
	Object.freeze(constantToCode$1);
	Object.freeze(codeToName$1);
	const nameToCode$1 = Object.freeze(baseTable);
	var maps = {
	  nameToVarint: nameToVarint$1,
	  constantToCode: constantToCode$1,
	  nameToCode: nameToCode$1,
	  codeToName: codeToName$1
	};

	/**
	 * Implementation of the multicodec specification.
	 *
	 * @module multicodec
	 * @example
	 * const multicodec = require('multicodec')
	 *
	 * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
	 * // prefixedProtobuf 0x50...
	 *
	 */

	/** @typedef {import('./generated-types').CodecName} CodecName */
	/** @typedef {import('./generated-types').CodecCode} CodecCode */

	const varint$1 = varint$3;
	const { concat: uint8ArrayConcat$2 } = concat$d;
	const util$f = util$g;
	const { nameToVarint, constantToCode, nameToCode, codeToName } = maps;

	/**
	 * Prefix a buffer with a multicodec-packed.
	 *
	 * @param {CodecName|Uint8Array} multicodecStrOrCode
	 * @param {Uint8Array} data
	 * @returns {Uint8Array}
	 */
	function addPrefix (multicodecStrOrCode, data) {
	  let prefix;

	  if (multicodecStrOrCode instanceof Uint8Array) {
	    prefix = util$f.varintUint8ArrayEncode(multicodecStrOrCode);
	  } else {
	    if (nameToVarint[multicodecStrOrCode]) {
	      prefix = nameToVarint[multicodecStrOrCode];
	    } else {
	      throw new Error('multicodec not recognized')
	    }
	  }

	  return uint8ArrayConcat$2([prefix, data], prefix.length + data.length)
	}

	/**
	 * Decapsulate the multicodec-packed prefix from the data.
	 *
	 * @param {Uint8Array} data
	 * @returns {Uint8Array}
	 */
	function rmPrefix (data) {
	  varint$1.decode(/** @type {Buffer} */(data));
	  return data.slice(varint$1.decode.bytes)
	}

	/**
	 * Get the codec name of the prefixed data.
	 *
	 * @param {Uint8Array} prefixedData
	 * @returns {CodecName}
	 */
	function getNameFromData (prefixedData) {
	  const code = /** @type {CodecCode} */(varint$1.decode(/** @type {Buffer} */(prefixedData)));
	  const name = codeToName[code];
	  if (name === undefined) {
	    throw new Error(`Code "${code}" not found`)
	  }
	  return name
	}

	/**
	 * Get the codec name from a code.
	 *
	 * @param {CodecCode} codec
	 * @returns {CodecName}
	 */
	function getNameFromCode (codec) {
	  return codeToName[codec]
	}

	/**
	 * Get the code of the codec
	 *
	 * @param {CodecName} name
	 * @returns {CodecCode}
	 */
	function getCodeFromName (name) {
	  const code = nameToCode[name];
	  if (code === undefined) {
	    throw new Error(`Codec "${name}" not found`)
	  }
	  return code
	}

	/**
	 * Get the code of the prefixed data.
	 *
	 * @param {Uint8Array} prefixedData
	 * @returns {CodecCode}
	 */
	function getCodeFromData (prefixedData) {
	  return /** @type {CodecCode} */(varint$1.decode(/** @type {Buffer} */(prefixedData)))
	}

	/**
	 * Get the code as varint of a codec name.
	 *
	 * @param {CodecName} name
	 * @returns {Uint8Array}
	 */
	function getVarintFromName (name) {
	  const code = nameToVarint[name];
	  if (code === undefined) {
	    throw new Error(`Codec "${name}" not found`)
	  }
	  return code
	}

	/**
	 * Get the varint of a code.
	 *
	 * @param {CodecCode} code
	 * @returns {Uint8Array}
	 */
	function getVarintFromCode (code) {
	  return util$f.varintEncode(code)
	}

	/**
	 * Get the codec name of the prefixed data.
	 *
	 * @deprecated use getNameFromData instead.
	 * @param {Uint8Array} prefixedData
	 * @returns {CodecName}
	 */
	function getCodec (prefixedData) {
	  return getNameFromData(prefixedData)
	}

	/**
	 * Get the codec name from a code.
	 *
	 * @deprecated use getNameFromCode instead.
	 * @param {CodecCode} codec
	 * @returns {CodecName}
	 */
	function getName (codec) {
	  return getNameFromCode(codec)
	}

	/**
	 * Get the code of the codec
	 *
	 * @deprecated use getCodeFromName instead.
	 * @param {CodecName} name
	 * @returns {CodecCode}
	 */
	function getNumber (name) {
	  return getCodeFromName(name)
	}

	/**
	 * Get the code of the prefixed data.
	 *
	 * @deprecated use getCodeFromData instead.
	 * @param {Uint8Array} prefixedData
	 * @returns {CodecCode}
	 */
	function getCode$1 (prefixedData) {
	  return getCodeFromData(prefixedData)
	}

	/**
	 * Get the code as varint of a codec name.
	 *
	 * @deprecated use getVarintFromName instead.
	 * @param {CodecName} name
	 * @returns {Uint8Array}
	 */
	function getCodeVarint (name) {
	  return getVarintFromName(name)
	}

	/**
	 * Get the varint of a code.
	 *
	 * @deprecated use getVarintFromCode instead.
	 * @param {CodecCode} code
	 * @returns {Array.<number>}
	 */
	function getVarint (code) {
	  return Array.from(getVarintFromCode(code))
	}

	var src$6 = {
	  addPrefix,
	  rmPrefix,
	  getNameFromData,
	  getNameFromCode,
	  getCodeFromName,
	  getCodeFromData,
	  getVarintFromName,
	  getVarintFromCode,
	  // Deprecated
	  getCodec,
	  getName,
	  getNumber,
	  getCode: getCode$1,
	  getCodeVarint,
	  getVarint,
	  // Make the constants top-level constants
	  ...constantToCode,
	  // Export the maps
	  nameToVarint,
	  nameToCode,
	  codeToName
	};

	const mh$1 = src$7;

	const CIDUtil$1 = {
	  /**
	   * Test if the given input is a valid CID object.
	   * Returns an error message if it is not.
	   * Returns undefined if it is a valid CID.
	   *
	   * @param {any} other
	   * @returns {string|undefined}
	   */
	  checkCIDComponents: function (other) {
	    if (other == null) {
	      return 'null values are not valid CIDs'
	    }

	    if (!(other.version === 0 || other.version === 1)) {
	      return 'Invalid version, must be a number equal to 1 or 0'
	    }

	    if (typeof other.codec !== 'string') {
	      return 'codec must be string'
	    }

	    if (other.version === 0) {
	      if (other.codec !== 'dag-pb') {
	        return "codec must be 'dag-pb' for CIDv0"
	      }
	      if (other.multibaseName !== 'base58btc') {
	        return "multibaseName must be 'base58btc' for CIDv0"
	      }
	    }

	    if (!(other.multihash instanceof Uint8Array)) {
	      return 'multihash must be a Uint8Array'
	    }

	    try {
	      mh$1.validate(other.multihash);
	    } catch (err) {
	      let errorMsg = err.message;
	      if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message
	        errorMsg = 'Multihash validation failed';
	      }
	      return errorMsg
	    }
	  }
	};

	var cidUtil = CIDUtil$1;

	var concat$b = {};

	Object.defineProperty(concat$b, '__esModule', { value: true });

	function concat$a(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	concat$b.concat = concat$a;

	var toString$5 = {};

	var basics$1 = basics$4;

	function createCodec$3(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string$3 = createCodec$3('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii$3 = createCodec$3('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES$3 = {
	  utf8: string$3,
	  'utf-8': string$3,
	  hex: basics$1.bases.base16,
	  latin1: ascii$3,
	  ascii: ascii$3,
	  binary: ascii$3,
	  ...basics$1.bases
	};

	var bases$7 = BASES$3;

	Object.defineProperty(toString$5, '__esModule', { value: true });

	var bases$6 = bases$7;

	function toString$4(array, encoding = 'utf8') {
	  const base = bases$6[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	toString$5.toString = toString$4;

	var equals$6 = {};

	Object.defineProperty(equals$6, '__esModule', { value: true });

	function equals$5(a, b) {
	  if (a === b) {
	    return true;
	  }
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	equals$6.equals = equals$5;

	const mh = src$7;
	const multibase = src$b.exports;
	const multicodec$1 = src$6;
	const CIDUtil = cidUtil;
	const { concat: uint8ArrayConcat$1 } = concat$b;
	const { toString: uint8ArrayToString } = toString$5;
	const { equals: uint8ArrayEquals } = equals$6;

	const codecs = multicodec$1.nameToCode;
	const codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {
	  p[codecs[name]] = name;
	  return p
	}, /** @type {Record<CodecCode, CodecName>} */({}));

	const symbol = Symbol.for('@ipld/js-cid/CID');

	/**
	 * @typedef {Object} SerializedCID
	 * @property {string} codec
	 * @property {number} version
	 * @property {Uint8Array} hash
	 */
	/**
	 * @typedef {0|1} CIDVersion
	 * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode
	 * @typedef {import('multicodec').CodecName} CodecName
	 * @typedef {import('multicodec').CodecCode} CodecCode
	 */

	/**
	 * Class representing a CID `<mbase><version><mcodec><mhash>`
	 * , as defined in [ipld/cid](https://github.com/multiformats/cid).
	 *
	 * @class CID
	 */
	class CID$2 {
	  /**
	   * Create a new CID.
	   *
	   * The algorithm for argument input is roughly:
	   * ```
	   * if (cid)
	   *   -> create a copy
	   * else if (str)
	   *   if (1st char is on multibase table) -> CID String
	   *   else -> bs58 encoded multihash
	   * else if (Uint8Array)
	   *   if (1st byte is 0 or 1) -> CID
	   *   else -> multihash
	   * else if (Number)
	   *   -> construct CID by parts
	   * ```
	   *
	   * @param {CIDVersion | string | Uint8Array | CID} version
	   * @param {string|number} [codec]
	   * @param {Uint8Array} [multihash]
	   * @param {string} [multibaseName]
	   *
	   * @example
	   * new CID(<version>, <codec>, <multihash>, <multibaseName>)
	   * new CID(<cidStr>)
	   * new CID(<cid.bytes>)
	   * new CID(<multihash>)
	   * new CID(<bs58 encoded multihash>)
	   * new CID(<cid>)
	   */
	  constructor (version, codec, multihash, multibaseName) {
	    // We have below three blank field accessors only because
	    // otherwise TS will not pick them up if done after assignemnts

	    /**
	     * The version of the CID.
	     *
	     * @type {CIDVersion}
	     */
	    // eslint-disable-next-line no-unused-expressions
	    this.version;

	    /**
	     * The codec of the CID.
	     *
	     * @deprecated
	     * @type {CodecName}
	     */
	    // eslint-disable-next-line no-unused-expressions
	    this.codec;

	    /**
	     * The multihash of the CID.
	     *
	     * @type {Uint8Array}
	     */
	    // eslint-disable-next-line no-unused-expressions
	    this.multihash;

	    Object.defineProperty(this, symbol, { value: true });
	    if (CID$2.isCID(version)) {
	      // version is an exising CID instance
	      const cid = /** @type {CID} */(version);
	      this.version = cid.version;
	      this.codec = cid.codec;
	      this.multihash = cid.multihash;
	      // Default guard for when a CID < 0.7 is passed with no multibaseName
	      // @ts-ignore
	      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');
	      return
	    }

	    if (typeof version === 'string') {
	      // e.g. 'base32' or false
	      const baseName = multibase.isEncoded(version);
	      if (baseName) {
	        // version is a CID String encoded with multibase, so v1
	        const cid = multibase.decode(version);
	        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16));
	        this.codec = multicodec$1.getCodec(cid.slice(1));
	        this.multihash = multicodec$1.rmPrefix(cid.slice(1));
	        this.multibaseName = baseName;
	      } else {
	        // version is a base58btc string multihash, so v0
	        this.version = 0;
	        this.codec = 'dag-pb';
	        this.multihash = mh.fromB58String(version);
	        this.multibaseName = 'base58btc';
	      }
	      CID$2.validateCID(this);
	      Object.defineProperty(this, 'string', { value: version });
	      return
	    }

	    if (version instanceof Uint8Array) {
	      const v = parseInt(version[0].toString(), 16);
	      if (v === 1) {
	        // version is a CID Uint8Array
	        const cid = version;
	        this.version = v;
	        this.codec = multicodec$1.getCodec(cid.slice(1));
	        this.multihash = multicodec$1.rmPrefix(cid.slice(1));
	        this.multibaseName = 'base32';
	      } else {
	        // version is a raw multihash Uint8Array, so v0
	        this.version = 0;
	        this.codec = 'dag-pb';
	        this.multihash = version;
	        this.multibaseName = 'base58btc';
	      }
	      CID$2.validateCID(this);
	      return
	    }

	    // otherwise, assemble the CID from the parameters

	    this.version = version;

	    if (typeof codec === 'number') {
	      // @ts-ignore
	      codec = codecInts[codec];
	    }

	    this.codec = /** @type {CodecName} */ (codec);

	    this.multihash = /** @type {Uint8Array} */ (multihash);

	    /**
	     * Multibase name as string.
	     *
	     * @deprecated
	     * @type {string}
	     */
	    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');

	    CID$2.validateCID(this);
	  }

	  /**
	   * The CID as a `Uint8Array`
	   *
	   * @returns {Uint8Array}
	   *
	   */
	  get bytes () {
	    // @ts-ignore
	    let bytes = this._bytes;

	    if (!bytes) {
	      if (this.version === 0) {
	        bytes = this.multihash;
	      } else if (this.version === 1) {
	        const codec = multicodec$1.getCodeVarint(this.codec);
	        bytes = uint8ArrayConcat$1([
	          [1], codec, this.multihash
	        ], 1 + codec.byteLength + this.multihash.byteLength);
	      } else {
	        throw new Error('unsupported version')
	      }

	      // Cache this Uint8Array so it doesn't have to be recreated
	      Object.defineProperty(this, '_bytes', { value: bytes });
	    }

	    return bytes
	  }

	  /**
	   * The prefix of the CID.
	   *
	   * @returns {Uint8Array}
	   */
	  get prefix () {
	    const codec = multicodec$1.getCodeVarint(this.codec);
	    const multihash = mh.prefix(this.multihash);
	    const prefix = uint8ArrayConcat$1([
	      [this.version], codec, multihash
	    ], 1 + codec.byteLength + multihash.byteLength);

	    return prefix
	  }

	  /**
	   * The codec of the CID in its number form.
	   *
	   * @returns {CodecCode}
	   */
	  get code () {
	    return codecs[this.codec]
	  }

	  /**
	   * Convert to a CID of version `0`.
	   *
	   * @returns {CID}
	   */
	  toV0 () {
	    if (this.codec !== 'dag-pb') {
	      throw new Error('Cannot convert a non dag-pb CID to CIDv0')
	    }

	    const { name, length } = mh.decode(this.multihash);

	    if (name !== 'sha2-256') {
	      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')
	    }

	    if (length !== 32) {
	      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')
	    }

	    return new CID$2(0, this.codec, this.multihash)
	  }

	  /**
	   * Convert to a CID of version `1`.
	   *
	   * @returns {CID}
	   */
	  toV1 () {
	    return new CID$2(1, this.codec, this.multihash, this.multibaseName)
	  }

	  /**
	   * Encode the CID into a string.
	   *
	   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.
	   * @returns {string}
	   */
	  toBaseEncodedString (base = this.multibaseName) {
	    // @ts-ignore non enumerable cache property
	    if (this.string && this.string.length !== 0 && base === this.multibaseName) {
	      // @ts-ignore non enumerable cache property
	      return this.string
	    }
	    let str;
	    if (this.version === 0) {
	      if (base !== 'base58btc') {
	        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')
	      }
	      str = mh.toB58String(this.multihash);
	    } else if (this.version === 1) {
	      str = uint8ArrayToString(multibase.encode(base, this.bytes));
	    } else {
	      throw new Error('unsupported version')
	    }
	    if (base === this.multibaseName) {
	      // cache the string value
	      Object.defineProperty(this, 'string', { value: str });
	    }
	    return str
	  }

	  /**
	   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)
	   *
	   * @returns {string}
	   */
	  [Symbol.for('nodejs.util.inspect.custom')] () {
	    return 'CID(' + this.toString() + ')'
	  }

	  /**
	   * Encode the CID into a string.
	   *
	   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.
	   * @returns {string}
	   */
	  toString (base) {
	    return this.toBaseEncodedString(base)
	  }

	  /**
	   * Serialize to a plain object.
	   *
	   * @returns {SerializedCID}
	   */
	  toJSON () {
	    return {
	      codec: this.codec,
	      version: this.version,
	      hash: this.multihash
	    }
	  }

	  /**
	   * Compare equality with another CID.
	   *
	   * @param {CID} other
	   * @returns {boolean}
	   */
	  equals (other) {
	    return this.codec === other.codec &&
	      this.version === other.version &&
	      uint8ArrayEquals(this.multihash, other.multihash)
	  }

	  /**
	   * Test if the given input is a valid CID object.
	   * Throws if it is not.
	   *
	   * @param {any} other - The other CID.
	   * @returns {void}
	   */
	  static validateCID (other) {
	    const errorMsg = CIDUtil.checkCIDComponents(other);
	    if (errorMsg) {
	      throw new Error(errorMsg)
	    }
	  }

	  /**
	   * Check if object is a CID instance
	   *
	   * @param {any} value
	   * @returns {value is CID}
	   */
	  static isCID (value) {
	    return value instanceof CID$2 || Boolean(value && value[symbol])
	  }
	}

	CID$2.codecs = codecs;

	var src$5 = CID$2;

	var src$4 = {};

	var src$3 = {};

	var ieee754$1 = {};

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

	ieee754$1.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	ieee754$1.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	/*
	 *      bignumber.js v9.0.1
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	var
	  isNumeric$1 = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,

	  mathceil = Math.ceil,
	  mathfloor = Math.floor,

	  bignumberError = '[BigNumber Error] ',
	  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	  BASE = 1e14,
	  LOG_BASE = 14,
	  MAX_SAFE_INTEGER$1 = 0x1fffffffffffff,         // 2^53 - 1
	  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	  SQRT_BASE = 1e7,

	  // EDITABLE
	  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	  MAX = 1E9;                                   // 0 to MAX_INT32


	/*
	 * Create and return a BigNumber constructor.
	 */
	function clone$1(configObject) {
	  var div, convertBase, parseNumeric,
	    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	    ONE = new BigNumber(1),


	    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	    // The default values below must be integers within the inclusive ranges stated.
	    // The values can also be changed at run-time using BigNumber.set.

	    // The maximum number of decimal places for operations involving division.
	    DECIMAL_PLACES = 20,                     // 0 to MAX

	    // The rounding mode used when rounding to the above decimal places, and when using
	    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	    // UP         0 Away from zero.
	    // DOWN       1 Towards zero.
	    // CEIL       2 Towards +Infinity.
	    // FLOOR      3 Towards -Infinity.
	    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	    ROUNDING_MODE = 4,                       // 0 to 8

	    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	    // The exponent value at and beneath which toString returns exponential notation.
	    // Number type: -7
	    TO_EXP_NEG = -7,                         // 0 to -MAX

	    // The exponent value at and above which toString returns exponential notation.
	    // Number type: 21
	    TO_EXP_POS = 21,                         // 0 to MAX

	    // RANGE : [MIN_EXP, MAX_EXP]

	    // The minimum exponent value, beneath which underflow to zero occurs.
	    // Number type: -324  (5e-324)
	    MIN_EXP = -1e7,                          // -1 to -MAX

	    // The maximum exponent value, above which overflow to Infinity occurs.
	    // Number type:  308  (1.7976931348623157e+308)
	    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	    MAX_EXP = 1e7,                           // 1 to MAX

	    // Whether to use cryptographically-secure random number generation, if available.
	    CRYPTO = false,                          // true or false

	    // The modulo mode used when calculating the modulus: a mod n.
	    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	    // The remainder (r) is calculated as: r = a - n * q.
	    //
	    // UP        0 The remainder is positive if the dividend is negative, else is negative.
	    // DOWN      1 The remainder has the same sign as the dividend.
	    //             This modulo mode is commonly known as 'truncated division' and is
	    //             equivalent to (a % n) in JavaScript.
	    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	    //             The remainder is always positive.
	    //
	    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	    // modes are commonly used for the modulus operation.
	    // Although the other rounding modes can also be used, they may not give useful results.
	    MODULO_MODE = 1,                         // 0 to 9

	    // The maximum number of significant digits of the result of the exponentiatedBy operation.
	    // If POW_PRECISION is 0, there will be unlimited significant digits.
	    POW_PRECISION = 0,                    // 0 to MAX

	    // The format specification used by the BigNumber.prototype.toFormat method.
	    FORMAT = {
	      prefix: '',
	      groupSize: 3,
	      secondaryGroupSize: 0,
	      groupSeparator: ',',
	      decimalSeparator: '.',
	      fractionGroupSize: 0,
	      fractionGroupSeparator: '\xA0',      // non-breaking space
	      suffix: ''
	    },

	    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	    // '-', '.', whitespace, or repeated character.
	    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';


	  //------------------------------------------------------------------------------------------


	  // CONSTRUCTOR


	  /*
	   * The BigNumber constructor and exported function.
	   * Create and return a new instance of a BigNumber object.
	   *
	   * v {number|string|BigNumber} A numeric value.
	   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	   */
	  function BigNumber(v, b) {
	    var alphabet, c, caseChanged, e, i, isNum, len, str,
	      x = this;

	    // Enable constructor call without `new`.
	    if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	    if (b == null) {

	      if (v && v._isBigNumber === true) {
	        x.s = v.s;

	        if (!v.c || v.e > MAX_EXP) {
	          x.c = x.e = null;
	        } else if (v.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        } else {
	          x.e = v.e;
	          x.c = v.c.slice();
	        }

	        return;
	      }

	      if ((isNum = typeof v == 'number') && v * 0 == 0) {

	        // Use `1 / n` to handle minus zero also.
	        x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	        // Fast path for integers, where n < 2147483648 (2**31).
	        if (v === ~~v) {
	          for (e = 0, i = v; i >= 10; i /= 10, e++);

	          if (e > MAX_EXP) {
	            x.c = x.e = null;
	          } else {
	            x.e = e;
	            x.c = [v];
	          }

	          return;
	        }

	        str = String(v);
	      } else {

	        if (!isNumeric$1.test(str = String(v))) return parseNumeric(x, str, isNum);

	        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	      }

	      // Decimal point?
	      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	      // Exponential form?
	      if ((i = str.search(/e/i)) > 0) {

	        // Determine exponent.
	        if (e < 0) e = i;
	        e += +str.slice(i + 1);
	        str = str.substring(0, i);
	      } else if (e < 0) {

	        // Integer.
	        e = str.length;
	      }

	    } else {

	      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	      intCheck(b, 2, ALPHABET.length, 'Base');

	      // Allow exponential notation to be used with base 10 argument, while
	      // also rounding to DECIMAL_PLACES as with other bases.
	      if (b == 10) {
	        x = new BigNumber(v);
	        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	      }

	      str = String(v);

	      if (isNum = typeof v == 'number') {

	        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	          throw Error
	           (tooManyDigits + v);
	        }
	      } else {
	        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	      }

	      alphabet = ALPHABET.slice(0, b);
	      e = i = 0;

	      // Check that str is a valid base b number.
	      // Don't use RegExp, so alphabet can contain special characters.
	      for (len = str.length; i < len; i++) {
	        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	          if (c == '.') {

	            // If '.' is not the first character and it has not be found before.
	            if (i > e) {
	              e = len;
	              continue;
	            }
	          } else if (!caseChanged) {

	            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                str == str.toLowerCase() && (str = str.toUpperCase())) {
	              caseChanged = true;
	              i = -1;
	              e = 0;
	              continue;
	            }
	          }

	          return parseNumeric(x, String(v), isNum, b);
	        }
	      }

	      // Prevent later check for length on converted number.
	      isNum = false;
	      str = convertBase(str, b, 10, x.s);

	      // Decimal point?
	      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	      else e = str.length;
	    }

	    // Determine leading zeros.
	    for (i = 0; str.charCodeAt(i) === 48; i++);

	    // Determine trailing zeros.
	    for (len = str.length; str.charCodeAt(--len) === 48;);

	    if (str = str.slice(i, ++len)) {
	      len -= i;

	      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	      if (isNum && BigNumber.DEBUG &&
	        len > 15 && (v > MAX_SAFE_INTEGER$1 || v !== mathfloor(v))) {
	          throw Error
	           (tooManyDigits + (x.s * v));
	      }

	       // Overflow?
	      if ((e = e - i - 1) > MAX_EXP) {

	        // Infinity.
	        x.c = x.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        x.c = [x.e = 0];
	      } else {
	        x.e = e;
	        x.c = [];

	        // Transform base

	        // e is the base 10 exponent.
	        // i is where to slice str to get the first element of the coefficient array.
	        i = (e + 1) % LOG_BASE;
	        if (e < 0) i += LOG_BASE;  // i < 1

	        if (i < len) {
	          if (i) x.c.push(+str.slice(0, i));

	          for (len -= LOG_BASE; i < len;) {
	            x.c.push(+str.slice(i, i += LOG_BASE));
	          }

	          i = LOG_BASE - (str = str.slice(i)).length;
	        } else {
	          i -= len;
	        }

	        for (; i--; str += '0');
	        x.c.push(+str);
	      }
	    } else {

	      // Zero.
	      x.c = [x.e = 0];
	    }
	  }


	  // CONSTRUCTOR PROPERTIES


	  BigNumber.clone = clone$1;

	  BigNumber.ROUND_UP = 0;
	  BigNumber.ROUND_DOWN = 1;
	  BigNumber.ROUND_CEIL = 2;
	  BigNumber.ROUND_FLOOR = 3;
	  BigNumber.ROUND_HALF_UP = 4;
	  BigNumber.ROUND_HALF_DOWN = 5;
	  BigNumber.ROUND_HALF_EVEN = 6;
	  BigNumber.ROUND_HALF_CEIL = 7;
	  BigNumber.ROUND_HALF_FLOOR = 8;
	  BigNumber.EUCLID = 9;


	  /*
	   * Configure infrequently-changing library-wide settings.
	   *
	   * Accept an object with the following optional properties (if the value of a property is
	   * a number, it must be an integer within the inclusive range stated):
	   *
	   *   DECIMAL_PLACES   {number}           0 to MAX
	   *   ROUNDING_MODE    {number}           0 to 8
	   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	   *   CRYPTO           {boolean}          true or false
	   *   MODULO_MODE      {number}           0 to 9
	   *   POW_PRECISION       {number}           0 to MAX
	   *   ALPHABET         {string}           A string of two or more unique characters which does
	   *                                     not contain '.'.
	   *   FORMAT           {object}           An object with some of the following properties:
	   *     prefix                 {string}
	   *     groupSize              {number}
	   *     secondaryGroupSize     {number}
	   *     groupSeparator         {string}
	   *     decimalSeparator       {string}
	   *     fractionGroupSize      {number}
	   *     fractionGroupSeparator {string}
	   *     suffix                 {string}
	   *
	   * (The values assigned to the above FORMAT object properties are not checked for validity.)
	   *
	   * E.g.
	   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	   *
	   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	   *
	   * Return an object with the properties current values.
	   */
	  BigNumber.config = BigNumber.set = function (obj) {
	    var p, v;

	    if (obj != null) {

	      if (typeof obj == 'object') {

	        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	          v = obj[p];
	          intCheck(v, 0, MAX, p);
	          DECIMAL_PLACES = v;
	        }

	        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	          v = obj[p];
	          intCheck(v, 0, 8, p);
	          ROUNDING_MODE = v;
	        }

	        // EXPONENTIAL_AT {number|number[]}
	        // Integer, -MAX to MAX inclusive or
	        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	          v = obj[p];
	          if (v && v.pop) {
	            intCheck(v[0], -MAX, 0, p);
	            intCheck(v[1], 0, MAX, p);
	            TO_EXP_NEG = v[0];
	            TO_EXP_POS = v[1];
	          } else {
	            intCheck(v, -MAX, MAX, p);
	            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	          }
	        }

	        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	        if (obj.hasOwnProperty(p = 'RANGE')) {
	          v = obj[p];
	          if (v && v.pop) {
	            intCheck(v[0], -MAX, -1, p);
	            intCheck(v[1], 1, MAX, p);
	            MIN_EXP = v[0];
	            MAX_EXP = v[1];
	          } else {
	            intCheck(v, -MAX, MAX, p);
	            if (v) {
	              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	            } else {
	              throw Error
	               (bignumberError + p + ' cannot be zero: ' + v);
	            }
	          }
	        }

	        // CRYPTO {boolean} true or false.
	        // '[BigNumber Error] CRYPTO not true or false: {v}'
	        // '[BigNumber Error] crypto unavailable'
	        if (obj.hasOwnProperty(p = 'CRYPTO')) {
	          v = obj[p];
	          if (v === !!v) {
	            if (v) {
	              if (typeof crypto != 'undefined' && crypto &&
	               (crypto.getRandomValues || crypto.randomBytes)) {
	                CRYPTO = v;
	              } else {
	                CRYPTO = !v;
	                throw Error
	                 (bignumberError + 'crypto unavailable');
	              }
	            } else {
	              CRYPTO = v;
	            }
	          } else {
	            throw Error
	             (bignumberError + p + ' not true or false: ' + v);
	          }
	        }

	        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	          v = obj[p];
	          intCheck(v, 0, 9, p);
	          MODULO_MODE = v;
	        }

	        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	          v = obj[p];
	          intCheck(v, 0, MAX, p);
	          POW_PRECISION = v;
	        }

	        // FORMAT {object}
	        // '[BigNumber Error] FORMAT not an object: {v}'
	        if (obj.hasOwnProperty(p = 'FORMAT')) {
	          v = obj[p];
	          if (typeof v == 'object') FORMAT = v;
	          else throw Error
	           (bignumberError + p + ' not an object: ' + v);
	        }

	        // ALPHABET {string}
	        // '[BigNumber Error] ALPHABET invalid: {v}'
	        if (obj.hasOwnProperty(p = 'ALPHABET')) {
	          v = obj[p];

	          // Disallow if only one character,
	          // or if it contains '+', '-', '.', whitespace, or a repeated character.
	          if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) {
	            ALPHABET = v;
	          } else {
	            throw Error
	             (bignumberError + p + ' invalid: ' + v);
	          }
	        }

	      } else {

	        // '[BigNumber Error] Object expected: {v}'
	        throw Error
	         (bignumberError + 'Object expected: ' + obj);
	      }
	    }

	    return {
	      DECIMAL_PLACES: DECIMAL_PLACES,
	      ROUNDING_MODE: ROUNDING_MODE,
	      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	      RANGE: [MIN_EXP, MAX_EXP],
	      CRYPTO: CRYPTO,
	      MODULO_MODE: MODULO_MODE,
	      POW_PRECISION: POW_PRECISION,
	      FORMAT: FORMAT,
	      ALPHABET: ALPHABET
	    };
	  };


	  /*
	   * Return true if v is a BigNumber instance, otherwise return false.
	   *
	   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	   *
	   * v {any}
	   *
	   * '[BigNumber Error] Invalid BigNumber: {v}'
	   */
	  BigNumber.isBigNumber = function (v) {
	    if (!v || v._isBigNumber !== true) return false;
	    if (!BigNumber.DEBUG) return true;

	    var i, n,
	      c = v.c,
	      e = v.e,
	      s = v.s;

	    out: if ({}.toString.call(c) == '[object Array]') {

	      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

	        // If the first element is zero, the BigNumber value must be zero.
	        if (c[0] === 0) {
	          if (e === 0 && c.length === 1) return true;
	          break out;
	        }

	        // Calculate number of digits that c[0] should have, based on the exponent.
	        i = (e + 1) % LOG_BASE;
	        if (i < 1) i += LOG_BASE;

	        // Calculate number of digits of c[0].
	        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	        if (String(c[0]).length == i) {

	          for (i = 0; i < c.length; i++) {
	            n = c[i];
	            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	          }

	          // Last element cannot be zero, unless it is the only element.
	          if (n !== 0) return true;
	        }
	      }

	    // Infinity/NaN
	    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	      return true;
	    }

	    throw Error
	      (bignumberError + 'Invalid BigNumber: ' + v);
	  };


	  /*
	   * Return a new BigNumber whose value is the maximum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.maximum = BigNumber.max = function () {
	    return maxOrMin(arguments, P.lt);
	  };


	  /*
	   * Return a new BigNumber whose value is the minimum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.minimum = BigNumber.min = function () {
	    return maxOrMin(arguments, P.gt);
	  };


	  /*
	   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	   * zeros are produced).
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	   * '[BigNumber Error] crypto unavailable'
	   */
	  BigNumber.random = (function () {
	    var pow2_53 = 0x20000000000000;

	    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	    // Check if Math.random() produces more than 32 bits of randomness.
	    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	     ? function () { return mathfloor(Math.random() * pow2_53); }
	     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	       (Math.random() * 0x800000 | 0); };

	    return function (dp) {
	      var a, b, e, k, v,
	        i = 0,
	        c = [],
	        rand = new BigNumber(ONE);

	      if (dp == null) dp = DECIMAL_PLACES;
	      else intCheck(dp, 0, MAX);

	      k = mathceil(dp / LOG_BASE);

	      if (CRYPTO) {

	        // Browsers supporting crypto.getRandomValues.
	        if (crypto.getRandomValues) {

	          a = crypto.getRandomValues(new Uint32Array(k *= 2));

	          for (; i < k;) {

	            // 53 bits:
	            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	            //                                     11111 11111111 11111111
	            // 0x20000 is 2^21.
	            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	            // Rejection sampling:
	            // 0 <= v < 9007199254740992
	            // Probability that v >= 9e15, is
	            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	            if (v >= 9e15) {
	              b = crypto.getRandomValues(new Uint32Array(2));
	              a[i] = b[0];
	              a[i + 1] = b[1];
	            } else {

	              // 0 <= v <= 8999999999999999
	              // 0 <= (v % 1e14) <= 99999999999999
	              c.push(v % 1e14);
	              i += 2;
	            }
	          }
	          i = k / 2;

	        // Node.js supporting crypto.randomBytes.
	        } else if (crypto.randomBytes) {

	          // buffer
	          a = crypto.randomBytes(k *= 7);

	          for (; i < k;) {

	            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	            // 0x100000000 is 2^32, 0x1000000 is 2^24
	            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	            // 0 <= v < 9007199254740992
	            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	            if (v >= 9e15) {
	              crypto.randomBytes(7).copy(a, i);
	            } else {

	              // 0 <= (v % 1e14) <= 99999999999999
	              c.push(v % 1e14);
	              i += 7;
	            }
	          }
	          i = k / 7;
	        } else {
	          CRYPTO = false;
	          throw Error
	           (bignumberError + 'crypto unavailable');
	        }
	      }

	      // Use Math.random.
	      if (!CRYPTO) {

	        for (; i < k;) {
	          v = random53bitInt();
	          if (v < 9e15) c[i++] = v % 1e14;
	        }
	      }

	      k = c[--i];
	      dp %= LOG_BASE;

	      // Convert trailing digits to zeros according to dp.
	      if (k && dp) {
	        v = POWS_TEN[LOG_BASE - dp];
	        c[i] = mathfloor(k / v) * v;
	      }

	      // Remove trailing elements which are zero.
	      for (; c[i] === 0; c.pop(), i--);

	      // Zero?
	      if (i < 0) {
	        c = [e = 0];
	      } else {

	        // Remove leading elements which are zero and adjust exponent accordingly.
	        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	        // Count the digits of the first element of c to determine leading zeros, and...
	        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	        // adjust the exponent accordingly.
	        if (i < LOG_BASE) e -= LOG_BASE - i;
	      }

	      rand.e = e;
	      rand.c = c;
	      return rand;
	    };
	  })();


	   /*
	   * Return a BigNumber whose value is the sum of the arguments.
	   *
	   * arguments {number|string|BigNumber}
	   */
	  BigNumber.sum = function () {
	    var i = 1,
	      args = arguments,
	      sum = new BigNumber(args[0]);
	    for (; i < args.length;) sum = sum.plus(args[i++]);
	    return sum;
	  };


	  // PRIVATE FUNCTIONS


	  // Called by BigNumber and BigNumber.prototype.toString.
	  convertBase = (function () {
	    var decimal = '0123456789';

	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut(str, baseIn, baseOut, alphabet) {
	      var j,
	        arr = [0],
	        arrL,
	        i = 0,
	        len = str.length;

	      for (; i < len;) {
	        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	        arr[0] += alphabet.indexOf(str.charAt(i++));

	        for (j = 0; j < arr.length; j++) {

	          if (arr[j] > baseOut - 1) {
	            if (arr[j + 1] == null) arr[j + 1] = 0;
	            arr[j + 1] += arr[j] / baseOut | 0;
	            arr[j] %= baseOut;
	          }
	        }
	      }

	      return arr.reverse();
	    }

	    // Convert a numeric string of baseIn to a numeric string of baseOut.
	    // If the caller is toString, we are converting from base 10 to baseOut.
	    // If the caller is BigNumber, we are converting from baseIn to base 10.
	    return function (str, baseIn, baseOut, sign, callerIsToString) {
	      var alphabet, d, e, k, r, x, xc, y,
	        i = str.indexOf('.'),
	        dp = DECIMAL_PLACES,
	        rm = ROUNDING_MODE;

	      // Non-integer.
	      if (i >= 0) {
	        k = POW_PRECISION;

	        // Unlimited precision.
	        POW_PRECISION = 0;
	        str = str.replace('.', '');
	        y = new BigNumber(baseIn);
	        x = y.pow(str.length - i);
	        POW_PRECISION = k;

	        // Convert str as if an integer, then restore the fraction part by dividing the
	        // result by its base raised to a power.

	        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	         10, baseOut, decimal);
	        y.e = y.c.length;
	      }

	      // Convert the number as integer.

	      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	       ? (alphabet = ALPHABET, decimal)
	       : (alphabet = decimal, ALPHABET));

	      // xc now represents str as an integer and converted to baseOut. e is the exponent.
	      e = k = xc.length;

	      // Remove trailing zeros.
	      for (; xc[--k] == 0; xc.pop());

	      // Zero?
	      if (!xc[0]) return alphabet.charAt(0);

	      // Does str represent an integer? If so, no need for the division.
	      if (i < 0) {
	        --e;
	      } else {
	        x.c = xc;
	        x.e = e;

	        // The sign is needed for correct rounding.
	        x.s = sign;
	        x = div(x, y, dp, rm, baseOut);
	        xc = x.c;
	        r = x.r;
	        e = x.e;
	      }

	      // xc now represents str converted to baseOut.

	      // THe index of the rounding digit.
	      d = e + dp + 1;

	      // The rounding digit: the digit to the right of the digit that may be rounded up.
	      i = xc[d];

	      // Look at the rounding digits and mode to determine whether to round up.

	      k = baseOut / 2;
	      r = r || d < 0 || xc[d + 1] != null;

	      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	      // If the index of the rounding digit is not greater than zero, or xc represents
	      // zero, then the result of the base conversion is zero or, if rounding up, a value
	      // such as 0.00001.
	      if (d < 1 || !xc[0]) {

	        // 1^-dp or 0
	        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	      } else {

	        // Truncate xc to the required number of decimal places.
	        xc.length = d;

	        // Round up?
	        if (r) {

	          // Rounding up may mean the previous digit has to be rounded up and so on.
	          for (--baseOut; ++xc[--d] > baseOut;) {
	            xc[d] = 0;

	            if (!d) {
	              ++e;
	              xc = [1].concat(xc);
	            }
	          }
	        }

	        // Determine trailing zeros.
	        for (k = xc.length; !xc[--k];);

	        // E.g. [4, 11, 15] becomes 4bf.
	        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	        // Add leading zeros, decimal point and trailing zeros as required.
	        str = toFixedPoint(str, e, alphabet.charAt(0));
	      }

	      // The caller will add the sign.
	      return str;
	    };
	  })();


	  // Perform division in the specified base. Called by div and convertBase.
	  div = (function () {

	    // Assume non-zero x and k.
	    function multiply(x, k, base) {
	      var m, temp, xlo, xhi,
	        carry = 0,
	        i = x.length,
	        klo = k % SQRT_BASE,
	        khi = k / SQRT_BASE | 0;

	      for (x = x.slice(); i--;) {
	        xlo = x[i] % SQRT_BASE;
	        xhi = x[i] / SQRT_BASE | 0;
	        m = khi * xlo + xhi * klo;
	        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	        x[i] = temp % base;
	      }

	      if (carry) x = [carry].concat(x);

	      return x;
	    }

	    function compare(a, b, aL, bL) {
	      var i, cmp;

	      if (aL != bL) {
	        cmp = aL > bL ? 1 : -1;
	      } else {

	        for (i = cmp = 0; i < aL; i++) {

	          if (a[i] != b[i]) {
	            cmp = a[i] > b[i] ? 1 : -1;
	            break;
	          }
	        }
	      }

	      return cmp;
	    }

	    function subtract(a, b, aL, base) {
	      var i = 0;

	      // Subtract b from a.
	      for (; aL--;) {
	        a[aL] -= i;
	        i = a[aL] < b[aL] ? 1 : 0;
	        a[aL] = i * base + a[aL] - b[aL];
	      }

	      // Remove leading zeros.
	      for (; !a[0] && a.length > 1; a.splice(0, 1));
	    }

	    // x: dividend, y: divisor.
	    return function (x, y, dp, rm, base) {
	      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	        yL, yz,
	        s = x.s == y.s ? 1 : -1,
	        xc = x.c,
	        yc = y.c;

	      // Either NaN, Infinity or 0?
	      if (!xc || !xc[0] || !yc || !yc[0]) {

	        return new BigNumber(

	         // Return NaN if either NaN, or both Infinity or 0.
	         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	       );
	      }

	      q = new BigNumber(s);
	      qc = q.c = [];
	      e = x.e - y.e;
	      s = dp + e + 1;

	      if (!base) {
	        base = BASE;
	        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	        s = s / LOG_BASE | 0;
	      }

	      // Result exponent may be one less then the current value of e.
	      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	      for (i = 0; yc[i] == (xc[i] || 0); i++);

	      if (yc[i] > (xc[i] || 0)) e--;

	      if (s < 0) {
	        qc.push(1);
	        more = true;
	      } else {
	        xL = xc.length;
	        yL = yc.length;
	        i = 0;
	        s += 2;

	        // Normalise xc and yc so highest order digit of yc is >= base / 2.

	        n = mathfloor(base / (yc[0] + 1));

	        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	        if (n > 1) {
	          yc = multiply(yc, n, base);
	          xc = multiply(xc, n, base);
	          yL = yc.length;
	          xL = xc.length;
	        }

	        xi = yL;
	        rem = xc.slice(0, yL);
	        remL = rem.length;

	        // Add zeros to make remainder as long as divisor.
	        for (; remL < yL; rem[remL++] = 0);
	        yz = yc.slice();
	        yz = [0].concat(yz);
	        yc0 = yc[0];
	        if (yc[1] >= base / 2) yc0++;
	        // Not necessary, but to prevent trial digit n > base, when using base 3.
	        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	        do {
	          n = 0;

	          // Compare divisor and remainder.
	          cmp = compare(yc, rem, yL, remL);

	          // If divisor < remainder.
	          if (cmp < 0) {

	            // Calculate trial digit, n.

	            rem0 = rem[0];
	            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	            // n is how many times the divisor goes into the current remainder.
	            n = mathfloor(rem0 / yc0);

	            //  Algorithm:
	            //  product = divisor multiplied by trial digit (n).
	            //  Compare product and remainder.
	            //  If product is greater than remainder:
	            //    Subtract divisor from product, decrement trial digit.
	            //  Subtract product from remainder.
	            //  If product was less than remainder at the last compare:
	            //    Compare new remainder and divisor.
	            //    If remainder is greater than divisor:
	            //      Subtract divisor from remainder, increment trial digit.

	            if (n > 1) {

	              // n may be > base only when base is 3.
	              if (n >= base) n = base - 1;

	              // product = divisor * trial digit.
	              prod = multiply(yc, n, base);
	              prodL = prod.length;
	              remL = rem.length;

	              // Compare product and remainder.
	              // If product > remainder then trial digit n too high.
	              // n is 1 too high about 5% of the time, and is not known to have
	              // ever been more than 1 too high.
	              while (compare(prod, rem, prodL, remL) == 1) {
	                n--;

	                // Subtract divisor from product.
	                subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                prodL = prod.length;
	                cmp = 1;
	              }
	            } else {

	              // n is 0 or 1, cmp is -1.
	              // If n is 0, there is no need to compare yc and rem again below,
	              // so change cmp to 1 to avoid it.
	              // If n is 1, leave cmp as -1, so yc and rem are compared again.
	              if (n == 0) {

	                // divisor < remainder, so n must be at least 1.
	                cmp = n = 1;
	              }

	              // product = divisor
	              prod = yc.slice();
	              prodL = prod.length;
	            }

	            if (prodL < remL) prod = [0].concat(prod);

	            // Subtract product from remainder.
	            subtract(rem, prod, remL, base);
	            remL = rem.length;

	             // If product was < remainder.
	            if (cmp == -1) {

	              // Compare divisor and new remainder.
	              // If divisor < new remainder, subtract divisor from remainder.
	              // Trial digit n too low.
	              // n is 1 too low about 5% of the time, and very rarely 2 too low.
	              while (compare(yc, rem, yL, remL) < 1) {
	                n++;

	                // Subtract divisor from remainder.
	                subtract(rem, yL < remL ? yz : yc, remL, base);
	                remL = rem.length;
	              }
	            }
	          } else if (cmp === 0) {
	            n++;
	            rem = [0];
	          } // else cmp === 1 and n will be 0

	          // Add the next digit, n, to the result array.
	          qc[i++] = n;

	          // Update the remainder.
	          if (rem[0]) {
	            rem[remL++] = xc[xi] || 0;
	          } else {
	            rem = [xc[xi]];
	            remL = 1;
	          }
	        } while ((xi++ < xL || rem[0] != null) && s--);

	        more = rem[0] != null;

	        // Leading zero?
	        if (!qc[0]) qc.splice(0, 1);
	      }

	      if (base == BASE) {

	        // To calculate q.e, first get the number of digits of qc[0].
	        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	      // Caller is convertBase.
	      } else {
	        q.e = e;
	        q.r = +more;
	      }

	      return q;
	    };
	  })();


	  /*
	   * Return a string representing the value of BigNumber n in fixed-point or exponential
	   * notation rounded to the specified decimal places or significant digits.
	   *
	   * n: a BigNumber.
	   * i: the index of the last digit required (i.e. the digit that may be rounded up).
	   * rm: the rounding mode.
	   * id: 1 (toExponential) or 2 (toPrecision).
	   */
	  function format(n, i, rm, id) {
	    var c0, e, ne, len, str;

	    if (rm == null) rm = ROUNDING_MODE;
	    else intCheck(rm, 0, 8);

	    if (!n.c) return n.toString();

	    c0 = n.c[0];
	    ne = n.e;

	    if (i == null) {
	      str = coeffToString(n.c);
	      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	       ? toExponential(str, ne)
	       : toFixedPoint(str, ne, '0');
	    } else {
	      n = round(new BigNumber(n), i, rm);

	      // n.e may have changed if the value was rounded up.
	      e = n.e;

	      str = coeffToString(n.c);
	      len = str.length;

	      // toPrecision returns exponential notation if the number of significant digits
	      // specified is less than the number of digits necessary to represent the integer
	      // part of the value in fixed-point notation.

	      // Exponential notation.
	      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	        // Append zeros?
	        for (; len < i; str += '0', len++);
	        str = toExponential(str, e);

	      // Fixed-point notation.
	      } else {
	        i -= ne;
	        str = toFixedPoint(str, e, '0');

	        // Append zeros?
	        if (e + 1 > len) {
	          if (--i > 0) for (str += '.'; i--; str += '0');
	        } else {
	          i += e - len;
	          if (i > 0) {
	            if (e + 1 == len) str += '.';
	            for (; i--; str += '0');
	          }
	        }
	      }
	    }

	    return n.s < 0 && c0 ? '-' + str : str;
	  }


	  // Handle BigNumber.max and BigNumber.min.
	  function maxOrMin(args, method) {
	    var n,
	      i = 1,
	      m = new BigNumber(args[0]);

	    for (; i < args.length; i++) {
	      n = new BigNumber(args[i]);

	      // If any number is NaN, return NaN.
	      if (!n.s) {
	        m = n;
	        break;
	      } else if (method.call(m, n)) {
	        m = n;
	      }
	    }

	    return m;
	  }


	  /*
	   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	   * Called by minus, plus and times.
	   */
	  function normalise(n, c, e) {
	    var i = 1,
	      j = c.length;

	     // Remove trailing zeros.
	    for (; !c[--j]; c.pop());

	    // Calculate the base 10 exponent. First get the number of digits of c[0].
	    for (j = c[0]; j >= 10; j /= 10, i++);

	    // Overflow?
	    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	      // Infinity.
	      n.c = n.e = null;

	    // Underflow?
	    } else if (e < MIN_EXP) {

	      // Zero.
	      n.c = [n.e = 0];
	    } else {
	      n.e = e;
	      n.c = c;
	    }

	    return n;
	  }


	  // Handle values that fail the validity test in BigNumber.
	  parseNumeric = (function () {
	    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	      dotAfter = /^([^.]+)\.$/,
	      dotBefore = /^\.([^.]+)$/,
	      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	    return function (x, str, isNum, b) {
	      var base,
	        s = isNum ? str : str.replace(whitespaceOrPlus, '');

	      // No exception on ±Infinity or NaN.
	      if (isInfinityOrNaN.test(s)) {
	        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	      } else {
	        if (!isNum) {

	          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	          s = s.replace(basePrefix, function (m, p1, p2) {
	            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	            return !b || b == base ? p1 : m;
	          });

	          if (b) {
	            base = b;

	            // E.g. '1.' to '1', '.1' to '0.1'
	            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	          }

	          if (str != s) return new BigNumber(s, base);
	        }

	        // '[BigNumber Error] Not a number: {n}'
	        // '[BigNumber Error] Not a base {b} number: {n}'
	        if (BigNumber.DEBUG) {
	          throw Error
	            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	        }

	        // NaN
	        x.s = null;
	      }

	      x.c = x.e = null;
	    }
	  })();


	  /*
	   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	   * If r is truthy, it is known that there are more digits after the rounding digit.
	   */
	  function round(x, sd, rm, r) {
	    var d, i, j, k, n, ni, rd,
	      xc = x.c,
	      pows10 = POWS_TEN;

	    // if x is not Infinity or NaN...
	    if (xc) {

	      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	      // n is a base 1e14 number, the value of the element of array x.c containing rd.
	      // ni is the index of n within x.c.
	      // d is the number of digits of n.
	      // i is the index of rd within n including leading zeros.
	      // j is the actual index of rd within n (if < 0, rd is a leading zero).
	      out: {

	        // Get the number of digits of the first element of xc.
	        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	        i = sd - d;

	        // If the rounding digit is in the first element of xc...
	        if (i < 0) {
	          i += LOG_BASE;
	          j = sd;
	          n = xc[ni = 0];

	          // Get the rounding digit at index j of n.
	          rd = n / pows10[d - j - 1] % 10 | 0;
	        } else {
	          ni = mathceil((i + 1) / LOG_BASE);

	          if (ni >= xc.length) {

	            if (r) {

	              // Needed by sqrt.
	              for (; xc.length <= ni; xc.push(0));
	              n = rd = 0;
	              d = 1;
	              i %= LOG_BASE;
	              j = i - LOG_BASE + 1;
	            } else {
	              break out;
	            }
	          } else {
	            n = k = xc[ni];

	            // Get the number of digits of n.
	            for (d = 1; k >= 10; k /= 10, d++);

	            // Get the index of rd within n.
	            i %= LOG_BASE;

	            // Get the index of rd within n, adjusted for leading zeros.
	            // The number of leading zeros of n is given by LOG_BASE - d.
	            j = i - LOG_BASE + d;

	            // Get the rounding digit at index j of n.
	            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
	          }
	        }

	        r = r || sd < 0 ||

	        // Are there any non-zero digits after the rounding digit?
	        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	        r = rm < 4
	         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	          // Check whether the digit to the left of the rounding digit is odd.
	          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	           rm == (x.s < 0 ? 8 : 7));

	        if (sd < 1 || !xc[0]) {
	          xc.length = 0;

	          if (r) {

	            // Convert sd to decimal places.
	            sd -= x.e + 1;

	            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	            x.e = -sd || 0;
	          } else {

	            // Zero.
	            xc[0] = x.e = 0;
	          }

	          return x;
	        }

	        // Remove excess digits.
	        if (i == 0) {
	          xc.length = ni;
	          k = 1;
	          ni--;
	        } else {
	          xc.length = ni + 1;
	          k = pows10[LOG_BASE - i];

	          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	          // j > 0 means i > number of leading zeros of n.
	          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	        }

	        // Round up?
	        if (r) {

	          for (; ;) {

	            // If the digit to be rounded up is in the first element of xc...
	            if (ni == 0) {

	              // i will be the length of xc[0] before k is added.
	              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	              j = xc[0] += k;
	              for (k = 1; j >= 10; j /= 10, k++);

	              // if i != k the length has increased.
	              if (i != k) {
	                x.e++;
	                if (xc[0] == BASE) xc[0] = 1;
	              }

	              break;
	            } else {
	              xc[ni] += k;
	              if (xc[ni] != BASE) break;
	              xc[ni--] = 0;
	              k = 1;
	            }
	          }
	        }

	        // Remove trailing zeros.
	        for (i = xc.length; xc[--i] === 0; xc.pop());
	      }

	      // Overflow? Infinity.
	      if (x.e > MAX_EXP) {
	        x.c = x.e = null;

	      // Underflow? Zero.
	      } else if (x.e < MIN_EXP) {
	        x.c = [x.e = 0];
	      }
	    }

	    return x;
	  }


	  function valueOf(n) {
	    var str,
	      e = n.e;

	    if (e === null) return n.toString();

	    str = coeffToString(n.c);

	    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	      ? toExponential(str, e)
	      : toFixedPoint(str, e, '0');

	    return n.s < 0 ? '-' + str : str;
	  }


	  // PROTOTYPE/INSTANCE METHODS


	  /*
	   * Return a new BigNumber whose value is the absolute value of this BigNumber.
	   */
	  P.absoluteValue = P.abs = function () {
	    var x = new BigNumber(this);
	    if (x.s < 0) x.s = 1;
	    return x;
	  };


	  /*
	   * Return
	   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	   *   0 if they have the same value,
	   *   or null if the value of either is NaN.
	   */
	  P.comparedTo = function (y, b) {
	    return compare$4(this, new BigNumber(y, b));
	  };


	  /*
	   * If dp is undefined or null or true or false, return the number of decimal places of the
	   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	   *
	   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	   * ROUNDING_MODE if rm is omitted.
	   *
	   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.decimalPlaces = P.dp = function (dp, rm) {
	    var c, n, v,
	      x = this;

	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      return round(new BigNumber(x), dp + x.e + 1, rm);
	    }

	    if (!(c = x.c)) return null;
	    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	    // Subtract the number of trailing zeros of the last number.
	    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	    if (n < 0) n = 0;

	    return n;
	  };


	  /*
	   *  n / 0 = I
	   *  n / N = N
	   *  n / I = 0
	   *  0 / n = 0
	   *  0 / 0 = N
	   *  0 / N = N
	   *  0 / I = 0
	   *  N / n = N
	   *  N / 0 = N
	   *  N / N = N
	   *  N / I = N
	   *  I / n = I
	   *  I / 0 = I
	   *  I / N = N
	   *  I / I = N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	   */
	  P.dividedBy = P.div = function (y, b) {
	    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	  };


	  /*
	   * Return a new BigNumber whose value is the integer part of dividing the value of this
	   * BigNumber by the value of BigNumber(y, b).
	   */
	  P.dividedToIntegerBy = P.idiv = function (y, b) {
	    return div(this, new BigNumber(y, b), 0, 1);
	  };


	  /*
	   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	   *
	   * If m is present, return the result modulo m.
	   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	   *
	   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	   *
	   * n {number|string|BigNumber} The exponent. An integer.
	   * [m] {number|string|BigNumber} The modulus.
	   *
	   * '[BigNumber Error] Exponent not an integer: {n}'
	   */
	  P.exponentiatedBy = P.pow = function (n, m) {
	    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	      x = this;

	    n = new BigNumber(n);

	    // Allow NaN and ±Infinity, but not other non-integers.
	    if (n.c && !n.isInteger()) {
	      throw Error
	        (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	    }

	    if (m != null) m = new BigNumber(m);

	    // Exponent of MAX_SAFE_INTEGER is 15.
	    nIsBig = n.e > 14;

	    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	      // The sign of the result of pow when x is negative depends on the evenness of n.
	      // If +n overflows to ±Infinity, the evenness of n would be not be known.
	      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
	      return m ? y.mod(m) : y;
	    }

	    nIsNeg = n.s < 0;

	    if (m) {

	      // x % m returns NaN if abs(m) is zero, or m is NaN.
	      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	      if (isModExp) x = x.mod(m);

	    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	      // [1, 240000000]
	      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	      // [80000000000000]  [99999750000000]
	      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	      // If x is negative and n is odd, k = -0, else k = 0.
	      k = x.s < 0 && isOdd(n) ? -0 : 0;

	      // If x >= 1, k = ±Infinity.
	      if (x.e > -1) k = 1 / k;

	      // If n is negative return ±0, else return ±Infinity.
	      return new BigNumber(nIsNeg ? 1 / k : k);

	    } else if (POW_PRECISION) {

	      // Truncating each coefficient array to a length of k after each multiplication
	      // equates to truncating significant digits to POW_PRECISION + [28, 41],
	      // i.e. there will be a minimum of 28 guard digits retained.
	      k = mathceil(POW_PRECISION / LOG_BASE + 2);
	    }

	    if (nIsBig) {
	      half = new BigNumber(0.5);
	      if (nIsNeg) n.s = 1;
	      nIsOdd = isOdd(n);
	    } else {
	      i = Math.abs(+valueOf(n));
	      nIsOdd = i % 2;
	    }

	    y = new BigNumber(ONE);

	    // Performs 54 loop iterations for n of 9007199254740991.
	    for (; ;) {

	      if (nIsOdd) {
	        y = y.times(x);
	        if (!y.c) break;

	        if (k) {
	          if (y.c.length > k) y.c.length = k;
	        } else if (isModExp) {
	          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (i) {
	        i = mathfloor(i / 2);
	        if (i === 0) break;
	        nIsOdd = i % 2;
	      } else {
	        n = n.times(half);
	        round(n, n.e + 1, 1);

	        if (n.e > 14) {
	          nIsOdd = isOdd(n);
	        } else {
	          i = +valueOf(n);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        }
	      }

	      x = x.times(x);

	      if (k) {
	        if (x.c && x.c.length > k) x.c.length = k;
	      } else if (isModExp) {
	        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	      }
	    }

	    if (isModExp) return y;
	    if (nIsNeg) y = ONE.div(y);

	    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	   *
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	   */
	  P.integerValue = function (rm) {
	    var n = new BigNumber(this);
	    if (rm == null) rm = ROUNDING_MODE;
	    else intCheck(rm, 0, 8);
	    return round(n, n.e + 1, rm);
	  };


	  /*
	   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isEqualTo = P.eq = function (y, b) {
	    return compare$4(this, new BigNumber(y, b)) === 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is a finite number, otherwise return false.
	   */
	  P.isFinite = function () {
	    return !!this.c;
	  };


	  /*
	   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isGreaterThan = P.gt = function (y, b) {
	    return compare$4(this, new BigNumber(y, b)) > 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is greater than or equal to the value of
	   * BigNumber(y, b), otherwise return false.
	   */
	  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	    return (b = compare$4(this, new BigNumber(y, b))) === 1 || b === 0;

	  };


	  /*
	   * Return true if the value of this BigNumber is an integer, otherwise return false.
	   */
	  P.isInteger = function () {
	    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	  };


	  /*
	   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	   * otherwise return false.
	   */
	  P.isLessThan = P.lt = function (y, b) {
	    return compare$4(this, new BigNumber(y, b)) < 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is less than or equal to the value of
	   * BigNumber(y, b), otherwise return false.
	   */
	  P.isLessThanOrEqualTo = P.lte = function (y, b) {
	    return (b = compare$4(this, new BigNumber(y, b))) === -1 || b === 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is NaN, otherwise return false.
	   */
	  P.isNaN = function () {
	    return !this.s;
	  };


	  /*
	   * Return true if the value of this BigNumber is negative, otherwise return false.
	   */
	  P.isNegative = function () {
	    return this.s < 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is positive, otherwise return false.
	   */
	  P.isPositive = function () {
	    return this.s > 0;
	  };


	  /*
	   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	   */
	  P.isZero = function () {
	    return !!this.c && this.c[0] == 0;
	  };


	  /*
	   *  n - 0 = n
	   *  n - N = N
	   *  n - I = -I
	   *  0 - n = -n
	   *  0 - 0 = 0
	   *  0 - N = N
	   *  0 - I = -I
	   *  N - n = N
	   *  N - 0 = N
	   *  N - N = N
	   *  N - I = N
	   *  I - n = I
	   *  I - 0 = I
	   *  I - N = N
	   *  I - I = N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	   * BigNumber(y, b).
	   */
	  P.minus = function (y, b) {
	    var i, j, t, xLTy,
	      x = this,
	      a = x.s;

	    y = new BigNumber(y, b);
	    b = y.s;

	    // Either NaN?
	    if (!a || !b) return new BigNumber(NaN);

	    // Signs differ?
	    if (a != b) {
	      y.s = -b;
	      return x.plus(y);
	    }

	    var xe = x.e / LOG_BASE,
	      ye = y.e / LOG_BASE,
	      xc = x.c,
	      yc = y.c;

	    if (!xe || !ye) {

	      // Either Infinity?
	      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	      // Either zero?
	      if (!xc[0] || !yc[0]) {

	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	         ROUNDING_MODE == 3 ? -0 : 0);
	      }
	    }

	    xe = bitFloor(xe);
	    ye = bitFloor(ye);
	    xc = xc.slice();

	    // Determine which is the bigger number.
	    if (a = xe - ye) {

	      if (xLTy = a < 0) {
	        a = -a;
	        t = xc;
	      } else {
	        ye = xe;
	        t = yc;
	      }

	      t.reverse();

	      // Prepend zeros to equalise exponents.
	      for (b = a; b--; t.push(0));
	      t.reverse();
	    } else {

	      // Exponents equal. Check digit by digit.
	      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	      for (a = b = 0; b < j; b++) {

	        if (xc[b] != yc[b]) {
	          xLTy = xc[b] < yc[b];
	          break;
	        }
	      }
	    }

	    // x < y? Point xc to the array of the bigger number.
	    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	    b = (j = yc.length) - (i = xc.length);

	    // Append zeros to xc if shorter.
	    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	    if (b > 0) for (; b--; xc[i++] = 0);
	    b = BASE - 1;

	    // Subtract yc from xc.
	    for (; j > a;) {

	      if (xc[--j] < yc[j]) {
	        for (i = j; i && !xc[--i]; xc[i] = b);
	        --xc[i];
	        xc[j] += BASE;
	      }

	      xc[j] -= yc[j];
	    }

	    // Remove leading zeros and adjust exponent accordingly.
	    for (; xc[0] == 0; xc.splice(0, 1), --ye);

	    // Zero?
	    if (!xc[0]) {

	      // Following IEEE 754 (2008) 6.3,
	      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	      y.s = ROUNDING_MODE == 3 ? -1 : 1;
	      y.c = [y.e = 0];
	      return y;
	    }

	    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	    // for finite x and y.
	    return normalise(y, xc, ye);
	  };


	  /*
	   *   n % 0 =  N
	   *   n % N =  N
	   *   n % I =  n
	   *   0 % n =  0
	   *  -0 % n = -0
	   *   0 % 0 =  N
	   *   0 % N =  N
	   *   0 % I =  0
	   *   N % n =  N
	   *   N % 0 =  N
	   *   N % N =  N
	   *   N % I =  N
	   *   I % n =  N
	   *   I % 0 =  N
	   *   I % N =  N
	   *   I % I =  N
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	   */
	  P.modulo = P.mod = function (y, b) {
	    var q, s,
	      x = this;

	    y = new BigNumber(y, b);

	    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	    if (!x.c || !y.s || y.c && !y.c[0]) {
	      return new BigNumber(NaN);

	    // Return x if y is Infinity or x is zero.
	    } else if (!y.c || x.c && !x.c[0]) {
	      return new BigNumber(x);
	    }

	    if (MODULO_MODE == 9) {

	      // Euclidian division: q = sign(y) * floor(x / abs(y))
	      // r = x - qy    where  0 <= r < abs(y)
	      s = y.s;
	      y.s = 1;
	      q = div(x, y, 0, 3);
	      y.s = s;
	      q.s *= s;
	    } else {
	      q = div(x, y, 0, MODULO_MODE);
	    }

	    y = x.minus(q.times(y));

	    // To match JavaScript %, ensure sign of zero is sign of dividend.
	    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	    return y;
	  };


	  /*
	   *  n * 0 = 0
	   *  n * N = N
	   *  n * I = I
	   *  0 * n = 0
	   *  0 * 0 = 0
	   *  0 * N = N
	   *  0 * I = N
	   *  N * n = N
	   *  N * 0 = N
	   *  N * N = N
	   *  N * I = N
	   *  I * n = I
	   *  I * 0 = N
	   *  I * N = N
	   *  I * I = I
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	   * of BigNumber(y, b).
	   */
	  P.multipliedBy = P.times = function (y, b) {
	    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	      base, sqrtBase,
	      x = this,
	      xc = x.c,
	      yc = (y = new BigNumber(y, b)).c;

	    // Either NaN, ±Infinity or ±0?
	    if (!xc || !yc || !xc[0] || !yc[0]) {

	      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	        y.c = y.e = y.s = null;
	      } else {
	        y.s *= x.s;

	        // Return ±Infinity if either is ±Infinity.
	        if (!xc || !yc) {
	          y.c = y.e = null;

	        // Return ±0 if either is ±0.
	        } else {
	          y.c = [0];
	          y.e = 0;
	        }
	      }

	      return y;
	    }

	    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	    y.s *= x.s;
	    xcL = xc.length;
	    ycL = yc.length;

	    // Ensure xc points to longer array and xcL to its length.
	    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	    // Initialise the result array with zeros.
	    for (i = xcL + ycL, zc = []; i--; zc.push(0));

	    base = BASE;
	    sqrtBase = SQRT_BASE;

	    for (i = ycL; --i >= 0;) {
	      c = 0;
	      ylo = yc[i] % sqrtBase;
	      yhi = yc[i] / sqrtBase | 0;

	      for (k = xcL, j = i + k; j > i;) {
	        xlo = xc[--k] % sqrtBase;
	        xhi = xc[k] / sqrtBase | 0;
	        m = yhi * xlo + xhi * ylo;
	        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	        zc[j--] = xlo % base;
	      }

	      zc[j] = c;
	    }

	    if (c) {
	      ++e;
	    } else {
	      zc.splice(0, 1);
	    }

	    return normalise(y, zc, e);
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber negated,
	   * i.e. multiplied by -1.
	   */
	  P.negated = function () {
	    var x = new BigNumber(this);
	    x.s = -x.s || null;
	    return x;
	  };


	  /*
	   *  n + 0 = n
	   *  n + N = N
	   *  n + I = I
	   *  0 + n = n
	   *  0 + 0 = 0
	   *  0 + N = N
	   *  0 + I = I
	   *  N + n = N
	   *  N + 0 = N
	   *  N + N = N
	   *  N + I = N
	   *  I + n = I
	   *  I + 0 = I
	   *  I + N = N
	   *  I + I = I
	   *
	   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	   * BigNumber(y, b).
	   */
	  P.plus = function (y, b) {
	    var t,
	      x = this,
	      a = x.s;

	    y = new BigNumber(y, b);
	    b = y.s;

	    // Either NaN?
	    if (!a || !b) return new BigNumber(NaN);

	    // Signs differ?
	     if (a != b) {
	      y.s = -b;
	      return x.minus(y);
	    }

	    var xe = x.e / LOG_BASE,
	      ye = y.e / LOG_BASE,
	      xc = x.c,
	      yc = y.c;

	    if (!xe || !ye) {

	      // Return ±Infinity if either ±Infinity.
	      if (!xc || !yc) return new BigNumber(a / 0);

	      // Either zero?
	      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	    }

	    xe = bitFloor(xe);
	    ye = bitFloor(ye);
	    xc = xc.slice();

	    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	    if (a = xe - ye) {
	      if (a > 0) {
	        ye = xe;
	        t = yc;
	      } else {
	        a = -a;
	        t = xc;
	      }

	      t.reverse();
	      for (; a--; t.push(0));
	      t.reverse();
	    }

	    a = xc.length;
	    b = yc.length;

	    // Point xc to the longer array, and b to the shorter length.
	    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

	    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	    for (a = 0; b;) {
	      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	    }

	    if (a) {
	      xc = [a].concat(xc);
	      ++ye;
	    }

	    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	    // ye = MAX_EXP + 1 possible
	    return normalise(y, xc, ye);
	  };


	  /*
	   * If sd is undefined or null or true or false, return the number of significant digits of
	   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	   * If sd is true include integer-part trailing zeros in the count.
	   *
	   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	   * ROUNDING_MODE if rm is omitted.
	   *
	   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	   *                     boolean: whether to count integer-part trailing zeros: true or false.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	   */
	  P.precision = P.sd = function (sd, rm) {
	    var c, n, v,
	      x = this;

	    if (sd != null && sd !== !!sd) {
	      intCheck(sd, 1, MAX);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      return round(new BigNumber(x), sd, rm);
	    }

	    if (!(c = x.c)) return null;
	    v = c.length - 1;
	    n = v * LOG_BASE + 1;

	    if (v = c[v]) {

	      // Subtract the number of trailing zeros of the last element.
	      for (; v % 10 == 0; v /= 10, n--);

	      // Add the number of digits of the first element.
	      for (v = c[0]; v >= 10; v /= 10, n++);
	    }

	    if (sd && x.e + 1 > n) n = x.e + 1;

	    return n;
	  };


	  /*
	   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	   *
	   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	   */
	  P.shiftedBy = function (k) {
	    intCheck(k, -MAX_SAFE_INTEGER$1, MAX_SAFE_INTEGER$1);
	    return this.times('1e' + k);
	  };


	  /*
	   *  sqrt(-n) =  N
	   *  sqrt(N) =  N
	   *  sqrt(-I) =  N
	   *  sqrt(I) =  I
	   *  sqrt(0) =  0
	   *  sqrt(-0) = -0
	   *
	   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	   */
	  P.squareRoot = P.sqrt = function () {
	    var m, n, r, rep, t,
	      x = this,
	      c = x.c,
	      s = x.s,
	      e = x.e,
	      dp = DECIMAL_PLACES + 4,
	      half = new BigNumber('0.5');

	    // Negative/NaN/Infinity/zero?
	    if (s !== 1 || !c || !c[0]) {
	      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	    }

	    // Initial estimate.
	    s = Math.sqrt(+valueOf(x));

	    // Math.sqrt underflow/overflow?
	    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	    if (s == 0 || s == 1 / 0) {
	      n = coeffToString(c);
	      if ((n.length + e) % 2 == 0) n += '0';
	      s = Math.sqrt(+n);
	      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	      if (s == 1 / 0) {
	        n = '5e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }

	      r = new BigNumber(n);
	    } else {
	      r = new BigNumber(s + '');
	    }

	    // Check for zero.
	    // r could be zero if MIN_EXP is changed after the this value was created.
	    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	    // coeffToString to throw.
	    if (r.c[0]) {
	      e = r.e;
	      s = e + dp;
	      if (s < 3) s = 0;

	      // Newton-Raphson iteration.
	      for (; ;) {
	        t = r;
	        r = half.times(t.plus(div(x, t, dp, 1)));

	        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	          // The exponent of r may here be one less than the final result exponent,
	          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	          // are indexed correctly.
	          if (r.e < e) --s;
	          n = n.slice(s - 3, s + 1);

	          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	          // iteration.
	          if (n == '9999' || !rep && n == '4999') {

	            // On the first iteration only, check to see if rounding up gives the
	            // exact result as the nines may infinitely repeat.
	            if (!rep) {
	              round(t, t.e + DECIMAL_PLACES + 2, 0);

	              if (t.times(t).eq(x)) {
	                r = t;
	                break;
	              }
	            }

	            dp += 4;
	            s += 4;
	            rep = 1;
	          } else {

	            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	            // result. If not, then there are further digits and m will be truthy.
	            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	              // Truncate to the first rounding digit.
	              round(r, r.e + DECIMAL_PLACES + 2, 1);
	              m = !r.times(r).eq(x);
	            }

	            break;
	          }
	        }
	      }
	    }

	    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in exponential notation and
	   * rounded using ROUNDING_MODE to dp fixed decimal places.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.toExponential = function (dp, rm) {
	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      dp++;
	    }
	    return format(this, dp, rm, 1);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in fixed-point notation rounding
	   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	   *
	   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	   * but e.g. (-0.00001).toFixed(0) is '-0'.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   */
	  P.toFixed = function (dp, rm) {
	    if (dp != null) {
	      intCheck(dp, 0, MAX);
	      dp = dp + this.e + 1;
	    }
	    return format(this, dp, rm);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in fixed-point notation rounded
	   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	   * of the format or FORMAT object (see BigNumber.set).
	   *
	   * The formatting object may contain some or all of the properties shown below.
	   *
	   * FORMAT = {
	   *   prefix: '',
	   *   groupSize: 3,
	   *   secondaryGroupSize: 0,
	   *   groupSeparator: ',',
	   *   decimalSeparator: '.',
	   *   fractionGroupSize: 0,
	   *   fractionGroupSeparator: '\xA0',      // non-breaking space
	   *   suffix: ''
	   * };
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   * [format] {object} Formatting options. See FORMAT pbject above.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	   * '[BigNumber Error] Argument not an object: {format}'
	   */
	  P.toFormat = function (dp, rm, format) {
	    var str,
	      x = this;

	    if (format == null) {
	      if (dp != null && rm && typeof rm == 'object') {
	        format = rm;
	        rm = null;
	      } else if (dp && typeof dp == 'object') {
	        format = dp;
	        dp = rm = null;
	      } else {
	        format = FORMAT;
	      }
	    } else if (typeof format != 'object') {
	      throw Error
	        (bignumberError + 'Argument not an object: ' + format);
	    }

	    str = x.toFixed(dp, rm);

	    if (x.c) {
	      var i,
	        arr = str.split('.'),
	        g1 = +format.groupSize,
	        g2 = +format.secondaryGroupSize,
	        groupSeparator = format.groupSeparator || '',
	        intPart = arr[0],
	        fractionPart = arr[1],
	        isNeg = x.s < 0,
	        intDigits = isNeg ? intPart.slice(1) : intPart,
	        len = intDigits.length;

	      if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	      if (g1 > 0 && len > 0) {
	        i = len % g1 || g1;
	        intPart = intDigits.substr(0, i);
	        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	        if (isNeg) intPart = '-' + intPart;
	      }

	      str = fractionPart
	       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	         '$&' + (format.fractionGroupSeparator || ''))
	        : fractionPart)
	       : intPart;
	    }

	    return (format.prefix || '') + str + (format.suffix || '');
	  };


	  /*
	   * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	   * fraction with an integer numerator and an integer denominator.
	   * The denominator will be a positive non-zero value less than or equal to the specified
	   * maximum denominator. If a maximum denominator is not specified, the denominator will be
	   * the lowest value necessary to represent the number exactly.
	   *
	   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	   *
	   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	   */
	  P.toFraction = function (md) {
	    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	      x = this,
	      xc = x.c;

	    if (md != null) {
	      n = new BigNumber(md);

	      // Throw if md is less than one or is not an integer, unless it is Infinity.
	      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	        throw Error
	          (bignumberError + 'Argument ' +
	            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	      }
	    }

	    if (!xc) return new BigNumber(x);

	    d = new BigNumber(ONE);
	    n1 = d0 = new BigNumber(ONE);
	    d1 = n0 = new BigNumber(ONE);
	    s = coeffToString(xc);

	    // Determine initial denominator.
	    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	    e = d.e = s.length - x.e - 1;
	    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	    exp = MAX_EXP;
	    MAX_EXP = 1 / 0;
	    n = new BigNumber(s);

	    // n0 = d1 = 0
	    n0.c[0] = 0;

	    for (; ;)  {
	      q = div(n, d, 0, 1);
	      d2 = d0.plus(q.times(d1));
	      if (d2.comparedTo(md) == 1) break;
	      d0 = d1;
	      d1 = d2;
	      n1 = n0.plus(q.times(d2 = n1));
	      n0 = d2;
	      d = n.minus(q.times(d2 = d));
	      n = d2;
	    }

	    d2 = div(md.minus(d0), d1, 0, 1);
	    n0 = n0.plus(d2.times(n1));
	    d0 = d0.plus(d2.times(d1));
	    n0.s = n1.s = x.s;
	    e = e * 2;

	    // Determine which fraction is closer to x, n0/d0 or n1/d1
	    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	    MAX_EXP = exp;

	    return r;
	  };


	  /*
	   * Return the value of this BigNumber converted to a number primitive.
	   */
	  P.toNumber = function () {
	    return +valueOf(this);
	  };


	  /*
	   * Return a string representing the value of this BigNumber rounded to sd significant digits
	   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	   * necessary to represent the integer part of the value in fixed-point notation, then use
	   * exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	   */
	  P.toPrecision = function (sd, rm) {
	    if (sd != null) intCheck(sd, 1, MAX);
	    return format(this, sd, rm, 2);
	  };


	  /*
	   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	   * TO_EXP_NEG, return exponential notation.
	   *
	   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	   *
	   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	   */
	  P.toString = function (b) {
	    var str,
	      n = this,
	      s = n.s,
	      e = n.e;

	    // Infinity or NaN?
	    if (e === null) {
	      if (s) {
	        str = 'Infinity';
	        if (s < 0) str = '-' + str;
	      } else {
	        str = 'NaN';
	      }
	    } else {
	      if (b == null) {
	        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	         ? toExponential(coeffToString(n.c), e)
	         : toFixedPoint(coeffToString(n.c), e, '0');
	      } else if (b === 10) {
	        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	        str = toFixedPoint(coeffToString(n.c), n.e, '0');
	      } else {
	        intCheck(b, 2, ALPHABET.length, 'Base');
	        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	      }

	      if (s < 0 && n.c[0]) str = '-' + str;
	    }

	    return str;
	  };


	  /*
	   * Return as toString, but do not accept a base argument, and include the minus sign for
	   * negative zero.
	   */
	  P.valueOf = P.toJSON = function () {
	    return valueOf(this);
	  };


	  P._isBigNumber = true;

	  P[Symbol.toStringTag] = 'BigNumber';

	  // Node.js v10.12.0+
	  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

	  if (configObject != null) BigNumber.set(configObject);

	  return BigNumber;
	}


	// PRIVATE HELPER FUNCTIONS

	// These functions don't need access to variables,
	// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	function bitFloor(n) {
	  var i = n | 0;
	  return n > 0 || n === i ? i : i - 1;
	}


	// Return a coefficient array as a string of base 10 digits.
	function coeffToString(a) {
	  var s, z,
	    i = 1,
	    j = a.length,
	    r = a[0] + '';

	  for (; i < j;) {
	    s = a[i++] + '';
	    z = LOG_BASE - s.length;
	    for (; z--; s = '0' + s);
	    r += s;
	  }

	  // Determine trailing zeros.
	  for (j = r.length; r.charCodeAt(--j) === 48;);

	  return r.slice(0, j + 1 || 1);
	}


	// Compare the value of BigNumbers x and y.
	function compare$4(x, y) {
	  var a, b,
	    xc = x.c,
	    yc = y.c,
	    i = x.s,
	    j = y.s,
	    k = x.e,
	    l = y.e;

	  // Either NaN?
	  if (!i || !j) return null;

	  a = xc && !xc[0];
	  b = yc && !yc[0];

	  // Either zero?
	  if (a || b) return a ? b ? 0 : -j : i;

	  // Signs differ?
	  if (i != j) return i;

	  a = i < 0;
	  b = k == l;

	  // Either Infinity?
	  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	  // Compare exponents.
	  if (!b) return k > l ^ a ? 1 : -1;

	  j = (k = xc.length) < (l = yc.length) ? k : l;

	  // Compare digit by digit.
	  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	  // Compare lengths.
	  return k == l ? 0 : k > l ^ a ? 1 : -1;
	}


	/*
	 * Check that n is a primitive number, an integer, and in range, otherwise throw.
	 */
	function intCheck(n, min, max, name) {
	  if (n < min || n > max || n !== mathfloor(n)) {
	    throw Error
	     (bignumberError + (name || 'Argument') + (typeof n == 'number'
	       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	       : ' not a primitive number: ') + String(n));
	  }
	}


	// Assumes finite n.
	function isOdd(n) {
	  var k = n.c.length - 1;
	  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	}


	function toExponential(str, e) {
	  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	   (e < 0 ? 'e' : 'e+') + e;
	}


	function toFixedPoint(str, e, z) {
	  var len, zs;

	  // Negative exponent?
	  if (e < 0) {

	    // Prepend zeros.
	    for (zs = z + '.'; ++e; zs += z);
	    str = zs + str;

	  // Positive exponent
	  } else {
	    len = str.length;

	    // Append zeros.
	    if (++e > len) {
	      for (zs = z, e -= len; --e; zs += z);
	      str += zs;
	    } else if (e < len) {
	      str = str.slice(0, e) + '.' + str.slice(e);
	    }
	  }

	  return str;
	}


	// EXPORT


	var BigNumber$1 = clone$1();

	var bignumber = /*#__PURE__*/Object.freeze({
		__proto__: null,
		BigNumber: BigNumber$1,
		'default': BigNumber$1
	});

	var require$$2$5 = /*@__PURE__*/getAugmentedNamespace(bignumber);

	/* eslint-disable */

	var decoder_asm = function decodeAsm (stdlib, foreign, buffer) {
	  'use asm';

	  // -- Imports

	  var heap = new stdlib.Uint8Array(buffer);
	  // var log = foreign.log
	  var pushInt = foreign.pushInt;
	  var pushInt32 = foreign.pushInt32;
	  var pushInt32Neg = foreign.pushInt32Neg;
	  var pushInt64 = foreign.pushInt64;
	  var pushInt64Neg = foreign.pushInt64Neg;
	  var pushFloat = foreign.pushFloat;
	  var pushFloatSingle = foreign.pushFloatSingle;
	  var pushFloatDouble = foreign.pushFloatDouble;
	  var pushTrue = foreign.pushTrue;
	  var pushFalse = foreign.pushFalse;
	  var pushUndefined = foreign.pushUndefined;
	  var pushNull = foreign.pushNull;
	  var pushInfinity = foreign.pushInfinity;
	  var pushInfinityNeg = foreign.pushInfinityNeg;
	  var pushNaN = foreign.pushNaN;
	  var pushNaNNeg = foreign.pushNaNNeg;

	  var pushArrayStart = foreign.pushArrayStart;
	  var pushArrayStartFixed = foreign.pushArrayStartFixed;
	  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32;
	  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64;
	  var pushObjectStart = foreign.pushObjectStart;
	  var pushObjectStartFixed = foreign.pushObjectStartFixed;
	  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32;
	  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64;

	  var pushByteString = foreign.pushByteString;
	  var pushByteStringStart = foreign.pushByteStringStart;
	  var pushUtf8String = foreign.pushUtf8String;
	  var pushUtf8StringStart = foreign.pushUtf8StringStart;

	  var pushSimpleUnassigned = foreign.pushSimpleUnassigned;

	  var pushTagStart = foreign.pushTagStart;
	  var pushTagStart4 = foreign.pushTagStart4;
	  var pushTagStart8 = foreign.pushTagStart8;
	  var pushTagUnassigned = foreign.pushTagUnassigned;

	  var pushBreak = foreign.pushBreak;

	  var pow = stdlib.Math.pow;

	  // -- Constants


	  // -- Mutable Variables

	  var offset = 0;
	  var inputLength = 0;
	  var code = 0;

	  // Decode a cbor string represented as Uint8Array
	  // which is allocated on the heap from 0 to inputLength
	  //
	  // input - Int
	  //
	  // Returns Code - Int,
	  // Success = 0
	  // Error > 0
	  function parse (input) {
	    input = input | 0;

	    offset = 0;
	    inputLength = input;

	    while ((offset | 0) < (inputLength | 0)) {
	      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0;

	      if ((code | 0) > 0) {
	        break
	      }
	    }

	    return code | 0
	  }

	  // -- Helper Function

	  function checkOffset (n) {
	    n = n | 0;

	    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {
	      return 0
	    }

	    return 1
	  }

	  function readUInt16 (n) {
	    n = n | 0;

	    return (
	      (heap[n | 0] << 8) | heap[(n + 1) | 0]
	    ) | 0
	  }

	  function readUInt32 (n) {
	    n = n | 0;

	    return (
	      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]
	    ) | 0
	  }

	  // -- Initial Byte Handlers

	  function INT_P (octet) {
	    octet = octet | 0;

	    pushInt(octet | 0);

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function UINT_P_8 (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushInt(heap[(offset + 1) | 0] | 0);

	    offset = (offset + 2) | 0;

	    return 0
	  }

	  function UINT_P_16 (octet) {
	    octet = octet | 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    pushInt(
	      readUInt16((offset + 1) | 0) | 0
	    );

	    offset = (offset + 3) | 0;

	    return 0
	  }

	  function UINT_P_32 (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushInt32(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0
	    );

	    offset = (offset + 5) | 0;

	    return 0
	  }

	  function UINT_P_64 (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushInt64(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0,
	      readUInt16((offset + 5) | 0) | 0,
	      readUInt16((offset + 7) | 0) | 0
	    );

	    offset = (offset + 9) | 0;

	    return 0
	  }

	  function INT_N (octet) {
	    octet = octet | 0;

	    pushInt((-1 - ((octet - 32) | 0)) | 0);

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function UINT_N_8 (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushInt(
	      (-1 - (heap[(offset + 1) | 0] | 0)) | 0
	    );

	    offset = (offset + 2) | 0;

	    return 0
	  }

	  function UINT_N_16 (octet) {
	    octet = octet | 0;

	    var val = 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    val = readUInt16((offset + 1) | 0) | 0;
	    pushInt((-1 - (val | 0)) | 0);

	    offset = (offset + 3) | 0;

	    return 0
	  }

	  function UINT_N_32 (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushInt32Neg(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0
	    );

	    offset = (offset + 5) | 0;

	    return 0
	  }

	  function UINT_N_64 (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushInt64Neg(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0,
	      readUInt16((offset + 5) | 0) | 0,
	      readUInt16((offset + 7) | 0) | 0
	    );

	    offset = (offset + 9) | 0;

	    return 0
	  }

	  function BYTE_STRING (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var step = 0;

	    step = (octet - 64) | 0;
	    if (checkOffset(step | 0) | 0) {
	      return 1
	    }

	    start = (offset + 1) | 0;
	    end = (((offset + 1) | 0) + (step | 0)) | 0;

	    pushByteString(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function BYTE_STRING_8 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    length = heap[(offset + 1) | 0] | 0;
	    start = (offset + 2) | 0;
	    end = (((offset + 2) | 0) + (length | 0)) | 0;

	    if (checkOffset((length + 1) | 0) | 0) {
	      return 1
	    }

	    pushByteString(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function BYTE_STRING_16 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    length = readUInt16((offset + 1) | 0) | 0;
	    start = (offset + 3) | 0;
	    end = (((offset + 3) | 0) + (length | 0)) | 0;


	    if (checkOffset((length + 2) | 0) | 0) {
	      return 1
	    }

	    pushByteString(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function BYTE_STRING_32 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    length = readUInt32((offset + 1) | 0) | 0;
	    start = (offset + 5) | 0;
	    end = (((offset + 5) | 0) + (length | 0)) | 0;


	    if (checkOffset((length + 4) | 0) | 0) {
	      return 1
	    }

	    pushByteString(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function BYTE_STRING_64 (octet) {
	    // NOT IMPLEMENTED
	    octet = octet | 0;

	    return 1
	  }

	  function BYTE_STRING_BREAK (octet) {
	    octet = octet | 0;

	    pushByteStringStart();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function UTF8_STRING (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var step = 0;

	    step = (octet - 96) | 0;

	    if (checkOffset(step | 0) | 0) {
	      return 1
	    }

	    start = (offset + 1) | 0;
	    end = (((offset + 1) | 0) + (step | 0)) | 0;

	    pushUtf8String(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function UTF8_STRING_8 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    length = heap[(offset + 1) | 0] | 0;
	    start = (offset + 2) | 0;
	    end = (((offset + 2) | 0) + (length | 0)) | 0;

	    if (checkOffset((length + 1) | 0) | 0) {
	      return 1
	    }

	    pushUtf8String(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function UTF8_STRING_16 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    length = readUInt16((offset + 1) | 0) | 0;
	    start = (offset + 3) | 0;
	    end = (((offset + 3) | 0) + (length | 0)) | 0;

	    if (checkOffset((length + 2) | 0) | 0) {
	      return 1
	    }

	    pushUtf8String(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function UTF8_STRING_32 (octet) {
	    octet = octet | 0;

	    var start = 0;
	    var end = 0;
	    var length = 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    length = readUInt32((offset + 1) | 0) | 0;
	    start = (offset + 5) | 0;
	    end = (((offset + 5) | 0) + (length | 0)) | 0;

	    if (checkOffset((length + 4) | 0) | 0) {
	      return 1
	    }

	    pushUtf8String(start | 0, end | 0);

	    offset = end | 0;

	    return 0
	  }

	  function UTF8_STRING_64 (octet) {
	    // NOT IMPLEMENTED
	    octet = octet | 0;

	    return 1
	  }

	  function UTF8_STRING_BREAK (octet) {
	    octet = octet | 0;

	    pushUtf8StringStart();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function ARRAY (octet) {
	    octet = octet | 0;

	    pushArrayStartFixed((octet - 128) | 0);

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function ARRAY_8 (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushArrayStartFixed(heap[(offset + 1) | 0] | 0);

	    offset = (offset + 2) | 0;

	    return 0
	  }

	  function ARRAY_16 (octet) {
	    octet = octet | 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    pushArrayStartFixed(
	      readUInt16((offset + 1) | 0) | 0
	    );

	    offset = (offset + 3) | 0;

	    return 0
	  }

	  function ARRAY_32 (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushArrayStartFixed32(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0
	    );

	    offset = (offset + 5) | 0;

	    return 0
	  }

	  function ARRAY_64 (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushArrayStartFixed64(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0,
	      readUInt16((offset + 5) | 0) | 0,
	      readUInt16((offset + 7) | 0) | 0
	    );

	    offset = (offset + 9) | 0;

	    return 0
	  }

	  function ARRAY_BREAK (octet) {
	    octet = octet | 0;

	    pushArrayStart();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function MAP (octet) {
	    octet = octet | 0;

	    var step = 0;

	    step = (octet - 160) | 0;

	    if (checkOffset(step | 0) | 0) {
	      return 1
	    }

	    pushObjectStartFixed(step | 0);

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function MAP_8 (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushObjectStartFixed(heap[(offset + 1) | 0] | 0);

	    offset = (offset + 2) | 0;

	    return 0
	  }

	  function MAP_16 (octet) {
	    octet = octet | 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    pushObjectStartFixed(
	      readUInt16((offset + 1) | 0) | 0
	    );

	    offset = (offset + 3) | 0;

	    return 0
	  }

	  function MAP_32 (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushObjectStartFixed32(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0
	    );

	    offset = (offset + 5) | 0;

	    return 0
	  }

	  function MAP_64 (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushObjectStartFixed64(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0,
	      readUInt16((offset + 5) | 0) | 0,
	      readUInt16((offset + 7) | 0) | 0
	    );

	    offset = (offset + 9) | 0;

	    return 0
	  }

	  function MAP_BREAK (octet) {
	    octet = octet | 0;

	    pushObjectStart();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function TAG_KNOWN (octet) {
	    octet = octet | 0;

	    pushTagStart((octet - 192| 0) | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BIGNUM_POS (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BIGNUM_NEG (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_FRAC (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BIGNUM_FLOAT (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_UNASSIGNED (octet) {
	    octet = octet | 0;

	    pushTagStart((octet - 192| 0) | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BASE64_URL (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BASE64 (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_BASE16 (octet) {
	    octet = octet | 0;

	    pushTagStart(octet | 0);

	    offset = (offset + 1 | 0);

	    return 0
	  }

	  function TAG_MORE_1 (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushTagStart(heap[(offset + 1) | 0] | 0);

	    offset = (offset + 2 | 0);

	    return 0
	  }

	  function TAG_MORE_2 (octet) {
	    octet = octet | 0;

	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    pushTagStart(
	      readUInt16((offset + 1) | 0) | 0
	    );

	    offset = (offset + 3 | 0);

	    return 0
	  }

	  function TAG_MORE_4 (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushTagStart4(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0
	    );

	    offset = (offset + 5 | 0);

	    return 0
	  }

	  function TAG_MORE_8 (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushTagStart8(
	      readUInt16((offset + 1) | 0) | 0,
	      readUInt16((offset + 3) | 0) | 0,
	      readUInt16((offset + 5) | 0) | 0,
	      readUInt16((offset + 7) | 0) | 0
	    );

	    offset = (offset + 9 | 0);

	    return 0
	  }

	  function SIMPLE_UNASSIGNED (octet) {
	    octet = octet | 0;

	    pushSimpleUnassigned(((octet | 0) - 224) | 0);

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function SIMPLE_FALSE (octet) {
	    octet = octet | 0;

	    pushFalse();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function SIMPLE_TRUE (octet) {
	    octet = octet | 0;

	    pushTrue();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function SIMPLE_NULL (octet) {
	    octet = octet | 0;

	    pushNull();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function SIMPLE_UNDEFINED (octet) {
	    octet = octet | 0;

	    pushUndefined();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  function SIMPLE_BYTE (octet) {
	    octet = octet | 0;

	    if (checkOffset(1) | 0) {
	      return 1
	    }

	    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0);

	    offset = (offset + 2)  | 0;

	    return 0
	  }

	  function SIMPLE_FLOAT_HALF (octet) {
	    octet = octet | 0;

	    var f = 0;
	    var g = 0;
	    var sign = 1.0;
	    var exp = 0.0;
	    var mant = 0.0;
	    var r = 0.0;
	    if (checkOffset(2) | 0) {
	      return 1
	    }

	    f = heap[(offset + 1) | 0] | 0;
	    g = heap[(offset + 2) | 0] | 0;

	    if ((f | 0) & 0x80) {
	      sign = -1.0;
	    }

	    exp = +(((f | 0) & 0x7C) >> 2);
	    mant = +((((f | 0) & 0x03) << 8) | g);

	    if (+exp == 0.0) {
	      pushFloat(+(
	        (+sign) * +5.9604644775390625e-8 * (+mant)
	      ));
	    } else if (+exp == 31.0) {
	      if (+sign == 1.0) {
	        if (+mant > 0.0) {
	          pushNaN();
	        } else {
	          pushInfinity();
	        }
	      } else {
	        if (+mant > 0.0) {
	          pushNaNNeg();
	        } else {
	          pushInfinityNeg();
	        }
	      }
	    } else {
	      pushFloat(+(
	        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)
	      ));
	    }

	    offset = (offset + 3) | 0;

	    return 0
	  }

	  function SIMPLE_FLOAT_SINGLE (octet) {
	    octet = octet | 0;

	    if (checkOffset(4) | 0) {
	      return 1
	    }

	    pushFloatSingle(
	      heap[(offset + 1) | 0] | 0,
	      heap[(offset + 2) | 0] | 0,
	      heap[(offset + 3) | 0] | 0,
	      heap[(offset + 4) | 0] | 0
	    );

	    offset = (offset + 5) | 0;

	    return 0
	  }

	  function SIMPLE_FLOAT_DOUBLE (octet) {
	    octet = octet | 0;

	    if (checkOffset(8) | 0) {
	      return 1
	    }

	    pushFloatDouble(
	      heap[(offset + 1) | 0] | 0,
	      heap[(offset + 2) | 0] | 0,
	      heap[(offset + 3) | 0] | 0,
	      heap[(offset + 4) | 0] | 0,
	      heap[(offset + 5) | 0] | 0,
	      heap[(offset + 6) | 0] | 0,
	      heap[(offset + 7) | 0] | 0,
	      heap[(offset + 8) | 0] | 0
	    );

	    offset = (offset + 9) | 0;

	    return 0
	  }

	  function ERROR (octet) {
	    octet = octet | 0;

	    return 1
	  }

	  function BREAK (octet) {
	    octet = octet | 0;

	    pushBreak();

	    offset = (offset + 1) | 0;

	    return 0
	  }

	  // -- Jump Table

	  var jumpTable = [
	    // Integer 0x00..0x17 (0..23)
	    INT_P, // 0x00
	    INT_P, // 0x01
	    INT_P, // 0x02
	    INT_P, // 0x03
	    INT_P, // 0x04
	    INT_P, // 0x05
	    INT_P, // 0x06
	    INT_P, // 0x07
	    INT_P, // 0x08
	    INT_P, // 0x09
	    INT_P, // 0x0A
	    INT_P, // 0x0B
	    INT_P, // 0x0C
	    INT_P, // 0x0D
	    INT_P, // 0x0E
	    INT_P, // 0x0F
	    INT_P, // 0x10
	    INT_P, // 0x11
	    INT_P, // 0x12
	    INT_P, // 0x13
	    INT_P, // 0x14
	    INT_P, // 0x15
	    INT_P, // 0x16
	    INT_P, // 0x17
	    // Unsigned integer (one-byte uint8_t follows)
	    UINT_P_8, // 0x18
	    // Unsigned integer (two-byte uint16_t follows)
	    UINT_P_16, // 0x19
	    // Unsigned integer (four-byte uint32_t follows)
	    UINT_P_32, // 0x1a
	    // Unsigned integer (eight-byte uint64_t follows)
	    UINT_P_64, // 0x1b
	    ERROR, // 0x1c
	    ERROR, // 0x1d
	    ERROR, // 0x1e
	    ERROR, // 0x1f
	    // Negative integer -1-0x00..-1-0x17 (-1..-24)
	    INT_N, // 0x20
	    INT_N, // 0x21
	    INT_N, // 0x22
	    INT_N, // 0x23
	    INT_N, // 0x24
	    INT_N, // 0x25
	    INT_N, // 0x26
	    INT_N, // 0x27
	    INT_N, // 0x28
	    INT_N, // 0x29
	    INT_N, // 0x2A
	    INT_N, // 0x2B
	    INT_N, // 0x2C
	    INT_N, // 0x2D
	    INT_N, // 0x2E
	    INT_N, // 0x2F
	    INT_N, // 0x30
	    INT_N, // 0x31
	    INT_N, // 0x32
	    INT_N, // 0x33
	    INT_N, // 0x34
	    INT_N, // 0x35
	    INT_N, // 0x36
	    INT_N, // 0x37
	    // Negative integer -1-n (one-byte uint8_t for n follows)
	    UINT_N_8, // 0x38
	    // Negative integer -1-n (two-byte uint16_t for n follows)
	    UINT_N_16, // 0x39
	    // Negative integer -1-n (four-byte uint32_t for nfollows)
	    UINT_N_32, // 0x3a
	    // Negative integer -1-n (eight-byte uint64_t for n follows)
	    UINT_N_64, // 0x3b
	    ERROR, // 0x3c
	    ERROR, // 0x3d
	    ERROR, // 0x3e
	    ERROR, // 0x3f
	    // byte string (0x00..0x17 bytes follow)
	    BYTE_STRING, // 0x40
	    BYTE_STRING, // 0x41
	    BYTE_STRING, // 0x42
	    BYTE_STRING, // 0x43
	    BYTE_STRING, // 0x44
	    BYTE_STRING, // 0x45
	    BYTE_STRING, // 0x46
	    BYTE_STRING, // 0x47
	    BYTE_STRING, // 0x48
	    BYTE_STRING, // 0x49
	    BYTE_STRING, // 0x4A
	    BYTE_STRING, // 0x4B
	    BYTE_STRING, // 0x4C
	    BYTE_STRING, // 0x4D
	    BYTE_STRING, // 0x4E
	    BYTE_STRING, // 0x4F
	    BYTE_STRING, // 0x50
	    BYTE_STRING, // 0x51
	    BYTE_STRING, // 0x52
	    BYTE_STRING, // 0x53
	    BYTE_STRING, // 0x54
	    BYTE_STRING, // 0x55
	    BYTE_STRING, // 0x56
	    BYTE_STRING, // 0x57
	    // byte string (one-byte uint8_t for n, and then n bytes follow)
	    BYTE_STRING_8, // 0x58
	    // byte string (two-byte uint16_t for n, and then n bytes follow)
	    BYTE_STRING_16, // 0x59
	    // byte string (four-byte uint32_t for n, and then n bytes follow)
	    BYTE_STRING_32, // 0x5a
	    // byte string (eight-byte uint64_t for n, and then n bytes follow)
	    BYTE_STRING_64, // 0x5b
	    ERROR, // 0x5c
	    ERROR, // 0x5d
	    ERROR, // 0x5e
	    // byte string, byte strings follow, terminated by "break"
	    BYTE_STRING_BREAK, // 0x5f
	    // UTF-8 string (0x00..0x17 bytes follow)
	    UTF8_STRING, // 0x60
	    UTF8_STRING, // 0x61
	    UTF8_STRING, // 0x62
	    UTF8_STRING, // 0x63
	    UTF8_STRING, // 0x64
	    UTF8_STRING, // 0x65
	    UTF8_STRING, // 0x66
	    UTF8_STRING, // 0x67
	    UTF8_STRING, // 0x68
	    UTF8_STRING, // 0x69
	    UTF8_STRING, // 0x6A
	    UTF8_STRING, // 0x6B
	    UTF8_STRING, // 0x6C
	    UTF8_STRING, // 0x6D
	    UTF8_STRING, // 0x6E
	    UTF8_STRING, // 0x6F
	    UTF8_STRING, // 0x70
	    UTF8_STRING, // 0x71
	    UTF8_STRING, // 0x72
	    UTF8_STRING, // 0x73
	    UTF8_STRING, // 0x74
	    UTF8_STRING, // 0x75
	    UTF8_STRING, // 0x76
	    UTF8_STRING, // 0x77
	    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)
	    UTF8_STRING_8, // 0x78
	    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)
	    UTF8_STRING_16, // 0x79
	    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)
	    UTF8_STRING_32, // 0x7a
	    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)
	    UTF8_STRING_64, // 0x7b
	    // UTF-8 string, UTF-8 strings follow, terminated by "break"
	    ERROR, // 0x7c
	    ERROR, // 0x7d
	    ERROR, // 0x7e
	    UTF8_STRING_BREAK, // 0x7f
	    // array (0x00..0x17 data items follow)
	    ARRAY, // 0x80
	    ARRAY, // 0x81
	    ARRAY, // 0x82
	    ARRAY, // 0x83
	    ARRAY, // 0x84
	    ARRAY, // 0x85
	    ARRAY, // 0x86
	    ARRAY, // 0x87
	    ARRAY, // 0x88
	    ARRAY, // 0x89
	    ARRAY, // 0x8A
	    ARRAY, // 0x8B
	    ARRAY, // 0x8C
	    ARRAY, // 0x8D
	    ARRAY, // 0x8E
	    ARRAY, // 0x8F
	    ARRAY, // 0x90
	    ARRAY, // 0x91
	    ARRAY, // 0x92
	    ARRAY, // 0x93
	    ARRAY, // 0x94
	    ARRAY, // 0x95
	    ARRAY, // 0x96
	    ARRAY, // 0x97
	    // array (one-byte uint8_t fo, and then n data items follow)
	    ARRAY_8, // 0x98
	    // array (two-byte uint16_t for n, and then n data items follow)
	    ARRAY_16, // 0x99
	    // array (four-byte uint32_t for n, and then n data items follow)
	    ARRAY_32, // 0x9a
	    // array (eight-byte uint64_t for n, and then n data items follow)
	    ARRAY_64, // 0x9b
	    // array, data items follow, terminated by "break"
	    ERROR, // 0x9c
	    ERROR, // 0x9d
	    ERROR, // 0x9e
	    ARRAY_BREAK, // 0x9f
	    // map (0x00..0x17 pairs of data items follow)
	    MAP, // 0xa0
	    MAP, // 0xa1
	    MAP, // 0xa2
	    MAP, // 0xa3
	    MAP, // 0xa4
	    MAP, // 0xa5
	    MAP, // 0xa6
	    MAP, // 0xa7
	    MAP, // 0xa8
	    MAP, // 0xa9
	    MAP, // 0xaA
	    MAP, // 0xaB
	    MAP, // 0xaC
	    MAP, // 0xaD
	    MAP, // 0xaE
	    MAP, // 0xaF
	    MAP, // 0xb0
	    MAP, // 0xb1
	    MAP, // 0xb2
	    MAP, // 0xb3
	    MAP, // 0xb4
	    MAP, // 0xb5
	    MAP, // 0xb6
	    MAP, // 0xb7
	    // map (one-byte uint8_t for n, and then n pairs of data items follow)
	    MAP_8, // 0xb8
	    // map (two-byte uint16_t for n, and then n pairs of data items follow)
	    MAP_16, // 0xb9
	    // map (four-byte uint32_t for n, and then n pairs of data items follow)
	    MAP_32, // 0xba
	    // map (eight-byte uint64_t for n, and then n pairs of data items follow)
	    MAP_64, // 0xbb
	    ERROR, // 0xbc
	    ERROR, // 0xbd
	    ERROR, // 0xbe
	    // map, pairs of data items follow, terminated by "break"
	    MAP_BREAK, // 0xbf
	    // Text-based date/time (data item follows; see Section 2.4.1)
	    TAG_KNOWN, // 0xc0
	    // Epoch-based date/time (data item follows; see Section 2.4.1)
	    TAG_KNOWN, // 0xc1
	    // Positive bignum (data item "byte string" follows)
	    TAG_KNOWN, // 0xc2
	    // Negative bignum (data item "byte string" follows)
	    TAG_KNOWN, // 0xc3
	    // Decimal Fraction (data item "array" follows; see Section 2.4.3)
	    TAG_KNOWN, // 0xc4
	    // Bigfloat (data item "array" follows; see Section 2.4.3)
	    TAG_KNOWN, // 0xc5
	    // (tagged item)
	    TAG_UNASSIGNED, // 0xc6
	    TAG_UNASSIGNED, // 0xc7
	    TAG_UNASSIGNED, // 0xc8
	    TAG_UNASSIGNED, // 0xc9
	    TAG_UNASSIGNED, // 0xca
	    TAG_UNASSIGNED, // 0xcb
	    TAG_UNASSIGNED, // 0xcc
	    TAG_UNASSIGNED, // 0xcd
	    TAG_UNASSIGNED, // 0xce
	    TAG_UNASSIGNED, // 0xcf
	    TAG_UNASSIGNED, // 0xd0
	    TAG_UNASSIGNED, // 0xd1
	    TAG_UNASSIGNED, // 0xd2
	    TAG_UNASSIGNED, // 0xd3
	    TAG_UNASSIGNED, // 0xd4
	    // Expected Conversion (data item follows; see Section 2.4.4.2)
	    TAG_UNASSIGNED, // 0xd5
	    TAG_UNASSIGNED, // 0xd6
	    TAG_UNASSIGNED, // 0xd7
	    // (more tagged items, 1/2/4/8 bytes and then a data item follow)
	    TAG_MORE_1, // 0xd8
	    TAG_MORE_2, // 0xd9
	    TAG_MORE_4, // 0xda
	    TAG_MORE_8, // 0xdb
	    ERROR, // 0xdc
	    ERROR, // 0xdd
	    ERROR, // 0xde
	    ERROR, // 0xdf
	    // (simple value)
	    SIMPLE_UNASSIGNED, // 0xe0
	    SIMPLE_UNASSIGNED, // 0xe1
	    SIMPLE_UNASSIGNED, // 0xe2
	    SIMPLE_UNASSIGNED, // 0xe3
	    SIMPLE_UNASSIGNED, // 0xe4
	    SIMPLE_UNASSIGNED, // 0xe5
	    SIMPLE_UNASSIGNED, // 0xe6
	    SIMPLE_UNASSIGNED, // 0xe7
	    SIMPLE_UNASSIGNED, // 0xe8
	    SIMPLE_UNASSIGNED, // 0xe9
	    SIMPLE_UNASSIGNED, // 0xea
	    SIMPLE_UNASSIGNED, // 0xeb
	    SIMPLE_UNASSIGNED, // 0xec
	    SIMPLE_UNASSIGNED, // 0xed
	    SIMPLE_UNASSIGNED, // 0xee
	    SIMPLE_UNASSIGNED, // 0xef
	    SIMPLE_UNASSIGNED, // 0xf0
	    SIMPLE_UNASSIGNED, // 0xf1
	    SIMPLE_UNASSIGNED, // 0xf2
	    SIMPLE_UNASSIGNED, // 0xf3
	    // False
	    SIMPLE_FALSE, // 0xf4
	    // True
	    SIMPLE_TRUE, // 0xf5
	    // Null
	    SIMPLE_NULL, // 0xf6
	    // Undefined
	    SIMPLE_UNDEFINED, // 0xf7
	    // (simple value, one byte follows)
	    SIMPLE_BYTE, // 0xf8
	    // Half-Precision Float (two-byte IEEE 754)
	    SIMPLE_FLOAT_HALF, // 0xf9
	    // Single-Precision Float (four-byte IEEE 754)
	    SIMPLE_FLOAT_SINGLE, // 0xfa
	    // Double-Precision Float (eight-byte IEEE 754)
	    SIMPLE_FLOAT_DOUBLE, // 0xfb
	    ERROR, // 0xfc
	    ERROR, // 0xfd
	    ERROR, // 0xfe
	    // "break" stop code
	    BREAK // 0xff
	  ];

	  // --

	  return {
	    parse: parse
	  }
	};

	var utils$v = {};

	var constants$5 = {};

	const Bignumber$2 = require$$2$5.BigNumber;

	constants$5.MT = {
	  POS_INT: 0,
	  NEG_INT: 1,
	  BYTE_STRING: 2,
	  UTF8_STRING: 3,
	  ARRAY: 4,
	  MAP: 5,
	  TAG: 6,
	  SIMPLE_FLOAT: 7
	};

	constants$5.TAG = {
	  DATE_STRING: 0,
	  DATE_EPOCH: 1,
	  POS_BIGINT: 2,
	  NEG_BIGINT: 3,
	  DECIMAL_FRAC: 4,
	  BIGFLOAT: 5,
	  BASE64URL_EXPECTED: 21,
	  BASE64_EXPECTED: 22,
	  BASE16_EXPECTED: 23,
	  CBOR: 24,
	  URI: 32,
	  BASE64URL: 33,
	  BASE64: 34,
	  REGEXP: 35,
	  MIME: 36
	};

	constants$5.NUMBYTES = {
	  ZERO: 0,
	  ONE: 24,
	  TWO: 25,
	  FOUR: 26,
	  EIGHT: 27,
	  INDEFINITE: 31
	};

	constants$5.SIMPLE = {
	  FALSE: 20,
	  TRUE: 21,
	  NULL: 22,
	  UNDEFINED: 23
	};

	constants$5.SYMS = {
	  NULL: Symbol('null'),
	  UNDEFINED: Symbol('undef'),
	  PARENT: Symbol('parent'),
	  BREAK: Symbol('break'),
	  STREAM: Symbol('stream')
	};

	constants$5.SHIFT32 = Math.pow(2, 32);
	constants$5.SHIFT16 = Math.pow(2, 16);

	constants$5.MAX_SAFE_HIGH = 0x1fffff;
	constants$5.NEG_ONE = new Bignumber$2(-1);
	constants$5.TEN = new Bignumber$2(10);
	constants$5.TWO = new Bignumber$2(2);

	constants$5.PARENT = {
	  ARRAY: 0,
	  OBJECT: 1,
	  MAP: 2,
	  TAG: 3,
	  BYTE_STRING: 4,
	  UTF8_STRING: 5
	};

	(function (exports) {

	const { Buffer } = require$$0__default["default"];
	const Bignumber = require$$2$5.BigNumber;

	const constants = constants$5;
	const SHIFT32 = constants.SHIFT32;
	const SHIFT16 = constants.SHIFT16;
	const MAX_SAFE_HIGH = 0x1fffff;

	exports.parseHalf = function parseHalf (buf) {
	  var exp, mant, sign;
	  sign = buf[0] & 0x80 ? -1 : 1;
	  exp = (buf[0] & 0x7C) >> 2;
	  mant = ((buf[0] & 0x03) << 8) | buf[1];
	  if (!exp) {
	    return sign * 5.9604644775390625e-8 * mant
	  } else if (exp === 0x1f) {
	    return sign * (mant ? 0 / 0 : 2e308)
	  } else {
	    return sign * Math.pow(2, exp - 25) * (1024 + mant)
	  }
	};

	function toHex (n) {
	  if (n < 16) {
	    return '0' + n.toString(16)
	  }

	  return n.toString(16)
	}

	exports.arrayBufferToBignumber = function (buf) {
	  const len = buf.byteLength;
	  let res = '';
	  for (let i = 0; i < len; i++) {
	    res += toHex(buf[i]);
	  }

	  return new Bignumber(res, 16)
	};

	// convert an Object into a Map
	exports.buildMap = (obj) => {
	  const res = new Map();
	  const keys = Object.keys(obj);
	  const length = keys.length;
	  for (let i = 0; i < length; i++) {
	    res.set(keys[i], obj[keys[i]]);
	  }
	  return res
	};

	exports.buildInt32 = (f, g) => {
	  return f * SHIFT16 + g
	};

	exports.buildInt64 = (f1, f2, g1, g2) => {
	  const f = exports.buildInt32(f1, f2);
	  const g = exports.buildInt32(g1, g2);

	  if (f > MAX_SAFE_HIGH) {
	    return new Bignumber(f).times(SHIFT32).plus(g)
	  } else {
	    return (f * SHIFT32) + g
	  }
	};

	exports.writeHalf = function writeHalf (buf, half) {
	  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught

	  // HACK: everyone settle in.  This isn't going to be pretty.
	  // Translate cn-cbor's C code (from Carsten Borman):

	  // uint32_t be32;
	  // uint16_t be16, u16;
	  // union {
	  //   float f;
	  //   uint32_t u;
	  // } u32;
	  // u32.f = float_val;

	  const u32 = Buffer.allocUnsafe(4);
	  u32.writeFloatBE(half, 0);
	  const u = u32.readUInt32BE(0);

	  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */

	  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion
	  if ((u & 0x1FFF) !== 0) {
	    return false
	  }

	  //   int s16 = (u32.u >> 16) & 0x8000;
	  //   int exp = (u32.u >> 23) & 0xff;
	  //   int mant = u32.u & 0x7fffff;

	  var s16 = (u >> 16) & 0x8000; // top bit is sign
	  const exp = (u >> 23) & 0xff; // then 5 bits of exponent
	  const mant = u & 0x7fffff;

	  //   if (exp == 0 && mant == 0)
	  //     ;              /* 0.0, -0.0 */

	  // hildjj: zeros already handled.  Assert if you don't believe me.

	  //   else if (exp >= 113 && exp <= 142) /* normalized */
	  //     s16 += ((exp - 112) << 10) + (mant >> 13);
	  if ((exp >= 113) && (exp <= 142)) {
	    s16 += ((exp - 112) << 10) + (mant >> 13);

	  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
	  //     if (mant & ((1 << (126 - exp)) - 1))
	  //       goto float32;         /* loss of precision */
	  //     s16 += ((mant + 0x800000) >> (126 - exp));
	  } else if ((exp >= 103) && (exp < 113)) {
	    if (mant & ((1 << (126 - exp)) - 1)) {
	      return false
	    }
	    s16 += ((mant + 0x800000) >> (126 - exp));

	    //   } else if (exp == 255 && mant == 0) { /* Inf */
	    //     s16 += 0x7c00;

	    // hildjj: Infinity already handled

	  //   } else
	  //     goto float32;           /* loss of range */
	  } else {
	    return false
	  }

	  //   ensure_writable(3);
	  //   u16 = s16;
	  //   be16 = hton16p((const uint8_t*)&u16);
	  buf.writeUInt16BE(s16, 0);
	  return true
	};

	exports.keySorter = function (a, b) {
	  var lenA = a[0].byteLength;
	  var lenB = b[0].byteLength;

	  if (lenA > lenB) {
	    return 1
	  }

	  if (lenB > lenA) {
	    return -1
	  }

	  return a[0].compare(b[0])
	};

	// Adapted from http://www.2ality.com/2012/03/signedzero.html
	exports.isNegativeZero = (x) => {
	  return x === 0 && (1 / x < 0)
	};

	exports.nextPowerOf2 = (n) => {
	  let count = 0;
	  // First n in the below condition is for
	  // the case where n is 0
	  if (n && !(n & (n - 1))) {
	    return n
	  }

	  while (n !== 0) {
	    n >>= 1;
	    count += 1;
	  }

	  return 1 << count
	};
	}(utils$v));

	const constants$4 = constants$5;
	const MT$1 = constants$4.MT;
	const SIMPLE = constants$4.SIMPLE;
	const SYMS$1 = constants$4.SYMS;

	/**
	 * A CBOR Simple Value that does not map onto a known constant.
	 */
	class Simple$1 {
	  /**
	   * Creates an instance of Simple.
	   *
	   * @param {integer} value - the simple value's integer value
	   */
	  constructor (value) {
	    if (typeof value !== 'number') {
	      throw new Error('Invalid Simple type: ' + (typeof value))
	    }
	    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {
	      throw new Error('value must be a small positive integer: ' + value)
	    }
	    this.value = value;
	  }

	  /**
	   * Debug string for simple value
	   *
	   * @returns {string} simple(value)
	   */
	  toString () {
	    return 'simple(' + this.value + ')'
	  }

	  /**
	   * Debug string for simple value
	   *
	   * @returns {string} simple(value)
	   */
	  inspect () {
	    return 'simple(' + this.value + ')'
	  }

	  /**
	   * Push the simple value onto the CBOR stream
	   *
	   * @param {cbor.Encoder} gen The generator to push onto
	   * @returns {number}
	   */
	  encodeCBOR (gen) {
	    return gen._pushInt(this.value, MT$1.SIMPLE_FLOAT)
	  }

	  /**
	   * Is the given object a Simple?
	   *
	   * @param {any} obj - object to test
	   * @returns {bool} - is it Simple?
	   */
	  static isSimple (obj) {
	    return obj instanceof Simple$1
	  }

	  /**
	   * Decode from the CBOR additional information into a JavaScript value.
	   * If the CBOR item has no parent, return a "safe" symbol instead of
	   * `null` or `undefined`, so that the value can be passed through a
	   * stream in object mode.
	   *
	   * @param {Number} val - the CBOR additional info to convert
	   * @param {bool} hasParent - Does the CBOR item have a parent?
	   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
	   */
	  static decode (val, hasParent) {
	    if (hasParent == null) {
	      hasParent = true;
	    }
	    switch (val) {
	      case SIMPLE.FALSE:
	        return false
	      case SIMPLE.TRUE:
	        return true
	      case SIMPLE.NULL:
	        if (hasParent) {
	          return null
	        } else {
	          return SYMS$1.NULL
	        }
	      case SIMPLE.UNDEFINED:
	        if (hasParent) {
	          return undefined
	        } else {
	          return SYMS$1.UNDEFINED
	        }
	      case -1:
	        if (!hasParent) {
	          throw new Error('Invalid BREAK')
	        }
	        return SYMS$1.BREAK
	      default:
	        return new Simple$1(val)
	    }
	  }
	}

	var simple = Simple$1;

	/**
	 * A CBOR tagged item, where the tag does not have semantics specified at the
	 * moment, or those semantics threw an error during parsing. Typically this will
	 * be an extension point you're not yet expecting.
	 */
	class Tagged$1 {
	  /**
	   * Creates an instance of Tagged.
	   *
	   * @param {Number} tag - the number of the tag
	   * @param {any} value - the value inside the tag
	   * @param {Error} err - the error that was thrown parsing the tag, or null
	   */
	  constructor (tag, value, err) {
	    this.tag = tag;
	    this.value = value;
	    this.err = err;
	    if (typeof this.tag !== 'number') {
	      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')
	    }
	    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {
	      throw new Error('Tag must be a positive integer: ' + this.tag)
	    }
	  }

	  /**
	   * Convert to a String
	   *
	   * @returns {String} string of the form '1(2)'
	   */
	  toString () {
	    return `${this.tag}(${JSON.stringify(this.value)})`
	  }

	  /**
	   * Push the simple value onto the CBOR stream
	   *
	   * @param {cbor.Encoder} gen The generator to push onto
	   * @returns {number}
	   */
	  encodeCBOR (gen) {
	    gen._pushTag(this.tag);
	    return gen.pushAny(this.value)
	  }

	  /**
	   * If we have a converter for this type, do the conversion.  Some converters
	   * are built-in.  Additional ones can be passed in.  If you want to remove
	   * a built-in converter, pass a converter in whose value is 'null' instead
	   * of a function.
	   *
	   * @param {Object} converters - keys in the object are a tag number, the value
	   *   is a function that takes the decoded CBOR and returns a JavaScript value
	   *   of the appropriate type.  Throw an exception in the function on errors.
	   * @returns {any} - the converted item
	   */
	  convert (converters) {
	    var er, f;
	    f = converters != null ? converters[this.tag] : undefined;
	    if (typeof f !== 'function') {
	      f = Tagged$1['_tag' + this.tag];
	      if (typeof f !== 'function') {
	        return this
	      }
	    }
	    try {
	      return f.call(Tagged$1, this.value)
	    } catch (error) {
	      er = error;
	      this.err = er;
	      return this
	    }
	  }
	}

	var tagged = Tagged$1;

	const { URL: URL$3, URLSearchParams: URLSearchParams$1, format: format$5 } = Url__default["default"];

	// https://github.com/nodejs/node/issues/12682
	const defaultBase$1 = 'http://localhost';

	class URLWithLegacySupport$2 extends URL$3 {
	    constructor(url = '', base = defaultBase$1) {
	        super(url, base);
	        this.path = this.pathname + this.search;
	        this.auth =
	            this.username && this.password ?
	                this.username + ':' + this.password :
	                null;
	        this.query =
	            this.search && this.search.startsWith('?') ?
	                this.search.slice(1) :
	                null;
	    }

	    format() {
	        return this.toString();
	    }
	}

	var url = {
	    URLWithLegacySupport: URLWithLegacySupport$2,
	    URLSearchParams: URLSearchParams$1,
	    format: format$5,
	    defaultBase: defaultBase$1
	};

	const { URLWithLegacySupport: URLWithLegacySupport$1, format: format$4 } = url;

	var relative$3 = (url, location = {}, protocolMap = {}, defaultProtocol) => {
	    let protocol = location.protocol ?
	        location.protocol.replace(':', '') :
	        'http';

	    // Check protocol map
	    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
	    let urlParsed;

	    try {
	        urlParsed = new URLWithLegacySupport$1(url);
	    } catch (err) {
	        urlParsed = {};
	    }

	    const base = Object.assign({}, location, {
	        protocol: protocol || urlParsed.protocol,
	        host: location.host || urlParsed.host
	    });

	    return new URLWithLegacySupport$1(url, format$4(base)).toString();
	};

	const {
	    URLWithLegacySupport,
	    format: format$3,
	    URLSearchParams,
	    defaultBase
	} = url;
	const relative$2 = relative$3;

	var isoUrl = {
	    URL: URLWithLegacySupport,
	    URLSearchParams,
	    format: format$3,
	    relative: relative$2,
	    defaultBase
	};

	const { Buffer: Buffer$3 } = require$$0__default["default"];
	const ieee754 = ieee754$1;
	const Bignumber$1 = require$$2$5.BigNumber;

	const parser = decoder_asm;
	const utils$u = utils$v;
	const c$3 = constants$5;
	const Simple = simple;
	const Tagged = tagged;
	const { URL: URL$2 } = isoUrl;

	/**
	 * Transform binary cbor data into JavaScript objects.
	 */
	class Decoder$3 {
	  /**
	   * @param {Object} [opts={}]
	   * @param {number} [opts.size=65536] - Size of the allocated heap.
	   */
	  constructor (opts) {
	    opts = opts || {};

	    if (!opts.size || opts.size < 0x10000) {
	      opts.size = 0x10000;
	    } else {
	      // Ensure the size is a power of 2
	      opts.size = utils$u.nextPowerOf2(opts.size);
	    }

	    // Heap use to share the input with the parser
	    this._heap = new ArrayBuffer(opts.size);
	    this._heap8 = new Uint8Array(this._heap);
	    this._buffer = Buffer$3.from(this._heap);

	    this._reset();

	    // Known tags
	    this._knownTags = Object.assign({
	      0: (val) => new Date(val),
	      1: (val) => new Date(val * 1000),
	      2: (val) => utils$u.arrayBufferToBignumber(val),
	      3: (val) => c$3.NEG_ONE.minus(utils$u.arrayBufferToBignumber(val)),
	      4: (v) => {
	        // const v = new Uint8Array(val)
	        return c$3.TEN.pow(v[0]).times(v[1])
	      },
	      5: (v) => {
	        // const v = new Uint8Array(val)
	        return c$3.TWO.pow(v[0]).times(v[1])
	      },
	      32: (val) => new URL$2(val),
	      35: (val) => new RegExp(val)
	    }, opts.tags);

	    // Initialize asm based parser
	    this.parser = parser(commonjsGlobal, {
	      // eslint-disable-next-line no-console
	      log: console.log.bind(console),
	      pushInt: this.pushInt.bind(this),
	      pushInt32: this.pushInt32.bind(this),
	      pushInt32Neg: this.pushInt32Neg.bind(this),
	      pushInt64: this.pushInt64.bind(this),
	      pushInt64Neg: this.pushInt64Neg.bind(this),
	      pushFloat: this.pushFloat.bind(this),
	      pushFloatSingle: this.pushFloatSingle.bind(this),
	      pushFloatDouble: this.pushFloatDouble.bind(this),
	      pushTrue: this.pushTrue.bind(this),
	      pushFalse: this.pushFalse.bind(this),
	      pushUndefined: this.pushUndefined.bind(this),
	      pushNull: this.pushNull.bind(this),
	      pushInfinity: this.pushInfinity.bind(this),
	      pushInfinityNeg: this.pushInfinityNeg.bind(this),
	      pushNaN: this.pushNaN.bind(this),
	      pushNaNNeg: this.pushNaNNeg.bind(this),
	      pushArrayStart: this.pushArrayStart.bind(this),
	      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),
	      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),
	      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),
	      pushObjectStart: this.pushObjectStart.bind(this),
	      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),
	      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),
	      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),
	      pushByteString: this.pushByteString.bind(this),
	      pushByteStringStart: this.pushByteStringStart.bind(this),
	      pushUtf8String: this.pushUtf8String.bind(this),
	      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),
	      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),
	      pushTagUnassigned: this.pushTagUnassigned.bind(this),
	      pushTagStart: this.pushTagStart.bind(this),
	      pushTagStart4: this.pushTagStart4.bind(this),
	      pushTagStart8: this.pushTagStart8.bind(this),
	      pushBreak: this.pushBreak.bind(this)
	    }, this._heap);
	  }

	  get _depth () {
	    return this._parents.length
	  }

	  get _currentParent () {
	    return this._parents[this._depth - 1]
	  }

	  get _ref () {
	    return this._currentParent.ref
	  }

	  // Finish the current parent
	  _closeParent () {
	    var p = this._parents.pop();

	    if (p.length > 0) {
	      throw new Error(`Missing ${p.length} elements`)
	    }

	    switch (p.type) {
	      case c$3.PARENT.TAG:
	        this._push(
	          this.createTag(p.ref[0], p.ref[1])
	        );
	        break
	      case c$3.PARENT.BYTE_STRING:
	        this._push(this.createByteString(p.ref, p.length));
	        break
	      case c$3.PARENT.UTF8_STRING:
	        this._push(this.createUtf8String(p.ref, p.length));
	        break
	      case c$3.PARENT.MAP:
	        if (p.values % 2 > 0) {
	          throw new Error('Odd number of elements in the map')
	        }
	        this._push(this.createMap(p.ref, p.length));
	        break
	      case c$3.PARENT.OBJECT:
	        if (p.values % 2 > 0) {
	          throw new Error('Odd number of elements in the map')
	        }
	        this._push(this.createObject(p.ref, p.length));
	        break
	      case c$3.PARENT.ARRAY:
	        this._push(this.createArray(p.ref, p.length));
	        break
	    }

	    if (this._currentParent && this._currentParent.type === c$3.PARENT.TAG) {
	      this._dec();
	    }
	  }

	  // Reduce the expected length of the current parent by one
	  _dec () {
	    const p = this._currentParent;
	    // The current parent does not know the epxected child length

	    if (p.length < 0) {
	      return
	    }

	    p.length--;

	    // All children were seen, we can close the current parent
	    if (p.length === 0) {
	      this._closeParent();
	    }
	  }

	  // Push any value to the current parent
	  _push (val, hasChildren) {
	    const p = this._currentParent;
	    p.values++;

	    switch (p.type) {
	      case c$3.PARENT.ARRAY:
	      case c$3.PARENT.BYTE_STRING:
	      case c$3.PARENT.UTF8_STRING:
	        if (p.length > -1) {
	          this._ref[this._ref.length - p.length] = val;
	        } else {
	          this._ref.push(val);
	        }
	        this._dec();
	        break
	      case c$3.PARENT.OBJECT:
	        if (p.tmpKey != null) {
	          this._ref[p.tmpKey] = val;
	          p.tmpKey = null;
	          this._dec();
	        } else {
	          p.tmpKey = val;

	          if (typeof p.tmpKey !== 'string') {
	            // too bad, convert to a Map
	            p.type = c$3.PARENT.MAP;
	            p.ref = utils$u.buildMap(p.ref);
	          }
	        }
	        break
	      case c$3.PARENT.MAP:
	        if (p.tmpKey != null) {
	          this._ref.set(p.tmpKey, val);
	          p.tmpKey = null;
	          this._dec();
	        } else {
	          p.tmpKey = val;
	        }
	        break
	      case c$3.PARENT.TAG:
	        this._ref.push(val);
	        if (!hasChildren) {
	          this._dec();
	        }
	        break
	      default:
	        throw new Error('Unknown parent type')
	    }
	  }

	  // Create a new parent in the parents list
	  _createParent (obj, type, len) {
	    this._parents[this._depth] = {
	      type: type,
	      length: len,
	      ref: obj,
	      values: 0,
	      tmpKey: null
	    };
	  }

	  // Reset all state back to the beginning, also used for initiatlization
	  _reset () {
	    this._res = [];
	    this._parents = [{
	      type: c$3.PARENT.ARRAY,
	      length: -1,
	      ref: this._res,
	      values: 0,
	      tmpKey: null
	    }];
	  }

	  // -- Interface to customize deoding behaviour
	  createTag (tagNumber, value) {
	    const typ = this._knownTags[tagNumber];

	    if (!typ) {
	      return new Tagged(tagNumber, value)
	    }

	    return typ(value)
	  }

	  createMap (obj, len) {
	    return obj
	  }

	  createObject (obj, len) {
	    return obj
	  }

	  createArray (arr, len) {
	    return arr
	  }

	  createByteString (raw, len) {
	    return Buffer$3.concat(raw)
	  }

	  createByteStringFromHeap (start, end) {
	    if (start === end) {
	      return Buffer$3.alloc(0)
	    }

	    return Buffer$3.from(this._heap.slice(start, end))
	  }

	  createInt (val) {
	    return val
	  }

	  createInt32 (f, g) {
	    return utils$u.buildInt32(f, g)
	  }

	  createInt64 (f1, f2, g1, g2) {
	    return utils$u.buildInt64(f1, f2, g1, g2)
	  }

	  createFloat (val) {
	    return val
	  }

	  createFloatSingle (a, b, c, d) {
	    return ieee754.read([a, b, c, d], 0, false, 23, 4)
	  }

	  createFloatDouble (a, b, c, d, e, f, g, h) {
	    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)
	  }

	  createInt32Neg (f, g) {
	    return -1 - utils$u.buildInt32(f, g)
	  }

	  createInt64Neg (f1, f2, g1, g2) {
	    const f = utils$u.buildInt32(f1, f2);
	    const g = utils$u.buildInt32(g1, g2);

	    if (f > c$3.MAX_SAFE_HIGH) {
	      return c$3.NEG_ONE.minus(new Bignumber$1(f).times(c$3.SHIFT32).plus(g))
	    }

	    return -1 - ((f * c$3.SHIFT32) + g)
	  }

	  createTrue () {
	    return true
	  }

	  createFalse () {
	    return false
	  }

	  createNull () {
	    return null
	  }

	  createUndefined () {
	    return undefined
	  }

	  createInfinity () {
	    return Infinity
	  }

	  createInfinityNeg () {
	    return -Infinity
	  }

	  createNaN () {
	    return NaN
	  }

	  createNaNNeg () {
	    return -NaN
	  }

	  createUtf8String (raw, len) {
	    return raw.join('')
	  }

	  createUtf8StringFromHeap (start, end) {
	    if (start === end) {
	      return ''
	    }

	    return this._buffer.toString('utf8', start, end)
	  }

	  createSimpleUnassigned (val) {
	    return new Simple(val)
	  }

	  // -- Interface for decoder.asm.js

	  pushInt (val) {
	    this._push(this.createInt(val));
	  }

	  pushInt32 (f, g) {
	    this._push(this.createInt32(f, g));
	  }

	  pushInt64 (f1, f2, g1, g2) {
	    this._push(this.createInt64(f1, f2, g1, g2));
	  }

	  pushFloat (val) {
	    this._push(this.createFloat(val));
	  }

	  pushFloatSingle (a, b, c, d) {
	    this._push(this.createFloatSingle(a, b, c, d));
	  }

	  pushFloatDouble (a, b, c, d, e, f, g, h) {
	    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h));
	  }

	  pushInt32Neg (f, g) {
	    this._push(this.createInt32Neg(f, g));
	  }

	  pushInt64Neg (f1, f2, g1, g2) {
	    this._push(this.createInt64Neg(f1, f2, g1, g2));
	  }

	  pushTrue () {
	    this._push(this.createTrue());
	  }

	  pushFalse () {
	    this._push(this.createFalse());
	  }

	  pushNull () {
	    this._push(this.createNull());
	  }

	  pushUndefined () {
	    this._push(this.createUndefined());
	  }

	  pushInfinity () {
	    this._push(this.createInfinity());
	  }

	  pushInfinityNeg () {
	    this._push(this.createInfinityNeg());
	  }

	  pushNaN () {
	    this._push(this.createNaN());
	  }

	  pushNaNNeg () {
	    this._push(this.createNaNNeg());
	  }

	  pushArrayStart () {
	    this._createParent([], c$3.PARENT.ARRAY, -1);
	  }

	  pushArrayStartFixed (len) {
	    this._createArrayStartFixed(len);
	  }

	  pushArrayStartFixed32 (len1, len2) {
	    const len = utils$u.buildInt32(len1, len2);
	    this._createArrayStartFixed(len);
	  }

	  pushArrayStartFixed64 (len1, len2, len3, len4) {
	    const len = utils$u.buildInt64(len1, len2, len3, len4);
	    this._createArrayStartFixed(len);
	  }

	  pushObjectStart () {
	    this._createObjectStartFixed(-1);
	  }

	  pushObjectStartFixed (len) {
	    this._createObjectStartFixed(len);
	  }

	  pushObjectStartFixed32 (len1, len2) {
	    const len = utils$u.buildInt32(len1, len2);
	    this._createObjectStartFixed(len);
	  }

	  pushObjectStartFixed64 (len1, len2, len3, len4) {
	    const len = utils$u.buildInt64(len1, len2, len3, len4);
	    this._createObjectStartFixed(len);
	  }

	  pushByteStringStart () {
	    this._parents[this._depth] = {
	      type: c$3.PARENT.BYTE_STRING,
	      length: -1,
	      ref: [],
	      values: 0,
	      tmpKey: null
	    };
	  }

	  pushByteString (start, end) {
	    this._push(this.createByteStringFromHeap(start, end));
	  }

	  pushUtf8StringStart () {
	    this._parents[this._depth] = {
	      type: c$3.PARENT.UTF8_STRING,
	      length: -1,
	      ref: [],
	      values: 0,
	      tmpKey: null
	    };
	  }

	  pushUtf8String (start, end) {
	    this._push(this.createUtf8StringFromHeap(start, end));
	  }

	  pushSimpleUnassigned (val) {
	    this._push(this.createSimpleUnassigned(val));
	  }

	  pushTagStart (tag) {
	    this._parents[this._depth] = {
	      type: c$3.PARENT.TAG,
	      length: 1,
	      ref: [tag]
	    };
	  }

	  pushTagStart4 (f, g) {
	    this.pushTagStart(utils$u.buildInt32(f, g));
	  }

	  pushTagStart8 (f1, f2, g1, g2) {
	    this.pushTagStart(utils$u.buildInt64(f1, f2, g1, g2));
	  }

	  pushTagUnassigned (tagNumber) {
	    this._push(this.createTag(tagNumber));
	  }

	  pushBreak () {
	    if (this._currentParent.length > -1) {
	      throw new Error('Unexpected break')
	    }

	    this._closeParent();
	  }

	  _createObjectStartFixed (len) {
	    if (len === 0) {
	      this._push(this.createObject({}));
	      return
	    }

	    this._createParent({}, c$3.PARENT.OBJECT, len);
	  }

	  _createArrayStartFixed (len) {
	    if (len === 0) {
	      this._push(this.createArray([]));
	      return
	    }

	    this._createParent(new Array(len), c$3.PARENT.ARRAY, len);
	  }

	  _decode (input) {
	    if (input.byteLength === 0) {
	      throw new Error('Input too short')
	    }

	    this._reset();
	    this._heap8.set(input);
	    const code = this.parser.parse(input.byteLength);

	    if (this._depth > 1) {
	      while (this._currentParent.length === 0) {
	        this._closeParent();
	      }
	      if (this._depth > 1) {
	        throw new Error('Undeterminated nesting')
	      }
	    }

	    if (code > 0) {
	      throw new Error('Failed to parse')
	    }

	    if (this._res.length === 0) {
	      throw new Error('No valid result')
	    }
	  }

	  // -- Public Interface

	  decodeFirst (input) {
	    this._decode(input);

	    return this._res[0]
	  }

	  decodeAll (input) {
	    this._decode(input);

	    return this._res
	  }

	  /**
	   * Decode the first cbor object.
	   *
	   * @param {Buffer|string} input
	   * @param {string} [enc='hex'] - Encoding used if a string is passed.
	   * @returns {*}
	   */
	  static decode (input, enc) {
	    if (typeof input === 'string') {
	      input = Buffer$3.from(input, enc || 'hex');
	    }

	    const dec = new Decoder$3({ size: input.length });
	    return dec.decodeFirst(input)
	  }

	  /**
	   * Decode all cbor objects.
	   *
	   * @param {Buffer|string} input
	   * @param {string} [enc='hex'] - Encoding used if a string is passed.
	   * @returns {Array<*>}
	   */
	  static decodeAll (input, enc) {
	    if (typeof input === 'string') {
	      input = Buffer$3.from(input, enc || 'hex');
	    }

	    const dec = new Decoder$3({ size: input.length });
	    return dec.decodeAll(input)
	  }
	}

	Decoder$3.decodeFirst = Decoder$3.decode;

	var decoder$1 = Decoder$3;

	const { Buffer: Buffer$2 } = require$$0__default["default"];
	const Decoder$2 = decoder$1;
	const utils$t = utils$v;

	/**
	 * Output the diagnostic format from a stream of CBOR bytes.
	 *
	 */
	class Diagnose extends Decoder$2 {
	  createTag (tagNumber, value) {
	    return `${tagNumber}(${value})`
	  }

	  createInt (val) {
	    return super.createInt(val).toString()
	  }

	  createInt32 (f, g) {
	    return super.createInt32(f, g).toString()
	  }

	  createInt64 (f1, f2, g1, g2) {
	    return super.createInt64(f1, f2, g1, g2).toString()
	  }

	  createInt32Neg (f, g) {
	    return super.createInt32Neg(f, g).toString()
	  }

	  createInt64Neg (f1, f2, g1, g2) {
	    return super.createInt64Neg(f1, f2, g1, g2).toString()
	  }

	  createTrue () {
	    return 'true'
	  }

	  createFalse () {
	    return 'false'
	  }

	  createFloat (val) {
	    const fl = super.createFloat(val);
	    if (utils$t.isNegativeZero(val)) {
	      return '-0_1'
	    }

	    return `${fl}_1`
	  }

	  createFloatSingle (a, b, c, d) {
	    const fl = super.createFloatSingle(a, b, c, d);
	    return `${fl}_2`
	  }

	  createFloatDouble (a, b, c, d, e, f, g, h) {
	    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h);
	    return `${fl}_3`
	  }

	  createByteString (raw, len) {
	    const val = raw.join(', ');

	    if (len === -1) {
	      return `(_ ${val})`
	    }
	    return `h'${val}`
	  }

	  createByteStringFromHeap (start, end) {
	    const val = (Buffer$2.from(
	      super.createByteStringFromHeap(start, end)
	    )).toString('hex');

	    return `h'${val}'`
	  }

	  createInfinity () {
	    return 'Infinity_1'
	  }

	  createInfinityNeg () {
	    return '-Infinity_1'
	  }

	  createNaN () {
	    return 'NaN_1'
	  }

	  createNaNNeg () {
	    return '-NaN_1'
	  }

	  createNull () {
	    return 'null'
	  }

	  createUndefined () {
	    return 'undefined'
	  }

	  createSimpleUnassigned (val) {
	    return `simple(${val})`
	  }

	  createArray (arr, len) {
	    const val = super.createArray(arr, len);

	    if (len === -1) {
	      // indefinite
	      return `[_ ${val.join(', ')}]`
	    }

	    return `[${val.join(', ')}]`
	  }

	  createMap (map, len) {
	    const val = super.createMap(map);
	    const list = Array.from(val.keys())
	      .reduce(collectObject(val), '');

	    if (len === -1) {
	      return `{_ ${list}}`
	    }

	    return `{${list}}`
	  }

	  createObject (obj, len) {
	    const val = super.createObject(obj);
	    const map = Object.keys(val)
	      .reduce(collectObject(val), '');

	    if (len === -1) {
	      return `{_ ${map}}`
	    }

	    return `{${map}}`
	  }

	  createUtf8String (raw, len) {
	    const val = raw.join(', ');

	    if (len === -1) {
	      return `(_ ${val})`
	    }

	    return `"${val}"`
	  }

	  createUtf8StringFromHeap (start, end) {
	    const val = (Buffer$2.from(
	      super.createUtf8StringFromHeap(start, end)
	    )).toString('utf8');

	    return `"${val}"`
	  }

	  static diagnose (input, enc) {
	    if (typeof input === 'string') {
	      input = Buffer$2.from(input, enc || 'hex');
	    }

	    const dec = new Diagnose();
	    return dec.decodeFirst(input)
	  }
	}

	var diagnose = Diagnose;

	function collectObject (val) {
	  return (acc, key) => {
	    if (acc) {
	      return `${acc}, ${key}: ${val[key]}`
	    }
	    return `${key}: ${val[key]}`
	  }
	}

	const { Buffer: Buffer$1 } = require$$0__default["default"];
	const { URL: URL$1 } = isoUrl;
	const Bignumber = require$$2$5.BigNumber;

	const utils$s = utils$v;
	const constants$3 = constants$5;
	const MT = constants$3.MT;
	const NUMBYTES = constants$3.NUMBYTES;
	const SHIFT32 = constants$3.SHIFT32;
	const SYMS = constants$3.SYMS;
	const TAG$2 = constants$3.TAG;
	const HALF = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.NUMBYTES.TWO;
	const FLOAT = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.NUMBYTES.FOUR;
	const DOUBLE = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.NUMBYTES.EIGHT;
	const TRUE = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.SIMPLE.TRUE;
	const FALSE = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.SIMPLE.FALSE;
	const UNDEFINED = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.SIMPLE.UNDEFINED;
	const NULL = (constants$3.MT.SIMPLE_FLOAT << 5) | constants$3.SIMPLE.NULL;

	const MAXINT_BN = new Bignumber('0x20000000000000');
	const BUF_NAN = Buffer$1.from('f97e00', 'hex');
	const BUF_INF_NEG = Buffer$1.from('f9fc00', 'hex');
	const BUF_INF_POS = Buffer$1.from('f97c00', 'hex');

	function toType (obj) {
	  // [object Type]
	  // --------8---1
	  return ({}).toString.call(obj).slice(8, -1)
	}

	/**
	 * Transform JavaScript values into CBOR bytes
	 *
	 */
	class Encoder$1 {
	  /**
	   * @param {Object} [options={}]
	   * @param {function(Buffer)} options.stream
	   */
	  constructor (options) {
	    options = options || {};

	    this.streaming = typeof options.stream === 'function';
	    this.onData = options.stream;

	    this.semanticTypes = [
	      [URL$1, this._pushUrl],
	      [Bignumber, this._pushBigNumber]
	    ];

	    const addTypes = options.genTypes || [];
	    const len = addTypes.length;
	    for (let i = 0; i < len; i++) {
	      this.addSemanticType(
	        addTypes[i][0],
	        addTypes[i][1]
	      );
	    }

	    this._reset();
	  }

	  addSemanticType (type, fun) {
	    const len = this.semanticTypes.length;
	    for (let i = 0; i < len; i++) {
	      const typ = this.semanticTypes[i][0];
	      if (typ === type) {
	        const old = this.semanticTypes[i][1];
	        this.semanticTypes[i][1] = fun;
	        return old
	      }
	    }
	    this.semanticTypes.push([type, fun]);
	    return null
	  }

	  push (val) {
	    if (!val) {
	      return true
	    }

	    this.result[this.offset] = val;
	    this.resultMethod[this.offset] = 0;
	    this.resultLength[this.offset] = val.length;
	    this.offset++;

	    if (this.streaming) {
	      this.onData(this.finalize());
	    }

	    return true
	  }

	  pushWrite (val, method, len) {
	    this.result[this.offset] = val;
	    this.resultMethod[this.offset] = method;
	    this.resultLength[this.offset] = len;
	    this.offset++;

	    if (this.streaming) {
	      this.onData(this.finalize());
	    }

	    return true
	  }

	  _pushUInt8 (val) {
	    return this.pushWrite(val, 1, 1)
	  }

	  _pushUInt16BE (val) {
	    return this.pushWrite(val, 2, 2)
	  }

	  _pushUInt32BE (val) {
	    return this.pushWrite(val, 3, 4)
	  }

	  _pushDoubleBE (val) {
	    return this.pushWrite(val, 4, 8)
	  }

	  _pushNaN () {
	    return this.push(BUF_NAN)
	  }

	  _pushInfinity (obj) {
	    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS;
	    return this.push(half)
	  }

	  _pushFloat (obj) {
	    const b2 = Buffer$1.allocUnsafe(2);

	    if (utils$s.writeHalf(b2, obj)) {
	      if (utils$s.parseHalf(b2) === obj) {
	        return this._pushUInt8(HALF) && this.push(b2)
	      }
	    }

	    const b4 = Buffer$1.allocUnsafe(4);
	    b4.writeFloatBE(obj, 0);
	    if (b4.readFloatBE(0) === obj) {
	      return this._pushUInt8(FLOAT) && this.push(b4)
	    }

	    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)
	  }

	  _pushInt (obj, mt, orig) {
	    const m = mt << 5;
	    if (obj < 24) {
	      return this._pushUInt8(m | obj)
	    }

	    if (obj <= 0xff) {
	      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)
	    }

	    if (obj <= 0xffff) {
	      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)
	    }

	    if (obj <= 0xffffffff) {
	      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)
	    }

	    if (obj <= Number.MAX_SAFE_INTEGER) {
	      return this._pushUInt8(m | NUMBYTES.EIGHT) &&
	        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&
	        this._pushUInt32BE(obj % SHIFT32)
	    }

	    if (mt === MT.NEG_INT) {
	      return this._pushFloat(orig)
	    }

	    return this._pushFloat(obj)
	  }

	  _pushIntNum (obj) {
	    if (obj < 0) {
	      return this._pushInt(-obj - 1, MT.NEG_INT, obj)
	    } else {
	      return this._pushInt(obj, MT.POS_INT)
	    }
	  }

	  _pushNumber (obj) {
	    switch (false) {
	      case (obj === obj): // eslint-disable-line
	        return this._pushNaN(obj)
	      case isFinite(obj):
	        return this._pushInfinity(obj)
	      case ((obj % 1) !== 0):
	        return this._pushIntNum(obj)
	      default:
	        return this._pushFloat(obj)
	    }
	  }

	  _pushString (obj) {
	    const len = Buffer$1.byteLength(obj, 'utf8');
	    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)
	  }

	  _pushBoolean (obj) {
	    return this._pushUInt8(obj ? TRUE : FALSE)
	  }

	  _pushUndefined (obj) {
	    return this._pushUInt8(UNDEFINED)
	  }

	  _pushArray (gen, obj) {
	    const len = obj.length;
	    if (!gen._pushInt(len, MT.ARRAY)) {
	      return false
	    }
	    for (let j = 0; j < len; j++) {
	      if (!gen.pushAny(obj[j])) {
	        return false
	      }
	    }
	    return true
	  }

	  _pushTag (tag) {
	    return this._pushInt(tag, MT.TAG)
	  }

	  _pushDate (gen, obj) {
	    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in
	    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is
	    // still allowed to encode fractions of seconds which can be achieved by
	    // changing overwriting the encode function for Date objects.
	    return gen._pushTag(TAG$2.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))
	  }

	  _pushBuffer (gen, obj) {
	    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)
	  }

	  _pushNoFilter (gen, obj) {
	    return gen._pushBuffer(gen, obj.slice())
	  }

	  _pushRegexp (gen, obj) {
	    return gen._pushTag(TAG$2.REGEXP) && gen.pushAny(obj.source)
	  }

	  _pushSet (gen, obj) {
	    if (!gen._pushInt(obj.size, MT.ARRAY)) {
	      return false
	    }
	    for (const x of obj) {
	      if (!gen.pushAny(x)) {
	        return false
	      }
	    }
	    return true
	  }

	  _pushUrl (gen, obj) {
	    return gen._pushTag(TAG$2.URI) && gen.pushAny(obj.format())
	  }

	  _pushBigint (obj) {
	    let tag = TAG$2.POS_BIGINT;
	    if (obj.isNegative()) {
	      obj = obj.negated().minus(1);
	      tag = TAG$2.NEG_BIGINT;
	    }
	    let str = obj.toString(16);
	    if (str.length % 2) {
	      str = '0' + str;
	    }
	    const buf = Buffer$1.from(str, 'hex');
	    return this._pushTag(tag) && this._pushBuffer(this, buf)
	  }

	  _pushBigNumber (gen, obj) {
	    if (obj.isNaN()) {
	      return gen._pushNaN()
	    }
	    if (!obj.isFinite()) {
	      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)
	    }
	    if (obj.isInteger()) {
	      return gen._pushBigint(obj)
	    }
	    if (!(gen._pushTag(TAG$2.DECIMAL_FRAC) &&
	      gen._pushInt(2, MT.ARRAY))) {
	      return false
	    }

	    const dec = obj.decimalPlaces();
	    const slide = obj.multipliedBy(new Bignumber(10).pow(dec));
	    if (!gen._pushIntNum(-dec)) {
	      return false
	    }
	    if (slide.abs().isLessThan(MAXINT_BN)) {
	      return gen._pushIntNum(slide.toNumber())
	    } else {
	      return gen._pushBigint(slide)
	    }
	  }

	  _pushMap (gen, obj) {
	    if (!gen._pushInt(obj.size, MT.MAP)) {
	      return false
	    }

	    return this._pushRawMap(
	      obj.size,
	      Array.from(obj)
	    )
	  }

	  _pushObject (obj) {
	    if (!obj) {
	      return this._pushUInt8(NULL)
	    }

	    var len = this.semanticTypes.length;
	    for (var i = 0; i < len; i++) {
	      if (obj instanceof this.semanticTypes[i][0]) {
	        return this.semanticTypes[i][1].call(obj, this, obj)
	      }
	    }

	    var f = obj.encodeCBOR;
	    if (typeof f === 'function') {
	      return f.call(obj, this)
	    }

	    var keys = Object.keys(obj);
	    var keyLength = keys.length;
	    if (!this._pushInt(keyLength, MT.MAP)) {
	      return false
	    }

	    return this._pushRawMap(
	      keyLength,
	      keys.map((k) => [k, obj[k]])
	    )
	  }

	  _pushRawMap (len, map) {
	    // Sort keys for canoncialization
	    // 1. encode key
	    // 2. shorter key comes before longer key
	    // 3. same length keys are sorted with lower
	    //    byte value before higher

	    map = map.map(function (a) {
	      a[0] = Encoder$1.encode(a[0]);
	      return a
	    }).sort(utils$s.keySorter);

	    for (var j = 0; j < len; j++) {
	      if (!this.push(map[j][0])) {
	        return false
	      }

	      if (!this.pushAny(map[j][1])) {
	        return false
	      }
	    }

	    return true
	  }

	  /**
	   * Alias for `.pushAny`
	   *
	   * @param {*} obj
	   * @returns {boolean} true on success
	   */
	  write (obj) {
	    return this.pushAny(obj)
	  }

	  /**
	   * Push any supported type onto the encoded stream
	   *
	   * @param {any} obj
	   * @returns {boolean} true on success
	   */
	  pushAny (obj) {
	    var typ = toType(obj);

	    switch (typ) {
	      case 'Number':
	        return this._pushNumber(obj)
	      case 'String':
	        return this._pushString(obj)
	      case 'Boolean':
	        return this._pushBoolean(obj)
	      case 'Object':
	        return this._pushObject(obj)
	      case 'Array':
	        return this._pushArray(this, obj)
	      case 'Uint8Array':
	        return this._pushBuffer(this, Buffer$1.isBuffer(obj) ? obj : Buffer$1.from(obj))
	      case 'Null':
	        return this._pushUInt8(NULL)
	      case 'Undefined':
	        return this._pushUndefined(obj)
	      case 'Map':
	        return this._pushMap(this, obj)
	      case 'Set':
	        return this._pushSet(this, obj)
	      case 'URL':
	        return this._pushUrl(this, obj)
	      case 'BigNumber':
	        return this._pushBigNumber(this, obj)
	      case 'Date':
	        return this._pushDate(this, obj)
	      case 'RegExp':
	        return this._pushRegexp(this, obj)
	      case 'Symbol':
	        switch (obj) {
	          case SYMS.NULL:
	            return this._pushObject(null)
	          case SYMS.UNDEFINED:
	            return this._pushUndefined(undefined)
	          // TODO: Add pluggable support for other symbols
	          default:
	            throw new Error('Unknown symbol: ' + obj.toString())
	        }
	      default:
	        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))
	    }
	  }

	  finalize () {
	    if (this.offset === 0) {
	      return null
	    }

	    var result = this.result;
	    var resultLength = this.resultLength;
	    var resultMethod = this.resultMethod;
	    var offset = this.offset;

	    // Determine the size of the buffer
	    var size = 0;
	    var i = 0;

	    for (; i < offset; i++) {
	      size += resultLength[i];
	    }

	    var res = Buffer$1.allocUnsafe(size);
	    var index = 0;
	    var length = 0;

	    // Write the content into the result buffer
	    for (i = 0; i < offset; i++) {
	      length = resultLength[i];

	      switch (resultMethod[i]) {
	        case 0:
	          result[i].copy(res, index);
	          break
	        case 1:
	          res.writeUInt8(result[i], index, true);
	          break
	        case 2:
	          res.writeUInt16BE(result[i], index, true);
	          break
	        case 3:
	          res.writeUInt32BE(result[i], index, true);
	          break
	        case 4:
	          res.writeDoubleBE(result[i], index, true);
	          break
	        case 5:
	          res.write(result[i], index, length, 'utf8');
	          break
	        default:
	          throw new Error('unkown method')
	      }

	      index += length;
	    }

	    var tmp = res;

	    this._reset();

	    return tmp
	  }

	  _reset () {
	    this.result = [];
	    this.resultMethod = [];
	    this.resultLength = [];
	    this.offset = 0;
	  }

	  /**
	   * Encode the given value
	   * @param {*} o
	   * @returns {Buffer}
	   */
	  static encode (o) {
	    const enc = new Encoder$1();
	    const ret = enc.pushAny(o);
	    if (!ret) {
	      throw new Error('Failed to encode input')
	    }

	    return enc.finalize()
	  }
	}

	var encoder = Encoder$1;

	(function (exports) {

	// exports.Commented = require('./commented')
	exports.Diagnose = diagnose;
	exports.Decoder = decoder$1;
	exports.Encoder = encoder;
	exports.Simple = simple;
	exports.Tagged = tagged;

	// exports.comment = exports.Commented.comment
	exports.decodeAll = exports.Decoder.decodeAll;
	exports.decodeFirst = exports.Decoder.decodeFirst;
	exports.diagnose = exports.Diagnose.diagnose;
	exports.encode = exports.Encoder.encode;
	exports.decode = exports.Decoder.decode;

	exports.leveldb = {
	  decode: exports.Decoder.decodeAll,
	  encode: exports.Encoder.encode,
	  buffer: true,
	  name: 'cbor'
	};
	}(src$3));

	/**
	 * @typedef {{ [key: string]: any }} Extensions
	 * @typedef {Error} Err
	 * @property {string} message
	 */

	/**
	 *
	 * @param {Error} obj
	 * @param {Extensions} props
	 * @returns {Error & Extensions}
	 */
	function assign$1(obj, props) {
	    for (const key in props) {
	        Object.defineProperty(obj, key, {
	            value: props[key],
	            enumerable: true,
	            configurable: true,
	        });
	    }

	    return obj;
	}

	/**
	 *
	 * @param {any} err - An Error
	 * @param {string|Extensions} code - A string code or props to set on the error
	 * @param {Extensions} [props] - Props to set on the error
	 * @returns {Error & Extensions}
	 */
	function createError(err, code, props) {
	    if (!err || typeof err === 'string') {
	        throw new TypeError('Please pass an Error to err-code');
	    }

	    if (!props) {
	        props = {};
	    }

	    if (typeof code === 'object') {
	        props = code;
	        code = '';
	    }

	    if (code) {
	        props.code = code;
	    }

	    try {
	        return assign$1(err, props);
	    } catch (_) {
	        props.message = err.message;
	        props.stack = err.stack;

	        const ErrClass = function () {};

	        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

	        // @ts-ignore
	        const output = assign$1(new ErrClass(), props);

	        return output;
	    }
	}

	var errCode = createError;

	var sha3$2 = {exports: {}};

	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.8.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2018
	 * @license MIT
	 */

	(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };

	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createCshakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };

	  var createKmacOutputMethod = function (bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };

	  var createOutputMethods = function (method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };

	  var createCshakeMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };

	  var createKmacMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };

	  var algorithms = [
	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      throw new Error(FINALIZE_ERROR);
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255, n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };

	  Keccak.prototype.encodeString = function (str) {
	    var notString, type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw new Error(INPUT_ERROR);
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw new Error(INPUT_ERROR);
	          }
	        }
	      } else {
	        throw new Error(INPUT_ERROR);
	      }
	      notString = true;
	    }
	    var bytes = 0, length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };

	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }

	  Kmac.prototype = new Keccak();

	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	  }
	})();
	}(sha3$2));

	var sha3$1 = sha3$2.exports;

	var murmurHash3js = {exports: {}};

	/* jshint -W086: true */

	(function (module, exports) {
	(function (root, undefined$1) {

	    // Create a local object that'll be exported or referenced globally.
	    var library = {
	        'version': '3.0.0',
	        'x86': {},
	        'x64': {},
	        'inputValidation': true
	    };

	    // PRIVATE FUNCTIONS
	    // -----------------

	    function _validBytes(bytes) {
	        // check the input is an array or a typed array
	        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
	            return false;
	        }

	        // check all bytes are actually bytes
	        for (var i = 0; i < bytes.length; i++) {
	            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function _x86Multiply(m, n) {
	        //
	        // Given two 32bit ints, returns the two multiplied together as a
	        // 32bit int.
	        //

	        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);
	    }

	    function _x86Rotl(m, n) {
	        //
	        // Given a 32bit int and an int representing a number of bit positions,
	        // returns the 32bit int rotated left by that number of positions.
	        //

	        return (m << n) | (m >>> (32 - n));
	    }

	    function _x86Fmix(h) {
	        //
	        // Given a block, returns murmurHash3's final x86 mix of that block.
	        //

	        h ^= h >>> 16;
	        h = _x86Multiply(h, 0x85ebca6b);
	        h ^= h >>> 13;
	        h = _x86Multiply(h, 0xc2b2ae35);
	        h ^= h >>> 16;

	        return h;
	    }

	    function _x64Add(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // added together as a 64bit int (as an array of two 32bit ints).
	        //

	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];

	        o[3] += m[3] + n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;

	        o[2] += m[2] + n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[1] += m[1] + n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[0] += m[0] + n[0];
	        o[0] &= 0xffff;

	        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
	    }

	    function _x64Multiply(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // multiplied together as a 64bit int (as an array of two 32bit ints).
	        //

	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];

	        o[3] += m[3] * n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;

	        o[2] += m[2] * n[3];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[2] += m[3] * n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[1] += m[1] * n[3];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[1] += m[2] * n[2];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[1] += m[3] * n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);
	        o[0] &= 0xffff;

	        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
	    }

	    function _x64Rotl(m, n) {
	        //
	        // Given a 64bit int (as an array of two 32bit ints) and an int
	        // representing a number of bit positions, returns the 64bit int (as an
	        // array of two 32bit ints) rotated left by that number of positions.
	        //

	        n %= 64;

	        if (n === 32) {
	            return [m[1], m[0]];
	        } else if (n < 32) {
	            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];
	        } else {
	            n -= 32;
	            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];
	        }
	    }

	    function _x64LeftShift(m, n) {
	        //
	        // Given a 64bit int (as an array of two 32bit ints) and an int
	        // representing a number of bit positions, returns the 64bit int (as an
	        // array of two 32bit ints) shifted left by that number of positions.
	        //

	        n %= 64;

	        if (n === 0) {
	            return m;
	        } else if (n < 32) {
	            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];
	        } else {
	            return [m[1] << (n - 32), 0];
	        }
	    }

	    function _x64Xor(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // xored together as a 64bit int (as an array of two 32bit ints).
	        //

	        return [m[0] ^ n[0], m[1] ^ n[1]];
	    }

	    function _x64Fmix(h) {
	        //
	        // Given a block, returns murmurHash3's final x64 mix of that block.
	        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
	        // only place where we need to right shift 64bit ints.)
	        //

	        h = _x64Xor(h, [0, h[0] >>> 1]);
	        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);
	        h = _x64Xor(h, [0, h[0] >>> 1]);
	        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
	        h = _x64Xor(h, [0, h[0] >>> 1]);

	        return h;
	    }

	    // PUBLIC FUNCTIONS
	    // ----------------

	    library.x86.hash32 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 32 bit hash
	        // using the x86 flavor of MurmurHash3, as an unsigned int.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }
	        seed = seed || 0;

	        var remainder = bytes.length % 4;
	        var blocks = bytes.length - remainder;

	        var h1 = seed;

	        var k1 = 0;

	        var c1 = 0xcc9e2d51;
	        var c2 = 0x1b873593;

	        for (var i = 0; i < blocks; i = i + 4) {
	            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);

	            k1 = _x86Multiply(k1, c1);
	            k1 = _x86Rotl(k1, 15);
	            k1 = _x86Multiply(k1, c2);

	            h1 ^= k1;
	            h1 = _x86Rotl(h1, 13);
	            h1 = _x86Multiply(h1, 5) + 0xe6546b64;
	        }

	        k1 = 0;

	        switch (remainder) {
	            case 3:
	                k1 ^= bytes[i + 2] << 16;

	            case 2:
	                k1 ^= bytes[i + 1] << 8;

	            case 1:
	                k1 ^= bytes[i];
	                k1 = _x86Multiply(k1, c1);
	                k1 = _x86Rotl(k1, 15);
	                k1 = _x86Multiply(k1, c2);
	                h1 ^= k1;
	        }

	        h1 ^= bytes.length;
	        h1 = _x86Fmix(h1);

	        return h1 >>> 0;
	    };

	    library.x86.hash128 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 128 bit
	        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }

	        seed = seed || 0;
	        var remainder = bytes.length % 16;
	        var blocks = bytes.length - remainder;

	        var h1 = seed;
	        var h2 = seed;
	        var h3 = seed;
	        var h4 = seed;

	        var k1 = 0;
	        var k2 = 0;
	        var k3 = 0;
	        var k4 = 0;

	        var c1 = 0x239b961b;
	        var c2 = 0xab0e9789;
	        var c3 = 0x38b34ae5;
	        var c4 = 0xa1e38b93;

	        for (var i = 0; i < blocks; i = i + 16) {
	            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);
	            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);
	            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);
	            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);

	            k1 = _x86Multiply(k1, c1);
	            k1 = _x86Rotl(k1, 15);
	            k1 = _x86Multiply(k1, c2);
	            h1 ^= k1;

	            h1 = _x86Rotl(h1, 19);
	            h1 += h2;
	            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;

	            k2 = _x86Multiply(k2, c2);
	            k2 = _x86Rotl(k2, 16);
	            k2 = _x86Multiply(k2, c3);
	            h2 ^= k2;

	            h2 = _x86Rotl(h2, 17);
	            h2 += h3;
	            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;

	            k3 = _x86Multiply(k3, c3);
	            k3 = _x86Rotl(k3, 17);
	            k3 = _x86Multiply(k3, c4);
	            h3 ^= k3;

	            h3 = _x86Rotl(h3, 15);
	            h3 += h4;
	            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;

	            k4 = _x86Multiply(k4, c4);
	            k4 = _x86Rotl(k4, 18);
	            k4 = _x86Multiply(k4, c1);
	            h4 ^= k4;

	            h4 = _x86Rotl(h4, 13);
	            h4 += h1;
	            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;
	        }

	        k1 = 0;
	        k2 = 0;
	        k3 = 0;
	        k4 = 0;

	        switch (remainder) {
	            case 15:
	                k4 ^= bytes[i + 14] << 16;

	            case 14:
	                k4 ^= bytes[i + 13] << 8;

	            case 13:
	                k4 ^= bytes[i + 12];
	                k4 = _x86Multiply(k4, c4);
	                k4 = _x86Rotl(k4, 18);
	                k4 = _x86Multiply(k4, c1);
	                h4 ^= k4;

	            case 12:
	                k3 ^= bytes[i + 11] << 24;

	            case 11:
	                k3 ^= bytes[i + 10] << 16;

	            case 10:
	                k3 ^= bytes[i + 9] << 8;

	            case 9:
	                k3 ^= bytes[i + 8];
	                k3 = _x86Multiply(k3, c3);
	                k3 = _x86Rotl(k3, 17);
	                k3 = _x86Multiply(k3, c4);
	                h3 ^= k3;

	            case 8:
	                k2 ^= bytes[i + 7] << 24;

	            case 7:
	                k2 ^= bytes[i + 6] << 16;

	            case 6:
	                k2 ^= bytes[i + 5] << 8;

	            case 5:
	                k2 ^= bytes[i + 4];
	                k2 = _x86Multiply(k2, c2);
	                k2 = _x86Rotl(k2, 16);
	                k2 = _x86Multiply(k2, c3);
	                h2 ^= k2;

	            case 4:
	                k1 ^= bytes[i + 3] << 24;

	            case 3:
	                k1 ^= bytes[i + 2] << 16;

	            case 2:
	                k1 ^= bytes[i + 1] << 8;

	            case 1:
	                k1 ^= bytes[i];
	                k1 = _x86Multiply(k1, c1);
	                k1 = _x86Rotl(k1, 15);
	                k1 = _x86Multiply(k1, c2);
	                h1 ^= k1;
	        }

	        h1 ^= bytes.length;
	        h2 ^= bytes.length;
	        h3 ^= bytes.length;
	        h4 ^= bytes.length;

	        h1 += h2;
	        h1 += h3;
	        h1 += h4;
	        h2 += h1;
	        h3 += h1;
	        h4 += h1;

	        h1 = _x86Fmix(h1);
	        h2 = _x86Fmix(h2);
	        h3 = _x86Fmix(h3);
	        h4 = _x86Fmix(h4);

	        h1 += h2;
	        h1 += h3;
	        h1 += h4;
	        h2 += h1;
	        h3 += h1;
	        h4 += h1;

	        return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
	    };

	    library.x64.hash128 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 128 bit
	        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }
	        seed = seed || 0;

	        var remainder = bytes.length % 16;
	        var blocks = bytes.length - remainder;

	        var h1 = [0, seed];
	        var h2 = [0, seed];

	        var k1 = [0, 0];
	        var k2 = [0, 0];

	        var c1 = [0x87c37b91, 0x114253d5];
	        var c2 = [0x4cf5ad43, 0x2745937f];

	        for (var i = 0; i < blocks; i = i + 16) {
	            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |
	                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];
	            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |
	                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];

	            k1 = _x64Multiply(k1, c1);
	            k1 = _x64Rotl(k1, 31);
	            k1 = _x64Multiply(k1, c2);
	            h1 = _x64Xor(h1, k1);

	            h1 = _x64Rotl(h1, 27);
	            h1 = _x64Add(h1, h2);
	            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);

	            k2 = _x64Multiply(k2, c2);
	            k2 = _x64Rotl(k2, 33);
	            k2 = _x64Multiply(k2, c1);
	            h2 = _x64Xor(h2, k2);

	            h2 = _x64Rotl(h2, 31);
	            h2 = _x64Add(h2, h1);
	            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
	        }

	        k1 = [0, 0];
	        k2 = [0, 0];

	        switch (remainder) {
	            case 15:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));

	            case 14:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));

	            case 13:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));

	            case 12:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));

	            case 11:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));

	            case 10:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));

	            case 9:
	                k2 = _x64Xor(k2, [0, bytes[i + 8]]);
	                k2 = _x64Multiply(k2, c2);
	                k2 = _x64Rotl(k2, 33);
	                k2 = _x64Multiply(k2, c1);
	                h2 = _x64Xor(h2, k2);

	            case 8:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));

	            case 7:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));

	            case 6:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));

	            case 5:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));

	            case 4:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));

	            case 3:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));

	            case 2:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));

	            case 1:
	                k1 = _x64Xor(k1, [0, bytes[i]]);
	                k1 = _x64Multiply(k1, c1);
	                k1 = _x64Rotl(k1, 31);
	                k1 = _x64Multiply(k1, c2);
	                h1 = _x64Xor(h1, k1);
	        }

	        h1 = _x64Xor(h1, [0, bytes.length]);
	        h2 = _x64Xor(h2, [0, bytes.length]);

	        h1 = _x64Add(h1, h2);
	        h2 = _x64Add(h2, h1);

	        h1 = _x64Fmix(h1);
	        h2 = _x64Fmix(h2);

	        h1 = _x64Add(h1, h2);
	        h2 = _x64Add(h2, h1);

	        return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
	    };

	    // INITIALIZATION
	    // --------------

	    // Export murmurHash3 for CommonJS, either as an AMD module or just as part
	    // of the global object.
	    {

	        if (module.exports) {
	            exports = module.exports = library;
	        }

	        exports.murmurHash3 = library;

	    }
	})();
	}(murmurHash3js, murmurHash3js.exports));

	var murmurhash3jsRevisited = murmurHash3js.exports;

	/* eslint-disable require-await */
	const crypto$5 = crypto__default$1["default"];
	const multihash$1 = src$7;

	/**
	 * @typedef {import('multihashes').HashName} HashName
	 * @typedef {import('./types').Digest} Digest
	 */

	// Note that although this function doesn't do any asynchronous work, we mark
	// the function as async because it must return a Promise to match the API
	// for other functions that do perform asynchronous work (see sha.browser.js)
	// eslint-disable-next-line

	/**
	 * @param {Uint8Array} data
	 * @param {HashName} alg
	 * @returns {Promise<Uint8Array>}
	 */
	const digest = async (data, alg) => {
	  switch (alg) {
	    case 'sha1':
	      return crypto$5.createHash('sha1').update(data).digest()
	    case 'sha2-256':
	      return crypto$5.createHash('sha256').update(data).digest()
	    case 'sha2-512':
	      return crypto$5.createHash('sha512').update(data).digest()
	    case 'dbl-sha2-256': {
	      const first = crypto$5.createHash('sha256').update(data).digest();
	      return crypto$5.createHash('sha256').update(first).digest()
	    }
	    default:
	      throw new Error(`${alg} is not a supported algorithm`)
	  }
	};

	var sha$2 = {
	  /**
	   * @param {HashName} alg
	   * @returns {Digest}
	   */
	  factory: (alg) => async (data) => {
	    return digest(data, alg)
	  },
	  digest,
	  /**
	   * @param {Uint8Array} buf
	   * @param {HashName} alg
	   * @param {number} [length]
	   */
	  multihashing: async (buf, alg, length) => {
	    const h = await digest(buf, alg);
	    return multihash$1.encode(h, alg, length)
	  }
	};

	/**
	 * @param {number} number
	 * @returns {Uint8Array}
	 */
	const fromNumberTo32BitBuf$1 = (number) => {
	  const bytes = new Uint8Array(4);

	  for (let i = 0; i < 4; i++) {
	    bytes[i] = number & 0xff;
	    number = number >> 8;
	  }

	  return bytes
	};

	var utils$r = {
	  fromNumberTo32BitBuf: fromNumberTo32BitBuf$1
	};

	var fromString$7 = {};

	var basics = basics$4;

	function createCodec$2(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string$2 = createCodec$2('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii$2 = createCodec$2('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES$2 = {
	  utf8: string$2,
	  'utf-8': string$2,
	  hex: basics.bases.base16,
	  latin1: ascii$2,
	  ascii: ascii$2,
	  binary: ascii$2,
	  ...basics.bases
	};

	var bases$5 = BASES$2;

	Object.defineProperty(fromString$7, '__esModule', { value: true });

	var bases$4 = bases$5;

	function fromString$6(string, encoding = 'utf8') {
	  const base = bases$4[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	fromString$7.fromString = fromString$6;

	const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

	// For convenience, let people hash a string, not just a Uint8Array
	function normalizeInput (input) {
	  let ret;
	  if (input instanceof Uint8Array) {
	    ret = input;
	  } else if (input instanceof Buffer) {
	    ret = new Uint8Array(input);
	  } else if (typeof input === 'string') {
	    ret = new Uint8Array(Buffer.from(input, 'utf8'));
	  } else {
	    throw new Error(ERROR_MSG_INPUT)
	  }
	  return ret
	}

	// Converts a Uint8Array to a hexadecimal string
	// For example, toHex([255, 0, 255]) returns "ff00ff"
	function toHex$2 (bytes) {
	  return Array.prototype.map
	    .call(bytes, function (n) {
	      return (n < 16 ? '0' : '') + n.toString(16)
	    })
	    .join('')
	}

	// Converts any value in [0...2^32-1] to an 8-character hex string
	function uint32ToHex (val) {
	  return (0x100000000 + val).toString(16).substring(1)
	}

	// For debugging: prints out hash state in the same format as the RFC
	// sample computation exactly, so that you can diff
	function debugPrint (label, arr, size) {
	  let msg = '\n' + label + ' = ';
	  for (let i = 0; i < arr.length; i += 2) {
	    if (size === 32) {
	      msg += uint32ToHex(arr[i]).toUpperCase();
	      msg += ' ';
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	    } else if (size === 64) {
	      msg += uint32ToHex(arr[i + 1]).toUpperCase();
	      msg += uint32ToHex(arr[i]).toUpperCase();
	    } else throw new Error('Invalid size ' + size)
	    if (i % 6 === 4) {
	      msg += '\n' + new Array(label.length + 4).join(' ');
	    } else if (i < arr.length - 2) {
	      msg += ' ';
	    }
	  }
	  console.log(msg);
	}

	// For performance testing: generates N bytes of input, hashes M times
	// Measures and prints MB/second hash performance each time
	function testSpeed (hashFn, N, M) {
	  let startMs = new Date().getTime();

	  const input = new Uint8Array(N);
	  for (let i = 0; i < N; i++) {
	    input[i] = i % 256;
	  }
	  const genMs = new Date().getTime();
	  console.log('Generated random input in ' + (genMs - startMs) + 'ms');
	  startMs = genMs;

	  for (let i = 0; i < M; i++) {
	    const hashHex = hashFn(input);
	    const hashMs = new Date().getTime();
	    const ms = hashMs - startMs;
	    startMs = hashMs;
	    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
	    console.log(
	      Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'
	    );
	  }
	}

	var util$e = {
	  normalizeInput: normalizeInput,
	  toHex: toHex$2,
	  debugPrint: debugPrint,
	  testSpeed: testSpeed
	};

	// Blake2B in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch

	const util$d = util$e;

	// 64-bit unsigned addition
	// Sets v[a,a+1] += v[b,b+1]
	// v should be a Uint32Array
	function ADD64AA (v, a, b) {
	  const o0 = v[a] + v[b];
	  let o1 = v[a + 1] + v[b + 1];
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// 64-bit unsigned addition
	// Sets v[a,a+1] += b
	// b0 is the low 32 bits of b, b1 represents the high 32 bits
	function ADD64AC (v, a, b0, b1) {
	  let o0 = v[a] + b0;
	  if (b0 < 0) {
	    o0 += 0x100000000;
	  }
	  let o1 = v[a + 1] + b1;
	  if (o0 >= 0x100000000) {
	    o1++;
	  }
	  v[a] = o0;
	  v[a + 1] = o1;
	}

	// Little-endian byte access
	function B2B_GET32 (arr, i) {
	  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
	}

	// G Mixing function
	// The ROTRs are inlined for speed
	function B2B_G (a, b, c, d, ix, iy) {
	  const x0 = m$1[ix];
	  const x1 = m$1[ix + 1];
	  const y0 = m$1[iy];
	  const y1 = m$1[iy + 1];

	  ADD64AA(v$2, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
	  ADD64AC(v$2, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
	  let xor0 = v$2[d] ^ v$2[a];
	  let xor1 = v$2[d + 1] ^ v$2[a + 1];
	  v$2[d] = xor1;
	  v$2[d + 1] = xor0;

	  ADD64AA(v$2, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
	  xor0 = v$2[b] ^ v$2[c];
	  xor1 = v$2[b + 1] ^ v$2[c + 1];
	  v$2[b] = (xor0 >>> 24) ^ (xor1 << 8);
	  v$2[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);

	  ADD64AA(v$2, a, b);
	  ADD64AC(v$2, a, y0, y1);

	  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
	  xor0 = v$2[d] ^ v$2[a];
	  xor1 = v$2[d + 1] ^ v$2[a + 1];
	  v$2[d] = (xor0 >>> 16) ^ (xor1 << 16);
	  v$2[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);

	  ADD64AA(v$2, c, d);

	  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
	  xor0 = v$2[b] ^ v$2[c];
	  xor1 = v$2[b + 1] ^ v$2[c + 1];
	  v$2[b] = (xor1 >>> 31) ^ (xor0 << 1);
	  v$2[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
	}

	// Initialization Vector
	const BLAKE2B_IV32 = new Uint32Array([
	  0xf3bcc908,
	  0x6a09e667,
	  0x84caa73b,
	  0xbb67ae85,
	  0xfe94f82b,
	  0x3c6ef372,
	  0x5f1d36f1,
	  0xa54ff53a,
	  0xade682d1,
	  0x510e527f,
	  0x2b3e6c1f,
	  0x9b05688c,
	  0xfb41bd6b,
	  0x1f83d9ab,
	  0x137e2179,
	  0x5be0cd19
	]);

	const SIGMA8 = [
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3,
	  11,
	  8,
	  12,
	  0,
	  5,
	  2,
	  15,
	  13,
	  10,
	  14,
	  3,
	  6,
	  7,
	  1,
	  9,
	  4,
	  7,
	  9,
	  3,
	  1,
	  13,
	  12,
	  11,
	  14,
	  2,
	  6,
	  5,
	  10,
	  4,
	  0,
	  15,
	  8,
	  9,
	  0,
	  5,
	  7,
	  2,
	  4,
	  10,
	  15,
	  14,
	  1,
	  11,
	  12,
	  6,
	  8,
	  3,
	  13,
	  2,
	  12,
	  6,
	  10,
	  0,
	  11,
	  8,
	  3,
	  4,
	  13,
	  7,
	  5,
	  15,
	  14,
	  1,
	  9,
	  12,
	  5,
	  1,
	  15,
	  14,
	  13,
	  4,
	  10,
	  0,
	  7,
	  6,
	  3,
	  9,
	  2,
	  8,
	  11,
	  13,
	  11,
	  7,
	  14,
	  12,
	  1,
	  3,
	  9,
	  5,
	  0,
	  15,
	  4,
	  8,
	  6,
	  2,
	  10,
	  6,
	  15,
	  14,
	  9,
	  11,
	  3,
	  0,
	  8,
	  12,
	  2,
	  13,
	  7,
	  1,
	  4,
	  10,
	  5,
	  10,
	  2,
	  8,
	  4,
	  7,
	  6,
	  1,
	  5,
	  15,
	  11,
	  9,
	  14,
	  3,
	  12,
	  13,
	  0,
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3
	];

	// These are offsets into a uint64 buffer.
	// Multiply them all by 2 to make them offsets into a uint32 buffer,
	// because this is Javascript and we don't have uint64s
	const SIGMA82 = new Uint8Array(
	  SIGMA8.map(function (x) {
	    return x * 2
	  })
	);

	// Compression function. 'last' flag indicates last block.
	// Note we're representing 16 uint64s as 32 uint32s
	const v$2 = new Uint32Array(32);
	const m$1 = new Uint32Array(32);
	function blake2bCompress (ctx, last) {
	  let i = 0;

	  // init work variables
	  for (i = 0; i < 16; i++) {
	    v$2[i] = ctx.h[i];
	    v$2[i + 16] = BLAKE2B_IV32[i];
	  }

	  // low 64 bits of offset
	  v$2[24] = v$2[24] ^ ctx.t;
	  v$2[25] = v$2[25] ^ (ctx.t / 0x100000000);
	  // high 64 bits not supported, offset may not be higher than 2**53-1

	  // last block flag set ?
	  if (last) {
	    v$2[28] = ~v$2[28];
	    v$2[29] = ~v$2[29];
	  }

	  // get little-endian words
	  for (i = 0; i < 32; i++) {
	    m$1[i] = B2B_GET32(ctx.b, 4 * i);
	  }

	  // twelve rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 64)
	  for (i = 0; i < 12; i++) {
	    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
	    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
	    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
	    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
	    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
	    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
	    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
	    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
	    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
	  }
	  // util.debugPrint('   (i=12) v[16]', v, 64)

	  for (i = 0; i < 16; i++) {
	    ctx.h[i] = ctx.h[i] ^ v$2[i] ^ v$2[i + 16];
	  }
	  // util.debugPrint('h[8]', ctx.h, 64)
	}

	// Creates a BLAKE2b hashing context
	// Requires an output length between 1 and 64 bytes
	// Takes an optional Uint8Array key
	function blake2bInit (outlen, key) {
	  if (outlen === 0 || outlen > 64) {
	    throw new Error('Illegal output length, expected 0 < length <= 64')
	  }
	  if (key && key.length > 64) {
	    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
	  }

	  // state, 'param block'
	  const ctx = {
	    b: new Uint8Array(128),
	    h: new Uint32Array(16),
	    t: 0, // input count
	    c: 0, // pointer within buffer
	    outlen: outlen // output length in bytes
	  };

	  // initialize hash state
	  for (let i = 0; i < 16; i++) {
	    ctx.h[i] = BLAKE2B_IV32[i];
	  }
	  const keylen = key ? key.length : 0;
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  // key the hash, if applicable
	  if (key) {
	    blake2bUpdate(ctx, key);
	    // at the end
	    ctx.c = 128;
	  }

	  return ctx
	}

	// Updates a BLAKE2b streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2bUpdate (ctx, input) {
	  for (let i = 0; i < input.length; i++) {
	    if (ctx.c === 128) {
	      // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2bCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2b streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2bFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset

	  while (ctx.c < 128) {
	    // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2bCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  const out = new Uint8Array(ctx.outlen);
	  for (let i = 0; i < ctx.outlen; i++) {
	    out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
	  }
	  return out
	}

	// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2b$1 (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 64;
	  input = util$d.normalizeInput(input);

	  // do the math
	  const ctx = blake2bInit(outlen, key);
	  blake2bUpdate(ctx, input);
	  return blake2bFinal(ctx)
	}

	// Computes the BLAKE2B hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 64 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2bHex (input, key, outlen) {
	  const output = blake2b$1(input, key, outlen);
	  return util$d.toHex(output)
	}

	var blake2b_1 = {
	  blake2b: blake2b$1,
	  blake2bHex: blake2bHex,
	  blake2bInit: blake2bInit,
	  blake2bUpdate: blake2bUpdate,
	  blake2bFinal: blake2bFinal
	};

	// BLAKE2s hash function in pure Javascript
	// Adapted from the reference implementation in RFC7693
	// Ported to Javascript by DC - https://github.com/dcposch

	const util$c = util$e;

	// Little-endian byte access.
	// Expects a Uint8Array and an index
	// Returns the little-endian uint32 at v[i..i+3]
	function B2S_GET32 (v, i) {
	  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
	}

	// Mixing function G.
	function B2S_G (a, b, c, d, x, y) {
	  v$1[a] = v$1[a] + v$1[b] + x;
	  v$1[d] = ROTR32(v$1[d] ^ v$1[a], 16);
	  v$1[c] = v$1[c] + v$1[d];
	  v$1[b] = ROTR32(v$1[b] ^ v$1[c], 12);
	  v$1[a] = v$1[a] + v$1[b] + y;
	  v$1[d] = ROTR32(v$1[d] ^ v$1[a], 8);
	  v$1[c] = v$1[c] + v$1[d];
	  v$1[b] = ROTR32(v$1[b] ^ v$1[c], 7);
	}

	// 32-bit right rotation
	// x should be a uint32
	// y must be between 1 and 31, inclusive
	function ROTR32 (x, y) {
	  return (x >>> y) ^ (x << (32 - y))
	}

	// Initialization Vector.
	const BLAKE2S_IV = new Uint32Array([
	  0x6a09e667,
	  0xbb67ae85,
	  0x3c6ef372,
	  0xa54ff53a,
	  0x510e527f,
	  0x9b05688c,
	  0x1f83d9ab,
	  0x5be0cd19
	]);

	const SIGMA = new Uint8Array([
	  0,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  7,
	  8,
	  9,
	  10,
	  11,
	  12,
	  13,
	  14,
	  15,
	  14,
	  10,
	  4,
	  8,
	  9,
	  15,
	  13,
	  6,
	  1,
	  12,
	  0,
	  2,
	  11,
	  7,
	  5,
	  3,
	  11,
	  8,
	  12,
	  0,
	  5,
	  2,
	  15,
	  13,
	  10,
	  14,
	  3,
	  6,
	  7,
	  1,
	  9,
	  4,
	  7,
	  9,
	  3,
	  1,
	  13,
	  12,
	  11,
	  14,
	  2,
	  6,
	  5,
	  10,
	  4,
	  0,
	  15,
	  8,
	  9,
	  0,
	  5,
	  7,
	  2,
	  4,
	  10,
	  15,
	  14,
	  1,
	  11,
	  12,
	  6,
	  8,
	  3,
	  13,
	  2,
	  12,
	  6,
	  10,
	  0,
	  11,
	  8,
	  3,
	  4,
	  13,
	  7,
	  5,
	  15,
	  14,
	  1,
	  9,
	  12,
	  5,
	  1,
	  15,
	  14,
	  13,
	  4,
	  10,
	  0,
	  7,
	  6,
	  3,
	  9,
	  2,
	  8,
	  11,
	  13,
	  11,
	  7,
	  14,
	  12,
	  1,
	  3,
	  9,
	  5,
	  0,
	  15,
	  4,
	  8,
	  6,
	  2,
	  10,
	  6,
	  15,
	  14,
	  9,
	  11,
	  3,
	  0,
	  8,
	  12,
	  2,
	  13,
	  7,
	  1,
	  4,
	  10,
	  5,
	  10,
	  2,
	  8,
	  4,
	  7,
	  6,
	  1,
	  5,
	  15,
	  11,
	  9,
	  14,
	  3,
	  12,
	  13,
	  0
	]);

	// Compression function. "last" flag indicates last block
	const v$1 = new Uint32Array(16);
	const m = new Uint32Array(16);
	function blake2sCompress (ctx, last) {
	  let i = 0;
	  for (i = 0; i < 8; i++) {
	    // init work variables
	    v$1[i] = ctx.h[i];
	    v$1[i + 8] = BLAKE2S_IV[i];
	  }

	  v$1[12] ^= ctx.t; // low 32 bits of offset
	  v$1[13] ^= ctx.t / 0x100000000; // high 32 bits
	  if (last) {
	    // last block flag set ?
	    v$1[14] = ~v$1[14];
	  }

	  for (i = 0; i < 16; i++) {
	    // get little-endian words
	    m[i] = B2S_GET32(ctx.b, 4 * i);
	  }

	  // ten rounds of mixing
	  // uncomment the DebugPrint calls to log the computation
	  // and match the RFC sample documentation
	  // util.debugPrint('          m[16]', m, 32)
	  for (i = 0; i < 10; i++) {
	    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
	    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
	    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
	    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
	    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
	    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
	    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
	    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
	    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
	  }
	  // util.debugPrint('   (i=10) v[16]', v, 32)

	  for (i = 0; i < 8; i++) {
	    ctx.h[i] ^= v$1[i] ^ v$1[i + 8];
	  }
	  // util.debugPrint('h[8]', ctx.h, 32)
	}

	// Creates a BLAKE2s hashing context
	// Requires an output length between 1 and 32 bytes
	// Takes an optional Uint8Array key
	function blake2sInit (outlen, key) {
	  if (!(outlen > 0 && outlen <= 32)) {
	    throw new Error('Incorrect output length, should be in [1, 32]')
	  }
	  const keylen = key ? key.length : 0;
	  if (key && !(keylen > 0 && keylen <= 32)) {
	    throw new Error('Incorrect key length, should be in [1, 32]')
	  }

	  const ctx = {
	    h: new Uint32Array(BLAKE2S_IV), // hash state
	    b: new Uint8Array(64), // input block
	    c: 0, // pointer within block
	    t: 0, // input count
	    outlen: outlen // output length in bytes
	  };
	  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

	  if (keylen > 0) {
	    blake2sUpdate(ctx, key);
	    ctx.c = 64; // at the end
	  }

	  return ctx
	}

	// Updates a BLAKE2s streaming hash
	// Requires hash context and Uint8Array (byte array)
	function blake2sUpdate (ctx, input) {
	  for (let i = 0; i < input.length; i++) {
	    if (ctx.c === 64) {
	      // buffer full ?
	      ctx.t += ctx.c; // add counters
	      blake2sCompress(ctx, false); // compress (not last)
	      ctx.c = 0; // counter to zero
	    }
	    ctx.b[ctx.c++] = input[i];
	  }
	}

	// Completes a BLAKE2s streaming hash
	// Returns a Uint8Array containing the message digest
	function blake2sFinal (ctx) {
	  ctx.t += ctx.c; // mark last block offset
	  while (ctx.c < 64) {
	    // fill up with zeros
	    ctx.b[ctx.c++] = 0;
	  }
	  blake2sCompress(ctx, true); // final block flag = 1

	  // little endian convert and store
	  const out = new Uint8Array(ctx.outlen);
	  for (let i = 0; i < ctx.outlen; i++) {
	    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff;
	  }
	  return out
	}

	// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
	//
	// Returns a n-byte Uint8Array
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2s$1 (input, key, outlen) {
	  // preprocess inputs
	  outlen = outlen || 32;
	  input = util$c.normalizeInput(input);

	  // do the math
	  const ctx = blake2sInit(outlen, key);
	  blake2sUpdate(ctx, input);
	  return blake2sFinal(ctx)
	}

	// Computes the BLAKE2S hash of a string or byte array
	//
	// Returns an n-byte hash in hex, all lowercase
	//
	// Parameters:
	// - input - the input bytes, as a string, Buffer, or Uint8Array
	// - key - optional key Uint8Array, up to 32 bytes
	// - outlen - optional output length in bytes, default 64
	function blake2sHex (input, key, outlen) {
	  const output = blake2s$1(input, key, outlen);
	  return util$c.toHex(output)
	}

	var blake2s_1 = {
	  blake2s: blake2s$1,
	  blake2sHex: blake2sHex,
	  blake2sInit: blake2sInit,
	  blake2sUpdate: blake2sUpdate,
	  blake2sFinal: blake2sFinal
	};

	const b2b = blake2b_1;
	const b2s = blake2s_1;

	var blakejs = {
	  blake2b: b2b.blake2b,
	  blake2bHex: b2b.blake2bHex,
	  blake2bInit: b2b.blake2bInit,
	  blake2bUpdate: b2b.blake2bUpdate,
	  blake2bFinal: b2b.blake2bFinal,
	  blake2s: b2s.blake2s,
	  blake2sHex: b2s.blake2sHex,
	  blake2sInit: b2s.blake2sInit,
	  blake2sUpdate: b2s.blake2sUpdate,
	  blake2sFinal: b2s.blake2sFinal
	};

	// @ts-ignore - no types available
	const blake = blakejs;

	const minB = 0xb201;
	const minS = 0xb241;

	const blake2b = {
	  init: blake.blake2bInit,
	  update: blake.blake2bUpdate,
	  digest: blake.blake2bFinal
	};

	const blake2s = {
	  init: blake.blake2sInit,
	  update: blake.blake2sUpdate,
	  digest: blake.blake2sFinal
	};

	// Note that although this function doesn't do any asynchronous work, we mark
	// the function as async because it must return a Promise to match the API
	// for other functions that do perform asynchronous work (see sha.browser.js)
	// eslint-disable-next-line

	/**
	 * @param {number} size
	 * @param {any} hf
	 * @returns {import('./types').Digest}
	 */
	const makeB2Hash = (size, hf) => async (data) => {
	  const ctx = hf.init(size, null);
	  hf.update(ctx, data);
	  return hf.digest(ctx)
	};

	/**
	 * @param {Record<number, import('./types').Digest>} table
	 */
	var blake_1 = (table) => {
	  for (let i = 0; i < 64; i++) {
	    table[minB + i] = makeB2Hash(i + 1, blake2b);
	  }
	  for (let i = 0; i < 32; i++) {
	    table[minS + i] = makeB2Hash(i + 1, blake2s);
	  }
	};

	const sha3 = sha3$2.exports;
	// @ts-ignore - no types available
	const mur = murmurhash3jsRevisited;
	const { factory: sha$1 } = sha$2;
	const { fromNumberTo32BitBuf } = utils$r;
	const { fromString: uint8ArrayFromString$1 } = fromString$7;

	// Note that although this function doesn't do any asynchronous work, we mark
	// the function as async because it must return a Promise to match the API
	// for other functions that do perform asynchronous work (see sha.browser.js)
	// eslint-disable-next-line
	/**
	 * @param {string} algorithm
	 * @returns {import('./types').Digest}
	 */
	const hash$3 = (algorithm) => async (data) => {
	  switch (algorithm) {
	    case 'sha3-224':
	      return new Uint8Array(sha3.sha3_224.arrayBuffer(data))
	    case 'sha3-256':
	      return new Uint8Array(sha3.sha3_256.arrayBuffer(data))
	    case 'sha3-384':
	      return new Uint8Array(sha3.sha3_384.arrayBuffer(data))
	    case 'sha3-512':
	      return new Uint8Array(sha3.sha3_512.arrayBuffer(data))
	    case 'shake-128':
	      return new Uint8Array(sha3.shake128.create(128).update(data).arrayBuffer())
	    case 'shake-256':
	      return new Uint8Array(sha3.shake256.create(256).update(data).arrayBuffer())
	    case 'keccak-224':
	      return new Uint8Array(sha3.keccak224.arrayBuffer(data))
	    case 'keccak-256':
	      return new Uint8Array(sha3.keccak256.arrayBuffer(data))
	    case 'keccak-384':
	      return new Uint8Array(sha3.keccak384.arrayBuffer(data))
	    case 'keccak-512':
	      return new Uint8Array(sha3.keccak512.arrayBuffer(data))
	    case 'murmur3-128':
	      return uint8ArrayFromString$1(mur.x64.hash128(data), 'base16')
	    case 'murmur3-32':
	      return fromNumberTo32BitBuf(mur.x86.hash32(data))

	    default:
	      throw new TypeError(`${algorithm} is not a supported algorithm`)
	  }
	};

	/** @type {import('./types').Digest} */
	const identity$6 = data => data;

	var crypto$4 = {
	  identity: identity$6,
	  sha1: sha$1('sha1'),
	  sha2256: sha$1('sha2-256'),
	  sha2512: sha$1('sha2-512'),
	  dblSha2256: sha$1('dbl-sha2-256'),
	  sha3224: hash$3('sha3-224'),
	  sha3256: hash$3('sha3-256'),
	  sha3384: hash$3('sha3-384'),
	  sha3512: hash$3('sha3-512'),
	  shake128: hash$3('shake-128'),
	  shake256: hash$3('shake-256'),
	  keccak224: hash$3('keccak-224'),
	  keccak256: hash$3('keccak-256'),
	  keccak384: hash$3('keccak-384'),
	  keccak512: hash$3('keccak-512'),
	  murmur3128: hash$3('murmur3-128'),
	  murmur332: hash$3('murmur3-32'),
	  addBlake: blake_1
	};

	var equals$4 = {};

	Object.defineProperty(equals$4, '__esModule', { value: true });

	function equals$3(a, b) {
	  if (a === b) {
	    return true;
	  }
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	equals$4.equals = equals$3;

	const errcode = errCode;
	const multihash = src$7;
	const crypto$3 = crypto$4;
	const { equals: equals$2 } = equals$4;

	/**
	 * @typedef {import("./types").Digest} Digest
	 * @typedef {import("multihashes").HashName} HashName
	 */

	/**
	 * Hash the given `bytes` using the algorithm specified by `alg`.
	 *
	 * @param {Uint8Array} bytes - The value to hash.
	 * @param {HashName} alg - The algorithm to use eg 'sha1'
	 * @param {number} [length] - Optionally trim the result to this length.
	 * @returns {Promise<Uint8Array>}
	 */
	async function Multihashing (bytes, alg, length) {
	  const digest = await Multihashing.digest(bytes, alg, length);
	  return multihash.encode(digest, alg, length)
	}

	/**
	 * Expose multihash itself, to avoid silly double requires.
	 */
	Multihashing.multihash = multihash;

	/**
	 * @param {Uint8Array} bytes - The value to hash.
	 * @param {HashName} alg - The algorithm to use eg 'sha1'
	 * @param {number} [length] - Optionally trim the result to this length.
	 * @returns {Promise<Uint8Array>}
	 */
	Multihashing.digest = async (bytes, alg, length) => {
	  const hash = Multihashing.createHash(alg);
	  const digest = await hash(bytes);
	  return length ? digest.slice(0, length) : digest
	};

	/**
	 * Creates a function that hashes with the given algorithm
	 *
	 * @param {HashName} alg - The algorithm to use eg 'sha1'
	 * @returns {Digest} - The hash function corresponding to `alg`
	 */
	Multihashing.createHash = function (alg) {
	  if (!alg) {
	    const e = errcode(new Error('hash algorithm must be specified'), 'ERR_HASH_ALGORITHM_NOT_SPECIFIED');
	    throw e
	  }

	  const code = multihash.coerceCode(alg);
	  if (!Multihashing.functions[code]) {
	    throw errcode(new Error(`multihash function '${alg}' not yet supported`), 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')
	  }

	  return Multihashing.functions[code]
	};

	/**
	 * Mapping of multihash codes to their hashing functions.
	 *
	 * @type {Record<number, Digest>}
	 */
	// @ts-ignore - most of those functions aren't typed
	Multihashing.functions = {
	  // identity
	  0x00: crypto$3.identity,
	  // sha1
	  0x11: crypto$3.sha1,
	  // sha2-256
	  0x12: crypto$3.sha2256,
	  // sha2-512
	  0x13: crypto$3.sha2512,
	  // sha3-512
	  0x14: crypto$3.sha3512,
	  // sha3-384
	  0x15: crypto$3.sha3384,
	  // sha3-256
	  0x16: crypto$3.sha3256,
	  // sha3-224
	  0x17: crypto$3.sha3224,
	  // shake-128
	  0x18: crypto$3.shake128,
	  // shake-256
	  0x19: crypto$3.shake256,
	  // keccak-224
	  0x1A: crypto$3.keccak224,
	  // keccak-256
	  0x1B: crypto$3.keccak256,
	  // keccak-384
	  0x1C: crypto$3.keccak384,
	  // keccak-512
	  0x1D: crypto$3.keccak512,
	  // murmur3-128
	  0x22: crypto$3.murmur3128,
	  // murmur3-32
	  0x23: crypto$3.murmur332,
	  // dbl-sha2-256
	  0x56: crypto$3.dblSha2256
	};

	// add blake functions
	crypto$3.addBlake(Multihashing.functions);

	/**
	 * @param {Uint8Array} bytes
	 * @param {Uint8Array} hash
	 * @returns {Promise<boolean>}
	 */
	Multihashing.validate = async (bytes, hash) => {
	  const newHash = await Multihashing(bytes, multihash.decode(hash).name);

	  return equals$2(hash, newHash)
	};

	var src$2 = Multihashing;

	var node$1 = Node$1;

	/**
	 * a linked-list node
	 * @class
	 * @param {any} value - node's value
	 * @param {Node} next - next node
	 */
	function Node$1 (value, next) {
	  this.value = value;
	  this.next = next;
	}

	/**
	 * checks if this node or any of its children has the value
	 * @param {any} value - value to check if linked-list contains
	 * @return {boolean} true if the list contains the value; false if not
	 */
	Node$1.prototype.contains = function (value) {
	  var cursor = this;

	  while (cursor) {
	    if (cursor.value === value) return true
	    cursor = cursor.next;
	  }

	  return false
	};

	var Node = node$1;

	var isCircular_1 = isCircular$1;

	/**
	 * checks whether the object is circular
	 * @param  {object}  obj - object to check circularity for
	 * @return {Boolean} true if obj is circular, false if it is not
	 */
	function isCircular$1 (obj) {
	  if (!(obj instanceof Object)) {
	    throw new TypeError('"obj" must be an object (or inherit from it)')
	  }
	  return _isCircular(obj)
	}

	/**
	 * @private
	 * checks whether the object is circular
	 * @param  {object}  obj - object to check circularity for
	 * @param  {Node}    parentList - linked-list that contains all the object's parents
	 * @return {Boolean} true if obj is circular, false if it is not
	 */
	function _isCircular (obj, parentList) {
	  parentList = new Node(obj, parentList);

	  // breadth-first search for circular object
	  for (var key in obj) {
	    var val = obj[key];
	    if (val instanceof Object) {
	      if (parentList.contains(val) || _isCircular(val, parentList)) {
	        return true
	      }
	    }
	  }

	  return false
	}

	/**
	 * Returns a new Uint8Array created by concatenating the passed ArrayLikes
	 *
	 * @param {Array<ArrayLike<number>>} arrays
	 * @param {number} [length]
	 */
	function concat$9 (arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }

	  const output = new Uint8Array(length);
	  let offset = 0;

	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }

	  return output
	}

	var concat_1$2 = concat$9;

	const { bases: bases$3 } = basics$4;

	/**
	 * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec
	 */

	/**
	 * @param {string} name
	 * @param {string} prefix
	 * @param {(buf: Uint8Array) => string} encode
	 * @param {(str: string) => Uint8Array} decode
	 * @returns {MultibaseCodec}
	 */
	function createCodec$1 (name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: {
	      decode
	    }
	  }
	}

	const string$1 = createCodec$1('utf8', 'u', (buf) => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf)
	}, (str) => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1))
	});

	const ascii$1 = createCodec$1('ascii', 'a', (buf) => {
	  let string = 'a';

	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string
	}, (str) => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);

	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }

	  return buf
	});

	/**
	 * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings
	 */

	/**
	 * @type {Record<SupportedEncodings, MultibaseCodec>}
	 */
	const BASES$1 = {
	  'utf8': string$1,
	  'utf-8': string$1,
	  'hex': bases$3.base16,
	  'latin1': ascii$1,
	  'ascii': ascii$1,
	  'binary': ascii$1,

	  ...bases$3
	};

	var bases_1 = BASES$1;

	const bases$2 = bases_1;

	/**
	 * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings
	 */

	/**
	 * Create a `Uint8Array` from the passed string
	 *
	 * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.
	 *
	 * Also `ascii` which is similar to node's 'binary' encoding.
	 *
	 * @param {string} string
	 * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc
	 * @returns {Uint8Array}
	 */
	function fromString$5 (string, encoding = 'utf8') {
	  const base = bases$2[encoding];

	  if (!base) {
	    throw new Error(`Unsupported encoding "${encoding}"`)
	  }

	  // add multibase prefix
	  return base.decoder.decode(`${base.prefix}${string}`)
	}

	var fromString_1 = fromString$5;

	const cbor = src$3;
	const multicodec = src$6;
	const multihashing = src$2;
	const CID$1 = src$5;
	const isCircular = isCircular_1;
	const uint8ArrayConcat = concat_1$2;
	const uint8ArrayFromString = fromString_1;

	// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692
	const CID_CBOR_TAG = 42;

	function tagCID (cid) {
	  if (typeof cid === 'string') {
	    cid = new CID$1(cid).bytes;
	  } else if (CID$1.isCID(cid)) {
	    cid = cid.bytes;
	  }

	  return new cbor.Tagged(CID_CBOR_TAG, uint8ArrayConcat([
	    uint8ArrayFromString('00', 'base16'), // thanks jdag
	    cid
	  ], 1 + cid.length))
	}

	function replaceCIDbyTAG (dagNode) {
	  let circular;
	  try {
	    circular = isCircular(dagNode);
	  } catch (e) {
	    circular = false;
	  }
	  if (circular) {
	    throw new Error('The object passed has circular references')
	  }

	  function transform (obj) {
	    if (!obj || obj instanceof Uint8Array || typeof obj === 'string') {
	      return obj
	    }

	    if (Array.isArray(obj)) {
	      return obj.map(transform)
	    }

	    if (CID$1.isCID(obj)) {
	      return tagCID(obj)
	    }

	    const keys = Object.keys(obj);

	    if (keys.length > 0) {
	      // Recursive transform
	      const out = {};
	      keys.forEach((key) => {
	        if (typeof obj[key] === 'object') {
	          out[key] = transform(obj[key]);
	        } else {
	          out[key] = obj[key];
	        }
	      });
	      return out
	    } else {
	      return obj
	    }
	  }

	  return transform(dagNode)
	}

	const codec = multicodec.DAG_CBOR;
	const defaultHashAlg = multicodec.SHA2_256;

	const defaultTags = {
	  [CID_CBOR_TAG]: (val) => {
	    // remove that 0
	    val = val.slice(1);
	    return new CID$1(val)
	  }
	};
	const defaultSize = 64 * 1024; // current decoder heap size, 64 Kb
	let currentSize = defaultSize;
	const defaultMaxSize = 64 * 1024 * 1024; // max heap size when auto-growing, 64 Mb
	let maxSize = defaultMaxSize;
	let decoder = null;

	/**
	 * Configure the underlying CBOR decoder.
	 *
	 * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.
	 * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`
	 * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error
	 * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`
	 */
	function configureDecoder (options) {
	  let tags = defaultTags;

	  if (options) {
	    if (typeof options.size === 'number') {
	      currentSize = options.size;
	    }
	    if (typeof options.maxSize === 'number') {
	      maxSize = options.maxSize;
	    }
	    if (options.tags) {
	      tags = Object.assign({}, defaultTags, options && options.tags);
	    }
	  } else {
	    // no options, reset to defaults
	    currentSize = defaultSize;
	    maxSize = defaultMaxSize;
	  }

	  const decoderOptions = {
	    tags,
	    size: currentSize
	  };

	  decoder = new cbor.Decoder(decoderOptions);
	  // borc edits opts.size in-place so we can capture _actual_ size
	  currentSize = decoderOptions.size;
	}

	configureDecoder(); // Setup default cbor.Decoder

	/**
	 * Serialize internal representation into a binary CBOR block.
	 *
	 * @param {Object} node - Internal representation of a CBOR block
	 * @returns {Uint8Array} - The encoded binary representation
	 */
	function serialize$2 (node) {
	  const nodeTagged = replaceCIDbyTAG(node);
	  const serialized = cbor.encode(nodeTagged);

	  return serialized
	}

	/**
	 * Deserialize CBOR block into the internal representation.
	 *
	 * @param {Uint8Array} data - Binary representation of a CBOR block
	 * @returns {Object} - An object that conforms to the IPLD Data Model
	 */
	function deserialize$1 (data) {
	  if (data.length > currentSize && data.length <= maxSize) {
	    configureDecoder({ size: data.length });
	  }

	  if (data.length > currentSize) {
	    throw new Error('Data is too large to deserialize with current decoder')
	  }

	  // borc will decode back-to-back objects into an implicit top-level array, we
	  // strictly want to only see a single explicit top-level object
	  const all = decoder.decodeAll(data);
	  if (all.length !== 1) {
	    throw new Error('Extraneous CBOR data found beyond initial top-level object')
	  }

	  return all[0]
	}

	/**
	 * Calculate the CID of the binary blob.
	 *
	 * @param {Object} binaryBlob - Encoded IPLD Node
	 * @param {Object} [userOptions] - Options to create the CID
	 * @param {number} [userOptions.cidVersion=1] - CID version number
	 * @param {string} [userOptions.hashAlg] - Defaults to the defaultHashAlg of the format
	 * @returns {Promise.<CID>}
	 */
	async function cid (binaryBlob, userOptions) {
	  const defaultOptions = { cidVersion: 1, hashAlg: defaultHashAlg };
	  const options = Object.assign(defaultOptions, userOptions);

	  const multihash = await multihashing(binaryBlob, options.hashAlg);
	  const codecName = multicodec.getNameFromCode(codec);
	  const cid = new CID$1(options.cidVersion, codecName, multihash);

	  return cid
	}

	var util$b = {
	  codec,
	  defaultHashAlg,
	  configureDecoder,
	  serialize: serialize$2,
	  deserialize: deserialize$1,
	  cid
	};

	var resolver = {};

	const CID = src$5;
	const util$a = util$b;

	/**
	 * Resolves a path within a CBOR block.
	 *
	 * Returns the value or a link and the partial mising path. This way the
	 * IPLD Resolver can fetch the link and continue to resolve.
	 *
	 * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block
	 * @param {string} [path='/'] - Path that should be resolved
	 */
	resolver.resolve = (binaryBlob, path) => {
	  let node = util$a.deserialize(binaryBlob);

	  const parts = path.split('/').filter(Boolean);
	  while (parts.length) {
	    const key = parts.shift();
	    if (node[key] === undefined) {
	      throw new Error(`Object has no property '${key}'`)
	    }

	    node = node[key];
	    if (CID.isCID(node)) {
	      return {
	        value: node,
	        remainderPath: parts.join('/')
	      }
	    }
	  }

	  return {
	    value: node,
	    remainderPath: ''
	  }
	};

	const traverse = function * (node, path) {
	  // Traverse only objects and arrays
	  if (node instanceof Uint8Array || CID.isCID(node) || typeof node === 'string' ||
	      node === null) {
	    return
	  }
	  for (const item of Object.keys(node)) {
	    const nextpath = path === undefined ? item : path + '/' + item;
	    yield nextpath;
	    yield * traverse(node[item], nextpath);
	  }
	};

	/**
	 * Return all available paths of a block.
	 *
	 * @generator
	 * @param {Uint8Array} binaryBlob - Binary representation of a CBOR block
	 * @yields {string} - A single path
	 */
	resolver.tree = function * (binaryBlob) {
	  const node = util$a.deserialize(binaryBlob);

	  yield * traverse(node);
	};

	(function (exports) {

	exports.util = util$b;
	exports.resolver = resolver;
	exports.codec = exports.util.codec;
	exports.defaultHashAlg = exports.util.defaultHashAlg;
	}(src$4));

	const bases$1 = bases_1;

	/**
	 * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings
	 */

	/**
	 * Turns a `Uint8Array` into a string.
	 *
	 * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.
	 *
	 * Also `ascii` which is similar to node's 'binary' encoding.
	 *
	 * @param {Uint8Array} array - The array to turn into a string
	 * @param {SupportedEncodings} [encoding=utf8] - The encoding to use
	 * @returns {string}
	 */
	function toString$3 (array, encoding = 'utf8') {
	  const base = bases$1[encoding];

	  if (!base) {
	    throw new Error(`Unsupported encoding "${encoding}"`)
	  }

	  // strip multibase prefix
	  return base.encoder.encode(array).substring(1)
	}

	var toString_1 = toString$3;

	var constants$2 = {};

	Object.defineProperty(constants$2, "__esModule", { value: true });
	constants$2.DEFAULT_BASE = constants$2.STREAMID_CODEC = void 0;
	constants$2.STREAMID_CODEC = 206;
	constants$2.DEFAULT_BASE = 'base36';

	var readingBytes = {};

	var __importDefault$v = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(readingBytes, "__esModule", { value: true });
	readingBytes.readCid = readingBytes.readVarint = void 0;
	const cids_1$6 = __importDefault$v(src$5);
	const varint_1$4 = __importDefault$v(varint$3);
	function readVarint(bytes) {
	    const value = varint_1$4.default.decode(bytes);
	    const readLength = varint_1$4.default.decode.bytes;
	    const remainder = bytes.slice(readLength);
	    return [value, remainder, readLength];
	}
	readingBytes.readVarint = readVarint;
	function isCidVersion(input) {
	    return input === 0 || input === 1;
	}
	function readCid(bytes) {
	    const [cidVersion, cidVersionRemainder] = readVarint(bytes);
	    if (!isCidVersion(cidVersion)) {
	        throw new Error(`Unknown CID version ${cidVersion}`);
	    }
	    const [codec, codecRemainder] = readVarint(cidVersionRemainder);
	    const [, mhCodecRemainder, mhCodecLength] = readVarint(codecRemainder);
	    const [mhLength, , mhLengthLength] = readVarint(mhCodecRemainder);
	    const multihashBytes = codecRemainder.slice(0, mhCodecLength + mhLengthLength + mhLength);
	    const multihashBytesRemainder = codecRemainder.slice(mhCodecLength + mhLengthLength + mhLength);
	    return [new cids_1$6.default(cidVersion, codec, multihashBytes), multihashBytesRemainder];
	}
	readingBytes.readCid = readCid;

	function Memoize(args) {
	    let hashFunction;
	    let duration;
	    let tags;
	    if (typeof args === 'object') {
	        hashFunction = args.hashFunction;
	        duration = args.expiring;
	        tags = args.tags;
	    }
	    else {
	        hashFunction = args;
	    }
	    return (target, propertyKey, descriptor) => {
	        if (descriptor.value != null) {
	            descriptor.value = getNewFunction(descriptor.value, hashFunction, duration, tags);
	        }
	        else if (descriptor.get != null) {
	            descriptor.get = getNewFunction(descriptor.get, hashFunction, duration, tags);
	        }
	        else {
	            throw 'Only put a Memoize() decorator on a method or get accessor.';
	        }
	    };
	}
	function MemoizeExpiring(expiring, hashFunction) {
	    return Memoize({
	        expiring,
	        hashFunction
	    });
	}
	const clearCacheTagsMap = new Map();
	function clear(tags) {
	    const cleared = new Set();
	    for (const tag of tags) {
	        const maps = clearCacheTagsMap.get(tag);
	        if (maps) {
	            for (const mp of maps) {
	                if (!cleared.has(mp)) {
	                    mp.clear();
	                    cleared.add(mp);
	                }
	            }
	        }
	    }
	    return cleared.size;
	}
	function getNewFunction(originalMethod, hashFunction, duration = 0, tags) {
	    const propMapName = Symbol(`__memoized_map__`);
	    return function (...args) {
	        let returnedValue;
	        if (!this.hasOwnProperty(propMapName)) {
	            Object.defineProperty(this, propMapName, {
	                configurable: false,
	                enumerable: false,
	                writable: false,
	                value: new Map()
	            });
	        }
	        let myMap = this[propMapName];
	        if (Array.isArray(tags)) {
	            for (const tag of tags) {
	                if (clearCacheTagsMap.has(tag)) {
	                    clearCacheTagsMap.get(tag).push(myMap);
	                }
	                else {
	                    clearCacheTagsMap.set(tag, [myMap]);
	                }
	            }
	        }
	        if (hashFunction || args.length > 0 || duration > 0) {
	            let hashKey;
	            if (hashFunction === true) {
	                hashKey = args.map(a => a.toString()).join('!');
	            }
	            else if (hashFunction) {
	                hashKey = hashFunction.apply(this, args);
	            }
	            else {
	                hashKey = args[0];
	            }
	            const timestampKey = `${hashKey}__timestamp`;
	            let isExpired = false;
	            if (duration > 0) {
	                if (!myMap.has(timestampKey)) {
	                    isExpired = true;
	                }
	                else {
	                    let timestamp = myMap.get(timestampKey);
	                    isExpired = (Date.now() - timestamp) > duration;
	                }
	            }
	            if (myMap.has(hashKey) && !isExpired) {
	                returnedValue = myMap.get(hashKey);
	            }
	            else {
	                returnedValue = originalMethod.apply(this, args);
	                myMap.set(hashKey, returnedValue);
	                if (duration > 0) {
	                    myMap.set(timestampKey, Date.now());
	                }
	            }
	        }
	        else {
	            const hashKey = this;
	            if (myMap.has(hashKey)) {
	                returnedValue = myMap.get(hashKey);
	            }
	            else {
	                returnedValue = originalMethod.apply(this, args);
	                myMap.set(hashKey, returnedValue);
	            }
	        }
	        return returnedValue;
	    };
	}

	var memoizeDecorator = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Memoize: Memoize,
		MemoizeExpiring: MemoizeExpiring,
		clear: clear
	});

	var require$$8$1 = /*@__PURE__*/getAugmentedNamespace(memoizeDecorator);

	var commitId = {};

	var streamType = {};

	Object.defineProperty(streamType, "__esModule", { value: true });
	streamType.StreamType = void 0;
	const registry = {
	    tile: 0,
	    'caip10-link': 1,
	};
	function codeByName(name) {
	    const index = registry[name];
	    if (typeof index !== 'undefined') {
	        return index;
	    }
	    else {
	        throw new Error(`No stream type registered for name ${name}`);
	    }
	}
	function nameByCode(index) {
	    const pair = Object.entries(registry).find(([, v]) => v === index);
	    if (pair) {
	        return pair[0];
	    }
	    else {
	        throw new Error(`No stream type registered for index ${index}`);
	    }
	}
	class StreamType {
	}
	streamType.StreamType = StreamType;
	StreamType.nameByCode = nameByCode;
	StreamType.codeByName = codeByName;

	var __decorate$5 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$2 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __classPrivateFieldSet$2 = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet$2 = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __importDefault$u = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var _CommitID_type, _CommitID_cid, _CommitID_commit;
	Object.defineProperty(commitId, "__esModule", { value: true });
	commitId.CommitID = void 0;
	const cids_1$5 = __importDefault$u(src$5);
	const multibase_1$2 = __importDefault$u(src$b.exports);
	const stream_type_1$1 = streamType;
	const varint_1$3 = __importDefault$u(varint$3);
	const concat_1$1 = __importDefault$u(concat_1$2);
	const to_string_1$1 = __importDefault$u(toString_1);
	const typescript_memoize_1$1 = require$$8$1;
	const constants_1$3 = constants$2;
	const reading_bytes_1$1 = readingBytes;
	const stream_id_1 = streamId;
	function fromBytes$1(bytes) {
	    const [streamCodec, streamCodecRemainder] = reading_bytes_1$1.readVarint(bytes);
	    if (streamCodec !== constants_1$3.STREAMID_CODEC)
	        throw new Error('fromBytes: invalid streamid, does not include streamid codec');
	    const [type, streamtypeRemainder] = reading_bytes_1$1.readVarint(streamCodecRemainder);
	    const [base, baseRemainder] = reading_bytes_1$1.readCid(streamtypeRemainder);
	    if (baseRemainder.length === 0) {
	        throw new Error(`No commit information provided`);
	    }
	    else if (baseRemainder.length === 1) {
	        return new CommitID(type, base, baseRemainder[0]);
	    }
	    else {
	        const [commit] = reading_bytes_1$1.readCid(baseRemainder);
	        return new CommitID(type, base, commit);
	    }
	}
	function parseCID(input) {
	    try {
	        return new cids_1$5.default(input);
	    }
	    catch (_a) {
	        return undefined;
	    }
	}
	function parseCommit(genesis, commit = null) {
	    if (!commit)
	        return null;
	    const commitCID = parseCID(commit);
	    if (commitCID) {
	        if (genesis.equals(commitCID)) {
	            return null;
	        }
	        else {
	            return commitCID;
	        }
	    }
	    else if (String(commit) === '0') {
	        return null;
	    }
	    else {
	        throw new Error('Cannot specify commit as a number except to request commit 0 (the genesis commit)');
	    }
	}
	function fromString$4(input) {
	    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');
	    if (protocolFree.includes('commit')) {
	        const commit = protocolFree.split('?')[1].split('=')[1];
	        const base = protocolFree.split('?')[0];
	        return stream_id_1.StreamID.fromString(base).atCommit(commit);
	    }
	    else {
	        return fromBytes$1(multibase_1$2.default.decode(protocolFree));
	    }
	}
	const TAG$1 = Symbol.for('@ceramicnetwork/streamid/CommitID');
	class CommitID {
	    constructor(type, cid, commit = null) {
	        this._tag = TAG$1;
	        _CommitID_type.set(this, void 0);
	        _CommitID_cid.set(this, void 0);
	        _CommitID_commit.set(this, void 0);
	        if (!type && type !== 0)
	            throw new Error('constructor: type required');
	        if (!cid)
	            throw new Error('constructor: cid required');
	        __classPrivateFieldSet$2(this, _CommitID_type, typeof type === 'string' ? stream_type_1$1.StreamType.codeByName(type) : type, "f");
	        __classPrivateFieldSet$2(this, _CommitID_cid, typeof cid === 'string' ? new cids_1$5.default(cid) : cid, "f");
	        __classPrivateFieldSet$2(this, _CommitID_commit, parseCommit(__classPrivateFieldGet$2(this, _CommitID_cid, "f"), commit), "f");
	    }
	    static isInstance(instance) {
	        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG$1;
	    }
	    get baseID() {
	        return new stream_id_1.StreamID(__classPrivateFieldGet$2(this, _CommitID_type, "f"), __classPrivateFieldGet$2(this, _CommitID_cid, "f"));
	    }
	    get type() {
	        return __classPrivateFieldGet$2(this, _CommitID_type, "f");
	    }
	    get typeName() {
	        return stream_type_1$1.StreamType.nameByCode(__classPrivateFieldGet$2(this, _CommitID_type, "f"));
	    }
	    get cid() {
	        return __classPrivateFieldGet$2(this, _CommitID_cid, "f");
	    }
	    get commit() {
	        return __classPrivateFieldGet$2(this, _CommitID_commit, "f") || __classPrivateFieldGet$2(this, _CommitID_cid, "f");
	    }
	    get bytes() {
	        var _a;
	        const codec = varint_1$3.default.encode(constants_1$3.STREAMID_CODEC);
	        const type = varint_1$3.default.encode(this.type);
	        const commitBytes = ((_a = __classPrivateFieldGet$2(this, _CommitID_commit, "f")) === null || _a === void 0 ? void 0 : _a.bytes) || new Uint8Array([0]);
	        return concat_1$1.default([codec, type, this.cid.bytes, commitBytes]);
	    }
	    atCommit(commit) {
	        return new CommitID(__classPrivateFieldGet$2(this, _CommitID_type, "f"), __classPrivateFieldGet$2(this, _CommitID_cid, "f"), commit);
	    }
	    equals(other) {
	        return (this.type === other.type && this.cid.equals(other.cid) && this.commit.equals(other.commit));
	    }
	    toString() {
	        return to_string_1$1.default(multibase_1$2.default.encode(constants_1$3.DEFAULT_BASE, this.bytes));
	    }
	    toUrl() {
	        return `ceramic://${this.toString()}`;
	    }
	    [(_CommitID_type = new WeakMap(), _CommitID_cid = new WeakMap(), _CommitID_commit = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {
	        return `CommitID(${this.toString()})`;
	    }
	    [Symbol.toPrimitive]() {
	        return this.toString();
	    }
	}
	CommitID.fromBytes = fromBytes$1;
	CommitID.fromString = fromString$4;
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", stream_id_1.StreamID),
	    __metadata$2("design:paramtypes", [])
	], CommitID.prototype, "baseID", null);
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", String),
	    __metadata$2("design:paramtypes", [])
	], CommitID.prototype, "typeName", null);
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", cids_1$5.default),
	    __metadata$2("design:paramtypes", [])
	], CommitID.prototype, "commit", null);
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", Uint8Array),
	    __metadata$2("design:paramtypes", [])
	], CommitID.prototype, "bytes", null);
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", Function),
	    __metadata$2("design:paramtypes", []),
	    __metadata$2("design:returntype", String)
	], CommitID.prototype, "toString", null);
	__decorate$5([
	    typescript_memoize_1$1.Memoize(),
	    __metadata$2("design:type", Function),
	    __metadata$2("design:paramtypes", []),
	    __metadata$2("design:returntype", String)
	], CommitID.prototype, "toUrl", null);
	commitId.CommitID = CommitID;

	var __decorate$4 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$1 = (commonjsGlobal && commonjsGlobal.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __classPrivateFieldSet$1 = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet$1 = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __importDefault$t = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var _StreamID_type, _StreamID_cid;
	Object.defineProperty(streamId, "__esModule", { value: true });
	streamId.StreamID = void 0;
	const cids_1$4 = __importDefault$t(src$5);
	const multibase_1$1 = __importDefault$t(src$b.exports);
	const varint_1$2 = __importDefault$t(varint$3);
	const ipld_dag_cbor_1$1 = __importDefault$t(src$4);
	const concat_1 = __importDefault$t(concat_1$2);
	const to_string_1 = __importDefault$t(toString_1);
	const constants_1$2 = constants$2;
	const reading_bytes_1 = readingBytes;
	const typescript_memoize_1 = require$$8$1;
	const commit_id_1 = commitId;
	const stream_type_1 = streamType;
	function fromBytes(bytes) {
	    const [streamCodec, streamCodecRemainder] = reading_bytes_1.readVarint(bytes);
	    if (streamCodec !== constants_1$2.STREAMID_CODEC)
	        throw new Error('fromBytes: invalid streamid, does not include streamid codec');
	    const [type, streamTypeRemainder] = reading_bytes_1.readVarint(streamCodecRemainder);
	    const [cid, cidRemainder] = reading_bytes_1.readCid(streamTypeRemainder);
	    if (cidRemainder.length > 0) {
	        throw new Error(`Invalid StreamID: contains commit`);
	    }
	    return new StreamID(type, cid);
	}
	function fromString$3(input) {
	    const protocolFree = input.replace('ceramic://', '').replace('/ceramic/', '');
	    const commitFree = protocolFree.includes('commit') ? protocolFree.split('?')[0] : protocolFree;
	    const bytes = multibase_1$1.default.decode(commitFree);
	    return fromBytes(bytes);
	}
	const TAG = Symbol.for('@ceramicnetwork/streamid/StreamID');
	class StreamID {
	    constructor(type, cid) {
	        this._tag = TAG;
	        _StreamID_type.set(this, void 0);
	        _StreamID_cid.set(this, void 0);
	        if (!(type || type === 0))
	            throw new Error('constructor: type required');
	        if (!cid)
	            throw new Error('constructor: cid required');
	        __classPrivateFieldSet$1(this, _StreamID_type, typeof type === 'string' ? stream_type_1.StreamType.codeByName(type) : type, "f");
	        __classPrivateFieldSet$1(this, _StreamID_cid, typeof cid === 'string' ? new cids_1$4.default(cid) : cid, "f");
	    }
	    static isInstance(instance) {
	        return typeof instance === 'object' && '_tag' in instance && instance._tag === TAG;
	    }
	    static async fromGenesis(type, genesis) {
	        const cid = await ipld_dag_cbor_1$1.default.util.cid(new Uint8Array(ipld_dag_cbor_1$1.default.util.serialize(genesis)));
	        return new StreamID(type, cid);
	    }
	    get type() {
	        return __classPrivateFieldGet$1(this, _StreamID_type, "f");
	    }
	    get typeName() {
	        return stream_type_1.StreamType.nameByCode(__classPrivateFieldGet$1(this, _StreamID_type, "f"));
	    }
	    get cid() {
	        return __classPrivateFieldGet$1(this, _StreamID_cid, "f");
	    }
	    get bytes() {
	        const codec = varint_1$2.default.encode(constants_1$2.STREAMID_CODEC);
	        const type = varint_1$2.default.encode(this.type);
	        return concat_1.default([codec, type, this.cid.bytes]);
	    }
	    get baseID() {
	        return new StreamID(__classPrivateFieldGet$1(this, _StreamID_type, "f"), __classPrivateFieldGet$1(this, _StreamID_cid, "f"));
	    }
	    atCommit(commit) {
	        return new commit_id_1.CommitID(__classPrivateFieldGet$1(this, _StreamID_type, "f"), __classPrivateFieldGet$1(this, _StreamID_cid, "f"), commit);
	    }
	    equals(other) {
	        if (StreamID.isInstance(other)) {
	            return this.type === other.type && this.cid.equals(other.cid);
	        }
	        else {
	            return false;
	        }
	    }
	    toString() {
	        return to_string_1.default(multibase_1$1.default.encode(constants_1$2.DEFAULT_BASE, this.bytes));
	    }
	    toUrl() {
	        return `ceramic://${this.toString()}`;
	    }
	    [(_StreamID_type = new WeakMap(), _StreamID_cid = new WeakMap(), Symbol.for('nodejs.util.inspect.custom'))]() {
	        return `StreamID(${this.toString()})`;
	    }
	    [Symbol.toPrimitive]() {
	        return this.toString();
	    }
	}
	StreamID.fromBytes = fromBytes;
	StreamID.fromString = fromString$3;
	__decorate$4([
	    typescript_memoize_1.Memoize(),
	    __metadata$1("design:type", String),
	    __metadata$1("design:paramtypes", [])
	], StreamID.prototype, "typeName", null);
	__decorate$4([
	    typescript_memoize_1.Memoize(),
	    __metadata$1("design:type", Uint8Array),
	    __metadata$1("design:paramtypes", [])
	], StreamID.prototype, "bytes", null);
	__decorate$4([
	    typescript_memoize_1.Memoize(),
	    __metadata$1("design:type", StreamID),
	    __metadata$1("design:paramtypes", [])
	], StreamID.prototype, "baseID", null);
	__decorate$4([
	    typescript_memoize_1.Memoize(),
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", []),
	    __metadata$1("design:returntype", String)
	], StreamID.prototype, "toString", null);
	__decorate$4([
	    typescript_memoize_1.Memoize(),
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", []),
	    __metadata$1("design:returntype", String)
	], StreamID.prototype, "toUrl", null);
	streamId.StreamID = StreamID;

	var streamRef = {};

	/**
	 * Can be used with Array.sort to sort and array with Uint8Array entries
	 *
	 * @param {Uint8Array} a
	 * @param {Uint8Array} b
	 */
	function compare$3 (a, b) {
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] < b[i]) {
	      return -1
	    }

	    if (a[i] > b[i]) {
	      return 1
	    }
	  }

	  if (a.byteLength > b.byteLength) {
	    return 1
	  }

	  if (a.byteLength < b.byteLength) {
	    return -1
	  }

	  return 0
	}

	var compare_1 = compare$3;

	/**
	 * Returns true if the two passed Uint8Arrays have the same content
	 *
	 * @param {Uint8Array} a
	 * @param {Uint8Array} b
	 */
	function equals$1 (a, b) {
	  if (a === b) {
	    return true
	  }

	  if (a.byteLength !== b.byteLength) {
	    return false
	  }

	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false
	    }
	  }

	  return true
	}

	var equals_1 = equals$1;

	/**
	 * Returns the xor distance between two arrays
	 *
	 * @param {Uint8Array} a
	 * @param {Uint8Array} b
	 */
	function xor$1 (a, b) {
	  if (a.length !== b.length) {
	    throw new Error('Inputs should have the same length')
	  }

	  const result = new Uint8Array(a.length);

	  for (let i = 0; i < a.length; i++) {
	    result[i] = a[i] ^ b[i];
	  }

	  return result
	}

	var xor_1 = xor$1;

	const compare$2 = compare_1;
	const concat$8 = concat_1$2;
	const equals = equals_1;
	const fromString$2 = fromString_1;
	const toString$2 = toString_1;
	const xor = xor_1;

	var uint8arrays$7 = {
	  compare: compare$2,
	  concat: concat$8,
	  equals,
	  fromString: fromString$2,
	  toString: toString$2,
	  xor
	};

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamRef = void 0;
	const stream_id_1 = streamId;
	const commit_id_1 = commitId;
	const uint8arrays = __importStar(uint8arrays$7);
	function tryCatch(f) {
	    try {
	        return f();
	    }
	    catch (_a) {
	        return null;
	    }
	}
	function complain(message) {
	    throw new Error(message);
	}
	(function (StreamRef) {
	    function from(input) {
	        if (stream_id_1.StreamID.isInstance(input)) {
	            return input;
	        }
	        else if (commit_id_1.CommitID.isInstance(input)) {
	            return input;
	        }
	        else if (input instanceof Uint8Array) {
	            return (tryCatch(() => commit_id_1.CommitID.fromBytes(input)) ||
	                tryCatch(() => stream_id_1.StreamID.fromBytes(input)) ||
	                complain(`Can not build CommitID or StreamID from bytes ${uint8arrays.toString(input, 'base36')}`));
	        }
	        else if (typeof input === 'string') {
	            return (tryCatch(() => commit_id_1.CommitID.fromString(input)) ||
	                tryCatch(() => stream_id_1.StreamID.fromString(input)) ||
	                complain(`Can not build CommitID or StreamID from string ${input}`));
	        }
	        else {
	            throw new Error(`Can not build CommitID or StreamID`);
	        }
	    }
	    StreamRef.from = from;
	})(exports.StreamRef || (exports.StreamRef = {}));

	}(streamRef));

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamRef = exports.StreamID = exports.CommitID = void 0;
	const stream_id_1 = streamId;
	var commit_id_1 = commitId;
	Object.defineProperty(exports, "CommitID", { enumerable: true, get: function () { return commit_id_1.CommitID; } });
	var stream_id_2 = streamId;
	Object.defineProperty(exports, "StreamID", { enumerable: true, get: function () { return stream_id_2.StreamID; } });
	var stream_ref_1 = streamRef;
	Object.defineProperty(exports, "StreamRef", { enumerable: true, get: function () { return stream_ref_1.StreamRef; } });
	__exportStar(streamType, exports);
	exports.default = stream_id_1.StreamID;

	}(lib$f));

	var __importDefault$s = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(utils$w, "__esModule", { value: true });
	utils$w.delay = utils$w.combineURLs = utils$w.typeStreamID = void 0;
	const streamid_1$6 = __importDefault$s(lib$f);
	function typeStreamID(streamId) {
	    return typeof streamId === 'string' ? streamid_1$6.default.fromString(streamId) : streamId;
	}
	utils$w.typeStreamID = typeStreamID;
	function combineURLs(baseURL, relativeURL) {
	    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
	}
	utils$w.combineURLs = combineURLs;
	async function delay$3(mills) {
	    await new Promise((resolve) => setTimeout(() => resolve(), mills));
	}
	utils$w.delay = delay$3;

	var document$1 = {};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics$2 = function(d, b) {
	    extendStatics$2 = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics$2(d, b);
	};

	function __extends$3(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics$2(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	function __awaiter$8(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator$3(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __values$2(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read$2(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray$1(to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	}

	function __await$2(v) {
	    return this instanceof __await$2 ? (this.v = v, this) : new __await$2(v);
	}

	function __asyncGenerator$2(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await$2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncValues$2(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values$2 === "function" ? __values$2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function isFunction$4(value) {
	    return typeof value === 'function';
	}

	function createErrorClass$1(createImpl) {
	    var _super = function (instance) {
	        Error.call(instance);
	        instance.stack = new Error().stack;
	    };
	    var ctorFunc = createImpl(_super);
	    ctorFunc.prototype = Object.create(Error.prototype);
	    ctorFunc.prototype.constructor = ctorFunc;
	    return ctorFunc;
	}

	var UnsubscriptionError$2 = createErrorClass$1(function (_super) {
	    return function UnsubscriptionErrorImpl(errors) {
	        _super(this);
	        this.message = errors
	            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
	            : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	    };
	});

	function arrRemove$1(arr, item) {
	    if (arr) {
	        var index = arr.indexOf(item);
	        0 <= index && arr.splice(index, 1);
	    }
	}

	var Subscription$2 = (function () {
	    function Subscription(initialTeardown) {
	        this.initialTeardown = initialTeardown;
	        this.closed = false;
	        this._parentage = null;
	        this._teardowns = null;
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var e_1, _a, e_2, _b;
	        var errors;
	        if (!this.closed) {
	            this.closed = true;
	            var _parentage = this._parentage;
	            if (_parentage) {
	                this._parentage = null;
	                if (Array.isArray(_parentage)) {
	                    try {
	                        for (var _parentage_1 = __values$2(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
	                            var parent_1 = _parentage_1_1.value;
	                            parent_1.remove(this);
	                        }
	                    }
	                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                    finally {
	                        try {
	                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
	                        }
	                        finally { if (e_1) throw e_1.error; }
	                    }
	                }
	                else {
	                    _parentage.remove(this);
	                }
	            }
	            var initialTeardown = this.initialTeardown;
	            if (isFunction$4(initialTeardown)) {
	                try {
	                    initialTeardown();
	                }
	                catch (e) {
	                    errors = e instanceof UnsubscriptionError$2 ? e.errors : [e];
	                }
	            }
	            var _teardowns = this._teardowns;
	            if (_teardowns) {
	                this._teardowns = null;
	                try {
	                    for (var _teardowns_1 = __values$2(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
	                        var teardown_1 = _teardowns_1_1.value;
	                        try {
	                            execTeardown$1(teardown_1);
	                        }
	                        catch (err) {
	                            errors = errors !== null && errors !== void 0 ? errors : [];
	                            if (err instanceof UnsubscriptionError$2) {
	                                errors = __spreadArray$1(__spreadArray$1([], __read$2(errors)), __read$2(err.errors));
	                            }
	                            else {
	                                errors.push(err);
	                            }
	                        }
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	            if (errors) {
	                throw new UnsubscriptionError$2(errors);
	            }
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var _a;
	        if (teardown && teardown !== this) {
	            if (this.closed) {
	                execTeardown$1(teardown);
	            }
	            else {
	                if (teardown instanceof Subscription) {
	                    if (teardown.closed || teardown._hasParent(this)) {
	                        return;
	                    }
	                    teardown._addParent(this);
	                }
	                (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
	            }
	        }
	    };
	    Subscription.prototype._hasParent = function (parent) {
	        var _parentage = this._parentage;
	        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _parentage = this._parentage;
	        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
	    };
	    Subscription.prototype._removeParent = function (parent) {
	        var _parentage = this._parentage;
	        if (_parentage === parent) {
	            this._parentage = null;
	        }
	        else if (Array.isArray(_parentage)) {
	            arrRemove$1(_parentage, parent);
	        }
	    };
	    Subscription.prototype.remove = function (teardown) {
	        var _teardowns = this._teardowns;
	        _teardowns && arrRemove$1(_teardowns, teardown);
	        if (teardown instanceof Subscription) {
	            teardown._removeParent(this);
	        }
	    };
	    Subscription.EMPTY = (function () {
	        var empty = new Subscription();
	        empty.closed = true;
	        return empty;
	    })();
	    return Subscription;
	}());
	var EMPTY_SUBSCRIPTION$1 = Subscription$2.EMPTY;
	function isSubscription$1(value) {
	    return (value instanceof Subscription$2 ||
	        (value && 'closed' in value && isFunction$4(value.remove) && isFunction$4(value.add) && isFunction$4(value.unsubscribe)));
	}
	function execTeardown$1(teardown) {
	    if (isFunction$4(teardown)) {
	        teardown();
	    }
	    else {
	        teardown.unsubscribe();
	    }
	}

	var config$2 = {
	    onUnhandledError: null,
	    onStoppedNotification: null,
	    Promise: undefined,
	    useDeprecatedSynchronousErrorHandling: false,
	    useDeprecatedNextContext: false,
	};

	var timeoutProvider$1 = {
	    setTimeout: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = timeoutProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray$1([], __read$2(args)));
	    },
	    clearTimeout: function (handle) {
	        var delegate = timeoutProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
	    },
	    delegate: undefined,
	};

	function reportUnhandledError$1(err) {
	    timeoutProvider$1.setTimeout(function () {
	        var onUnhandledError = config$2.onUnhandledError;
	        if (onUnhandledError) {
	            onUnhandledError(err);
	        }
	        else {
	            throw err;
	        }
	    });
	}

	function noop$2() { }

	var COMPLETE_NOTIFICATION$1 = (function () { return createNotification$1('C', undefined, undefined); })();
	function errorNotification$1(error) {
	    return createNotification$1('E', undefined, error);
	}
	function nextNotification$1(value) {
	    return createNotification$1('N', value, undefined);
	}
	function createNotification$1(kind, value, error) {
	    return {
	        kind: kind,
	        value: value,
	        error: error,
	    };
	}

	var context$2 = null;
	function errorContext$1(cb) {
	    if (config$2.useDeprecatedSynchronousErrorHandling) {
	        var isRoot = !context$2;
	        if (isRoot) {
	            context$2 = { errorThrown: false, error: null };
	        }
	        cb();
	        if (isRoot) {
	            var _a = context$2, errorThrown = _a.errorThrown, error = _a.error;
	            context$2 = null;
	            if (errorThrown) {
	                throw error;
	            }
	        }
	    }
	    else {
	        cb();
	    }
	}
	function captureError$1(err) {
	    if (config$2.useDeprecatedSynchronousErrorHandling && context$2) {
	        context$2.errorThrown = true;
	        context$2.error = err;
	    }
	}

	var Subscriber$2 = (function (_super) {
	    __extends$3(Subscriber, _super);
	    function Subscriber(destination) {
	        var _this = _super.call(this) || this;
	        _this.isStopped = false;
	        if (destination) {
	            _this.destination = destination;
	            if (isSubscription$1(destination)) {
	                destination.add(_this);
	            }
	        }
	        else {
	            _this.destination = EMPTY_OBSERVER$1;
	        }
	        return _this;
	    }
	    Subscriber.create = function (next, error, complete) {
	        return new SafeSubscriber$2(next, error, complete);
	    };
	    Subscriber.prototype.next = function (value) {
	        if (this.isStopped) {
	            handleStoppedNotification$1(nextNotification$1(value), this);
	        }
	        else {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (this.isStopped) {
	            handleStoppedNotification$1(errorNotification$1(err), this);
	        }
	        else {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (this.isStopped) {
	            handleStoppedNotification$1(COMPLETE_NOTIFICATION$1, this);
	        }
	        else {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.isStopped = true;
	            _super.prototype.unsubscribe.call(this);
	            this.destination = null;
	        }
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        try {
	            this.destination.error(err);
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    Subscriber.prototype._complete = function () {
	        try {
	            this.destination.complete();
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    return Subscriber;
	}(Subscription$2));
	var SafeSubscriber$2 = (function (_super) {
	    __extends$3(SafeSubscriber, _super);
	    function SafeSubscriber(observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        var next;
	        if (isFunction$4(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);
	            var context_1;
	            if (_this && config$2.useDeprecatedNextContext) {
	                context_1 = Object.create(observerOrNext);
	                context_1.unsubscribe = function () { return _this.unsubscribe(); };
	            }
	            else {
	                context_1 = observerOrNext;
	            }
	            next = next === null || next === void 0 ? void 0 : next.bind(context_1);
	            error = error === null || error === void 0 ? void 0 : error.bind(context_1);
	            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
	        }
	        _this.destination = {
	            next: next ? wrapForErrorHandling$1(next) : noop$2,
	            error: wrapForErrorHandling$1(error !== null && error !== void 0 ? error : defaultErrorHandler$1),
	            complete: complete ? wrapForErrorHandling$1(complete) : noop$2,
	        };
	        return _this;
	    }
	    return SafeSubscriber;
	}(Subscriber$2));
	function wrapForErrorHandling$1(handler, instance) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        try {
	            handler.apply(void 0, __spreadArray$1([], __read$2(args)));
	        }
	        catch (err) {
	            if (config$2.useDeprecatedSynchronousErrorHandling) {
	                captureError$1(err);
	            }
	            else {
	                reportUnhandledError$1(err);
	            }
	        }
	    };
	}
	function defaultErrorHandler$1(err) {
	    throw err;
	}
	function handleStoppedNotification$1(notification, subscriber) {
	    var onStoppedNotification = config$2.onStoppedNotification;
	    onStoppedNotification && timeoutProvider$1.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
	}
	var EMPTY_OBSERVER$1 = {
	    closed: true,
	    next: noop$2,
	    error: defaultErrorHandler$1,
	    complete: noop$2,
	};

	var observable$2 = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

	function identity$5(x) {
	    return x;
	}

	function pipe$2() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return pipeFromArray$2(fns);
	}
	function pipeFromArray$2(fns) {
	    if (fns.length === 0) {
	        return identity$5;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	var Observable$2 = (function () {
	    function Observable(subscribe) {
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var _this = this;
	        var subscriber = isSubscriber$1(observerOrNext) ? observerOrNext : new SafeSubscriber$2(observerOrNext, error, complete);
	        errorContext$1(function () {
	            var _a = _this, operator = _a.operator, source = _a.source;
	            subscriber.add(operator
	                ?
	                    operator.call(subscriber, source)
	                : source
	                    ?
	                        _this._subscribe(subscriber)
	                    :
	                        _this._trySubscribe(subscriber));
	        });
	        return subscriber;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.error(err);
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor$2(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var _a;
	        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
	    };
	    Observable.prototype[observable$2] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        return pipeFromArray$2(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor$2(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor$2(promiseCtor) {
	    var _a;
	    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$2.Promise) !== null && _a !== void 0 ? _a : Promise;
	}
	function isObserver$1(value) {
	    return value && isFunction$4(value.next) && isFunction$4(value.error) && isFunction$4(value.complete);
	}
	function isSubscriber$1(value) {
	    return (value && value instanceof Subscriber$2) || (isObserver$1(value) && isSubscription$1(value));
	}

	function hasLift$1(source) {
	    return isFunction$4(source === null || source === void 0 ? void 0 : source.lift);
	}
	function operate$1(init) {
	    return function (source) {
	        if (hasLift$1(source)) {
	            return source.lift(function (liftedSource) {
	                try {
	                    return init(liftedSource, this);
	                }
	                catch (err) {
	                    this.error(err);
	                }
	            });
	        }
	        throw new TypeError('Unable to lift unknown Observable type');
	    };
	}

	var OperatorSubscriber$1 = (function (_super) {
	    __extends$3(OperatorSubscriber, _super);
	    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
	        var _this = _super.call(this, destination) || this;
	        _this.onFinalize = onFinalize;
	        _this._next = onNext
	            ? function (value) {
	                try {
	                    onNext(value);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	            }
	            : _super.prototype._next;
	        _this._error = onError
	            ? function (err) {
	                try {
	                    onError(err);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._error;
	        _this._complete = onComplete
	            ? function () {
	                try {
	                    onComplete();
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._complete;
	        return _this;
	    }
	    OperatorSubscriber.prototype.unsubscribe = function () {
	        var _a;
	        var closed = this.closed;
	        _super.prototype.unsubscribe.call(this);
	        !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
	    };
	    return OperatorSubscriber;
	}(Subscriber$2));

	function refCount$2() {
	    return operate$1(function (source, subscriber) {
	        var connection = null;
	        source._refCount++;
	        var refCounter = new OperatorSubscriber$1(subscriber, undefined, undefined, undefined, function () {
	            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
	                connection = null;
	                return;
	            }
	            var sharedConnection = source._connection;
	            var conn = connection;
	            connection = null;
	            if (sharedConnection && (!conn || sharedConnection === conn)) {
	                sharedConnection.unsubscribe();
	            }
	            subscriber.unsubscribe();
	        });
	        source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            connection = source.connect();
	        }
	    });
	}

	var ConnectableObservable$2 = (function (_super) {
	    __extends$3(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._subject = null;
	        _this._refCount = 0;
	        _this._connection = null;
	        if (hasLift$1(source)) {
	            _this.lift = source.lift;
	        }
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype._teardown = function () {
	        this._refCount = 0;
	        var _connection = this._connection;
	        this._subject = this._connection = null;
	        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var _this = this;
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription$2();
	            var subject_1 = this.getSubject();
	            connection.add(this.source.subscribe(new OperatorSubscriber$1(subject_1, undefined, function () {
	                _this._teardown();
	                subject_1.complete();
	            }, function (err) {
	                _this._teardown();
	                subject_1.error(err);
	            }, function () { return _this._teardown(); })));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription$2.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount$2()(this);
	    };
	    return ConnectableObservable;
	}(Observable$2));

	var performanceTimestampProvider$1 = {
	    now: function () {
	        return (performanceTimestampProvider$1.delegate || performance).now();
	    },
	    delegate: undefined,
	};

	var animationFrameProvider$1 = {
	    schedule: function (callback) {
	        var request = requestAnimationFrame;
	        var cancel = cancelAnimationFrame;
	        var delegate = animationFrameProvider$1.delegate;
	        if (delegate) {
	            request = delegate.requestAnimationFrame;
	            cancel = delegate.cancelAnimationFrame;
	        }
	        var handle = request(function (timestamp) {
	            cancel = undefined;
	            callback(timestamp);
	        });
	        return new Subscription$2(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
	    },
	    requestAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray$1([], __read$2(args)));
	    },
	    cancelAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray$1([], __read$2(args)));
	    },
	    delegate: undefined,
	};

	function animationFrames$1(timestampProvider) {
	    return timestampProvider ? animationFramesFactory$1(timestampProvider) : DEFAULT_ANIMATION_FRAMES$1;
	}
	function animationFramesFactory$1(timestampProvider) {
	    var schedule = animationFrameProvider$1.schedule;
	    return new Observable$2(function (subscriber) {
	        var subscription = new Subscription$2();
	        var provider = timestampProvider || performanceTimestampProvider$1;
	        var start = provider.now();
	        var run = function (timestamp) {
	            var now = provider.now();
	            subscriber.next({
	                timestamp: timestampProvider ? now : timestamp,
	                elapsed: now - start
	            });
	            if (!subscriber.closed) {
	                subscription.add(schedule(run));
	            }
	        };
	        subscription.add(schedule(run));
	        return subscription;
	    });
	}
	var DEFAULT_ANIMATION_FRAMES$1 = animationFramesFactory$1();

	var ObjectUnsubscribedError$2 = createErrorClass$1(function (_super) {
	    return function ObjectUnsubscribedErrorImpl() {
	        _super(this);
	        this.name = 'ObjectUnsubscribedError';
	        this.message = 'object unsubscribed';
	    };
	});

	var Subject$2 = (function (_super) {
	    __extends$3(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.closed = false;
	        _this.observers = [];
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject$2(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype._throwIfClosed = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError$2();
	        }
	    };
	    Subject.prototype.next = function (value) {
	        var _this = this;
	        errorContext$1(function () {
	            var e_1, _a;
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                var copy = _this.observers.slice();
	                try {
	                    for (var copy_1 = __values$2(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
	                        var observer = copy_1_1.value;
	                        observer.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            }
	        });
	    };
	    Subject.prototype.error = function (err) {
	        var _this = this;
	        errorContext$1(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.hasError = _this.isStopped = true;
	                _this.thrownError = err;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().error(err);
	                }
	            }
	        });
	    };
	    Subject.prototype.complete = function () {
	        var _this = this;
	        errorContext$1(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.isStopped = true;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().complete();
	                }
	            }
	        });
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = this.closed = true;
	        this.observers = null;
	    };
	    Object.defineProperty(Subject.prototype, "observed", {
	        get: function () {
	            var _a;
	            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Subject.prototype._trySubscribe = function (subscriber) {
	        this._throwIfClosed();
	        return _super.prototype._trySubscribe.call(this, subscriber);
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._checkFinalizedStatuses(subscriber);
	        return this._innerSubscribe(subscriber);
	    };
	    Subject.prototype._innerSubscribe = function (subscriber) {
	        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
	        return hasError || isStopped
	            ? EMPTY_SUBSCRIPTION$1
	            : (observers.push(subscriber), new Subscription$2(function () { return arrRemove$1(observers, subscriber); }));
	    };
	    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped) {
	            subscriber.complete();
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable$2();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject$2(destination, source);
	    };
	    return Subject;
	}(Observable$2));
	var AnonymousSubject$2 = (function (_super) {
	    __extends$3(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var _a, _b;
	        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION$1;
	    };
	    return AnonymousSubject;
	}(Subject$2));

	var BehaviorSubject$2 = (function (_super) {
	    __extends$3(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        !subscription.closed && subscriber.next(this._value);
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
	        if (hasError) {
	            throw thrownError;
	        }
	        this._throwIfClosed();
	        return _value;
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, (this._value = value));
	    };
	    return BehaviorSubject;
	}(Subject$2));

	var dateTimestampProvider$1 = {
	    now: function () {
	        return (dateTimestampProvider$1.delegate || Date).now();
	    },
	    delegate: undefined,
	};

	var ReplaySubject$2 = (function (_super) {
	    __extends$3(ReplaySubject, _super);
	    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
	        if (_bufferSize === void 0) { _bufferSize = Infinity; }
	        if (_windowTime === void 0) { _windowTime = Infinity; }
	        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider$1; }
	        var _this = _super.call(this) || this;
	        _this._bufferSize = _bufferSize;
	        _this._windowTime = _windowTime;
	        _this._timestampProvider = _timestampProvider;
	        _this._buffer = [];
	        _this._infiniteTimeWindow = true;
	        _this._infiniteTimeWindow = _windowTime === Infinity;
	        _this._bufferSize = Math.max(1, _bufferSize);
	        _this._windowTime = Math.max(1, _windowTime);
	        return _this;
	    }
	    ReplaySubject.prototype.next = function (value) {
	        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
	        if (!isStopped) {
	            _buffer.push(value);
	            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
	        }
	        this._trimBuffer();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._trimBuffer();
	        var subscription = this._innerSubscribe(subscriber);
	        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
	        var copy = _buffer.slice();
	        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
	            subscriber.next(copy[i]);
	        }
	        this._checkFinalizedStatuses(subscriber);
	        return subscription;
	    };
	    ReplaySubject.prototype._trimBuffer = function () {
	        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
	        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
	        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
	        if (!_infiniteTimeWindow) {
	            var now = _timestampProvider.now();
	            var last = 0;
	            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
	                last = i;
	            }
	            last && _buffer.splice(0, last + 1);
	        }
	    };
	    return ReplaySubject;
	}(Subject$2));

	var AsyncSubject$2 = (function (_super) {
	    __extends$3(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._value = null;
	        _this._hasValue = false;
	        _this._isComplete = false;
	        return _this;
	    }
	    AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped || _isComplete) {
	            _hasValue && subscriber.next(_value);
	            subscriber.complete();
	        }
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._value = value;
	            this._hasValue = true;
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
	        if (!_isComplete) {
	            this._isComplete = true;
	            _hasValue && _super.prototype.next.call(this, _value);
	            _super.prototype.complete.call(this);
	        }
	    };
	    return AsyncSubject;
	}(Subject$2));

	var Action$2 = (function (_super) {
	    __extends$3(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription$2));

	var intervalProvider$1 = {
	    setInterval: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = intervalProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray$1([], __read$2(args)));
	    },
	    clearInterval: function (handle) {
	        var delegate = intervalProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
	    },
	    delegate: undefined,
	};

	var AsyncAction$2 = (function (_super) {
	    __extends$3(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return intervalProvider$1.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay != null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        intervalProvider$1.clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, _delay) {
	        var errored = false;
	        var errorValue;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = e ? e : new Error('Scheduled action threw falsy error');
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            var _a = this, id = _a.id, scheduler = _a.scheduler;
	            var actions = scheduler.actions;
	            this.work = this.state = this.scheduler = null;
	            this.pending = false;
	            arrRemove$1(actions, this);
	            if (id != null) {
	                this.id = this.recycleAsyncId(scheduler, id, null);
	            }
	            this.delay = null;
	            _super.prototype.unsubscribe.call(this);
	        }
	    };
	    return AsyncAction;
	}(Action$2));

	var nextHandle$2 = 1;
	var resolved$1;
	var activeHandles$2 = {};
	function findAndClearHandle$2(handle) {
	    if (handle in activeHandles$2) {
	        delete activeHandles$2[handle];
	        return true;
	    }
	    return false;
	}
	var Immediate$2 = {
	    setImmediate: function (cb) {
	        var handle = nextHandle$2++;
	        activeHandles$2[handle] = true;
	        if (!resolved$1) {
	            resolved$1 = Promise.resolve();
	        }
	        resolved$1.then(function () { return findAndClearHandle$2(handle) && cb(); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        findAndClearHandle$2(handle);
	    },
	};

	var setImmediate$1 = Immediate$2.setImmediate, clearImmediate$1 = Immediate$2.clearImmediate;
	var immediateProvider$1 = {
	    setImmediate: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = immediateProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray$1([], __read$2(args)));
	    },
	    clearImmediate: function (handle) {
	        var delegate = immediateProvider$1.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate$1)(handle);
	    },
	    delegate: undefined,
	};

	var AsapAction$2 = (function (_super) {
	    __extends$3(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = immediateProvider$1.setImmediate(scheduler.flush.bind(scheduler, undefined)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            immediateProvider$1.clearImmediate(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction$2));

	var Scheduler$2 = (function () {
	    function Scheduler(schedulerActionCtor, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.schedulerActionCtor = schedulerActionCtor;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.schedulerActionCtor(this, work).schedule(state, delay);
	    };
	    Scheduler.now = dateTimestampProvider$1.now;
	    return Scheduler;
	}());

	var AsyncScheduler$2 = (function (_super) {
	    __extends$3(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler$2.now; }
	        var _this = _super.call(this, SchedulerAction, now) || this;
	        _this.actions = [];
	        _this._active = false;
	        _this._scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this._active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this._active = true;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while ((action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler$2));

	var AsapScheduler$2 = (function (_super) {
	    __extends$3(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler$2));

	var asapScheduler$2 = new AsapScheduler$2(AsapAction$2);
	var asap$2 = asapScheduler$2;

	var asyncScheduler$2 = new AsyncScheduler$2(AsyncAction$2);
	var async$2 = asyncScheduler$2;

	var QueueAction$2 = (function (_super) {
	    __extends$3(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction$2));

	var QueueScheduler$2 = (function (_super) {
	    __extends$3(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler$2));

	var queueScheduler$2 = new QueueScheduler$2(QueueAction$2);
	var queue$2 = queueScheduler$2;

	var AnimationFrameAction$2 = (function (_super) {
	    __extends$3(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider$1.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            animationFrameProvider$1.cancelAnimationFrame(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction$2));

	var AnimationFrameScheduler$2 = (function (_super) {
	    __extends$3(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler$2));

	var animationFrameScheduler$2 = new AnimationFrameScheduler$2(AnimationFrameAction$2);
	var animationFrame$2 = animationFrameScheduler$2;

	var VirtualTimeScheduler$2 = (function (_super) {
	    __extends$3(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
	        if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction$2; }
	        if (maxFrames === void 0) { maxFrames = Infinity; }
	        var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error;
	        var action;
	        while ((action = actions[0]) && action.delay <= maxFrames) {
	            actions.shift();
	            this.frame = action.delay;
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        }
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler$2));
	var VirtualAction$2 = (function (_super) {
	    __extends$3(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) { index = (scheduler.index += 1); }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (Number.isFinite(delay)) {
	            if (!this.id) {
	                return _super.prototype.schedule.call(this, state, delay);
	            }
	            this.active = false;
	            var action = new VirtualAction(this.scheduler, this.work);
	            this.add(action);
	            return action.schedule(state, delay);
	        }
	        else {
	            return Subscription$2.EMPTY;
	        }
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction$2));

	var EMPTY$2 = new Observable$2(function (subscriber) { return subscriber.complete(); });
	function empty$3(scheduler) {
	    return scheduler ? emptyScheduled$2(scheduler) : EMPTY$2;
	}
	function emptyScheduled$2(scheduler) {
	    return new Observable$2(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	function isScheduler$2(value) {
	    return value && isFunction$4(value.schedule);
	}

	function last$4(arr) {
	    return arr[arr.length - 1];
	}
	function popResultSelector$1(args) {
	    return isFunction$4(last$4(args)) ? args.pop() : undefined;
	}
	function popScheduler$1(args) {
	    return isScheduler$2(last$4(args)) ? args.pop() : undefined;
	}
	function popNumber$1(args, defaultValue) {
	    return typeof last$4(args) === 'number' ? args.pop() : defaultValue;
	}

	var isArrayLike$2 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	function isPromise$2(value) {
	    return isFunction$4(value === null || value === void 0 ? void 0 : value.then);
	}

	function isInteropObservable$2(input) {
	    return isFunction$4(input[observable$2]);
	}

	function isAsyncIterable$1(obj) {
	    return Symbol.asyncIterator && isFunction$4(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
	}

	function createInvalidObservableTypeError$1(input) {
	    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
	}

	function getSymbolIterator$2() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator$2 = getSymbolIterator$2();

	function isIterable$2(input) {
	    return isFunction$4(input === null || input === void 0 ? void 0 : input[iterator$2]);
	}

	function readableStreamLikeToAsyncGenerator$1(readableStream) {
	    return __asyncGenerator$2(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
	        var reader, _a, value, done;
	        return __generator$3(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    reader = readableStream.getReader();
	                    _b.label = 1;
	                case 1:
	                    _b.trys.push([1, , 9, 10]);
	                    _b.label = 2;
	                case 2:
	                    return [4, __await$2(reader.read())];
	                case 3:
	                    _a = _b.sent(), value = _a.value, done = _a.done;
	                    if (!done) return [3, 5];
	                    return [4, __await$2(void 0)];
	                case 4: return [2, _b.sent()];
	                case 5: return [4, __await$2(value)];
	                case 6: return [4, _b.sent()];
	                case 7:
	                    _b.sent();
	                    return [3, 2];
	                case 8: return [3, 10];
	                case 9:
	                    reader.releaseLock();
	                    return [7];
	                case 10: return [2];
	            }
	        });
	    });
	}
	function isReadableStreamLike$1(obj) {
	    return isFunction$4(obj === null || obj === void 0 ? void 0 : obj.getReader);
	}

	function innerFrom$1(input) {
	    if (input instanceof Observable$2) {
	        return input;
	    }
	    if (input != null) {
	        if (isInteropObservable$2(input)) {
	            return fromInteropObservable$1(input);
	        }
	        if (isArrayLike$2(input)) {
	            return fromArrayLike$1(input);
	        }
	        if (isPromise$2(input)) {
	            return fromPromise$1(input);
	        }
	        if (isAsyncIterable$1(input)) {
	            return fromAsyncIterable$1(input);
	        }
	        if (isIterable$2(input)) {
	            return fromIterable$1(input);
	        }
	        if (isReadableStreamLike$1(input)) {
	            return fromReadableStreamLike$1(input);
	        }
	    }
	    throw createInvalidObservableTypeError$1(input);
	}
	function fromInteropObservable$1(obj) {
	    return new Observable$2(function (subscriber) {
	        var obs = obj[observable$2]();
	        if (isFunction$4(obs.subscribe)) {
	            return obs.subscribe(subscriber);
	        }
	        throw new TypeError('Provided object does not correctly implement Symbol.observable');
	    });
	}
	function fromArrayLike$1(array) {
	    return new Observable$2(function (subscriber) {
	        for (var i = 0; i < array.length && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    });
	}
	function fromPromise$1(promise) {
	    return new Observable$2(function (subscriber) {
	        promise
	            .then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, reportUnhandledError$1);
	    });
	}
	function fromIterable$1(iterable) {
	    return new Observable$2(function (subscriber) {
	        var e_1, _a;
	        try {
	            for (var iterable_1 = __values$2(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
	                var value = iterable_1_1.value;
	                subscriber.next(value);
	                if (subscriber.closed) {
	                    return;
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        subscriber.complete();
	    });
	}
	function fromAsyncIterable$1(asyncIterable) {
	    return new Observable$2(function (subscriber) {
	        process$2(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
	    });
	}
	function fromReadableStreamLike$1(readableStream) {
	    return fromAsyncIterable$1(readableStreamLikeToAsyncGenerator$1(readableStream));
	}
	function process$2(asyncIterable, subscriber) {
	    var asyncIterable_1, asyncIterable_1_1;
	    var e_2, _a;
	    return __awaiter$8(this, void 0, void 0, function () {
	        var value, e_2_1;
	        return __generator$3(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    _b.trys.push([0, 5, 6, 11]);
	                    asyncIterable_1 = __asyncValues$2(asyncIterable);
	                    _b.label = 1;
	                case 1: return [4, asyncIterable_1.next()];
	                case 2:
	                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
	                    value = asyncIterable_1_1.value;
	                    subscriber.next(value);
	                    if (subscriber.closed) {
	                        return [2];
	                    }
	                    _b.label = 3;
	                case 3: return [3, 1];
	                case 4: return [3, 11];
	                case 5:
	                    e_2_1 = _b.sent();
	                    e_2 = { error: e_2_1 };
	                    return [3, 11];
	                case 6:
	                    _b.trys.push([6, , 9, 10]);
	                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
	                    return [4, _a.call(asyncIterable_1)];
	                case 7:
	                    _b.sent();
	                    _b.label = 8;
	                case 8: return [3, 10];
	                case 9:
	                    if (e_2) throw e_2.error;
	                    return [7];
	                case 10: return [7];
	                case 11:
	                    subscriber.complete();
	                    return [2];
	            }
	        });
	    });
	}

	function executeSchedule$1(parentSubscription, scheduler, work, delay, repeat) {
	    if (delay === void 0) { delay = 0; }
	    if (repeat === void 0) { repeat = false; }
	    var scheduleSubscription = scheduler.schedule(function () {
	        work();
	        if (repeat) {
	            parentSubscription.add(this.schedule(null, delay));
	        }
	        else {
	            this.unsubscribe();
	        }
	    }, delay);
	    parentSubscription.add(scheduleSubscription);
	    if (!repeat) {
	        return scheduleSubscription;
	    }
	}

	function observeOn$2(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate$1(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
	    });
	}

	function subscribeOn$2(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate$1(function (source, subscriber) {
	        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
	    });
	}

	function scheduleObservable$2(input, scheduler) {
	    return innerFrom$1(input).pipe(subscribeOn$2(scheduler), observeOn$2(scheduler));
	}

	function schedulePromise$2(input, scheduler) {
	    return innerFrom$1(input).pipe(subscribeOn$2(scheduler), observeOn$2(scheduler));
	}

	function scheduleArray$2(input, scheduler) {
	    return new Observable$2(function (subscriber) {
	        var i = 0;
	        return scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	            }
	            else {
	                subscriber.next(input[i++]);
	                if (!subscriber.closed) {
	                    this.schedule();
	                }
	            }
	        });
	    });
	}

	function scheduleIterable$2(input, scheduler) {
	    return new Observable$2(function (subscriber) {
	        var iterator;
	        executeSchedule$1(subscriber, scheduler, function () {
	            iterator = input[iterator$2]();
	            executeSchedule$1(subscriber, scheduler, function () {
	                var _a;
	                var value;
	                var done;
	                try {
	                    (_a = iterator.next(), value = _a.value, done = _a.done);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                }
	            }, 0, true);
	        });
	        return function () { return isFunction$4(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
	    });
	}

	function scheduleAsyncIterable$1(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable$2(function (subscriber) {
	        executeSchedule$1(subscriber, scheduler, function () {
	            var iterator = input[Symbol.asyncIterator]();
	            executeSchedule$1(subscriber, scheduler, function () {
	                iterator.next().then(function (result) {
	                    if (result.done) {
	                        subscriber.complete();
	                    }
	                    else {
	                        subscriber.next(result.value);
	                    }
	                });
	            }, 0, true);
	        });
	    });
	}

	function scheduleReadableStreamLike$1(input, scheduler) {
	    return scheduleAsyncIterable$1(readableStreamLikeToAsyncGenerator$1(input), scheduler);
	}

	function scheduled$2(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable$2(input)) {
	            return scheduleObservable$2(input, scheduler);
	        }
	        if (isArrayLike$2(input)) {
	            return scheduleArray$2(input, scheduler);
	        }
	        if (isPromise$2(input)) {
	            return schedulePromise$2(input, scheduler);
	        }
	        if (isAsyncIterable$1(input)) {
	            return scheduleAsyncIterable$1(input, scheduler);
	        }
	        if (isIterable$2(input)) {
	            return scheduleIterable$2(input, scheduler);
	        }
	        if (isReadableStreamLike$1(input)) {
	            return scheduleReadableStreamLike$1(input, scheduler);
	        }
	    }
	    throw createInvalidObservableTypeError$1(input);
	}

	function from$4(input, scheduler) {
	    return scheduler ? scheduled$2(input, scheduler) : innerFrom$1(input);
	}

	function of$2() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(args);
	    return from$4(args, scheduler);
	}

	function throwError$2(errorOrErrorFactory, scheduler) {
	    var errorFactory = isFunction$4(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
	    var init = function (subscriber) { return subscriber.error(errorFactory()); };
	    return new Observable$2(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
	}

	var NotificationKind$2;
	(function (NotificationKind) {
	    NotificationKind["NEXT"] = "N";
	    NotificationKind["ERROR"] = "E";
	    NotificationKind["COMPLETE"] = "C";
	})(NotificationKind$2 || (NotificationKind$2 = {}));
	var Notification$2 = (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        return observeNotification$1(this, observer);
	    };
	    Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        var _a;
	        return isFunction$4((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
	            ? this.observe(nextOrObserver)
	            : this.do(nextOrObserver, error, complete);
	    };
	    Notification.prototype.toObservable = function () {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        var result = kind === 'N'
	            ?
	                of$2(value)
	            :
	                kind === 'E'
	                    ?
	                        throwError$2(function () { return error; })
	                    :
	                        kind === 'C'
	                            ?
	                                EMPTY$2
	                            :
	                                0;
	        if (!result) {
	            throw new TypeError("Unexpected notification kind " + kind);
	        }
	        return result;
	    };
	    Notification.createNext = function (value) {
	        return new Notification('N', value);
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    return Notification;
	}());
	function observeNotification$1(notification, observer) {
	    var _a, _b, _c;
	    var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
	    if (typeof kind !== 'string') {
	        throw new TypeError('Invalid notification, missing "kind"');
	    }
	    kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
	}

	function isObservable$2(obj) {
	    return !!obj && (obj instanceof Observable$2 || (isFunction$4(obj.lift) && isFunction$4(obj.subscribe)));
	}

	var EmptyError$2 = createErrorClass$1(function (_super) { return function EmptyErrorImpl() {
	    _super(this);
	    this.name = 'EmptyError';
	    this.message = 'no elements in sequence';
	}; });

	function lastValueFrom$1(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var _hasValue = false;
	        var _value;
	        source.subscribe({
	            next: function (value) {
	                _value = value;
	                _hasValue = true;
	            },
	            error: reject,
	            complete: function () {
	                if (_hasValue) {
	                    resolve(_value);
	                }
	                else if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError$2());
	                }
	            },
	        });
	    });
	}

	function firstValueFrom$1(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var subscriber = new SafeSubscriber$2({
	            next: function (value) {
	                resolve(value);
	                subscriber.unsubscribe();
	            },
	            error: reject,
	            complete: function () {
	                if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError$2());
	                }
	            },
	        });
	        source.subscribe(subscriber);
	    });
	}

	var ArgumentOutOfRangeError$2 = createErrorClass$1(function (_super) {
	    return function ArgumentOutOfRangeErrorImpl() {
	        _super(this);
	        this.name = 'ArgumentOutOfRangeError';
	        this.message = 'argument out of range';
	    };
	});

	var NotFoundError$1 = createErrorClass$1(function (_super) {
	    return function NotFoundErrorImpl(message) {
	        _super(this);
	        this.name = 'NotFoundError';
	        this.message = message;
	    };
	});

	var SequenceError$1 = createErrorClass$1(function (_super) {
	    return function SequenceErrorImpl(message) {
	        _super(this);
	        this.name = 'SequenceError';
	        this.message = message;
	    };
	});

	function isValidDate$1(value) {
	    return value instanceof Date && !isNaN(value);
	}

	var TimeoutError$2 = createErrorClass$1(function (_super) {
	    return function TimeoutErrorImpl(info) {
	        if (info === void 0) { info = null; }
	        _super(this);
	        this.message = 'Timeout has occurred';
	        this.name = 'TimeoutError';
	        this.info = info;
	    };
	});
	function timeout$2(config, schedulerArg) {
	    var _a = (isValidDate$1(config)
	        ? { first: config }
	        : typeof config === 'number'
	            ? { each: config }
	            : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory$1 : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler$2 : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return operate$1(function (source, subscriber) {
	        var originalSourceSubscription;
	        var timerSubscription;
	        var lastValue = null;
	        var seen = 0;
	        var startTimer = function (delay) {
	            timerSubscription = executeSchedule$1(subscriber, scheduler, function () {
	                try {
	                    originalSourceSubscription.unsubscribe();
	                    innerFrom$1(_with({
	                        meta: meta,
	                        lastValue: lastValue,
	                        seen: seen,
	                    })).subscribe(subscriber);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                }
	            }, delay);
	        };
	        originalSourceSubscription = source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            seen++;
	            subscriber.next((lastValue = value));
	            each > 0 && startTimer(each);
	        }, undefined, undefined, function () {
	            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
	                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            }
	            lastValue = null;
	        }));
	        startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
	    });
	}
	function timeoutErrorFactory$1(info) {
	    throw new TimeoutError$2(info);
	}

	function map$3(project, thisArg) {
	    return operate$1(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            subscriber.next(project.call(thisArg, value, index++));
	        }));
	    });
	}

	var isArray$7 = Array.isArray;
	function callOrApply$1(fn, args) {
	    return isArray$7(args) ? fn.apply(void 0, __spreadArray$1([], __read$2(args))) : fn(args);
	}
	function mapOneOrManyArgs$1(fn) {
	    return map$3(function (args) { return callOrApply$1(fn, args); });
	}

	function bindCallbackInternals$1(isNodeStyle, callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler$2(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindCallbackInternals$1(isNodeStyle, callbackFunc, scheduler)
	                    .apply(this, args)
	                    .pipe(mapOneOrManyArgs$1(resultSelector));
	            };
	        }
	    }
	    if (scheduler) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return bindCallbackInternals$1(isNodeStyle, callbackFunc)
	                .apply(this, args)
	                .pipe(subscribeOn$2(scheduler), observeOn$2(scheduler));
	        };
	    }
	    return function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var subject = new AsyncSubject$2();
	        var uninitialized = true;
	        return new Observable$2(function (subscriber) {
	            var subs = subject.subscribe(subscriber);
	            if (uninitialized) {
	                uninitialized = false;
	                var isAsync_1 = false;
	                var isComplete_1 = false;
	                callbackFunc.apply(_this, __spreadArray$1(__spreadArray$1([], __read$2(args)), [
	                    function () {
	                        var results = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            results[_i] = arguments[_i];
	                        }
	                        if (isNodeStyle) {
	                            var err = results.shift();
	                            if (err != null) {
	                                subject.error(err);
	                                return;
	                            }
	                        }
	                        subject.next(1 < results.length ? results : results[0]);
	                        isComplete_1 = true;
	                        if (isAsync_1) {
	                            subject.complete();
	                        }
	                    },
	                ]));
	                if (isComplete_1) {
	                    subject.complete();
	                }
	                isAsync_1 = true;
	            }
	            return subs;
	        });
	    };
	}

	function bindCallback$2(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals$1(false, callbackFunc, resultSelector, scheduler);
	}

	function bindNodeCallback$2(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals$1(true, callbackFunc, resultSelector, scheduler);
	}

	var isArray$6 = Array.isArray;
	var getPrototypeOf$1 = Object.getPrototypeOf, objectProto$1 = Object.prototype, getKeys$1 = Object.keys;
	function argsArgArrayOrObject$1(args) {
	    if (args.length === 1) {
	        var first_1 = args[0];
	        if (isArray$6(first_1)) {
	            return { args: first_1, keys: null };
	        }
	        if (isPOJO$1(first_1)) {
	            var keys = getKeys$1(first_1);
	            return {
	                args: keys.map(function (key) { return first_1[key]; }),
	                keys: keys,
	            };
	        }
	    }
	    return { args: args, keys: null };
	}
	function isPOJO$1(obj) {
	    return obj && typeof obj === 'object' && getPrototypeOf$1(obj) === objectProto$1;
	}

	function createObject$1(keys, values) {
	    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
	}

	function combineLatest$5() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(args);
	    var resultSelector = popResultSelector$1(args);
	    var _a = argsArgArrayOrObject$1(args), observables = _a.args, keys = _a.keys;
	    if (observables.length === 0) {
	        return from$4([], scheduler);
	    }
	    var result = new Observable$2(combineLatestInit$1(observables, scheduler, keys
	        ?
	            function (values) { return createObject$1(keys, values); }
	        :
	            identity$5));
	    return resultSelector ? result.pipe(mapOneOrManyArgs$1(resultSelector)) : result;
	}
	function combineLatestInit$1(observables, scheduler, valueTransform) {
	    if (valueTransform === void 0) { valueTransform = identity$5; }
	    return function (subscriber) {
	        maybeSchedule$1(scheduler, function () {
	            var length = observables.length;
	            var values = new Array(length);
	            var active = length;
	            var remainingFirstValues = length;
	            var _loop_1 = function (i) {
	                maybeSchedule$1(scheduler, function () {
	                    var source = from$4(observables[i], scheduler);
	                    var hasFirstValue = false;
	                    source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                        values[i] = value;
	                        if (!hasFirstValue) {
	                            hasFirstValue = true;
	                            remainingFirstValues--;
	                        }
	                        if (!remainingFirstValues) {
	                            subscriber.next(valueTransform(values.slice()));
	                        }
	                    }, function () {
	                        if (!--active) {
	                            subscriber.complete();
	                        }
	                    }));
	                }, subscriber);
	            };
	            for (var i = 0; i < length; i++) {
	                _loop_1(i);
	            }
	        }, subscriber);
	    };
	}
	function maybeSchedule$1(scheduler, execute, subscription) {
	    if (scheduler) {
	        executeSchedule$1(subscription, scheduler, execute);
	    }
	    else {
	        execute();
	    }
	}

	function mergeInternals$1(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
	    var buffer = [];
	    var active = 0;
	    var index = 0;
	    var isComplete = false;
	    var checkComplete = function () {
	        if (isComplete && !buffer.length && !active) {
	            subscriber.complete();
	        }
	    };
	    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
	    var doInnerSub = function (value) {
	        expand && subscriber.next(value);
	        active++;
	        var innerComplete = false;
	        innerFrom$1(project(value, index++)).subscribe(new OperatorSubscriber$1(subscriber, function (innerValue) {
	            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
	            if (expand) {
	                outerNext(innerValue);
	            }
	            else {
	                subscriber.next(innerValue);
	            }
	        }, function () {
	            innerComplete = true;
	        }, undefined, function () {
	            if (innerComplete) {
	                try {
	                    active--;
	                    var _loop_1 = function () {
	                        var bufferedValue = buffer.shift();
	                        if (innerSubScheduler) {
	                            executeSchedule$1(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
	                        }
	                        else {
	                            doInnerSub(bufferedValue);
	                        }
	                    };
	                    while (buffer.length && active < concurrent) {
	                        _loop_1();
	                    }
	                    checkComplete();
	                }
	                catch (err) {
	                    subscriber.error(err);
	                }
	            }
	        }));
	    };
	    source.subscribe(new OperatorSubscriber$1(subscriber, outerNext, function () {
	        isComplete = true;
	        checkComplete();
	    }));
	    return function () {
	        additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
	    };
	}

	function mergeMap$2(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction$4(resultSelector)) {
	        return mergeMap$2(function (a, i) { return map$3(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom$1(project(a, i))); }, concurrent);
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return operate$1(function (source, subscriber) { return mergeInternals$1(source, subscriber, project, concurrent); });
	}

	function mergeAll$2(concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return mergeMap$2(identity$5, concurrent);
	}

	function concatAll$2() {
	    return mergeAll$2(1);
	}

	function concat$7() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return concatAll$2()(from$4(args, popScheduler$1(args)));
	}

	function defer$2(observableFactory) {
	    return new Observable$2(function (subscriber) {
	        innerFrom$1(observableFactory()).subscribe(subscriber);
	    });
	}

	var DEFAULT_CONFIG$3 = {
	    connector: function () { return new Subject$2(); },
	    resetOnDisconnect: true,
	};
	function connectable$1(source, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG$3; }
	    var connection = null;
	    var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
	    var subject = connector();
	    var result = new Observable$2(function (subscriber) {
	        return subject.subscribe(subscriber);
	    });
	    result.connect = function () {
	        if (!connection || connection.closed) {
	            connection = defer$2(function () { return source; }).subscribe(subject);
	            if (resetOnDisconnect) {
	                connection.add(function () { return (subject = connector()); });
	            }
	        }
	        return connection;
	    };
	    return result;
	}

	function forkJoin$2() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector$1(args);
	    var _a = argsArgArrayOrObject$1(args), sources = _a.args, keys = _a.keys;
	    var result = new Observable$2(function (subscriber) {
	        var length = sources.length;
	        if (!length) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(length);
	        var remainingCompletions = length;
	        var remainingEmissions = length;
	        var _loop_1 = function (sourceIndex) {
	            var hasValue = false;
	            innerFrom$1(sources[sourceIndex]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                if (!hasValue) {
	                    hasValue = true;
	                    remainingEmissions--;
	                }
	                values[sourceIndex] = value;
	            }, function () { return remainingCompletions--; }, undefined, function () {
	                if (!remainingCompletions || !hasValue) {
	                    if (!remainingEmissions) {
	                        subscriber.next(keys ? createObject$1(keys, values) : values);
	                    }
	                    subscriber.complete();
	                }
	            }));
	        };
	        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
	            _loop_1(sourceIndex);
	        }
	    });
	    return resultSelector ? result.pipe(mapOneOrManyArgs$1(resultSelector)) : result;
	}

	var nodeEventEmitterMethods$1 = ['addListener', 'removeListener'];
	var eventTargetMethods$1 = ['addEventListener', 'removeEventListener'];
	var jqueryMethods$1 = ['on', 'off'];
	function fromEvent$2(target, eventName, options, resultSelector) {
	    if (isFunction$4(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent$2(target, eventName, options).pipe(mapOneOrManyArgs$1(resultSelector));
	    }
	    var _a = __read$2(isEventTarget$2(target)
	        ? eventTargetMethods$1.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
	        :
	            isNodeStyleEventEmitter$2(target)
	                ? nodeEventEmitterMethods$1.map(toCommonHandlerRegistry$1(target, eventName))
	                : isJQueryStyleEventEmitter$2(target)
	                    ? jqueryMethods$1.map(toCommonHandlerRegistry$1(target, eventName))
	                    : [], 2), add = _a[0], remove = _a[1];
	    if (!add) {
	        if (isArrayLike$2(target)) {
	            return mergeMap$2(function (subTarget) { return fromEvent$2(subTarget, eventName, options); })(innerFrom$1(target));
	        }
	    }
	    if (!add) {
	        throw new TypeError('Invalid event target');
	    }
	    return new Observable$2(function (subscriber) {
	        var handler = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return subscriber.next(1 < args.length ? args : args[0]);
	        };
	        add(handler);
	        return function () { return remove(handler); };
	    });
	}
	function toCommonHandlerRegistry$1(target, eventName) {
	    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
	}
	function isNodeStyleEventEmitter$2(target) {
	    return isFunction$4(target.addListener) && isFunction$4(target.removeListener);
	}
	function isJQueryStyleEventEmitter$2(target) {
	    return isFunction$4(target.on) && isFunction$4(target.off);
	}
	function isEventTarget$2(target) {
	    return isFunction$4(target.addEventListener) && isFunction$4(target.removeEventListener);
	}

	function fromEventPattern$2(addHandler, removeHandler, resultSelector) {
	    if (resultSelector) {
	        return fromEventPattern$2(addHandler, removeHandler).pipe(mapOneOrManyArgs$1(resultSelector));
	    }
	    return new Observable$2(function (subscriber) {
	        var handler = function () {
	            var e = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                e[_i] = arguments[_i];
	            }
	            return subscriber.next(e.length === 1 ? e[0] : e);
	        };
	        var retValue = addHandler(handler);
	        return isFunction$4(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
	    });
	}

	function generate$5(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
	    var _a, _b;
	    var resultSelector;
	    var initialState;
	    if (arguments.length === 1) {
	        (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity$5 : _b, scheduler = _a.scheduler);
	    }
	    else {
	        initialState = initialStateOrOptions;
	        if (!resultSelectorOrScheduler || isScheduler$2(resultSelectorOrScheduler)) {
	            resultSelector = identity$5;
	            scheduler = resultSelectorOrScheduler;
	        }
	        else {
	            resultSelector = resultSelectorOrScheduler;
	        }
	    }
	    function gen() {
	        var state;
	        return __generator$3(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    state = initialState;
	                    _a.label = 1;
	                case 1:
	                    if (!(!condition || condition(state))) return [3, 4];
	                    return [4, resultSelector(state)];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    state = iterate(state);
	                    return [3, 1];
	                case 4: return [2];
	            }
	        });
	    }
	    return defer$2((scheduler
	        ?
	            function () { return scheduleIterable$2(gen(), scheduler); }
	        :
	            gen));
	}

	function iif$2(condition, trueResult, falseResult) {
	    return defer$2(function () { return (condition() ? trueResult : falseResult); });
	}

	function timer$2(dueTime, intervalOrScheduler, scheduler) {
	    if (dueTime === void 0) { dueTime = 0; }
	    if (scheduler === void 0) { scheduler = async$2; }
	    var intervalDuration = -1;
	    if (intervalOrScheduler != null) {
	        if (isScheduler$2(intervalOrScheduler)) {
	            scheduler = intervalOrScheduler;
	        }
	        else {
	            intervalDuration = intervalOrScheduler;
	        }
	    }
	    return new Observable$2(function (subscriber) {
	        var due = isValidDate$1(dueTime) ? +dueTime - scheduler.now() : dueTime;
	        if (due < 0) {
	            due = 0;
	        }
	        var n = 0;
	        return scheduler.schedule(function () {
	            if (!subscriber.closed) {
	                subscriber.next(n++);
	                if (0 <= intervalDuration) {
	                    this.schedule(undefined, intervalDuration);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        }, due);
	    });
	}

	function interval$2(period, scheduler) {
	    if (period === void 0) { period = 0; }
	    if (scheduler === void 0) { scheduler = asyncScheduler$2; }
	    if (period < 0) {
	        period = 0;
	    }
	    return timer$2(period, period, scheduler);
	}

	function merge$5() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(args);
	    var concurrent = popNumber$1(args, Infinity);
	    var sources = args;
	    return !sources.length
	        ?
	            EMPTY$2
	        : sources.length === 1
	            ?
	                innerFrom$1(sources[0])
	            :
	                mergeAll$2(concurrent)(from$4(sources, scheduler));
	}

	var NEVER$2 = new Observable$2(noop$2);
	function never$2() {
	    return NEVER$2;
	}

	var isArray$5 = Array.isArray;
	function argsOrArgArray$1(args) {
	    return args.length === 1 && isArray$5(args[0]) ? args[0] : args;
	}

	function onErrorResumeNext$5() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    var nextSources = argsOrArgArray$1(sources);
	    return operate$1(function (source, subscriber) {
	        var remaining = __spreadArray$1([source], __read$2(nextSources));
	        var subscribeNext = function () {
	            if (!subscriber.closed) {
	                if (remaining.length > 0) {
	                    var nextSource = void 0;
	                    try {
	                        nextSource = innerFrom$1(remaining.shift());
	                    }
	                    catch (err) {
	                        subscribeNext();
	                        return;
	                    }
	                    var innerSub = new OperatorSubscriber$1(subscriber, undefined, noop$2, noop$2);
	                    subscriber.add(nextSource.subscribe(innerSub));
	                    innerSub.add(subscribeNext);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        };
	        subscribeNext();
	    });
	}

	function onErrorResumeNext$4() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return onErrorResumeNext$5(argsOrArgArray$1(sources))(EMPTY$2);
	}

	function pairs$2(obj, scheduler) {
	    return from$4(Object.entries(obj), scheduler);
	}

	function not$2(pred, thisArg) {
	    return function (value, index) { return !pred.call(thisArg, value, index); };
	}

	function filter$2(predicate, thisArg) {
	    return operate$1(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
	    });
	}

	function partition$5(source, predicate, thisArg) {
	    return [filter$2(predicate, thisArg)(innerFrom$1(source)), filter$2(not$2(predicate, thisArg))(innerFrom$1(source))];
	}

	function race$5() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    sources = argsOrArgArray$1(sources);
	    return sources.length === 1 ? innerFrom$1(sources[0]) : new Observable$2(raceInit$1(sources));
	}
	function raceInit$1(sources) {
	    return function (subscriber) {
	        var subscriptions = [];
	        var _loop_1 = function (i) {
	            subscriptions.push(innerFrom$1(sources[i]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                if (subscriptions) {
	                    for (var s = 0; s < subscriptions.length; s++) {
	                        s !== i && subscriptions[s].unsubscribe();
	                    }
	                    subscriptions = null;
	                }
	                subscriber.next(value);
	            })));
	        };
	        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
	            _loop_1(i);
	        }
	    };
	}

	function range$2(start, count, scheduler) {
	    if (count == null) {
	        count = start;
	        start = 0;
	    }
	    if (count <= 0) {
	        return EMPTY$2;
	    }
	    var end = count + start;
	    return new Observable$2(scheduler
	        ?
	            function (subscriber) {
	                var n = start;
	                return scheduler.schedule(function () {
	                    if (n < end) {
	                        subscriber.next(n++);
	                        this.schedule();
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                });
	            }
	        :
	            function (subscriber) {
	                var n = start;
	                while (n < end && !subscriber.closed) {
	                    subscriber.next(n++);
	                }
	                subscriber.complete();
	            });
	}

	function using$2(resourceFactory, observableFactory) {
	    return new Observable$2(function (subscriber) {
	        var resource = resourceFactory();
	        var result = observableFactory(resource);
	        var source = result ? innerFrom$1(result) : EMPTY$2;
	        source.subscribe(subscriber);
	        return function () {
	            if (resource) {
	                resource.unsubscribe();
	            }
	        };
	    });
	}

	function zip$5() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector$1(args);
	    var sources = argsOrArgArray$1(args);
	    return sources.length
	        ? new Observable$2(function (subscriber) {
	            var buffers = sources.map(function () { return []; });
	            var completed = sources.map(function () { return false; });
	            subscriber.add(function () {
	                buffers = completed = null;
	            });
	            var _loop_1 = function (sourceIndex) {
	                innerFrom$1(sources[sourceIndex]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                    buffers[sourceIndex].push(value);
	                    if (buffers.every(function (buffer) { return buffer.length; })) {
	                        var result = buffers.map(function (buffer) { return buffer.shift(); });
	                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray$1([], __read$2(result))) : result);
	                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
	                            subscriber.complete();
	                        }
	                    }
	                }, function () {
	                    completed[sourceIndex] = true;
	                    !buffers[sourceIndex].length && subscriber.complete();
	                }));
	            };
	            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
	                _loop_1(sourceIndex);
	            }
	            return function () {
	                buffers = completed = null;
	            };
	        })
	        : EMPTY$2;
	}

	function audit$2(durationSelector) {
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var isComplete = false;
	        var endDuration = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	            isComplete && subscriber.complete();
	        };
	        var cleanupDuration = function () {
	            durationSubscriber = null;
	            isComplete && subscriber.complete();
	        };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	            if (!durationSubscriber) {
	                innerFrom$1(durationSelector(value)).subscribe((durationSubscriber = new OperatorSubscriber$1(subscriber, endDuration, cleanupDuration)));
	            }
	        }, function () {
	            isComplete = true;
	            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
	        }));
	    });
	}

	function auditTime$2(duration, scheduler) {
	    if (scheduler === void 0) { scheduler = async$2; }
	    return audit$2(function () { return timer$2(duration, scheduler); });
	}

	function buffer$2(closingNotifier) {
	    return operate$1(function (source, subscriber) {
	        var currentBuffer = [];
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return currentBuffer.push(value); }, function () {
	            subscriber.next(currentBuffer);
	            subscriber.complete();
	        }));
	        closingNotifier.subscribe(new OperatorSubscriber$1(subscriber, function () {
	            var b = currentBuffer;
	            currentBuffer = [];
	            subscriber.next(b);
	        }, noop$2));
	        return function () {
	            currentBuffer = null;
	        };
	    });
	}

	function bufferCount$2(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) { startBufferEvery = null; }
	    startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
	    return operate$1(function (source, subscriber) {
	        var buffers = [];
	        var count = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var e_1, _a, e_2, _b;
	            var toEmit = null;
	            if (count++ % startBufferEvery === 0) {
	                buffers.push([]);
	            }
	            try {
	                for (var buffers_1 = __values$2(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                    if (bufferSize <= buffer.length) {
	                        toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
	                        toEmit.push(buffer);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (toEmit) {
	                try {
	                    for (var toEmit_1 = __values$2(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
	                        var buffer = toEmit_1_1.value;
	                        arrRemove$1(buffers, buffer);
	                        subscriber.next(buffer);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }, function () {
	            var e_3, _a;
	            try {
	                for (var buffers_2 = __values$2(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
	                    var buffer = buffers_2_1.value;
	                    subscriber.next(buffer);
	                }
	            }
	            catch (e_3_1) { e_3 = { error: e_3_1 }; }
	            finally {
	                try {
	                    if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
	                }
	                finally { if (e_3) throw e_3.error; }
	            }
	            subscriber.complete();
	        }, undefined, function () {
	            buffers = null;
	        }));
	    });
	}

	function bufferTime$2(bufferTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler$1(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$2;
	    var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxBufferSize = otherArgs[1] || Infinity;
	    return operate$1(function (source, subscriber) {
	        var bufferRecords = [];
	        var restartOnEmit = false;
	        var emit = function (record) {
	            var buffer = record.buffer, subs = record.subs;
	            subs.unsubscribe();
	            arrRemove$1(bufferRecords, record);
	            subscriber.next(buffer);
	            restartOnEmit && startBuffer();
	        };
	        var startBuffer = function () {
	            if (bufferRecords) {
	                var subs = new Subscription$2();
	                subscriber.add(subs);
	                var buffer = [];
	                var record_1 = {
	                    buffer: buffer,
	                    subs: subs,
	                };
	                bufferRecords.push(record_1);
	                executeSchedule$1(subs, scheduler, function () { return emit(record_1); }, bufferTimeSpan);
	            }
	        };
	        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
	            executeSchedule$1(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
	        }
	        else {
	            restartOnEmit = true;
	        }
	        startBuffer();
	        var bufferTimeSubscriber = new OperatorSubscriber$1(subscriber, function (value) {
	            var e_1, _a;
	            var recordsCopy = bufferRecords.slice();
	            try {
	                for (var recordsCopy_1 = __values$2(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
	                    var record = recordsCopy_1_1.value;
	                    var buffer = record.buffer;
	                    buffer.push(value);
	                    maxBufferSize <= buffer.length && emit(record);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
	                subscriber.next(bufferRecords.shift().buffer);
	            }
	            bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
	            subscriber.complete();
	            subscriber.unsubscribe();
	        }, undefined, function () { return (bufferRecords = null); });
	        source.subscribe(bufferTimeSubscriber);
	    });
	}

	function bufferToggle$2(openings, closingSelector) {
	    return operate$1(function (source, subscriber) {
	        var buffers = [];
	        innerFrom$1(openings).subscribe(new OperatorSubscriber$1(subscriber, function (openValue) {
	            var buffer = [];
	            buffers.push(buffer);
	            var closingSubscription = new Subscription$2();
	            var emitBuffer = function () {
	                arrRemove$1(buffers, buffer);
	                subscriber.next(buffer);
	                closingSubscription.unsubscribe();
	            };
	            closingSubscription.add(innerFrom$1(closingSelector(openValue)).subscribe(new OperatorSubscriber$1(subscriber, emitBuffer, noop$2)));
	        }, noop$2));
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var buffers_1 = __values$2(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (buffers.length > 0) {
	                subscriber.next(buffers.shift());
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function bufferWhen$2(closingSelector) {
	    return operate$1(function (source, subscriber) {
	        var buffer = null;
	        var closingSubscriber = null;
	        var openBuffer = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            var b = buffer;
	            buffer = [];
	            b && subscriber.next(b);
	            innerFrom$1(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber$1(subscriber, openBuffer, noop$2)));
	        };
	        openBuffer();
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
	            buffer && subscriber.next(buffer);
	            subscriber.complete();
	        }, undefined, function () { return (buffer = closingSubscriber = null); }));
	    });
	}

	function catchError$2(selector) {
	    return operate$1(function (source, subscriber) {
	        var innerSub = null;
	        var syncUnsub = false;
	        var handledResult;
	        innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, undefined, function (err) {
	            handledResult = innerFrom$1(selector(err, catchError$2(selector)(source)));
	            if (innerSub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                handledResult.subscribe(subscriber);
	            }
	            else {
	                syncUnsub = true;
	            }
	        }));
	        if (syncUnsub) {
	            innerSub.unsubscribe();
	            innerSub = null;
	            handledResult.subscribe(subscriber);
	        }
	    });
	}

	function scanInternals$1(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
	    return function (source, subscriber) {
	        var hasState = hasSeed;
	        var state = seed;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var i = index++;
	            state = hasState
	                ?
	                    accumulator(state, value, i)
	                :
	                    ((hasState = true), value);
	            emitOnNext && subscriber.next(state);
	        }, emitBeforeComplete &&
	            (function () {
	                hasState && subscriber.next(state);
	                subscriber.complete();
	            })));
	    };
	}

	function reduce$2(accumulator, seed) {
	    return operate$1(scanInternals$1(accumulator, seed, arguments.length >= 2, false, true));
	}

	var arrReducer$1 = function (arr, value) { return (arr.push(value), arr); };
	function toArray$3() {
	    return operate$1(function (source, subscriber) {
	        reduce$2(arrReducer$1, [])(source).subscribe(subscriber);
	    });
	}

	function joinAllInternals$1(joinFn, project) {
	    return pipe$2(toArray$3(), mergeMap$2(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs$1(project) : identity$5);
	}

	function combineLatestAll$1(project) {
	    return joinAllInternals$1(combineLatest$5, project);
	}

	var combineAll$2 = combineLatestAll$1;

	function combineLatest$4() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector$1(args);
	    return resultSelector
	        ? pipe$2(combineLatest$4.apply(void 0, __spreadArray$1([], __read$2(args))), mapOneOrManyArgs$1(resultSelector))
	        : operate$1(function (source, subscriber) {
	            combineLatestInit$1(__spreadArray$1([source], __read$2(argsOrArgArray$1(args))))(subscriber);
	        });
	}

	function combineLatestWith$1() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return combineLatest$4.apply(void 0, __spreadArray$1([], __read$2(otherSources)));
	}

	function concatMap$2(project, resultSelector) {
	    return isFunction$4(resultSelector) ? mergeMap$2(project, resultSelector, 1) : mergeMap$2(project, 1);
	}

	function concatMapTo$2(innerObservable, resultSelector) {
	    return isFunction$4(resultSelector) ? concatMap$2(function () { return innerObservable; }, resultSelector) : concatMap$2(function () { return innerObservable; });
	}

	function concat$6() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(args);
	    return operate$1(function (source, subscriber) {
	        concatAll$2()(from$4(__spreadArray$1([source], __read$2(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function concatWith$1() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return concat$6.apply(void 0, __spreadArray$1([], __read$2(otherSources)));
	}

	function fromSubscribable$1(subscribable) {
	    return new Observable$2(function (subscriber) { return subscribable.subscribe(subscriber); });
	}

	var DEFAULT_CONFIG$2 = {
	    connector: function () { return new Subject$2(); },
	};
	function connect$3(selector, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG$2; }
	    var connector = config.connector;
	    return operate$1(function (source, subscriber) {
	        var subject = connector();
	        from$4(selector(fromSubscribable$1(subject))).subscribe(subscriber);
	        subscriber.add(source.subscribe(subject));
	    });
	}

	function count$2(predicate) {
	    return reduce$2(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
	}

	function debounce$2(durationSelector) {
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var emit = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            hasValue = true;
	            lastValue = value;
	            durationSubscriber = new OperatorSubscriber$1(subscriber, emit, noop$2);
	            innerFrom$1(durationSelector(value)).subscribe(durationSubscriber);
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = durationSubscriber = null;
	        }));
	    });
	}

	function debounceTime$2(dueTime, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$2; }
	    return operate$1(function (source, subscriber) {
	        var activeTask = null;
	        var lastValue = null;
	        var lastTime = null;
	        var emit = function () {
	            if (activeTask) {
	                activeTask.unsubscribe();
	                activeTask = null;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        function emitWhenIdle() {
	            var targetTime = lastTime + dueTime;
	            var now = scheduler.now();
	            if (now < targetTime) {
	                activeTask = this.schedule(undefined, targetTime - now);
	                subscriber.add(activeTask);
	                return;
	            }
	            emit();
	        }
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            lastValue = value;
	            lastTime = scheduler.now();
	            if (!activeTask) {
	                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
	                subscriber.add(activeTask);
	            }
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = activeTask = null;
	        }));
	    });
	}

	function defaultIfEmpty$2(defaultValue) {
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () {
	            if (!hasValue) {
	                subscriber.next(defaultValue);
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function take$2(count) {
	    return count <= 0
	        ?
	            function () { return EMPTY$2; }
	        : operate$1(function (source, subscriber) {
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                if (++seen <= count) {
	                    subscriber.next(value);
	                    if (count <= seen) {
	                        subscriber.complete();
	                    }
	                }
	            }));
	        });
	}

	function ignoreElements$2() {
	    return operate$1(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber$1(subscriber, noop$2));
	    });
	}

	function mapTo$2(value) {
	    return map$3(function () { return value; });
	}

	function delayWhen$2(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return function (source) {
	            return concat$7(subscriptionDelay.pipe(take$2(1), ignoreElements$2()), source.pipe(delayWhen$2(delayDurationSelector)));
	        };
	    }
	    return mergeMap$2(function (value, index) { return delayDurationSelector(value, index).pipe(take$2(1), mapTo$2(value)); });
	}

	function delay$2(due, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$2; }
	    var duration = timer$2(due, scheduler);
	    return delayWhen$2(function () { return duration; });
	}

	function dematerialize$2() {
	    return operate$1(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (notification) { return observeNotification$1(notification, subscriber); }));
	    });
	}

	function distinct$2(keySelector, flushes) {
	    return operate$1(function (source, subscriber) {
	        var distinctKeys = new Set();
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var key = keySelector ? keySelector(value) : value;
	            if (!distinctKeys.has(key)) {
	                distinctKeys.add(key);
	                subscriber.next(value);
	            }
	        }));
	        flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber$1(subscriber, function () { return distinctKeys.clear(); }, noop$2));
	    });
	}

	function distinctUntilChanged$2(comparator, keySelector) {
	    if (keySelector === void 0) { keySelector = identity$5; }
	    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare$1;
	    return operate$1(function (source, subscriber) {
	        var previousKey;
	        var first = true;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var currentKey = keySelector(value);
	            if (first || !comparator(previousKey, currentKey)) {
	                first = false;
	                previousKey = currentKey;
	                subscriber.next(value);
	            }
	        }));
	    });
	}
	function defaultCompare$1(a, b) {
	    return a === b;
	}

	function distinctUntilKeyChanged$2(key, compare) {
	    return distinctUntilChanged$2(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
	}

	function throwIfEmpty$2(errorFactory) {
	    if (errorFactory === void 0) { errorFactory = defaultErrorFactory$2; }
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
	    });
	}
	function defaultErrorFactory$2() {
	    return new EmptyError$2();
	}

	function elementAt$2(index, defaultValue) {
	    if (index < 0) {
	        throw new ArgumentOutOfRangeError$2();
	    }
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(filter$2(function (v, i) { return i === index; }), take$2(1), hasDefaultValue ? defaultIfEmpty$2(defaultValue) : throwIfEmpty$2(function () { return new ArgumentOutOfRangeError$2(); }));
	    };
	}

	function endWith$2() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    return function (source) { return concat$7(source, of$2.apply(void 0, __spreadArray$1([], __read$2(values)))); };
	}

	function every$2(predicate, thisArg) {
	    return operate$1(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            if (!predicate.call(thisArg, value, index++, source)) {
	                subscriber.next(false);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function exhaustAll$1() {
	    return operate$1(function (source, subscriber) {
	        var isComplete = false;
	        var innerSub = null;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (inner) {
	            if (!innerSub) {
	                innerSub = innerFrom$1(inner).subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                }));
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	var exhaust$2 = exhaustAll$1;

	function exhaustMap$2(project, resultSelector) {
	    if (resultSelector) {
	        return function (source) {
	            return source.pipe(exhaustMap$2(function (a, i) { return innerFrom$1(project(a, i)).pipe(map$3(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
	        };
	    }
	    return operate$1(function (source, subscriber) {
	        var index = 0;
	        var innerSub = null;
	        var isComplete = false;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (outerValue) {
	            if (!innerSub) {
	                innerSub = new OperatorSubscriber$1(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                });
	                innerFrom$1(project(outerValue, index++)).subscribe(innerSub);
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	function expand$2(project, concurrent, scheduler) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
	    return operate$1(function (source, subscriber) {
	        return mergeInternals$1(source, subscriber, project, concurrent, undefined, true, scheduler);
	    });
	}

	function finalize$2(callback) {
	    return operate$1(function (source, subscriber) {
	        try {
	            source.subscribe(subscriber);
	        }
	        finally {
	            subscriber.add(callback);
	        }
	    });
	}

	function find$3(predicate, thisArg) {
	    return operate$1(createFind$1(predicate, thisArg, 'value'));
	}
	function createFind$1(predicate, thisArg, emit) {
	    var findIndex = emit === 'index';
	    return function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var i = index++;
	            if (predicate.call(thisArg, value, i, source)) {
	                subscriber.next(findIndex ? i : value);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(findIndex ? -1 : undefined);
	            subscriber.complete();
	        }));
	    };
	}

	function findIndex$2(predicate, thisArg) {
	    return operate$1(createFind$1(predicate, thisArg, 'index'));
	}

	function first$2(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter$2(function (v, i) { return predicate(v, i, source); }) : identity$5, take$2(1), hasDefaultValue ? defaultIfEmpty$2(defaultValue) : throwIfEmpty$2(function () { return new EmptyError$2(); }));
	    };
	}

	function groupBy$2(keySelector, elementOrOptions, duration, connector) {
	    return operate$1(function (source, subscriber) {
	        var element;
	        if (!elementOrOptions || typeof elementOrOptions === 'function') {
	            element = elementOrOptions;
	        }
	        else {
	            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
	        }
	        var groups = new Map();
	        var notify = function (cb) {
	            groups.forEach(cb);
	            cb(subscriber);
	        };
	        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
	        var groupBySourceSubscriber = new GroupBySubscriber$2(subscriber, function (value) {
	            try {
	                var key_1 = keySelector(value);
	                var group_1 = groups.get(key_1);
	                if (!group_1) {
	                    groups.set(key_1, (group_1 = connector ? connector() : new Subject$2()));
	                    var grouped = createGroupedObservable(key_1, group_1);
	                    subscriber.next(grouped);
	                    if (duration) {
	                        var durationSubscriber_1 = new OperatorSubscriber$1(group_1, function () {
	                            group_1.complete();
	                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
	                        }, undefined, undefined, function () { return groups.delete(key_1); });
	                        groupBySourceSubscriber.add(innerFrom$1(duration(grouped)).subscribe(durationSubscriber_1));
	                    }
	                }
	                group_1.next(element ? element(value) : value);
	            }
	            catch (err) {
	                handleError(err);
	            }
	        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); });
	        source.subscribe(groupBySourceSubscriber);
	        function createGroupedObservable(key, groupSubject) {
	            var result = new Observable$2(function (groupSubscriber) {
	                groupBySourceSubscriber.activeGroups++;
	                var innerSub = groupSubject.subscribe(groupSubscriber);
	                return function () {
	                    innerSub.unsubscribe();
	                    --groupBySourceSubscriber.activeGroups === 0 &&
	                        groupBySourceSubscriber.teardownAttempted &&
	                        groupBySourceSubscriber.unsubscribe();
	                };
	            });
	            result.key = key;
	            return result;
	        }
	    });
	}
	var GroupBySubscriber$2 = (function (_super) {
	    __extends$3(GroupBySubscriber, _super);
	    function GroupBySubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.activeGroups = 0;
	        _this.teardownAttempted = false;
	        return _this;
	    }
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        this.teardownAttempted = true;
	        this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
	    };
	    return GroupBySubscriber;
	}(OperatorSubscriber$1));

	function isEmpty$2() {
	    return operate$1(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber$1(subscriber, function () {
	            subscriber.next(false);
	            subscriber.complete();
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function takeLast$2(count) {
	    return count <= 0
	        ? function () { return EMPTY$2; }
	        : operate$1(function (source, subscriber) {
	            var buffer = [];
	            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                buffer.push(value);
	                count < buffer.length && buffer.shift();
	            }, function () {
	                var e_1, _a;
	                try {
	                    for (var buffer_1 = __values$2(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
	                        var value = buffer_1_1.value;
	                        subscriber.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	                subscriber.complete();
	            }, undefined, function () {
	                buffer = null;
	            }));
	        });
	}

	function last$3(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter$2(function (v, i) { return predicate(v, i, source); }) : identity$5, takeLast$2(1), hasDefaultValue ? defaultIfEmpty$2(defaultValue) : throwIfEmpty$2(function () { return new EmptyError$2(); }));
	    };
	}

	function materialize$2() {
	    return operate$1(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            subscriber.next(Notification$2.createNext(value));
	        }, function () {
	            subscriber.next(Notification$2.createComplete());
	            subscriber.complete();
	        }, function (err) {
	            subscriber.next(Notification$2.createError(err));
	            subscriber.complete();
	        }));
	    });
	}

	function max$2(comparer) {
	    return reduce$2(isFunction$4(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
	}

	var flatMap$2 = mergeMap$2;

	function mergeMapTo$2(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction$4(resultSelector)) {
	        return mergeMap$2(function () { return innerObservable; }, resultSelector, concurrent);
	    }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return mergeMap$2(function () { return innerObservable; }, concurrent);
	}

	function mergeScan$2(accumulator, seed, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return operate$1(function (source, subscriber) {
	        var state = seed;
	        return mergeInternals$1(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
	            state = value;
	        }, false, undefined, function () { return (state = null); });
	    });
	}

	function merge$4() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(args);
	    var concurrent = popNumber$1(args, Infinity);
	    args = argsOrArgArray$1(args);
	    return operate$1(function (source, subscriber) {
	        mergeAll$2(concurrent)(from$4(__spreadArray$1([source], __read$2(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function mergeWith$1() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return merge$4.apply(void 0, __spreadArray$1([], __read$2(otherSources)));
	}

	function min$2(comparer) {
	    return reduce$2(isFunction$4(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
	}

	function multicast$2(subjectOrSubjectFactory, selector) {
	    var subjectFactory = isFunction$4(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
	    if (isFunction$4(selector)) {
	        return connect$3(selector, {
	            connector: subjectFactory,
	        });
	    }
	    return function (source) { return new ConnectableObservable$2(source, subjectFactory); };
	}

	function pairwise$2() {
	    return operate$1(function (source, subscriber) {
	        var prev;
	        var hasPrev = false;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var p = prev;
	            prev = value;
	            hasPrev && subscriber.next([p, value]);
	            hasPrev = true;
	        }));
	    });
	}

	function pluck$4() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return map$3(function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
	            if (typeof p !== 'undefined') {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    });
	}

	function publish$2(selector) {
	    return selector ? function (source) { return connect$3(selector)(source); } : function (source) { return multicast$2(new Subject$2())(source); };
	}

	function publishBehavior$2(initialValue) {
	    return function (source) {
	        var subject = new BehaviorSubject$2(initialValue);
	        return new ConnectableObservable$2(source, function () { return subject; });
	    };
	}

	function publishLast$2() {
	    return function (source) {
	        var subject = new AsyncSubject$2();
	        return new ConnectableObservable$2(source, function () { return subject; });
	    };
	}

	function publishReplay$2(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
	    if (selectorOrScheduler && !isFunction$4(selectorOrScheduler)) {
	        timestampProvider = selectorOrScheduler;
	    }
	    var selector = isFunction$4(selectorOrScheduler) ? selectorOrScheduler : undefined;
	    return function (source) { return multicast$2(new ReplaySubject$2(bufferSize, windowTime, timestampProvider), selector)(source); };
	}

	function raceWith$1() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return !otherSources.length
	        ? identity$5
	        : operate$1(function (source, subscriber) {
	            raceInit$1(__spreadArray$1([source], __read$2(otherSources)))(subscriber);
	        });
	}

	function repeat$2(count) {
	    if (count === void 0) { count = Infinity; }
	    return count <= 0
	        ? function () { return EMPTY$2; }
	        : operate$1(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRepeat = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
	                    if (++soFar < count) {
	                        if (innerSub) {
	                            innerSub.unsubscribe();
	                            innerSub = null;
	                            subscribeForRepeat();
	                        }
	                        else {
	                            syncUnsub = true;
	                        }
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRepeat();
	                }
	            };
	            subscribeForRepeat();
	        });
	}

	function repeatWhen$2(notifier) {
	    return operate$1(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var completions$;
	        var isNotifierComplete = false;
	        var isMainComplete = false;
	        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
	        var getCompletionSubject = function () {
	            if (!completions$) {
	                completions$ = new Subject$2();
	                notifier(completions$).subscribe(new OperatorSubscriber$1(subscriber, function () {
	                    if (innerSub) {
	                        subscribeForRepeatWhen();
	                    }
	                    else {
	                        syncResub = true;
	                    }
	                }, function () {
	                    isNotifierComplete = true;
	                    checkComplete();
	                }));
	            }
	            return completions$;
	        };
	        var subscribeForRepeatWhen = function () {
	            isMainComplete = false;
	            innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
	                isMainComplete = true;
	                !checkComplete() && getCompletionSubject().next();
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRepeatWhen();
	            }
	        };
	        subscribeForRepeatWhen();
	    });
	}

	function retry$2(configOrCount) {
	    if (configOrCount === void 0) { configOrCount = Infinity; }
	    var config;
	    if (configOrCount && typeof configOrCount === 'object') {
	        config = configOrCount;
	    }
	    else {
	        config = {
	            count: configOrCount,
	        };
	    }
	    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
	    return count <= 0
	        ? identity$5
	        : operate$1(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRetry = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                    if (resetOnSuccess) {
	                        soFar = 0;
	                    }
	                    subscriber.next(value);
	                }, undefined, function (err) {
	                    if (soFar++ < count) {
	                        var resub_1 = function () {
	                            if (innerSub) {
	                                innerSub.unsubscribe();
	                                innerSub = null;
	                                subscribeForRetry();
	                            }
	                            else {
	                                syncUnsub = true;
	                            }
	                        };
	                        if (delay != null) {
	                            var notifier = typeof delay === 'number' ? timer$2(delay) : innerFrom$1(delay(err, soFar));
	                            var notifierSubscriber_1 = new OperatorSubscriber$1(subscriber, function () {
	                                notifierSubscriber_1.unsubscribe();
	                                resub_1();
	                            }, function () {
	                                subscriber.complete();
	                            });
	                            notifier.subscribe(notifierSubscriber_1);
	                        }
	                        else {
	                            resub_1();
	                        }
	                    }
	                    else {
	                        subscriber.error(err);
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRetry();
	                }
	            };
	            subscribeForRetry();
	        });
	}

	function retryWhen$2(notifier) {
	    return operate$1(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var errors$;
	        var subscribeForRetryWhen = function () {
	            innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, undefined, function (err) {
	                if (!errors$) {
	                    errors$ = new Subject$2();
	                    notifier(errors$).subscribe(new OperatorSubscriber$1(subscriber, function () {
	                        return innerSub ? subscribeForRetryWhen() : (syncResub = true);
	                    }));
	                }
	                if (errors$) {
	                    errors$.next(err);
	                }
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRetryWhen();
	            }
	        };
	        subscribeForRetryWhen();
	    });
	}

	function sample$2(notifier) {
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	        }));
	        var emit = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        notifier.subscribe(new OperatorSubscriber$1(subscriber, emit, noop$2));
	    });
	}

	function sampleTime$2(period, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$2; }
	    return sample$2(interval$2(period, scheduler));
	}

	function scan$2(accumulator, seed) {
	    return operate$1(scanInternals$1(accumulator, seed, arguments.length >= 2, true));
	}

	function sequenceEqual$2(compareTo, comparator) {
	    if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
	    return operate$1(function (source, subscriber) {
	        var aState = createState$1();
	        var bState = createState$1();
	        var emit = function (isEqual) {
	            subscriber.next(isEqual);
	            subscriber.complete();
	        };
	        var createSubscriber = function (selfState, otherState) {
	            var sequenceEqualSubscriber = new OperatorSubscriber$1(subscriber, function (a) {
	                var buffer = otherState.buffer, complete = otherState.complete;
	                if (buffer.length === 0) {
	                    complete ? emit(false) : selfState.buffer.push(a);
	                }
	                else {
	                    !comparator(a, buffer.shift()) && emit(false);
	                }
	            }, function () {
	                selfState.complete = true;
	                var complete = otherState.complete, buffer = otherState.buffer;
	                complete && emit(buffer.length === 0);
	                sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
	            });
	            return sequenceEqualSubscriber;
	        };
	        source.subscribe(createSubscriber(aState, bState));
	        compareTo.subscribe(createSubscriber(bState, aState));
	    });
	}
	function createState$1() {
	    return {
	        buffer: [],
	        complete: false,
	    };
	}

	function share$2(options) {
	    if (options === void 0) { options = {}; }
	    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject$2(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
	    return function (wrapperSource) {
	        var connection = null;
	        var resetConnection = null;
	        var subject = null;
	        var refCount = 0;
	        var hasCompleted = false;
	        var hasErrored = false;
	        var cancelReset = function () {
	            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
	            resetConnection = null;
	        };
	        var reset = function () {
	            cancelReset();
	            connection = subject = null;
	            hasCompleted = hasErrored = false;
	        };
	        var resetAndUnsubscribe = function () {
	            var conn = connection;
	            reset();
	            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
	        };
	        return operate$1(function (source, subscriber) {
	            refCount++;
	            if (!hasErrored && !hasCompleted) {
	                cancelReset();
	            }
	            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
	            subscriber.add(function () {
	                refCount--;
	                if (refCount === 0 && !hasErrored && !hasCompleted) {
	                    resetConnection = handleReset$1(resetAndUnsubscribe, resetOnRefCountZero);
	                }
	            });
	            dest.subscribe(subscriber);
	            if (!connection) {
	                connection = new SafeSubscriber$2({
	                    next: function (value) { return dest.next(value); },
	                    error: function (err) {
	                        hasErrored = true;
	                        cancelReset();
	                        resetConnection = handleReset$1(reset, resetOnError, err);
	                        dest.error(err);
	                    },
	                    complete: function () {
	                        hasCompleted = true;
	                        cancelReset();
	                        resetConnection = handleReset$1(reset, resetOnComplete);
	                        dest.complete();
	                    },
	                });
	                from$4(source).subscribe(connection);
	            }
	        })(wrapperSource);
	    };
	}
	function handleReset$1(reset, on) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (on === true) {
	        reset();
	        return null;
	    }
	    if (on === false) {
	        return null;
	    }
	    return on.apply(void 0, __spreadArray$1([], __read$2(args))).pipe(take$2(1))
	        .subscribe(function () { return reset(); });
	}

	function shareReplay$2(configOrBufferSize, windowTime, scheduler) {
	    var _a, _b;
	    var bufferSize;
	    var refCount = false;
	    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
	        bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
	        windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
	        refCount = !!configOrBufferSize.refCount;
	        scheduler = configOrBufferSize.scheduler;
	    }
	    else {
	        bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
	    }
	    return share$2({
	        connector: function () { return new ReplaySubject$2(bufferSize, windowTime, scheduler); },
	        resetOnError: true,
	        resetOnComplete: false,
	        resetOnRefCountZero: refCount
	    });
	}

	function single$2(predicate) {
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        var singleValue;
	        var seenValue = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            seenValue = true;
	            if (!predicate || predicate(value, index++, source)) {
	                hasValue && subscriber.error(new SequenceError$1('Too many matching values'));
	                hasValue = true;
	                singleValue = value;
	            }
	        }, function () {
	            if (hasValue) {
	                subscriber.next(singleValue);
	                subscriber.complete();
	            }
	            else {
	                subscriber.error(seenValue ? new NotFoundError$1('No matching values') : new EmptyError$2());
	            }
	        }));
	    });
	}

	function skip$2(count) {
	    return filter$2(function (_, index) { return count <= index; });
	}

	function skipLast$2(skipCount) {
	    return skipCount <= 0
	        ?
	            identity$5
	        : operate$1(function (source, subscriber) {
	            var ring = new Array(skipCount);
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                var valueIndex = seen++;
	                if (valueIndex < skipCount) {
	                    ring[valueIndex] = value;
	                }
	                else {
	                    var index = valueIndex % skipCount;
	                    var oldValue = ring[index];
	                    ring[index] = value;
	                    subscriber.next(oldValue);
	                }
	            }));
	            return function () {
	                ring = null;
	            };
	        });
	}

	function skipUntil$2(notifier) {
	    return operate$1(function (source, subscriber) {
	        var taking = false;
	        var skipSubscriber = new OperatorSubscriber$1(subscriber, function () {
	            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
	            taking = true;
	        }, noop$2);
	        innerFrom$1(notifier).subscribe(skipSubscriber);
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return taking && subscriber.next(value); }));
	    });
	}

	function skipWhile$2(predicate) {
	    return operate$1(function (source, subscriber) {
	        var taking = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
	    });
	}

	function startWith$2() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler$1(values);
	    return operate$1(function (source, subscriber) {
	        (scheduler ? concat$7(values, source, scheduler) : concat$7(values, source)).subscribe(subscriber);
	    });
	}

	function switchMap$2(project, resultSelector) {
	    return operate$1(function (source, subscriber) {
	        var innerSubscriber = null;
	        var index = 0;
	        var isComplete = false;
	        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
	            var innerIndex = 0;
	            var outerIndex = index++;
	            innerFrom$1(project(value, outerIndex)).subscribe((innerSubscriber = new OperatorSubscriber$1(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
	                innerSubscriber = null;
	                checkComplete();
	            })));
	        }, function () {
	            isComplete = true;
	            checkComplete();
	        }));
	    });
	}

	function switchAll$2() {
	    return switchMap$2(identity$5);
	}

	function switchMapTo$2(innerObservable, resultSelector) {
	    return isFunction$4(resultSelector) ? switchMap$2(function () { return innerObservable; }, resultSelector) : switchMap$2(function () { return innerObservable; });
	}

	function switchScan$1(accumulator, seed) {
	    return operate$1(function (source, subscriber) {
	        var state = seed;
	        switchMap$2(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
	        return function () {
	            state = null;
	        };
	    });
	}

	function takeUntil$2(notifier) {
	    return operate$1(function (source, subscriber) {
	        innerFrom$1(notifier).subscribe(new OperatorSubscriber$1(subscriber, function () { return subscriber.complete(); }, noop$2));
	        !subscriber.closed && source.subscribe(subscriber);
	    });
	}

	function takeWhile$2(predicate, inclusive) {
	    if (inclusive === void 0) { inclusive = false; }
	    return operate$1(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var result = predicate(value, index++);
	            (result || inclusive) && subscriber.next(value);
	            !result && subscriber.complete();
	        }));
	    });
	}

	function tap$2(observerOrNext, error, complete) {
	    var tapObserver = isFunction$4(observerOrNext) || error || complete
	        ?
	            { next: observerOrNext, error: error, complete: complete }
	        : observerOrNext;
	    return tapObserver
	        ? operate$1(function (source, subscriber) {
	            var _a;
	            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	            var isUnsub = true;
	            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                var _a;
	                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
	                subscriber.next(value);
	            }, function () {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                subscriber.complete();
	            }, function (err) {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
	                subscriber.error(err);
	            }, function () {
	                var _a, _b;
	                if (isUnsub) {
	                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                }
	                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
	            }));
	        })
	        :
	            identity$5;
	}

	var defaultThrottleConfig$2 = {
	    leading: true,
	    trailing: false,
	};
	function throttle$2(durationSelector, _a) {
	    var _b = _a === void 0 ? defaultThrottleConfig$2 : _a, leading = _b.leading, trailing = _b.trailing;
	    return operate$1(function (source, subscriber) {
	        var hasValue = false;
	        var sendValue = null;
	        var throttled = null;
	        var isComplete = false;
	        var endThrottling = function () {
	            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
	            throttled = null;
	            if (trailing) {
	                send();
	                isComplete && subscriber.complete();
	            }
	        };
	        var cleanupThrottling = function () {
	            throttled = null;
	            isComplete && subscriber.complete();
	        };
	        var startThrottle = function (value) {
	            return (throttled = innerFrom$1(durationSelector(value)).subscribe(new OperatorSubscriber$1(subscriber, endThrottling, cleanupThrottling)));
	        };
	        var send = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = sendValue;
	                sendValue = null;
	                subscriber.next(value);
	                !isComplete && startThrottle(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            hasValue = true;
	            sendValue = value;
	            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
	        }, function () {
	            isComplete = true;
	            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
	        }));
	    });
	}

	function throttleTime$2(duration, scheduler, config) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$2; }
	    if (config === void 0) { config = defaultThrottleConfig$2; }
	    var duration$ = timer$2(duration, scheduler);
	    return throttle$2(function () { return duration$; }, config);
	}

	function timeInterval$2(scheduler) {
	    if (scheduler === void 0) { scheduler = async$2; }
	    return function (source) {
	        return defer$2(function () {
	            return source.pipe(scan$2(function (_a, value) {
	                var current = _a.current;
	                return ({ value: value, current: scheduler.now(), last: current });
	            }, {
	                current: scheduler.now(),
	                value: undefined,
	                last: undefined,
	            }), map$3(function (_a) {
	                var current = _a.current, last = _a.last, value = _a.value;
	                return new TimeInterval$2(value, current - last);
	            }));
	        });
	    };
	}
	var TimeInterval$2 = (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());

	function timeoutWith$2(due, withObservable, scheduler) {
	    var first;
	    var each;
	    var _with;
	    scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async$2;
	    if (isValidDate$1(due)) {
	        first = due;
	    }
	    else if (typeof due === 'number') {
	        each = due;
	    }
	    if (withObservable) {
	        _with = function () { return withObservable; };
	    }
	    else {
	        throw new TypeError('No observable provided to switch to');
	    }
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return timeout$2({
	        first: first,
	        each: each,
	        scheduler: scheduler,
	        with: _with,
	    });
	}

	function timestamp$2(timestampProvider) {
	    if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider$1; }
	    return map$3(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
	}

	function window$3(windowBoundaries) {
	    return operate$1(function (source, subscriber) {
	        var windowSubject = new Subject$2();
	        subscriber.next(windowSubject.asObservable());
	        var errorHandler = function (err) {
	            windowSubject.error(err);
	            subscriber.error(err);
	        };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
	            windowSubject.complete();
	            subscriber.complete();
	        }, errorHandler));
	        windowBoundaries.subscribe(new OperatorSubscriber$1(subscriber, function () {
	            windowSubject.complete();
	            subscriber.next((windowSubject = new Subject$2()));
	        }, noop$2, errorHandler));
	        return function () {
	            windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
	            windowSubject = null;
	        };
	    });
	}

	function windowCount$2(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) { startWindowEvery = 0; }
	    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
	    return operate$1(function (source, subscriber) {
	        var windows = [new Subject$2()];
	        var starts = [];
	        var count = 0;
	        subscriber.next(windows[0].asObservable());
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var windows_1 = __values$2(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
	                    var window_1 = windows_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            var c = count - windowSize + 1;
	            if (c >= 0 && c % startEvery === 0) {
	                windows.shift().complete();
	            }
	            if (++count % startEvery === 0) {
	                var window_2 = new Subject$2();
	                windows.push(window_2);
	                subscriber.next(window_2.asObservable());
	            }
	        }, function () {
	            while (windows.length > 0) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, function (err) {
	            while (windows.length > 0) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        }, function () {
	            starts = null;
	            windows = null;
	        }));
	    });
	}

	function windowTime$2(windowTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler$1(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$2;
	    var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxWindowSize = otherArgs[1] || Infinity;
	    return operate$1(function (source, subscriber) {
	        var windowRecords = [];
	        var restartOnClose = false;
	        var closeWindow = function (record) {
	            var window = record.window, subs = record.subs;
	            window.complete();
	            subs.unsubscribe();
	            arrRemove$1(windowRecords, record);
	            restartOnClose && startWindow();
	        };
	        var startWindow = function () {
	            if (windowRecords) {
	                var subs = new Subscription$2();
	                subscriber.add(subs);
	                var window_1 = new Subject$2();
	                var record_1 = {
	                    window: window_1,
	                    subs: subs,
	                    seen: 0,
	                };
	                windowRecords.push(record_1);
	                subscriber.next(window_1.asObservable());
	                executeSchedule$1(subs, scheduler, function () { return closeWindow(record_1); }, windowTimeSpan);
	            }
	        };
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            executeSchedule$1(subscriber, scheduler, startWindow, windowCreationInterval, true);
	        }
	        else {
	            restartOnClose = true;
	        }
	        startWindow();
	        var loop = function (cb) { return windowRecords.slice().forEach(cb); };
	        var terminate = function (cb) {
	            loop(function (_a) {
	                var window = _a.window;
	                return cb(window);
	            });
	            cb(subscriber);
	            subscriber.unsubscribe();
	        };
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            loop(function (record) {
	                record.window.next(value);
	                maxWindowSize <= ++record.seen && closeWindow(record);
	            });
	        }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
	        return function () {
	            windowRecords = null;
	        };
	    });
	}

	function windowToggle$2(openings, closingSelector) {
	    return operate$1(function (source, subscriber) {
	        var windows = [];
	        var handleError = function (err) {
	            while (0 < windows.length) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        };
	        innerFrom$1(openings).subscribe(new OperatorSubscriber$1(subscriber, function (openValue) {
	            var window = new Subject$2();
	            windows.push(window);
	            var closingSubscription = new Subscription$2();
	            var closeWindow = function () {
	                arrRemove$1(windows, window);
	                window.complete();
	                closingSubscription.unsubscribe();
	            };
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom$1(closingSelector(openValue));
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            subscriber.next(window.asObservable());
	            closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber$1(subscriber, closeWindow, noop$2, handleError)));
	        }, noop$2));
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            var e_1, _a;
	            var windowsCopy = windows.slice();
	            try {
	                for (var windowsCopy_1 = __values$2(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
	                    var window_1 = windowsCopy_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (0 < windows.length) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, handleError, function () {
	            while (0 < windows.length) {
	                windows.shift().unsubscribe();
	            }
	        }));
	    });
	}

	function windowWhen$2(closingSelector) {
	    return operate$1(function (source, subscriber) {
	        var window;
	        var closingSubscriber;
	        var handleError = function (err) {
	            window.error(err);
	            subscriber.error(err);
	        };
	        var openWindow = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window === null || window === void 0 ? void 0 : window.complete();
	            window = new Subject$2();
	            subscriber.next(window.asObservable());
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom$1(closingSelector());
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber$1(subscriber, openWindow, openWindow, handleError)));
	        };
	        openWindow();
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return window.next(value); }, function () {
	            window.complete();
	            subscriber.complete();
	        }, handleError, function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window = null;
	        }));
	    });
	}

	function withLatestFrom$2() {
	    var inputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        inputs[_i] = arguments[_i];
	    }
	    var project = popResultSelector$1(inputs);
	    return operate$1(function (source, subscriber) {
	        var len = inputs.length;
	        var otherValues = new Array(len);
	        var hasValue = inputs.map(function () { return false; });
	        var ready = false;
	        var _loop_1 = function (i) {
	            innerFrom$1(inputs[i]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	                otherValues[i] = value;
	                if (!ready && !hasValue[i]) {
	                    hasValue[i] = true;
	                    (ready = hasValue.every(identity$5)) && (hasValue = null);
	                }
	            }, noop$2));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
	            if (ready) {
	                var values = __spreadArray$1([value], __read$2(otherValues));
	                subscriber.next(project ? project.apply(void 0, __spreadArray$1([], __read$2(values))) : values);
	            }
	        }));
	    });
	}

	function zipAll$2(project) {
	    return joinAllInternals$1(zip$5, project);
	}

	function zip$4() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return operate$1(function (source, subscriber) {
	        zip$5.apply(void 0, __spreadArray$1([source], __read$2(sources))).subscribe(subscriber);
	    });
	}

	function zipWith$1() {
	    var otherInputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherInputs[_i] = arguments[_i];
	    }
	    return zip$4.apply(void 0, __spreadArray$1([], __read$2(otherInputs)));
	}

	var esm5$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Observable: Observable$2,
		ConnectableObservable: ConnectableObservable$2,
		observable: observable$2,
		animationFrames: animationFrames$1,
		Subject: Subject$2,
		BehaviorSubject: BehaviorSubject$2,
		ReplaySubject: ReplaySubject$2,
		AsyncSubject: AsyncSubject$2,
		asap: asap$2,
		asapScheduler: asapScheduler$2,
		async: async$2,
		asyncScheduler: asyncScheduler$2,
		queue: queue$2,
		queueScheduler: queueScheduler$2,
		animationFrame: animationFrame$2,
		animationFrameScheduler: animationFrameScheduler$2,
		VirtualTimeScheduler: VirtualTimeScheduler$2,
		VirtualAction: VirtualAction$2,
		Scheduler: Scheduler$2,
		Subscription: Subscription$2,
		Subscriber: Subscriber$2,
		Notification: Notification$2,
		get NotificationKind () { return NotificationKind$2; },
		pipe: pipe$2,
		noop: noop$2,
		identity: identity$5,
		isObservable: isObservable$2,
		lastValueFrom: lastValueFrom$1,
		firstValueFrom: firstValueFrom$1,
		ArgumentOutOfRangeError: ArgumentOutOfRangeError$2,
		EmptyError: EmptyError$2,
		NotFoundError: NotFoundError$1,
		ObjectUnsubscribedError: ObjectUnsubscribedError$2,
		SequenceError: SequenceError$1,
		TimeoutError: TimeoutError$2,
		UnsubscriptionError: UnsubscriptionError$2,
		bindCallback: bindCallback$2,
		bindNodeCallback: bindNodeCallback$2,
		combineLatest: combineLatest$5,
		concat: concat$7,
		connectable: connectable$1,
		defer: defer$2,
		empty: empty$3,
		forkJoin: forkJoin$2,
		from: from$4,
		fromEvent: fromEvent$2,
		fromEventPattern: fromEventPattern$2,
		generate: generate$5,
		iif: iif$2,
		interval: interval$2,
		merge: merge$5,
		never: never$2,
		of: of$2,
		onErrorResumeNext: onErrorResumeNext$4,
		pairs: pairs$2,
		partition: partition$5,
		race: race$5,
		range: range$2,
		throwError: throwError$2,
		timer: timer$2,
		using: using$2,
		zip: zip$5,
		scheduled: scheduled$2,
		EMPTY: EMPTY$2,
		NEVER: NEVER$2,
		config: config$2,
		audit: audit$2,
		auditTime: auditTime$2,
		buffer: buffer$2,
		bufferCount: bufferCount$2,
		bufferTime: bufferTime$2,
		bufferToggle: bufferToggle$2,
		bufferWhen: bufferWhen$2,
		catchError: catchError$2,
		combineAll: combineAll$2,
		combineLatestAll: combineLatestAll$1,
		combineLatestWith: combineLatestWith$1,
		concatAll: concatAll$2,
		concatMap: concatMap$2,
		concatMapTo: concatMapTo$2,
		concatWith: concatWith$1,
		connect: connect$3,
		count: count$2,
		debounce: debounce$2,
		debounceTime: debounceTime$2,
		defaultIfEmpty: defaultIfEmpty$2,
		delay: delay$2,
		delayWhen: delayWhen$2,
		dematerialize: dematerialize$2,
		distinct: distinct$2,
		distinctUntilChanged: distinctUntilChanged$2,
		distinctUntilKeyChanged: distinctUntilKeyChanged$2,
		elementAt: elementAt$2,
		endWith: endWith$2,
		every: every$2,
		exhaust: exhaust$2,
		exhaustAll: exhaustAll$1,
		exhaustMap: exhaustMap$2,
		expand: expand$2,
		filter: filter$2,
		finalize: finalize$2,
		find: find$3,
		findIndex: findIndex$2,
		first: first$2,
		groupBy: groupBy$2,
		ignoreElements: ignoreElements$2,
		isEmpty: isEmpty$2,
		last: last$3,
		map: map$3,
		mapTo: mapTo$2,
		materialize: materialize$2,
		max: max$2,
		mergeAll: mergeAll$2,
		flatMap: flatMap$2,
		mergeMap: mergeMap$2,
		mergeMapTo: mergeMapTo$2,
		mergeScan: mergeScan$2,
		mergeWith: mergeWith$1,
		min: min$2,
		multicast: multicast$2,
		observeOn: observeOn$2,
		pairwise: pairwise$2,
		pluck: pluck$4,
		publish: publish$2,
		publishBehavior: publishBehavior$2,
		publishLast: publishLast$2,
		publishReplay: publishReplay$2,
		raceWith: raceWith$1,
		reduce: reduce$2,
		repeat: repeat$2,
		repeatWhen: repeatWhen$2,
		retry: retry$2,
		retryWhen: retryWhen$2,
		refCount: refCount$2,
		sample: sample$2,
		sampleTime: sampleTime$2,
		scan: scan$2,
		sequenceEqual: sequenceEqual$2,
		share: share$2,
		shareReplay: shareReplay$2,
		single: single$2,
		skip: skip$2,
		skipLast: skipLast$2,
		skipUntil: skipUntil$2,
		skipWhile: skipWhile$2,
		startWith: startWith$2,
		subscribeOn: subscribeOn$2,
		switchAll: switchAll$2,
		switchMap: switchMap$2,
		switchMapTo: switchMapTo$2,
		switchScan: switchScan$1,
		take: take$2,
		takeLast: takeLast$2,
		takeUntil: takeUntil$2,
		takeWhile: takeWhile$2,
		tap: tap$2,
		throttle: throttle$2,
		throttleTime: throttleTime$2,
		throwIfEmpty: throwIfEmpty$2,
		timeInterval: timeInterval$2,
		timeout: timeout$2,
		timeoutWith: timeoutWith$2,
		timestamp: timestamp$2,
		toArray: toArray$3,
		window: window$3,
		windowCount: windowCount$2,
		windowTime: windowTime$2,
		windowToggle: windowToggle$2,
		windowWhen: windowWhen$2,
		withLatestFrom: withLatestFrom$2,
		zipAll: zipAll$2,
		zipWith: zipWith$1
	});

	var require$$0$6 = /*@__PURE__*/getAugmentedNamespace(esm5$1);

	function partition$4(predicate, thisArg) {
	    return function (source) {
	        return [filter$2(predicate, thisArg)(source), filter$2(not$2(predicate, thisArg))(source)];
	    };
	}

	function race$4() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return raceWith$1.apply(void 0, __spreadArray$1([], __read$2(argsOrArgArray$1(args))));
	}

	var operators$7 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		audit: audit$2,
		auditTime: auditTime$2,
		buffer: buffer$2,
		bufferCount: bufferCount$2,
		bufferTime: bufferTime$2,
		bufferToggle: bufferToggle$2,
		bufferWhen: bufferWhen$2,
		catchError: catchError$2,
		combineAll: combineAll$2,
		combineLatestAll: combineLatestAll$1,
		combineLatest: combineLatest$4,
		combineLatestWith: combineLatestWith$1,
		concat: concat$6,
		concatAll: concatAll$2,
		concatMap: concatMap$2,
		concatMapTo: concatMapTo$2,
		concatWith: concatWith$1,
		connect: connect$3,
		count: count$2,
		debounce: debounce$2,
		debounceTime: debounceTime$2,
		defaultIfEmpty: defaultIfEmpty$2,
		delay: delay$2,
		delayWhen: delayWhen$2,
		dematerialize: dematerialize$2,
		distinct: distinct$2,
		distinctUntilChanged: distinctUntilChanged$2,
		distinctUntilKeyChanged: distinctUntilKeyChanged$2,
		elementAt: elementAt$2,
		endWith: endWith$2,
		every: every$2,
		exhaust: exhaust$2,
		exhaustAll: exhaustAll$1,
		exhaustMap: exhaustMap$2,
		expand: expand$2,
		filter: filter$2,
		finalize: finalize$2,
		find: find$3,
		findIndex: findIndex$2,
		first: first$2,
		groupBy: groupBy$2,
		ignoreElements: ignoreElements$2,
		isEmpty: isEmpty$2,
		last: last$3,
		map: map$3,
		mapTo: mapTo$2,
		materialize: materialize$2,
		max: max$2,
		merge: merge$4,
		mergeAll: mergeAll$2,
		flatMap: flatMap$2,
		mergeMap: mergeMap$2,
		mergeMapTo: mergeMapTo$2,
		mergeScan: mergeScan$2,
		mergeWith: mergeWith$1,
		min: min$2,
		multicast: multicast$2,
		observeOn: observeOn$2,
		onErrorResumeNext: onErrorResumeNext$5,
		pairwise: pairwise$2,
		partition: partition$4,
		pluck: pluck$4,
		publish: publish$2,
		publishBehavior: publishBehavior$2,
		publishLast: publishLast$2,
		publishReplay: publishReplay$2,
		race: race$4,
		raceWith: raceWith$1,
		reduce: reduce$2,
		repeat: repeat$2,
		repeatWhen: repeatWhen$2,
		retry: retry$2,
		retryWhen: retryWhen$2,
		refCount: refCount$2,
		sample: sample$2,
		sampleTime: sampleTime$2,
		scan: scan$2,
		sequenceEqual: sequenceEqual$2,
		share: share$2,
		shareReplay: shareReplay$2,
		single: single$2,
		skip: skip$2,
		skipLast: skipLast$2,
		skipUntil: skipUntil$2,
		skipWhile: skipWhile$2,
		startWith: startWith$2,
		subscribeOn: subscribeOn$2,
		switchAll: switchAll$2,
		switchMap: switchMap$2,
		switchMapTo: switchMapTo$2,
		switchScan: switchScan$1,
		take: take$2,
		takeLast: takeLast$2,
		takeUntil: takeUntil$2,
		takeWhile: takeWhile$2,
		tap: tap$2,
		throttle: throttle$2,
		throttleTime: throttleTime$2,
		throwIfEmpty: throwIfEmpty$2,
		timeInterval: timeInterval$2,
		timeout: timeout$2,
		timeoutWith: timeoutWith$2,
		timestamp: timestamp$2,
		toArray: toArray$3,
		window: window$3,
		windowCount: windowCount$2,
		windowTime: windowTime$2,
		windowToggle: windowToggle$2,
		windowWhen: windowWhen$2,
		withLatestFrom: withLatestFrom$2,
		zip: zip$4,
		zipAll: zipAll$2,
		zipWith: zipWith$1
	});

	var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(operators$7);

	var lib$e = {};

	var anchorService = {};

	Object.defineProperty(anchorService, "__esModule", { value: true });

	var ceramicApi = {};

	Object.defineProperty(ceramicApi, "__esModule", { value: true });

	var context$1 = {};

	Object.defineProperty(context$1, "__esModule", { value: true });

	var streamopts = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SyncOptions = void 0;
	(function (SyncOptions) {
	    SyncOptions[SyncOptions["PREFER_CACHE"] = 0] = "PREFER_CACHE";
	    SyncOptions[SyncOptions["SYNC_ALWAYS"] = 1] = "SYNC_ALWAYS";
	    SyncOptions[SyncOptions["NEVER_SYNC"] = 2] = "NEVER_SYNC";
	})(exports.SyncOptions || (exports.SyncOptions = {}));

	}(streamopts));

	var stream$2 = {};

	var lodash_clonedeep = {exports: {}};

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	(function (module, exports) {
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, true, true);
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = cloneDeep;
	}(lodash_clonedeep, lodash_clonedeep.exports));

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics$1 = function(d, b) {
	    extendStatics$1 = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics$1(d, b);
	};

	function __extends$2(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics$1(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	function __awaiter$7(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator$2(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __values$1(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read$1(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray(to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	}

	function __await$1(v) {
	    return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
	}

	function __asyncGenerator$1(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncValues$1(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function isFunction$3(value) {
	    return typeof value === 'function';
	}

	function createErrorClass(createImpl) {
	    var _super = function (instance) {
	        Error.call(instance);
	        instance.stack = new Error().stack;
	    };
	    var ctorFunc = createImpl(_super);
	    ctorFunc.prototype = Object.create(Error.prototype);
	    ctorFunc.prototype.constructor = ctorFunc;
	    return ctorFunc;
	}

	var UnsubscriptionError$1 = createErrorClass(function (_super) {
	    return function UnsubscriptionErrorImpl(errors) {
	        _super(this);
	        this.message = errors
	            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
	            : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	    };
	});

	function arrRemove(arr, item) {
	    if (arr) {
	        var index = arr.indexOf(item);
	        0 <= index && arr.splice(index, 1);
	    }
	}

	var Subscription$1 = (function () {
	    function Subscription(initialTeardown) {
	        this.initialTeardown = initialTeardown;
	        this.closed = false;
	        this._parentage = null;
	        this._teardowns = null;
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var e_1, _a, e_2, _b;
	        var errors;
	        if (!this.closed) {
	            this.closed = true;
	            var _parentage = this._parentage;
	            if (_parentage) {
	                this._parentage = null;
	                if (Array.isArray(_parentage)) {
	                    try {
	                        for (var _parentage_1 = __values$1(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
	                            var parent_1 = _parentage_1_1.value;
	                            parent_1.remove(this);
	                        }
	                    }
	                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                    finally {
	                        try {
	                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
	                        }
	                        finally { if (e_1) throw e_1.error; }
	                    }
	                }
	                else {
	                    _parentage.remove(this);
	                }
	            }
	            var initialTeardown = this.initialTeardown;
	            if (isFunction$3(initialTeardown)) {
	                try {
	                    initialTeardown();
	                }
	                catch (e) {
	                    errors = e instanceof UnsubscriptionError$1 ? e.errors : [e];
	                }
	            }
	            var _teardowns = this._teardowns;
	            if (_teardowns) {
	                this._teardowns = null;
	                try {
	                    for (var _teardowns_1 = __values$1(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
	                        var teardown_1 = _teardowns_1_1.value;
	                        try {
	                            execTeardown(teardown_1);
	                        }
	                        catch (err) {
	                            errors = errors !== null && errors !== void 0 ? errors : [];
	                            if (err instanceof UnsubscriptionError$1) {
	                                errors = __spreadArray(__spreadArray([], __read$1(errors)), __read$1(err.errors));
	                            }
	                            else {
	                                errors.push(err);
	                            }
	                        }
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	            if (errors) {
	                throw new UnsubscriptionError$1(errors);
	            }
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var _a;
	        if (teardown && teardown !== this) {
	            if (this.closed) {
	                execTeardown(teardown);
	            }
	            else {
	                if (teardown instanceof Subscription) {
	                    if (teardown.closed || teardown._hasParent(this)) {
	                        return;
	                    }
	                    teardown._addParent(this);
	                }
	                (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
	            }
	        }
	    };
	    Subscription.prototype._hasParent = function (parent) {
	        var _parentage = this._parentage;
	        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
	    };
	    Subscription.prototype._addParent = function (parent) {
	        var _parentage = this._parentage;
	        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
	    };
	    Subscription.prototype._removeParent = function (parent) {
	        var _parentage = this._parentage;
	        if (_parentage === parent) {
	            this._parentage = null;
	        }
	        else if (Array.isArray(_parentage)) {
	            arrRemove(_parentage, parent);
	        }
	    };
	    Subscription.prototype.remove = function (teardown) {
	        var _teardowns = this._teardowns;
	        _teardowns && arrRemove(_teardowns, teardown);
	        if (teardown instanceof Subscription) {
	            teardown._removeParent(this);
	        }
	    };
	    Subscription.EMPTY = (function () {
	        var empty = new Subscription();
	        empty.closed = true;
	        return empty;
	    })();
	    return Subscription;
	}());
	var EMPTY_SUBSCRIPTION = Subscription$1.EMPTY;
	function isSubscription(value) {
	    return (value instanceof Subscription$1 ||
	        (value && 'closed' in value && isFunction$3(value.remove) && isFunction$3(value.add) && isFunction$3(value.unsubscribe)));
	}
	function execTeardown(teardown) {
	    if (isFunction$3(teardown)) {
	        teardown();
	    }
	    else {
	        teardown.unsubscribe();
	    }
	}

	var config$1 = {
	    onUnhandledError: null,
	    onStoppedNotification: null,
	    Promise: undefined,
	    useDeprecatedSynchronousErrorHandling: false,
	    useDeprecatedNextContext: false,
	};

	var timeoutProvider = {
	    setTimeout: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = timeoutProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read$1(args)));
	    },
	    clearTimeout: function (handle) {
	        var delegate = timeoutProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
	    },
	    delegate: undefined,
	};

	function reportUnhandledError(err) {
	    timeoutProvider.setTimeout(function () {
	        var onUnhandledError = config$1.onUnhandledError;
	        if (onUnhandledError) {
	            onUnhandledError(err);
	        }
	        else {
	            throw err;
	        }
	    });
	}

	function noop$1() { }

	var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
	function errorNotification(error) {
	    return createNotification('E', undefined, error);
	}
	function nextNotification(value) {
	    return createNotification('N', value, undefined);
	}
	function createNotification(kind, value, error) {
	    return {
	        kind: kind,
	        value: value,
	        error: error,
	    };
	}

	var context = null;
	function errorContext(cb) {
	    if (config$1.useDeprecatedSynchronousErrorHandling) {
	        var isRoot = !context;
	        if (isRoot) {
	            context = { errorThrown: false, error: null };
	        }
	        cb();
	        if (isRoot) {
	            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
	            context = null;
	            if (errorThrown) {
	                throw error;
	            }
	        }
	    }
	    else {
	        cb();
	    }
	}
	function captureError(err) {
	    if (config$1.useDeprecatedSynchronousErrorHandling && context) {
	        context.errorThrown = true;
	        context.error = err;
	    }
	}

	var Subscriber$1 = (function (_super) {
	    __extends$2(Subscriber, _super);
	    function Subscriber(destination) {
	        var _this = _super.call(this) || this;
	        _this.isStopped = false;
	        if (destination) {
	            _this.destination = destination;
	            if (isSubscription(destination)) {
	                destination.add(_this);
	            }
	        }
	        else {
	            _this.destination = EMPTY_OBSERVER;
	        }
	        return _this;
	    }
	    Subscriber.create = function (next, error, complete) {
	        return new SafeSubscriber$1(next, error, complete);
	    };
	    Subscriber.prototype.next = function (value) {
	        if (this.isStopped) {
	            handleStoppedNotification(nextNotification(value), this);
	        }
	        else {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (this.isStopped) {
	            handleStoppedNotification(errorNotification(err), this);
	        }
	        else {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (this.isStopped) {
	            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
	        }
	        else {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.isStopped = true;
	            _super.prototype.unsubscribe.call(this);
	            this.destination = null;
	        }
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        try {
	            this.destination.error(err);
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    Subscriber.prototype._complete = function () {
	        try {
	            this.destination.complete();
	        }
	        finally {
	            this.unsubscribe();
	        }
	    };
	    return Subscriber;
	}(Subscription$1));
	var SafeSubscriber$1 = (function (_super) {
	    __extends$2(SafeSubscriber, _super);
	    function SafeSubscriber(observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        var next;
	        if (isFunction$3(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);
	            var context_1;
	            if (_this && config$1.useDeprecatedNextContext) {
	                context_1 = Object.create(observerOrNext);
	                context_1.unsubscribe = function () { return _this.unsubscribe(); };
	            }
	            else {
	                context_1 = observerOrNext;
	            }
	            next = next === null || next === void 0 ? void 0 : next.bind(context_1);
	            error = error === null || error === void 0 ? void 0 : error.bind(context_1);
	            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
	        }
	        _this.destination = {
	            next: next ? wrapForErrorHandling(next) : noop$1,
	            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler),
	            complete: complete ? wrapForErrorHandling(complete) : noop$1,
	        };
	        return _this;
	    }
	    return SafeSubscriber;
	}(Subscriber$1));
	function wrapForErrorHandling(handler, instance) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        try {
	            handler.apply(void 0, __spreadArray([], __read$1(args)));
	        }
	        catch (err) {
	            if (config$1.useDeprecatedSynchronousErrorHandling) {
	                captureError(err);
	            }
	            else {
	                reportUnhandledError(err);
	            }
	        }
	    };
	}
	function defaultErrorHandler(err) {
	    throw err;
	}
	function handleStoppedNotification(notification, subscriber) {
	    var onStoppedNotification = config$1.onStoppedNotification;
	    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
	}
	var EMPTY_OBSERVER = {
	    closed: true,
	    next: noop$1,
	    error: defaultErrorHandler,
	    complete: noop$1,
	};

	var observable$1 = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

	function identity$4(x) {
	    return x;
	}

	function pipe$1() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return pipeFromArray$1(fns);
	}
	function pipeFromArray$1(fns) {
	    if (fns.length === 0) {
	        return identity$4;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	var Observable$1 = (function () {
	    function Observable(subscribe) {
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var _this = this;
	        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber$1(observerOrNext, error, complete);
	        errorContext(function () {
	            var _a = _this, operator = _a.operator, source = _a.source;
	            subscriber.add(operator
	                ?
	                    operator.call(subscriber, source)
	                : source
	                    ?
	                        _this._subscribe(subscriber)
	                    :
	                        _this._trySubscribe(subscriber));
	        });
	        return subscriber;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            sink.error(err);
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor$1(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var _a;
	        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
	    };
	    Observable.prototype[observable$1] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        return pipeFromArray$1(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor$1(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor$1(promiseCtor) {
	    var _a;
	    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$1.Promise) !== null && _a !== void 0 ? _a : Promise;
	}
	function isObserver(value) {
	    return value && isFunction$3(value.next) && isFunction$3(value.error) && isFunction$3(value.complete);
	}
	function isSubscriber(value) {
	    return (value && value instanceof Subscriber$1) || (isObserver(value) && isSubscription(value));
	}

	function hasLift(source) {
	    return isFunction$3(source === null || source === void 0 ? void 0 : source.lift);
	}
	function operate(init) {
	    return function (source) {
	        if (hasLift(source)) {
	            return source.lift(function (liftedSource) {
	                try {
	                    return init(liftedSource, this);
	                }
	                catch (err) {
	                    this.error(err);
	                }
	            });
	        }
	        throw new TypeError('Unable to lift unknown Observable type');
	    };
	}

	var OperatorSubscriber = (function (_super) {
	    __extends$2(OperatorSubscriber, _super);
	    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
	        var _this = _super.call(this, destination) || this;
	        _this.onFinalize = onFinalize;
	        _this._next = onNext
	            ? function (value) {
	                try {
	                    onNext(value);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	            }
	            : _super.prototype._next;
	        _this._error = onError
	            ? function (err) {
	                try {
	                    onError(err);
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._error;
	        _this._complete = onComplete
	            ? function () {
	                try {
	                    onComplete();
	                }
	                catch (err) {
	                    destination.error(err);
	                }
	                finally {
	                    this.unsubscribe();
	                }
	            }
	            : _super.prototype._complete;
	        return _this;
	    }
	    OperatorSubscriber.prototype.unsubscribe = function () {
	        var _a;
	        var closed = this.closed;
	        _super.prototype.unsubscribe.call(this);
	        !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
	    };
	    return OperatorSubscriber;
	}(Subscriber$1));

	function refCount$1() {
	    return operate(function (source, subscriber) {
	        var connection = null;
	        source._refCount++;
	        var refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
	            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
	                connection = null;
	                return;
	            }
	            var sharedConnection = source._connection;
	            var conn = connection;
	            connection = null;
	            if (sharedConnection && (!conn || sharedConnection === conn)) {
	                sharedConnection.unsubscribe();
	            }
	            subscriber.unsubscribe();
	        });
	        source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            connection = source.connect();
	        }
	    });
	}

	var ConnectableObservable$1 = (function (_super) {
	    __extends$2(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._subject = null;
	        _this._refCount = 0;
	        _this._connection = null;
	        if (hasLift(source)) {
	            _this.lift = source.lift;
	        }
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype._teardown = function () {
	        this._refCount = 0;
	        var _connection = this._connection;
	        this._subject = this._connection = null;
	        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var _this = this;
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription$1();
	            var subject_1 = this.getSubject();
	            connection.add(this.source.subscribe(new OperatorSubscriber(subject_1, undefined, function () {
	                _this._teardown();
	                subject_1.complete();
	            }, function (err) {
	                _this._teardown();
	                subject_1.error(err);
	            }, function () { return _this._teardown(); })));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription$1.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount$1()(this);
	    };
	    return ConnectableObservable;
	}(Observable$1));

	var performanceTimestampProvider = {
	    now: function () {
	        return (performanceTimestampProvider.delegate || performance).now();
	    },
	    delegate: undefined,
	};

	var animationFrameProvider = {
	    schedule: function (callback) {
	        var request = requestAnimationFrame;
	        var cancel = cancelAnimationFrame;
	        var delegate = animationFrameProvider.delegate;
	        if (delegate) {
	            request = delegate.requestAnimationFrame;
	            cancel = delegate.cancelAnimationFrame;
	        }
	        var handle = request(function (timestamp) {
	            cancel = undefined;
	            callback(timestamp);
	        });
	        return new Subscription$1(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
	    },
	    requestAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read$1(args)));
	    },
	    cancelAnimationFrame: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = animationFrameProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read$1(args)));
	    },
	    delegate: undefined,
	};

	function animationFrames(timestampProvider) {
	    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
	}
	function animationFramesFactory(timestampProvider) {
	    var schedule = animationFrameProvider.schedule;
	    return new Observable$1(function (subscriber) {
	        var subscription = new Subscription$1();
	        var provider = timestampProvider || performanceTimestampProvider;
	        var start = provider.now();
	        var run = function (timestamp) {
	            var now = provider.now();
	            subscriber.next({
	                timestamp: timestampProvider ? now : timestamp,
	                elapsed: now - start
	            });
	            if (!subscriber.closed) {
	                subscription.add(schedule(run));
	            }
	        };
	        subscription.add(schedule(run));
	        return subscription;
	    });
	}
	var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

	var ObjectUnsubscribedError$1 = createErrorClass(function (_super) {
	    return function ObjectUnsubscribedErrorImpl() {
	        _super(this);
	        this.name = 'ObjectUnsubscribedError';
	        this.message = 'object unsubscribed';
	    };
	});

	var Subject$1 = (function (_super) {
	    __extends$2(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.closed = false;
	        _this.observers = [];
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject$1(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype._throwIfClosed = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError$1();
	        }
	    };
	    Subject.prototype.next = function (value) {
	        var _this = this;
	        errorContext(function () {
	            var e_1, _a;
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                var copy = _this.observers.slice();
	                try {
	                    for (var copy_1 = __values$1(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
	                        var observer = copy_1_1.value;
	                        observer.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            }
	        });
	    };
	    Subject.prototype.error = function (err) {
	        var _this = this;
	        errorContext(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.hasError = _this.isStopped = true;
	                _this.thrownError = err;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().error(err);
	                }
	            }
	        });
	    };
	    Subject.prototype.complete = function () {
	        var _this = this;
	        errorContext(function () {
	            _this._throwIfClosed();
	            if (!_this.isStopped) {
	                _this.isStopped = true;
	                var observers = _this.observers;
	                while (observers.length) {
	                    observers.shift().complete();
	                }
	            }
	        });
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = this.closed = true;
	        this.observers = null;
	    };
	    Object.defineProperty(Subject.prototype, "observed", {
	        get: function () {
	            var _a;
	            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Subject.prototype._trySubscribe = function (subscriber) {
	        this._throwIfClosed();
	        return _super.prototype._trySubscribe.call(this, subscriber);
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._checkFinalizedStatuses(subscriber);
	        return this._innerSubscribe(subscriber);
	    };
	    Subject.prototype._innerSubscribe = function (subscriber) {
	        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
	        return hasError || isStopped
	            ? EMPTY_SUBSCRIPTION
	            : (observers.push(subscriber), new Subscription$1(function () { return arrRemove(observers, subscriber); }));
	    };
	    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped) {
	            subscriber.complete();
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable$1();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject$1(destination, source);
	    };
	    return Subject;
	}(Observable$1));
	var AnonymousSubject$1 = (function (_super) {
	    __extends$2(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var _a, _b;
	        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var _a, _b;
	        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
	    };
	    return AnonymousSubject;
	}(Subject$1));

	var BehaviorSubject$1 = (function (_super) {
	    __extends$2(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        !subscription.closed && subscriber.next(this._value);
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
	        if (hasError) {
	            throw thrownError;
	        }
	        this._throwIfClosed();
	        return _value;
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, (this._value = value));
	    };
	    return BehaviorSubject;
	}(Subject$1));

	var dateTimestampProvider = {
	    now: function () {
	        return (dateTimestampProvider.delegate || Date).now();
	    },
	    delegate: undefined,
	};

	var ReplaySubject$1 = (function (_super) {
	    __extends$2(ReplaySubject, _super);
	    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
	        if (_bufferSize === void 0) { _bufferSize = Infinity; }
	        if (_windowTime === void 0) { _windowTime = Infinity; }
	        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
	        var _this = _super.call(this) || this;
	        _this._bufferSize = _bufferSize;
	        _this._windowTime = _windowTime;
	        _this._timestampProvider = _timestampProvider;
	        _this._buffer = [];
	        _this._infiniteTimeWindow = true;
	        _this._infiniteTimeWindow = _windowTime === Infinity;
	        _this._bufferSize = Math.max(1, _bufferSize);
	        _this._windowTime = Math.max(1, _windowTime);
	        return _this;
	    }
	    ReplaySubject.prototype.next = function (value) {
	        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
	        if (!isStopped) {
	            _buffer.push(value);
	            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
	        }
	        this._trimBuffer();
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        this._throwIfClosed();
	        this._trimBuffer();
	        var subscription = this._innerSubscribe(subscriber);
	        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
	        var copy = _buffer.slice();
	        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
	            subscriber.next(copy[i]);
	        }
	        this._checkFinalizedStatuses(subscriber);
	        return subscription;
	    };
	    ReplaySubject.prototype._trimBuffer = function () {
	        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
	        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
	        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
	        if (!_infiniteTimeWindow) {
	            var now = _timestampProvider.now();
	            var last = 0;
	            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
	                last = i;
	            }
	            last && _buffer.splice(0, last + 1);
	        }
	    };
	    return ReplaySubject;
	}(Subject$1));

	var AsyncSubject$1 = (function (_super) {
	    __extends$2(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._value = null;
	        _this._hasValue = false;
	        _this._isComplete = false;
	        return _this;
	    }
	    AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
	        var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
	        if (hasError) {
	            subscriber.error(thrownError);
	        }
	        else if (isStopped || _isComplete) {
	            _hasValue && subscriber.next(_value);
	            subscriber.complete();
	        }
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._value = value;
	            this._hasValue = true;
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
	        if (!_isComplete) {
	            this._isComplete = true;
	            _hasValue && _super.prototype.next.call(this, _value);
	            _super.prototype.complete.call(this);
	        }
	    };
	    return AsyncSubject;
	}(Subject$1));

	var Action$1 = (function (_super) {
	    __extends$2(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription$1));

	var intervalProvider = {
	    setInterval: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = intervalProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray([], __read$1(args)));
	    },
	    clearInterval: function (handle) {
	        var delegate = intervalProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
	    },
	    delegate: undefined,
	};

	var AsyncAction$1 = (function (_super) {
	    __extends$2(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay != null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        intervalProvider.clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, _delay) {
	        var errored = false;
	        var errorValue;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = e ? e : new Error('Scheduled action threw falsy error');
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            var _a = this, id = _a.id, scheduler = _a.scheduler;
	            var actions = scheduler.actions;
	            this.work = this.state = this.scheduler = null;
	            this.pending = false;
	            arrRemove(actions, this);
	            if (id != null) {
	                this.id = this.recycleAsyncId(scheduler, id, null);
	            }
	            this.delay = null;
	            _super.prototype.unsubscribe.call(this);
	        }
	    };
	    return AsyncAction;
	}(Action$1));

	var nextHandle$1 = 1;
	var resolved;
	var activeHandles$1 = {};
	function findAndClearHandle$1(handle) {
	    if (handle in activeHandles$1) {
	        delete activeHandles$1[handle];
	        return true;
	    }
	    return false;
	}
	var Immediate$1 = {
	    setImmediate: function (cb) {
	        var handle = nextHandle$1++;
	        activeHandles$1[handle] = true;
	        if (!resolved) {
	            resolved = Promise.resolve();
	        }
	        resolved.then(function () { return findAndClearHandle$1(handle) && cb(); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        findAndClearHandle$1(handle);
	    },
	};

	var setImmediate = Immediate$1.setImmediate, clearImmediate = Immediate$1.clearImmediate;
	var immediateProvider = {
	    setImmediate: function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var delegate = immediateProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read$1(args)));
	    },
	    clearImmediate: function (handle) {
	        var delegate = immediateProvider.delegate;
	        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
	    },
	    delegate: undefined,
	};

	var AsapAction$1 = (function (_super) {
	    __extends$2(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            immediateProvider.clearImmediate(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction$1));

	var Scheduler$1 = (function () {
	    function Scheduler(schedulerActionCtor, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.schedulerActionCtor = schedulerActionCtor;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.schedulerActionCtor(this, work).schedule(state, delay);
	    };
	    Scheduler.now = dateTimestampProvider.now;
	    return Scheduler;
	}());

	var AsyncScheduler$1 = (function (_super) {
	    __extends$2(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler$1.now; }
	        var _this = _super.call(this, SchedulerAction, now) || this;
	        _this.actions = [];
	        _this._active = false;
	        _this._scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this._active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this._active = true;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while ((action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler$1));

	var AsapScheduler$1 = (function (_super) {
	    __extends$2(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler$1));

	var asapScheduler$1 = new AsapScheduler$1(AsapAction$1);
	var asap$1 = asapScheduler$1;

	var asyncScheduler$1 = new AsyncScheduler$1(AsyncAction$1);
	var async$1 = asyncScheduler$1;

	var QueueAction$1 = (function (_super) {
	    __extends$2(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction$1));

	var QueueScheduler$1 = (function (_super) {
	    __extends$2(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler$1));

	var queueScheduler$1 = new QueueScheduler$1(QueueAction$1);
	var queue$1 = queueScheduler$1;

	var AnimationFrameAction$1 = (function (_super) {
	    __extends$2(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            animationFrameProvider.cancelAnimationFrame(id);
	            scheduler._scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction$1));

	var AnimationFrameScheduler$1 = (function (_super) {
	    __extends$2(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this._active = true;
	        this._scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        action = action || actions.shift();
	        var count = actions.length;
	        do {
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this._active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler$1));

	var animationFrameScheduler$1 = new AnimationFrameScheduler$1(AnimationFrameAction$1);
	var animationFrame$1 = animationFrameScheduler$1;

	var VirtualTimeScheduler$1 = (function (_super) {
	    __extends$2(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
	        if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction$1; }
	        if (maxFrames === void 0) { maxFrames = Infinity; }
	        var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error;
	        var action;
	        while ((action = actions[0]) && action.delay <= maxFrames) {
	            actions.shift();
	            this.frame = action.delay;
	            if ((error = action.execute(action.state, action.delay))) {
	                break;
	            }
	        }
	        if (error) {
	            while ((action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler$1));
	var VirtualAction$1 = (function (_super) {
	    __extends$2(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) { index = (scheduler.index += 1); }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (Number.isFinite(delay)) {
	            if (!this.id) {
	                return _super.prototype.schedule.call(this, state, delay);
	            }
	            this.active = false;
	            var action = new VirtualAction(this.scheduler, this.work);
	            this.add(action);
	            return action.schedule(state, delay);
	        }
	        else {
	            return Subscription$1.EMPTY;
	        }
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction$1));

	var EMPTY$1 = new Observable$1(function (subscriber) { return subscriber.complete(); });
	function empty$2(scheduler) {
	    return scheduler ? emptyScheduled$1(scheduler) : EMPTY$1;
	}
	function emptyScheduled$1(scheduler) {
	    return new Observable$1(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	function isScheduler$1(value) {
	    return value && isFunction$3(value.schedule);
	}

	function last$2(arr) {
	    return arr[arr.length - 1];
	}
	function popResultSelector(args) {
	    return isFunction$3(last$2(args)) ? args.pop() : undefined;
	}
	function popScheduler(args) {
	    return isScheduler$1(last$2(args)) ? args.pop() : undefined;
	}
	function popNumber(args, defaultValue) {
	    return typeof last$2(args) === 'number' ? args.pop() : defaultValue;
	}

	var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	function isPromise$1(value) {
	    return isFunction$3(value === null || value === void 0 ? void 0 : value.then);
	}

	function isInteropObservable$1(input) {
	    return isFunction$3(input[observable$1]);
	}

	function isAsyncIterable(obj) {
	    return Symbol.asyncIterator && isFunction$3(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
	}

	function createInvalidObservableTypeError(input) {
	    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
	}

	function getSymbolIterator$1() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator$1 = getSymbolIterator$1();

	function isIterable$1(input) {
	    return isFunction$3(input === null || input === void 0 ? void 0 : input[iterator$1]);
	}

	function readableStreamLikeToAsyncGenerator(readableStream) {
	    return __asyncGenerator$1(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
	        var reader, _a, value, done;
	        return __generator$2(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    reader = readableStream.getReader();
	                    _b.label = 1;
	                case 1:
	                    _b.trys.push([1, , 9, 10]);
	                    _b.label = 2;
	                case 2:
	                    return [4, __await$1(reader.read())];
	                case 3:
	                    _a = _b.sent(), value = _a.value, done = _a.done;
	                    if (!done) return [3, 5];
	                    return [4, __await$1(void 0)];
	                case 4: return [2, _b.sent()];
	                case 5: return [4, __await$1(value)];
	                case 6: return [4, _b.sent()];
	                case 7:
	                    _b.sent();
	                    return [3, 2];
	                case 8: return [3, 10];
	                case 9:
	                    reader.releaseLock();
	                    return [7];
	                case 10: return [2];
	            }
	        });
	    });
	}
	function isReadableStreamLike(obj) {
	    return isFunction$3(obj === null || obj === void 0 ? void 0 : obj.getReader);
	}

	function innerFrom(input) {
	    if (input instanceof Observable$1) {
	        return input;
	    }
	    if (input != null) {
	        if (isInteropObservable$1(input)) {
	            return fromInteropObservable(input);
	        }
	        if (isArrayLike$1(input)) {
	            return fromArrayLike(input);
	        }
	        if (isPromise$1(input)) {
	            return fromPromise(input);
	        }
	        if (isAsyncIterable(input)) {
	            return fromAsyncIterable(input);
	        }
	        if (isIterable$1(input)) {
	            return fromIterable(input);
	        }
	        if (isReadableStreamLike(input)) {
	            return fromReadableStreamLike(input);
	        }
	    }
	    throw createInvalidObservableTypeError(input);
	}
	function fromInteropObservable(obj) {
	    return new Observable$1(function (subscriber) {
	        var obs = obj[observable$1]();
	        if (isFunction$3(obs.subscribe)) {
	            return obs.subscribe(subscriber);
	        }
	        throw new TypeError('Provided object does not correctly implement Symbol.observable');
	    });
	}
	function fromArrayLike(array) {
	    return new Observable$1(function (subscriber) {
	        for (var i = 0; i < array.length && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    });
	}
	function fromPromise(promise) {
	    return new Observable$1(function (subscriber) {
	        promise
	            .then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, reportUnhandledError);
	    });
	}
	function fromIterable(iterable) {
	    return new Observable$1(function (subscriber) {
	        var e_1, _a;
	        try {
	            for (var iterable_1 = __values$1(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
	                var value = iterable_1_1.value;
	                subscriber.next(value);
	                if (subscriber.closed) {
	                    return;
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        subscriber.complete();
	    });
	}
	function fromAsyncIterable(asyncIterable) {
	    return new Observable$1(function (subscriber) {
	        process$1(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
	    });
	}
	function fromReadableStreamLike(readableStream) {
	    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
	}
	function process$1(asyncIterable, subscriber) {
	    var asyncIterable_1, asyncIterable_1_1;
	    var e_2, _a;
	    return __awaiter$7(this, void 0, void 0, function () {
	        var value, e_2_1;
	        return __generator$2(this, function (_b) {
	            switch (_b.label) {
	                case 0:
	                    _b.trys.push([0, 5, 6, 11]);
	                    asyncIterable_1 = __asyncValues$1(asyncIterable);
	                    _b.label = 1;
	                case 1: return [4, asyncIterable_1.next()];
	                case 2:
	                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
	                    value = asyncIterable_1_1.value;
	                    subscriber.next(value);
	                    if (subscriber.closed) {
	                        return [2];
	                    }
	                    _b.label = 3;
	                case 3: return [3, 1];
	                case 4: return [3, 11];
	                case 5:
	                    e_2_1 = _b.sent();
	                    e_2 = { error: e_2_1 };
	                    return [3, 11];
	                case 6:
	                    _b.trys.push([6, , 9, 10]);
	                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
	                    return [4, _a.call(asyncIterable_1)];
	                case 7:
	                    _b.sent();
	                    _b.label = 8;
	                case 8: return [3, 10];
	                case 9:
	                    if (e_2) throw e_2.error;
	                    return [7];
	                case 10: return [7];
	                case 11:
	                    subscriber.complete();
	                    return [2];
	            }
	        });
	    });
	}

	function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
	    if (delay === void 0) { delay = 0; }
	    if (repeat === void 0) { repeat = false; }
	    var scheduleSubscription = scheduler.schedule(function () {
	        work();
	        if (repeat) {
	            parentSubscription.add(this.schedule(null, delay));
	        }
	        else {
	            this.unsubscribe();
	        }
	    }, delay);
	    parentSubscription.add(scheduleSubscription);
	    if (!repeat) {
	        return scheduleSubscription;
	    }
	}

	function observeOn$1(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
	    });
	}

	function subscribeOn$1(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return operate(function (source, subscriber) {
	        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
	    });
	}

	function scheduleObservable$1(input, scheduler) {
	    return innerFrom(input).pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
	}

	function schedulePromise$1(input, scheduler) {
	    return innerFrom(input).pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
	}

	function scheduleArray$1(input, scheduler) {
	    return new Observable$1(function (subscriber) {
	        var i = 0;
	        return scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	            }
	            else {
	                subscriber.next(input[i++]);
	                if (!subscriber.closed) {
	                    this.schedule();
	                }
	            }
	        });
	    });
	}

	function scheduleIterable$1(input, scheduler) {
	    return new Observable$1(function (subscriber) {
	        var iterator;
	        executeSchedule(subscriber, scheduler, function () {
	            iterator = input[iterator$1]();
	            executeSchedule(subscriber, scheduler, function () {
	                var _a;
	                var value;
	                var done;
	                try {
	                    (_a = iterator.next(), value = _a.value, done = _a.done);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                }
	            }, 0, true);
	        });
	        return function () { return isFunction$3(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
	    });
	}

	function scheduleAsyncIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable$1(function (subscriber) {
	        executeSchedule(subscriber, scheduler, function () {
	            var iterator = input[Symbol.asyncIterator]();
	            executeSchedule(subscriber, scheduler, function () {
	                iterator.next().then(function (result) {
	                    if (result.done) {
	                        subscriber.complete();
	                    }
	                    else {
	                        subscriber.next(result.value);
	                    }
	                });
	            }, 0, true);
	        });
	    });
	}

	function scheduleReadableStreamLike(input, scheduler) {
	    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
	}

	function scheduled$1(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable$1(input)) {
	            return scheduleObservable$1(input, scheduler);
	        }
	        if (isArrayLike$1(input)) {
	            return scheduleArray$1(input, scheduler);
	        }
	        if (isPromise$1(input)) {
	            return schedulePromise$1(input, scheduler);
	        }
	        if (isAsyncIterable(input)) {
	            return scheduleAsyncIterable(input, scheduler);
	        }
	        if (isIterable$1(input)) {
	            return scheduleIterable$1(input, scheduler);
	        }
	        if (isReadableStreamLike(input)) {
	            return scheduleReadableStreamLike(input, scheduler);
	        }
	    }
	    throw createInvalidObservableTypeError(input);
	}

	function from$3(input, scheduler) {
	    return scheduler ? scheduled$1(input, scheduler) : innerFrom(input);
	}

	function of$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    return from$3(args, scheduler);
	}

	function throwError$1(errorOrErrorFactory, scheduler) {
	    var errorFactory = isFunction$3(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
	    var init = function (subscriber) { return subscriber.error(errorFactory()); };
	    return new Observable$1(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
	}

	var NotificationKind$1;
	(function (NotificationKind) {
	    NotificationKind["NEXT"] = "N";
	    NotificationKind["ERROR"] = "E";
	    NotificationKind["COMPLETE"] = "C";
	})(NotificationKind$1 || (NotificationKind$1 = {}));
	var Notification$1 = (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        return observeNotification(this, observer);
	    };
	    Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        var _a;
	        return isFunction$3((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
	            ? this.observe(nextOrObserver)
	            : this.do(nextOrObserver, error, complete);
	    };
	    Notification.prototype.toObservable = function () {
	        var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
	        var result = kind === 'N'
	            ?
	                of$1(value)
	            :
	                kind === 'E'
	                    ?
	                        throwError$1(function () { return error; })
	                    :
	                        kind === 'C'
	                            ?
	                                EMPTY$1
	                            :
	                                0;
	        if (!result) {
	            throw new TypeError("Unexpected notification kind " + kind);
	        }
	        return result;
	    };
	    Notification.createNext = function (value) {
	        return new Notification('N', value);
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    return Notification;
	}());
	function observeNotification(notification, observer) {
	    var _a, _b, _c;
	    var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
	    if (typeof kind !== 'string') {
	        throw new TypeError('Invalid notification, missing "kind"');
	    }
	    kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
	}

	function isObservable$1(obj) {
	    return !!obj && (obj instanceof Observable$1 || (isFunction$3(obj.lift) && isFunction$3(obj.subscribe)));
	}

	var EmptyError$1 = createErrorClass(function (_super) { return function EmptyErrorImpl() {
	    _super(this);
	    this.name = 'EmptyError';
	    this.message = 'no elements in sequence';
	}; });

	function lastValueFrom(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var _hasValue = false;
	        var _value;
	        source.subscribe({
	            next: function (value) {
	                _value = value;
	                _hasValue = true;
	            },
	            error: reject,
	            complete: function () {
	                if (_hasValue) {
	                    resolve(_value);
	                }
	                else if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError$1());
	                }
	            },
	        });
	    });
	}

	function firstValueFrom(source, config) {
	    var hasConfig = typeof config === 'object';
	    return new Promise(function (resolve, reject) {
	        var subscriber = new SafeSubscriber$1({
	            next: function (value) {
	                resolve(value);
	                subscriber.unsubscribe();
	            },
	            error: reject,
	            complete: function () {
	                if (hasConfig) {
	                    resolve(config.defaultValue);
	                }
	                else {
	                    reject(new EmptyError$1());
	                }
	            },
	        });
	        source.subscribe(subscriber);
	    });
	}

	var ArgumentOutOfRangeError$1 = createErrorClass(function (_super) {
	    return function ArgumentOutOfRangeErrorImpl() {
	        _super(this);
	        this.name = 'ArgumentOutOfRangeError';
	        this.message = 'argument out of range';
	    };
	});

	var NotFoundError = createErrorClass(function (_super) {
	    return function NotFoundErrorImpl(message) {
	        _super(this);
	        this.name = 'NotFoundError';
	        this.message = message;
	    };
	});

	var SequenceError = createErrorClass(function (_super) {
	    return function SequenceErrorImpl(message) {
	        _super(this);
	        this.name = 'SequenceError';
	        this.message = message;
	    };
	});

	function isValidDate(value) {
	    return value instanceof Date && !isNaN(value);
	}

	var TimeoutError$1 = createErrorClass(function (_super) {
	    return function TimeoutErrorImpl(info) {
	        if (info === void 0) { info = null; }
	        _super(this);
	        this.message = 'Timeout has occurred';
	        this.name = 'TimeoutError';
	        this.info = info;
	    };
	});
	function timeout$1(config, schedulerArg) {
	    var _a = (isValidDate(config)
	        ? { first: config }
	        : typeof config === 'number'
	            ? { each: config }
	            : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler$1 : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return operate(function (source, subscriber) {
	        var originalSourceSubscription;
	        var timerSubscription;
	        var lastValue = null;
	        var seen = 0;
	        var startTimer = function (delay) {
	            timerSubscription = executeSchedule(subscriber, scheduler, function () {
	                try {
	                    originalSourceSubscription.unsubscribe();
	                    innerFrom(_with({
	                        meta: meta,
	                        lastValue: lastValue,
	                        seen: seen,
	                    })).subscribe(subscriber);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                }
	            }, delay);
	        };
	        originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            seen++;
	            subscriber.next((lastValue = value));
	            each > 0 && startTimer(each);
	        }, undefined, undefined, function () {
	            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
	                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
	            }
	            lastValue = null;
	        }));
	        startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
	    });
	}
	function timeoutErrorFactory(info) {
	    throw new TimeoutError$1(info);
	}

	function map$2(project, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            subscriber.next(project.call(thisArg, value, index++));
	        }));
	    });
	}

	var isArray$4 = Array.isArray;
	function callOrApply(fn, args) {
	    return isArray$4(args) ? fn.apply(void 0, __spreadArray([], __read$1(args))) : fn(args);
	}
	function mapOneOrManyArgs(fn) {
	    return map$2(function (args) { return callOrApply(fn, args); });
	}

	function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler$1(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler)
	                    .apply(this, args)
	                    .pipe(mapOneOrManyArgs(resultSelector));
	            };
	        }
	    }
	    if (scheduler) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return bindCallbackInternals(isNodeStyle, callbackFunc)
	                .apply(this, args)
	                .pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
	        };
	    }
	    return function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var subject = new AsyncSubject$1();
	        var uninitialized = true;
	        return new Observable$1(function (subscriber) {
	            var subs = subject.subscribe(subscriber);
	            if (uninitialized) {
	                uninitialized = false;
	                var isAsync_1 = false;
	                var isComplete_1 = false;
	                callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read$1(args)), [
	                    function () {
	                        var results = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            results[_i] = arguments[_i];
	                        }
	                        if (isNodeStyle) {
	                            var err = results.shift();
	                            if (err != null) {
	                                subject.error(err);
	                                return;
	                            }
	                        }
	                        subject.next(1 < results.length ? results : results[0]);
	                        isComplete_1 = true;
	                        if (isAsync_1) {
	                            subject.complete();
	                        }
	                    },
	                ]));
	                if (isComplete_1) {
	                    subject.complete();
	                }
	                isAsync_1 = true;
	            }
	            return subs;
	        });
	    };
	}

	function bindCallback$1(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
	}

	function bindNodeCallback$1(callbackFunc, resultSelector, scheduler) {
	    return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
	}

	var isArray$3 = Array.isArray;
	var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
	function argsArgArrayOrObject(args) {
	    if (args.length === 1) {
	        var first_1 = args[0];
	        if (isArray$3(first_1)) {
	            return { args: first_1, keys: null };
	        }
	        if (isPOJO(first_1)) {
	            var keys = getKeys(first_1);
	            return {
	                args: keys.map(function (key) { return first_1[key]; }),
	                keys: keys,
	            };
	        }
	    }
	    return { args: args, keys: null };
	}
	function isPOJO(obj) {
	    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
	}

	function createObject(keys, values) {
	    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
	}

	function combineLatest$3() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var resultSelector = popResultSelector(args);
	    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
	    if (observables.length === 0) {
	        return from$3([], scheduler);
	    }
	    var result = new Observable$1(combineLatestInit(observables, scheduler, keys
	        ?
	            function (values) { return createObject(keys, values); }
	        :
	            identity$4));
	    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
	}
	function combineLatestInit(observables, scheduler, valueTransform) {
	    if (valueTransform === void 0) { valueTransform = identity$4; }
	    return function (subscriber) {
	        maybeSchedule(scheduler, function () {
	            var length = observables.length;
	            var values = new Array(length);
	            var active = length;
	            var remainingFirstValues = length;
	            var _loop_1 = function (i) {
	                maybeSchedule(scheduler, function () {
	                    var source = from$3(observables[i], scheduler);
	                    var hasFirstValue = false;
	                    source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                        values[i] = value;
	                        if (!hasFirstValue) {
	                            hasFirstValue = true;
	                            remainingFirstValues--;
	                        }
	                        if (!remainingFirstValues) {
	                            subscriber.next(valueTransform(values.slice()));
	                        }
	                    }, function () {
	                        if (!--active) {
	                            subscriber.complete();
	                        }
	                    }));
	                }, subscriber);
	            };
	            for (var i = 0; i < length; i++) {
	                _loop_1(i);
	            }
	        }, subscriber);
	    };
	}
	function maybeSchedule(scheduler, execute, subscription) {
	    if (scheduler) {
	        executeSchedule(subscription, scheduler, execute);
	    }
	    else {
	        execute();
	    }
	}

	function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
	    var buffer = [];
	    var active = 0;
	    var index = 0;
	    var isComplete = false;
	    var checkComplete = function () {
	        if (isComplete && !buffer.length && !active) {
	            subscriber.complete();
	        }
	    };
	    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
	    var doInnerSub = function (value) {
	        expand && subscriber.next(value);
	        active++;
	        var innerComplete = false;
	        innerFrom(project(value, index++)).subscribe(new OperatorSubscriber(subscriber, function (innerValue) {
	            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
	            if (expand) {
	                outerNext(innerValue);
	            }
	            else {
	                subscriber.next(innerValue);
	            }
	        }, function () {
	            innerComplete = true;
	        }, undefined, function () {
	            if (innerComplete) {
	                try {
	                    active--;
	                    var _loop_1 = function () {
	                        var bufferedValue = buffer.shift();
	                        if (innerSubScheduler) {
	                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
	                        }
	                        else {
	                            doInnerSub(bufferedValue);
	                        }
	                    };
	                    while (buffer.length && active < concurrent) {
	                        _loop_1();
	                    }
	                    checkComplete();
	                }
	                catch (err) {
	                    subscriber.error(err);
	                }
	            }
	        }));
	    };
	    source.subscribe(new OperatorSubscriber(subscriber, outerNext, function () {
	        isComplete = true;
	        checkComplete();
	    }));
	    return function () {
	        additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
	    };
	}

	function mergeMap$1(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction$3(resultSelector)) {
	        return mergeMap$1(function (a, i) { return map$2(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
	}

	function mergeAll$1(concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return mergeMap$1(identity$4, concurrent);
	}

	function concatAll$1() {
	    return mergeAll$1(1);
	}

	function concat$5() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return concatAll$1()(from$3(args, popScheduler(args)));
	}

	function defer$1(observableFactory) {
	    return new Observable$1(function (subscriber) {
	        innerFrom(observableFactory()).subscribe(subscriber);
	    });
	}

	var DEFAULT_CONFIG$1 = {
	    connector: function () { return new Subject$1(); },
	    resetOnDisconnect: true,
	};
	function connectable(source, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG$1; }
	    var connection = null;
	    var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
	    var subject = connector();
	    var result = new Observable$1(function (subscriber) {
	        return subject.subscribe(subscriber);
	    });
	    result.connect = function () {
	        if (!connection || connection.closed) {
	            connection = defer$1(function () { return source; }).subscribe(subject);
	            if (resetOnDisconnect) {
	                connection.add(function () { return (subject = connector()); });
	            }
	        }
	        return connection;
	    };
	    return result;
	}

	function forkJoin$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    var _a = argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
	    var result = new Observable$1(function (subscriber) {
	        var length = sources.length;
	        if (!length) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(length);
	        var remainingCompletions = length;
	        var remainingEmissions = length;
	        var _loop_1 = function (sourceIndex) {
	            var hasValue = false;
	            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (!hasValue) {
	                    hasValue = true;
	                    remainingEmissions--;
	                }
	                values[sourceIndex] = value;
	            }, function () { return remainingCompletions--; }, undefined, function () {
	                if (!remainingCompletions || !hasValue) {
	                    if (!remainingEmissions) {
	                        subscriber.next(keys ? createObject(keys, values) : values);
	                    }
	                    subscriber.complete();
	                }
	            }));
	        };
	        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
	            _loop_1(sourceIndex);
	        }
	    });
	    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
	}

	var nodeEventEmitterMethods = ['addListener', 'removeListener'];
	var eventTargetMethods = ['addEventListener', 'removeEventListener'];
	var jqueryMethods = ['on', 'off'];
	function fromEvent$1(target, eventName, options, resultSelector) {
	    if (isFunction$3(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent$1(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
	    }
	    var _a = __read$1(isEventTarget$1(target)
	        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
	        :
	            isNodeStyleEventEmitter$1(target)
	                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
	                : isJQueryStyleEventEmitter$1(target)
	                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
	                    : [], 2), add = _a[0], remove = _a[1];
	    if (!add) {
	        if (isArrayLike$1(target)) {
	            return mergeMap$1(function (subTarget) { return fromEvent$1(subTarget, eventName, options); })(innerFrom(target));
	        }
	    }
	    if (!add) {
	        throw new TypeError('Invalid event target');
	    }
	    return new Observable$1(function (subscriber) {
	        var handler = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return subscriber.next(1 < args.length ? args : args[0]);
	        };
	        add(handler);
	        return function () { return remove(handler); };
	    });
	}
	function toCommonHandlerRegistry(target, eventName) {
	    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
	}
	function isNodeStyleEventEmitter$1(target) {
	    return isFunction$3(target.addListener) && isFunction$3(target.removeListener);
	}
	function isJQueryStyleEventEmitter$1(target) {
	    return isFunction$3(target.on) && isFunction$3(target.off);
	}
	function isEventTarget$1(target) {
	    return isFunction$3(target.addEventListener) && isFunction$3(target.removeEventListener);
	}

	function fromEventPattern$1(addHandler, removeHandler, resultSelector) {
	    if (resultSelector) {
	        return fromEventPattern$1(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));
	    }
	    return new Observable$1(function (subscriber) {
	        var handler = function () {
	            var e = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                e[_i] = arguments[_i];
	            }
	            return subscriber.next(e.length === 1 ? e[0] : e);
	        };
	        var retValue = addHandler(handler);
	        return isFunction$3(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
	    });
	}

	function generate$4(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
	    var _a, _b;
	    var resultSelector;
	    var initialState;
	    if (arguments.length === 1) {
	        (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity$4 : _b, scheduler = _a.scheduler);
	    }
	    else {
	        initialState = initialStateOrOptions;
	        if (!resultSelectorOrScheduler || isScheduler$1(resultSelectorOrScheduler)) {
	            resultSelector = identity$4;
	            scheduler = resultSelectorOrScheduler;
	        }
	        else {
	            resultSelector = resultSelectorOrScheduler;
	        }
	    }
	    function gen() {
	        var state;
	        return __generator$2(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    state = initialState;
	                    _a.label = 1;
	                case 1:
	                    if (!(!condition || condition(state))) return [3, 4];
	                    return [4, resultSelector(state)];
	                case 2:
	                    _a.sent();
	                    _a.label = 3;
	                case 3:
	                    state = iterate(state);
	                    return [3, 1];
	                case 4: return [2];
	            }
	        });
	    }
	    return defer$1((scheduler
	        ?
	            function () { return scheduleIterable$1(gen(), scheduler); }
	        :
	            gen));
	}

	function iif$1(condition, trueResult, falseResult) {
	    return defer$1(function () { return (condition() ? trueResult : falseResult); });
	}

	function timer$1(dueTime, intervalOrScheduler, scheduler) {
	    if (dueTime === void 0) { dueTime = 0; }
	    if (scheduler === void 0) { scheduler = async$1; }
	    var intervalDuration = -1;
	    if (intervalOrScheduler != null) {
	        if (isScheduler$1(intervalOrScheduler)) {
	            scheduler = intervalOrScheduler;
	        }
	        else {
	            intervalDuration = intervalOrScheduler;
	        }
	    }
	    return new Observable$1(function (subscriber) {
	        var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
	        if (due < 0) {
	            due = 0;
	        }
	        var n = 0;
	        return scheduler.schedule(function () {
	            if (!subscriber.closed) {
	                subscriber.next(n++);
	                if (0 <= intervalDuration) {
	                    this.schedule(undefined, intervalDuration);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        }, due);
	    });
	}

	function interval$1(period, scheduler) {
	    if (period === void 0) { period = 0; }
	    if (scheduler === void 0) { scheduler = asyncScheduler$1; }
	    if (period < 0) {
	        period = 0;
	    }
	    return timer$1(period, period, scheduler);
	}

	function merge$3() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var concurrent = popNumber(args, Infinity);
	    var sources = args;
	    return !sources.length
	        ?
	            EMPTY$1
	        : sources.length === 1
	            ?
	                innerFrom(sources[0])
	            :
	                mergeAll$1(concurrent)(from$3(sources, scheduler));
	}

	var NEVER$1 = new Observable$1(noop$1);
	function never$1() {
	    return NEVER$1;
	}

	var isArray$2 = Array.isArray;
	function argsOrArgArray(args) {
	    return args.length === 1 && isArray$2(args[0]) ? args[0] : args;
	}

	function onErrorResumeNext$3() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    var nextSources = argsOrArgArray(sources);
	    return operate(function (source, subscriber) {
	        var remaining = __spreadArray([source], __read$1(nextSources));
	        var subscribeNext = function () {
	            if (!subscriber.closed) {
	                if (remaining.length > 0) {
	                    var nextSource = void 0;
	                    try {
	                        nextSource = innerFrom(remaining.shift());
	                    }
	                    catch (err) {
	                        subscribeNext();
	                        return;
	                    }
	                    var innerSub = new OperatorSubscriber(subscriber, undefined, noop$1, noop$1);
	                    subscriber.add(nextSource.subscribe(innerSub));
	                    innerSub.add(subscribeNext);
	                }
	                else {
	                    subscriber.complete();
	                }
	            }
	        };
	        subscribeNext();
	    });
	}

	function onErrorResumeNext$2() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return onErrorResumeNext$3(argsOrArgArray(sources))(EMPTY$1);
	}

	function pairs$1(obj, scheduler) {
	    return from$3(Object.entries(obj), scheduler);
	}

	function not$1(pred, thisArg) {
	    return function (value, index) { return !pred.call(thisArg, value, index); };
	}

	function filter$1(predicate, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
	    });
	}

	function partition$3(source, predicate, thisArg) {
	    return [filter$1(predicate, thisArg)(innerFrom(source)), filter$1(not$1(predicate, thisArg))(innerFrom(source))];
	}

	function race$3() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    sources = argsOrArgArray(sources);
	    return sources.length === 1 ? innerFrom(sources[0]) : new Observable$1(raceInit(sources));
	}
	function raceInit(sources) {
	    return function (subscriber) {
	        var subscriptions = [];
	        var _loop_1 = function (i) {
	            subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (subscriptions) {
	                    for (var s = 0; s < subscriptions.length; s++) {
	                        s !== i && subscriptions[s].unsubscribe();
	                    }
	                    subscriptions = null;
	                }
	                subscriber.next(value);
	            })));
	        };
	        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
	            _loop_1(i);
	        }
	    };
	}

	function range$1(start, count, scheduler) {
	    if (count == null) {
	        count = start;
	        start = 0;
	    }
	    if (count <= 0) {
	        return EMPTY$1;
	    }
	    var end = count + start;
	    return new Observable$1(scheduler
	        ?
	            function (subscriber) {
	                var n = start;
	                return scheduler.schedule(function () {
	                    if (n < end) {
	                        subscriber.next(n++);
	                        this.schedule();
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                });
	            }
	        :
	            function (subscriber) {
	                var n = start;
	                while (n < end && !subscriber.closed) {
	                    subscriber.next(n++);
	                }
	                subscriber.complete();
	            });
	}

	function using$1(resourceFactory, observableFactory) {
	    return new Observable$1(function (subscriber) {
	        var resource = resourceFactory();
	        var result = observableFactory(resource);
	        var source = result ? innerFrom(result) : EMPTY$1;
	        source.subscribe(subscriber);
	        return function () {
	            if (resource) {
	                resource.unsubscribe();
	            }
	        };
	    });
	}

	function zip$3() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    var sources = argsOrArgArray(args);
	    return sources.length
	        ? new Observable$1(function (subscriber) {
	            var buffers = sources.map(function () { return []; });
	            var completed = sources.map(function () { return false; });
	            subscriber.add(function () {
	                buffers = completed = null;
	            });
	            var _loop_1 = function (sourceIndex) {
	                innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                    buffers[sourceIndex].push(value);
	                    if (buffers.every(function (buffer) { return buffer.length; })) {
	                        var result = buffers.map(function (buffer) { return buffer.shift(); });
	                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read$1(result))) : result);
	                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
	                            subscriber.complete();
	                        }
	                    }
	                }, function () {
	                    completed[sourceIndex] = true;
	                    !buffers[sourceIndex].length && subscriber.complete();
	                }));
	            };
	            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
	                _loop_1(sourceIndex);
	            }
	            return function () {
	                buffers = completed = null;
	            };
	        })
	        : EMPTY$1;
	}

	function audit$1(durationSelector) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var isComplete = false;
	        var endDuration = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	            isComplete && subscriber.complete();
	        };
	        var cleanupDuration = function () {
	            durationSubscriber = null;
	            isComplete && subscriber.complete();
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	            if (!durationSubscriber) {
	                innerFrom(durationSelector(value)).subscribe((durationSubscriber = new OperatorSubscriber(subscriber, endDuration, cleanupDuration)));
	            }
	        }, function () {
	            isComplete = true;
	            (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
	        }));
	    });
	}

	function auditTime$1(duration, scheduler) {
	    if (scheduler === void 0) { scheduler = async$1; }
	    return audit$1(function () { return timer$1(duration, scheduler); });
	}

	function buffer$1(closingNotifier) {
	    return operate(function (source, subscriber) {
	        var currentBuffer = [];
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return currentBuffer.push(value); }, function () {
	            subscriber.next(currentBuffer);
	            subscriber.complete();
	        }));
	        closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {
	            var b = currentBuffer;
	            currentBuffer = [];
	            subscriber.next(b);
	        }, noop$1));
	        return function () {
	            currentBuffer = null;
	        };
	    });
	}

	function bufferCount$1(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) { startBufferEvery = null; }
	    startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
	    return operate(function (source, subscriber) {
	        var buffers = [];
	        var count = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a, e_2, _b;
	            var toEmit = null;
	            if (count++ % startBufferEvery === 0) {
	                buffers.push([]);
	            }
	            try {
	                for (var buffers_1 = __values$1(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                    if (bufferSize <= buffer.length) {
	                        toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
	                        toEmit.push(buffer);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (toEmit) {
	                try {
	                    for (var toEmit_1 = __values$1(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
	                        var buffer = toEmit_1_1.value;
	                        arrRemove(buffers, buffer);
	                        subscriber.next(buffer);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }, function () {
	            var e_3, _a;
	            try {
	                for (var buffers_2 = __values$1(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
	                    var buffer = buffers_2_1.value;
	                    subscriber.next(buffer);
	                }
	            }
	            catch (e_3_1) { e_3 = { error: e_3_1 }; }
	            finally {
	                try {
	                    if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
	                }
	                finally { if (e_3) throw e_3.error; }
	            }
	            subscriber.complete();
	        }, undefined, function () {
	            buffers = null;
	        }));
	    });
	}

	function bufferTime$1(bufferTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$1;
	    var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxBufferSize = otherArgs[1] || Infinity;
	    return operate(function (source, subscriber) {
	        var bufferRecords = [];
	        var restartOnEmit = false;
	        var emit = function (record) {
	            var buffer = record.buffer, subs = record.subs;
	            subs.unsubscribe();
	            arrRemove(bufferRecords, record);
	            subscriber.next(buffer);
	            restartOnEmit && startBuffer();
	        };
	        var startBuffer = function () {
	            if (bufferRecords) {
	                var subs = new Subscription$1();
	                subscriber.add(subs);
	                var buffer = [];
	                var record_1 = {
	                    buffer: buffer,
	                    subs: subs,
	                };
	                bufferRecords.push(record_1);
	                executeSchedule(subs, scheduler, function () { return emit(record_1); }, bufferTimeSpan);
	            }
	        };
	        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
	            executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
	        }
	        else {
	            restartOnEmit = true;
	        }
	        startBuffer();
	        var bufferTimeSubscriber = new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            var recordsCopy = bufferRecords.slice();
	            try {
	                for (var recordsCopy_1 = __values$1(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
	                    var record = recordsCopy_1_1.value;
	                    var buffer = record.buffer;
	                    buffer.push(value);
	                    maxBufferSize <= buffer.length && emit(record);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
	                subscriber.next(bufferRecords.shift().buffer);
	            }
	            bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
	            subscriber.complete();
	            subscriber.unsubscribe();
	        }, undefined, function () { return (bufferRecords = null); });
	        source.subscribe(bufferTimeSubscriber);
	    });
	}

	function bufferToggle$1(openings, closingSelector) {
	    return operate(function (source, subscriber) {
	        var buffers = [];
	        innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
	            var buffer = [];
	            buffers.push(buffer);
	            var closingSubscription = new Subscription$1();
	            var emitBuffer = function () {
	                arrRemove(buffers, buffer);
	                subscriber.next(buffer);
	                closingSubscription.unsubscribe();
	            };
	            closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop$1)));
	        }, noop$1));
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var buffers_1 = __values$1(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
	                    var buffer = buffers_1_1.value;
	                    buffer.push(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (buffers.length > 0) {
	                subscriber.next(buffers.shift());
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function bufferWhen$1(closingSelector) {
	    return operate(function (source, subscriber) {
	        var buffer = null;
	        var closingSubscriber = null;
	        var openBuffer = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            var b = buffer;
	            buffer = [];
	            b && subscriber.next(b);
	            innerFrom(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openBuffer, noop$1)));
	        };
	        openBuffer();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
	            buffer && subscriber.next(buffer);
	            subscriber.complete();
	        }, undefined, function () { return (buffer = closingSubscriber = null); }));
	    });
	}

	function catchError$1(selector) {
	    return operate(function (source, subscriber) {
	        var innerSub = null;
	        var syncUnsub = false;
	        var handledResult;
	        innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
	            handledResult = innerFrom(selector(err, catchError$1(selector)(source)));
	            if (innerSub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                handledResult.subscribe(subscriber);
	            }
	            else {
	                syncUnsub = true;
	            }
	        }));
	        if (syncUnsub) {
	            innerSub.unsubscribe();
	            innerSub = null;
	            handledResult.subscribe(subscriber);
	        }
	    });
	}

	function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
	    return function (source, subscriber) {
	        var hasState = hasSeed;
	        var state = seed;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var i = index++;
	            state = hasState
	                ?
	                    accumulator(state, value, i)
	                :
	                    ((hasState = true), value);
	            emitOnNext && subscriber.next(state);
	        }, emitBeforeComplete &&
	            (function () {
	                hasState && subscriber.next(state);
	                subscriber.complete();
	            })));
	    };
	}

	function reduce$1(accumulator, seed) {
	    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
	}

	var arrReducer = function (arr, value) { return (arr.push(value), arr); };
	function toArray$2() {
	    return operate(function (source, subscriber) {
	        reduce$1(arrReducer, [])(source).subscribe(subscriber);
	    });
	}

	function joinAllInternals(joinFn, project) {
	    return pipe$1(toArray$2(), mergeMap$1(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs(project) : identity$4);
	}

	function combineLatestAll(project) {
	    return joinAllInternals(combineLatest$3, project);
	}

	var combineAll$1 = combineLatestAll;

	function combineLatest$2() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var resultSelector = popResultSelector(args);
	    return resultSelector
	        ? pipe$1(combineLatest$2.apply(void 0, __spreadArray([], __read$1(args))), mapOneOrManyArgs(resultSelector))
	        : operate(function (source, subscriber) {
	            combineLatestInit(__spreadArray([source], __read$1(argsOrArgArray(args))))(subscriber);
	        });
	}

	function combineLatestWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return combineLatest$2.apply(void 0, __spreadArray([], __read$1(otherSources)));
	}

	function concatMap$1(project, resultSelector) {
	    return isFunction$3(resultSelector) ? mergeMap$1(project, resultSelector, 1) : mergeMap$1(project, 1);
	}

	function concatMapTo$1(innerObservable, resultSelector) {
	    return isFunction$3(resultSelector) ? concatMap$1(function () { return innerObservable; }, resultSelector) : concatMap$1(function () { return innerObservable; });
	}

	function concat$4() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    return operate(function (source, subscriber) {
	        concatAll$1()(from$3(__spreadArray([source], __read$1(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function concatWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return concat$4.apply(void 0, __spreadArray([], __read$1(otherSources)));
	}

	function fromSubscribable(subscribable) {
	    return new Observable$1(function (subscriber) { return subscribable.subscribe(subscriber); });
	}

	var DEFAULT_CONFIG = {
	    connector: function () { return new Subject$1(); },
	};
	function connect$2(selector, config) {
	    if (config === void 0) { config = DEFAULT_CONFIG; }
	    var connector = config.connector;
	    return operate(function (source, subscriber) {
	        var subject = connector();
	        from$3(selector(fromSubscribable(subject))).subscribe(subscriber);
	        subscriber.add(source.subscribe(subject));
	    });
	}

	function count$1(predicate) {
	    return reduce$1(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
	}

	function debounce$1(durationSelector) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        var durationSubscriber = null;
	        var emit = function () {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            durationSubscriber = null;
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
	            hasValue = true;
	            lastValue = value;
	            durationSubscriber = new OperatorSubscriber(subscriber, emit, noop$1);
	            innerFrom(durationSelector(value)).subscribe(durationSubscriber);
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = durationSubscriber = null;
	        }));
	    });
	}

	function debounceTime$1(dueTime, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$1; }
	    return operate(function (source, subscriber) {
	        var activeTask = null;
	        var lastValue = null;
	        var lastTime = null;
	        var emit = function () {
	            if (activeTask) {
	                activeTask.unsubscribe();
	                activeTask = null;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        function emitWhenIdle() {
	            var targetTime = lastTime + dueTime;
	            var now = scheduler.now();
	            if (now < targetTime) {
	                activeTask = this.schedule(undefined, targetTime - now);
	                subscriber.add(activeTask);
	                return;
	            }
	            emit();
	        }
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            lastValue = value;
	            lastTime = scheduler.now();
	            if (!activeTask) {
	                activeTask = scheduler.schedule(emitWhenIdle, dueTime);
	                subscriber.add(activeTask);
	            }
	        }, function () {
	            emit();
	            subscriber.complete();
	        }, undefined, function () {
	            lastValue = activeTask = null;
	        }));
	    });
	}

	function defaultIfEmpty$1(defaultValue) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () {
	            if (!hasValue) {
	                subscriber.next(defaultValue);
	            }
	            subscriber.complete();
	        }));
	    });
	}

	function take$1(count) {
	    return count <= 0
	        ?
	            function () { return EMPTY$1; }
	        : operate(function (source, subscriber) {
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                if (++seen <= count) {
	                    subscriber.next(value);
	                    if (count <= seen) {
	                        subscriber.complete();
	                    }
	                }
	            }));
	        });
	}

	function ignoreElements$1() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, noop$1));
	    });
	}

	function mapTo$1(value) {
	    return map$2(function () { return value; });
	}

	function delayWhen$1(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return function (source) {
	            return concat$5(subscriptionDelay.pipe(take$1(1), ignoreElements$1()), source.pipe(delayWhen$1(delayDurationSelector)));
	        };
	    }
	    return mergeMap$1(function (value, index) { return delayDurationSelector(value, index).pipe(take$1(1), mapTo$1(value)); });
	}

	function delay$1(due, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$1; }
	    var duration = timer$1(due, scheduler);
	    return delayWhen$1(function () { return duration; });
	}

	function dematerialize$1() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (notification) { return observeNotification(notification, subscriber); }));
	    });
	}

	function distinct$1(keySelector, flushes) {
	    return operate(function (source, subscriber) {
	        var distinctKeys = new Set();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var key = keySelector ? keySelector(value) : value;
	            if (!distinctKeys.has(key)) {
	                distinctKeys.add(key);
	                subscriber.next(value);
	            }
	        }));
	        flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber(subscriber, function () { return distinctKeys.clear(); }, noop$1));
	    });
	}

	function distinctUntilChanged$1(comparator, keySelector) {
	    if (keySelector === void 0) { keySelector = identity$4; }
	    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
	    return operate(function (source, subscriber) {
	        var previousKey;
	        var first = true;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var currentKey = keySelector(value);
	            if (first || !comparator(previousKey, currentKey)) {
	                first = false;
	                previousKey = currentKey;
	                subscriber.next(value);
	            }
	        }));
	    });
	}
	function defaultCompare(a, b) {
	    return a === b;
	}

	function distinctUntilKeyChanged$1(key, compare) {
	    return distinctUntilChanged$1(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
	}

	function throwIfEmpty$1(errorFactory) {
	    if (errorFactory === void 0) { errorFactory = defaultErrorFactory$1; }
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            subscriber.next(value);
	        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
	    });
	}
	function defaultErrorFactory$1() {
	    return new EmptyError$1();
	}

	function elementAt$1(index, defaultValue) {
	    if (index < 0) {
	        throw new ArgumentOutOfRangeError$1();
	    }
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(filter$1(function (v, i) { return i === index; }), take$1(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new ArgumentOutOfRangeError$1(); }));
	    };
	}

	function endWith$1() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    return function (source) { return concat$5(source, of$1.apply(void 0, __spreadArray([], __read$1(values)))); };
	}

	function every$1(predicate, thisArg) {
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            if (!predicate.call(thisArg, value, index++, source)) {
	                subscriber.next(false);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function exhaustAll() {
	    return operate(function (source, subscriber) {
	        var isComplete = false;
	        var innerSub = null;
	        source.subscribe(new OperatorSubscriber(subscriber, function (inner) {
	            if (!innerSub) {
	                innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                }));
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	var exhaust$1 = exhaustAll;

	function exhaustMap$1(project, resultSelector) {
	    if (resultSelector) {
	        return function (source) {
	            return source.pipe(exhaustMap$1(function (a, i) { return innerFrom(project(a, i)).pipe(map$2(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
	        };
	    }
	    return operate(function (source, subscriber) {
	        var index = 0;
	        var innerSub = null;
	        var isComplete = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (outerValue) {
	            if (!innerSub) {
	                innerSub = new OperatorSubscriber(subscriber, undefined, function () {
	                    innerSub = null;
	                    isComplete && subscriber.complete();
	                });
	                innerFrom(project(outerValue, index++)).subscribe(innerSub);
	            }
	        }, function () {
	            isComplete = true;
	            !innerSub && subscriber.complete();
	        }));
	    });
	}

	function expand$1(project, concurrent, scheduler) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
	    return operate(function (source, subscriber) {
	        return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);
	    });
	}

	function finalize$1(callback) {
	    return operate(function (source, subscriber) {
	        try {
	            source.subscribe(subscriber);
	        }
	        finally {
	            subscriber.add(callback);
	        }
	    });
	}

	function find$2(predicate, thisArg) {
	    return operate(createFind(predicate, thisArg, 'value'));
	}
	function createFind(predicate, thisArg, emit) {
	    var findIndex = emit === 'index';
	    return function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var i = index++;
	            if (predicate.call(thisArg, value, i, source)) {
	                subscriber.next(findIndex ? i : value);
	                subscriber.complete();
	            }
	        }, function () {
	            subscriber.next(findIndex ? -1 : undefined);
	            subscriber.complete();
	        }));
	    };
	}

	function findIndex$1(predicate, thisArg) {
	    return operate(createFind(predicate, thisArg, 'index'));
	}

	function first$1(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter$1(function (v, i) { return predicate(v, i, source); }) : identity$4, take$1(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new EmptyError$1(); }));
	    };
	}

	function groupBy$1(keySelector, elementOrOptions, duration, connector) {
	    return operate(function (source, subscriber) {
	        var element;
	        if (!elementOrOptions || typeof elementOrOptions === 'function') {
	            element = elementOrOptions;
	        }
	        else {
	            (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
	        }
	        var groups = new Map();
	        var notify = function (cb) {
	            groups.forEach(cb);
	            cb(subscriber);
	        };
	        var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
	        var groupBySourceSubscriber = new GroupBySubscriber$1(subscriber, function (value) {
	            try {
	                var key_1 = keySelector(value);
	                var group_1 = groups.get(key_1);
	                if (!group_1) {
	                    groups.set(key_1, (group_1 = connector ? connector() : new Subject$1()));
	                    var grouped = createGroupedObservable(key_1, group_1);
	                    subscriber.next(grouped);
	                    if (duration) {
	                        var durationSubscriber_1 = new OperatorSubscriber(group_1, function () {
	                            group_1.complete();
	                            durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
	                        }, undefined, undefined, function () { return groups.delete(key_1); });
	                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
	                    }
	                }
	                group_1.next(element ? element(value) : value);
	            }
	            catch (err) {
	                handleError(err);
	            }
	        }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); });
	        source.subscribe(groupBySourceSubscriber);
	        function createGroupedObservable(key, groupSubject) {
	            var result = new Observable$1(function (groupSubscriber) {
	                groupBySourceSubscriber.activeGroups++;
	                var innerSub = groupSubject.subscribe(groupSubscriber);
	                return function () {
	                    innerSub.unsubscribe();
	                    --groupBySourceSubscriber.activeGroups === 0 &&
	                        groupBySourceSubscriber.teardownAttempted &&
	                        groupBySourceSubscriber.unsubscribe();
	                };
	            });
	            result.key = key;
	            return result;
	        }
	    });
	}
	var GroupBySubscriber$1 = (function (_super) {
	    __extends$2(GroupBySubscriber, _super);
	    function GroupBySubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.activeGroups = 0;
	        _this.teardownAttempted = false;
	        return _this;
	    }
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        this.teardownAttempted = true;
	        this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
	    };
	    return GroupBySubscriber;
	}(OperatorSubscriber));

	function isEmpty$1() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function () {
	            subscriber.next(false);
	            subscriber.complete();
	        }, function () {
	            subscriber.next(true);
	            subscriber.complete();
	        }));
	    });
	}

	function takeLast$1(count) {
	    return count <= 0
	        ? function () { return EMPTY$1; }
	        : operate(function (source, subscriber) {
	            var buffer = [];
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                buffer.push(value);
	                count < buffer.length && buffer.shift();
	            }, function () {
	                var e_1, _a;
	                try {
	                    for (var buffer_1 = __values$1(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
	                        var value = buffer_1_1.value;
	                        subscriber.next(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	                subscriber.complete();
	            }, undefined, function () {
	                buffer = null;
	            }));
	        });
	}

	function last$1(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(predicate ? filter$1(function (v, i) { return predicate(v, i, source); }) : identity$4, takeLast$1(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new EmptyError$1(); }));
	    };
	}

	function materialize$1() {
	    return operate(function (source, subscriber) {
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            subscriber.next(Notification$1.createNext(value));
	        }, function () {
	            subscriber.next(Notification$1.createComplete());
	            subscriber.complete();
	        }, function (err) {
	            subscriber.next(Notification$1.createError(err));
	            subscriber.complete();
	        }));
	    });
	}

	function max$1(comparer) {
	    return reduce$1(isFunction$3(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
	}

	var flatMap$1 = mergeMap$1;

	function mergeMapTo$1(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    if (isFunction$3(resultSelector)) {
	        return mergeMap$1(function () { return innerObservable; }, resultSelector, concurrent);
	    }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return mergeMap$1(function () { return innerObservable; }, concurrent);
	}

	function mergeScan$1(accumulator, seed, concurrent) {
	    if (concurrent === void 0) { concurrent = Infinity; }
	    return operate(function (source, subscriber) {
	        var state = seed;
	        return mergeInternals(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
	            state = value;
	        }, false, undefined, function () { return (state = null); });
	    });
	}

	function merge$2() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(args);
	    var concurrent = popNumber(args, Infinity);
	    args = argsOrArgArray(args);
	    return operate(function (source, subscriber) {
	        mergeAll$1(concurrent)(from$3(__spreadArray([source], __read$1(args)), scheduler)).subscribe(subscriber);
	    });
	}

	function mergeWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return merge$2.apply(void 0, __spreadArray([], __read$1(otherSources)));
	}

	function min$1(comparer) {
	    return reduce$1(isFunction$3(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
	}

	function multicast$1(subjectOrSubjectFactory, selector) {
	    var subjectFactory = isFunction$3(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
	    if (isFunction$3(selector)) {
	        return connect$2(selector, {
	            connector: subjectFactory,
	        });
	    }
	    return function (source) { return new ConnectableObservable$1(source, subjectFactory); };
	}

	function pairwise$1() {
	    return operate(function (source, subscriber) {
	        var prev;
	        var hasPrev = false;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var p = prev;
	            prev = value;
	            hasPrev && subscriber.next([p, value]);
	            hasPrev = true;
	        }));
	    });
	}

	function pluck$3() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return map$2(function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
	            if (typeof p !== 'undefined') {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    });
	}

	function publish$1(selector) {
	    return selector ? function (source) { return connect$2(selector)(source); } : function (source) { return multicast$1(new Subject$1())(source); };
	}

	function publishBehavior$1(initialValue) {
	    return function (source) {
	        var subject = new BehaviorSubject$1(initialValue);
	        return new ConnectableObservable$1(source, function () { return subject; });
	    };
	}

	function publishLast$1() {
	    return function (source) {
	        var subject = new AsyncSubject$1();
	        return new ConnectableObservable$1(source, function () { return subject; });
	    };
	}

	function publishReplay$1(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
	    if (selectorOrScheduler && !isFunction$3(selectorOrScheduler)) {
	        timestampProvider = selectorOrScheduler;
	    }
	    var selector = isFunction$3(selectorOrScheduler) ? selectorOrScheduler : undefined;
	    return function (source) { return multicast$1(new ReplaySubject$1(bufferSize, windowTime, timestampProvider), selector)(source); };
	}

	function raceWith() {
	    var otherSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherSources[_i] = arguments[_i];
	    }
	    return !otherSources.length
	        ? identity$4
	        : operate(function (source, subscriber) {
	            raceInit(__spreadArray([source], __read$1(otherSources)))(subscriber);
	        });
	}

	function repeat$1(count) {
	    if (count === void 0) { count = Infinity; }
	    return count <= 0
	        ? function () { return EMPTY$1; }
	        : operate(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRepeat = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                    if (++soFar < count) {
	                        if (innerSub) {
	                            innerSub.unsubscribe();
	                            innerSub = null;
	                            subscribeForRepeat();
	                        }
	                        else {
	                            syncUnsub = true;
	                        }
	                    }
	                    else {
	                        subscriber.complete();
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRepeat();
	                }
	            };
	            subscribeForRepeat();
	        });
	}

	function repeatWhen$1(notifier) {
	    return operate(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var completions$;
	        var isNotifierComplete = false;
	        var isMainComplete = false;
	        var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
	        var getCompletionSubject = function () {
	            if (!completions$) {
	                completions$ = new Subject$1();
	                notifier(completions$).subscribe(new OperatorSubscriber(subscriber, function () {
	                    if (innerSub) {
	                        subscribeForRepeatWhen();
	                    }
	                    else {
	                        syncResub = true;
	                    }
	                }, function () {
	                    isNotifierComplete = true;
	                    checkComplete();
	                }));
	            }
	            return completions$;
	        };
	        var subscribeForRepeatWhen = function () {
	            isMainComplete = false;
	            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
	                isMainComplete = true;
	                !checkComplete() && getCompletionSubject().next();
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRepeatWhen();
	            }
	        };
	        subscribeForRepeatWhen();
	    });
	}

	function retry$1(configOrCount) {
	    if (configOrCount === void 0) { configOrCount = Infinity; }
	    var config;
	    if (configOrCount && typeof configOrCount === 'object') {
	        config = configOrCount;
	    }
	    else {
	        config = {
	            count: configOrCount,
	        };
	    }
	    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
	    return count <= 0
	        ? identity$4
	        : operate(function (source, subscriber) {
	            var soFar = 0;
	            var innerSub;
	            var subscribeForRetry = function () {
	                var syncUnsub = false;
	                innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                    if (resetOnSuccess) {
	                        soFar = 0;
	                    }
	                    subscriber.next(value);
	                }, undefined, function (err) {
	                    if (soFar++ < count) {
	                        var resub_1 = function () {
	                            if (innerSub) {
	                                innerSub.unsubscribe();
	                                innerSub = null;
	                                subscribeForRetry();
	                            }
	                            else {
	                                syncUnsub = true;
	                            }
	                        };
	                        if (delay != null) {
	                            var notifier = typeof delay === 'number' ? timer$1(delay) : innerFrom(delay(err, soFar));
	                            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {
	                                notifierSubscriber_1.unsubscribe();
	                                resub_1();
	                            }, function () {
	                                subscriber.complete();
	                            });
	                            notifier.subscribe(notifierSubscriber_1);
	                        }
	                        else {
	                            resub_1();
	                        }
	                    }
	                    else {
	                        subscriber.error(err);
	                    }
	                }));
	                if (syncUnsub) {
	                    innerSub.unsubscribe();
	                    innerSub = null;
	                    subscribeForRetry();
	                }
	            };
	            subscribeForRetry();
	        });
	}

	function retryWhen$1(notifier) {
	    return operate(function (source, subscriber) {
	        var innerSub;
	        var syncResub = false;
	        var errors$;
	        var subscribeForRetryWhen = function () {
	            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
	                if (!errors$) {
	                    errors$ = new Subject$1();
	                    notifier(errors$).subscribe(new OperatorSubscriber(subscriber, function () {
	                        return innerSub ? subscribeForRetryWhen() : (syncResub = true);
	                    }));
	                }
	                if (errors$) {
	                    errors$.next(err);
	                }
	            }));
	            if (syncResub) {
	                innerSub.unsubscribe();
	                innerSub = null;
	                syncResub = false;
	                subscribeForRetryWhen();
	            }
	        };
	        subscribeForRetryWhen();
	    });
	}

	function sample$1(notifier) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var lastValue = null;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            lastValue = value;
	        }));
	        var emit = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = lastValue;
	                lastValue = null;
	                subscriber.next(value);
	            }
	        };
	        notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop$1));
	    });
	}

	function sampleTime$1(period, scheduler) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$1; }
	    return sample$1(interval$1(period, scheduler));
	}

	function scan$1(accumulator, seed) {
	    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
	}

	function sequenceEqual$1(compareTo, comparator) {
	    if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
	    return operate(function (source, subscriber) {
	        var aState = createState();
	        var bState = createState();
	        var emit = function (isEqual) {
	            subscriber.next(isEqual);
	            subscriber.complete();
	        };
	        var createSubscriber = function (selfState, otherState) {
	            var sequenceEqualSubscriber = new OperatorSubscriber(subscriber, function (a) {
	                var buffer = otherState.buffer, complete = otherState.complete;
	                if (buffer.length === 0) {
	                    complete ? emit(false) : selfState.buffer.push(a);
	                }
	                else {
	                    !comparator(a, buffer.shift()) && emit(false);
	                }
	            }, function () {
	                selfState.complete = true;
	                var complete = otherState.complete, buffer = otherState.buffer;
	                complete && emit(buffer.length === 0);
	                sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
	            });
	            return sequenceEqualSubscriber;
	        };
	        source.subscribe(createSubscriber(aState, bState));
	        compareTo.subscribe(createSubscriber(bState, aState));
	    });
	}
	function createState() {
	    return {
	        buffer: [],
	        complete: false,
	    };
	}

	function share$1(options) {
	    if (options === void 0) { options = {}; }
	    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject$1(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
	    return function (wrapperSource) {
	        var connection = null;
	        var resetConnection = null;
	        var subject = null;
	        var refCount = 0;
	        var hasCompleted = false;
	        var hasErrored = false;
	        var cancelReset = function () {
	            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
	            resetConnection = null;
	        };
	        var reset = function () {
	            cancelReset();
	            connection = subject = null;
	            hasCompleted = hasErrored = false;
	        };
	        var resetAndUnsubscribe = function () {
	            var conn = connection;
	            reset();
	            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
	        };
	        return operate(function (source, subscriber) {
	            refCount++;
	            if (!hasErrored && !hasCompleted) {
	                cancelReset();
	            }
	            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
	            subscriber.add(function () {
	                refCount--;
	                if (refCount === 0 && !hasErrored && !hasCompleted) {
	                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
	                }
	            });
	            dest.subscribe(subscriber);
	            if (!connection) {
	                connection = new SafeSubscriber$1({
	                    next: function (value) { return dest.next(value); },
	                    error: function (err) {
	                        hasErrored = true;
	                        cancelReset();
	                        resetConnection = handleReset(reset, resetOnError, err);
	                        dest.error(err);
	                    },
	                    complete: function () {
	                        hasCompleted = true;
	                        cancelReset();
	                        resetConnection = handleReset(reset, resetOnComplete);
	                        dest.complete();
	                    },
	                });
	                from$3(source).subscribe(connection);
	            }
	        })(wrapperSource);
	    };
	}
	function handleReset(reset, on) {
	    var args = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        args[_i - 2] = arguments[_i];
	    }
	    if (on === true) {
	        reset();
	        return null;
	    }
	    if (on === false) {
	        return null;
	    }
	    return on.apply(void 0, __spreadArray([], __read$1(args))).pipe(take$1(1))
	        .subscribe(function () { return reset(); });
	}

	function shareReplay$1(configOrBufferSize, windowTime, scheduler) {
	    var _a, _b;
	    var bufferSize;
	    var refCount = false;
	    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
	        bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
	        windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
	        refCount = !!configOrBufferSize.refCount;
	        scheduler = configOrBufferSize.scheduler;
	    }
	    else {
	        bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
	    }
	    return share$1({
	        connector: function () { return new ReplaySubject$1(bufferSize, windowTime, scheduler); },
	        resetOnError: true,
	        resetOnComplete: false,
	        resetOnRefCountZero: refCount
	    });
	}

	function single$1(predicate) {
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var singleValue;
	        var seenValue = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            seenValue = true;
	            if (!predicate || predicate(value, index++, source)) {
	                hasValue && subscriber.error(new SequenceError('Too many matching values'));
	                hasValue = true;
	                singleValue = value;
	            }
	        }, function () {
	            if (hasValue) {
	                subscriber.next(singleValue);
	                subscriber.complete();
	            }
	            else {
	                subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError$1());
	            }
	        }));
	    });
	}

	function skip$1(count) {
	    return filter$1(function (_, index) { return count <= index; });
	}

	function skipLast$1(skipCount) {
	    return skipCount <= 0
	        ?
	            identity$4
	        : operate(function (source, subscriber) {
	            var ring = new Array(skipCount);
	            var seen = 0;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                var valueIndex = seen++;
	                if (valueIndex < skipCount) {
	                    ring[valueIndex] = value;
	                }
	                else {
	                    var index = valueIndex % skipCount;
	                    var oldValue = ring[index];
	                    ring[index] = value;
	                    subscriber.next(oldValue);
	                }
	            }));
	            return function () {
	                ring = null;
	            };
	        });
	}

	function skipUntil$1(notifier) {
	    return operate(function (source, subscriber) {
	        var taking = false;
	        var skipSubscriber = new OperatorSubscriber(subscriber, function () {
	            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
	            taking = true;
	        }, noop$1);
	        innerFrom(notifier).subscribe(skipSubscriber);
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return taking && subscriber.next(value); }));
	    });
	}

	function skipWhile$1(predicate) {
	    return operate(function (source, subscriber) {
	        var taking = false;
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
	    });
	}

	function startWith$1() {
	    var values = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        values[_i] = arguments[_i];
	    }
	    var scheduler = popScheduler(values);
	    return operate(function (source, subscriber) {
	        (scheduler ? concat$5(values, source, scheduler) : concat$5(values, source)).subscribe(subscriber);
	    });
	}

	function switchMap$1(project, resultSelector) {
	    return operate(function (source, subscriber) {
	        var innerSubscriber = null;
	        var index = 0;
	        var isComplete = false;
	        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
	            var innerIndex = 0;
	            var outerIndex = index++;
	            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = new OperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
	                innerSubscriber = null;
	                checkComplete();
	            })));
	        }, function () {
	            isComplete = true;
	            checkComplete();
	        }));
	    });
	}

	function switchAll$1() {
	    return switchMap$1(identity$4);
	}

	function switchMapTo$1(innerObservable, resultSelector) {
	    return isFunction$3(resultSelector) ? switchMap$1(function () { return innerObservable; }, resultSelector) : switchMap$1(function () { return innerObservable; });
	}

	function switchScan(accumulator, seed) {
	    return operate(function (source, subscriber) {
	        var state = seed;
	        switchMap$1(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
	        return function () {
	            state = null;
	        };
	    });
	}

	function takeUntil$1(notifier) {
	    return operate(function (source, subscriber) {
	        innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop$1));
	        !subscriber.closed && source.subscribe(subscriber);
	    });
	}

	function takeWhile$1(predicate, inclusive) {
	    if (inclusive === void 0) { inclusive = false; }
	    return operate(function (source, subscriber) {
	        var index = 0;
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var result = predicate(value, index++);
	            (result || inclusive) && subscriber.next(value);
	            !result && subscriber.complete();
	        }));
	    });
	}

	function tap$1(observerOrNext, error, complete) {
	    var tapObserver = isFunction$3(observerOrNext) || error || complete
	        ?
	            { next: observerOrNext, error: error, complete: complete }
	        : observerOrNext;
	    return tapObserver
	        ? operate(function (source, subscriber) {
	            var _a;
	            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	            var isUnsub = true;
	            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	                var _a;
	                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
	                subscriber.next(value);
	            }, function () {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                subscriber.complete();
	            }, function (err) {
	                var _a;
	                isUnsub = false;
	                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
	                subscriber.error(err);
	            }, function () {
	                var _a, _b;
	                if (isUnsub) {
	                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
	                }
	                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
	            }));
	        })
	        :
	            identity$4;
	}

	var defaultThrottleConfig$1 = {
	    leading: true,
	    trailing: false,
	};
	function throttle$1(durationSelector, _a) {
	    var _b = _a === void 0 ? defaultThrottleConfig$1 : _a, leading = _b.leading, trailing = _b.trailing;
	    return operate(function (source, subscriber) {
	        var hasValue = false;
	        var sendValue = null;
	        var throttled = null;
	        var isComplete = false;
	        var endThrottling = function () {
	            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
	            throttled = null;
	            if (trailing) {
	                send();
	                isComplete && subscriber.complete();
	            }
	        };
	        var cleanupThrottling = function () {
	            throttled = null;
	            isComplete && subscriber.complete();
	        };
	        var startThrottle = function (value) {
	            return (throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));
	        };
	        var send = function () {
	            if (hasValue) {
	                hasValue = false;
	                var value = sendValue;
	                sendValue = null;
	                subscriber.next(value);
	                !isComplete && startThrottle(value);
	            }
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            hasValue = true;
	            sendValue = value;
	            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
	        }, function () {
	            isComplete = true;
	            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
	        }));
	    });
	}

	function throttleTime$1(duration, scheduler, config) {
	    if (scheduler === void 0) { scheduler = asyncScheduler$1; }
	    if (config === void 0) { config = defaultThrottleConfig$1; }
	    var duration$ = timer$1(duration, scheduler);
	    return throttle$1(function () { return duration$; }, config);
	}

	function timeInterval$1(scheduler) {
	    if (scheduler === void 0) { scheduler = async$1; }
	    return function (source) {
	        return defer$1(function () {
	            return source.pipe(scan$1(function (_a, value) {
	                var current = _a.current;
	                return ({ value: value, current: scheduler.now(), last: current });
	            }, {
	                current: scheduler.now(),
	                value: undefined,
	                last: undefined,
	            }), map$2(function (_a) {
	                var current = _a.current, last = _a.last, value = _a.value;
	                return new TimeInterval$1(value, current - last);
	            }));
	        });
	    };
	}
	var TimeInterval$1 = (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());

	function timeoutWith$1(due, withObservable, scheduler) {
	    var first;
	    var each;
	    var _with;
	    scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async$1;
	    if (isValidDate(due)) {
	        first = due;
	    }
	    else if (typeof due === 'number') {
	        each = due;
	    }
	    if (withObservable) {
	        _with = function () { return withObservable; };
	    }
	    else {
	        throw new TypeError('No observable provided to switch to');
	    }
	    if (first == null && each == null) {
	        throw new TypeError('No timeout provided.');
	    }
	    return timeout$1({
	        first: first,
	        each: each,
	        scheduler: scheduler,
	        with: _with,
	    });
	}

	function timestamp$1(timestampProvider) {
	    if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider; }
	    return map$2(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
	}

	function window$2(windowBoundaries) {
	    return operate(function (source, subscriber) {
	        var windowSubject = new Subject$1();
	        subscriber.next(windowSubject.asObservable());
	        var errorHandler = function (err) {
	            windowSubject.error(err);
	            subscriber.error(err);
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
	            windowSubject.complete();
	            subscriber.complete();
	        }, errorHandler));
	        windowBoundaries.subscribe(new OperatorSubscriber(subscriber, function () {
	            windowSubject.complete();
	            subscriber.next((windowSubject = new Subject$1()));
	        }, noop$1, errorHandler));
	        return function () {
	            windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
	            windowSubject = null;
	        };
	    });
	}

	function windowCount$1(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) { startWindowEvery = 0; }
	    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
	    return operate(function (source, subscriber) {
	        var windows = [new Subject$1()];
	        var starts = [];
	        var count = 0;
	        subscriber.next(windows[0].asObservable());
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            try {
	                for (var windows_1 = __values$1(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
	                    var window_1 = windows_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            var c = count - windowSize + 1;
	            if (c >= 0 && c % startEvery === 0) {
	                windows.shift().complete();
	            }
	            if (++count % startEvery === 0) {
	                var window_2 = new Subject$1();
	                windows.push(window_2);
	                subscriber.next(window_2.asObservable());
	            }
	        }, function () {
	            while (windows.length > 0) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, function (err) {
	            while (windows.length > 0) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        }, function () {
	            starts = null;
	            windows = null;
	        }));
	    });
	}

	function windowTime$1(windowTimeSpan) {
	    var _a, _b;
	    var otherArgs = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        otherArgs[_i - 1] = arguments[_i];
	    }
	    var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$1;
	    var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
	    var maxWindowSize = otherArgs[1] || Infinity;
	    return operate(function (source, subscriber) {
	        var windowRecords = [];
	        var restartOnClose = false;
	        var closeWindow = function (record) {
	            var window = record.window, subs = record.subs;
	            window.complete();
	            subs.unsubscribe();
	            arrRemove(windowRecords, record);
	            restartOnClose && startWindow();
	        };
	        var startWindow = function () {
	            if (windowRecords) {
	                var subs = new Subscription$1();
	                subscriber.add(subs);
	                var window_1 = new Subject$1();
	                var record_1 = {
	                    window: window_1,
	                    subs: subs,
	                    seen: 0,
	                };
	                windowRecords.push(record_1);
	                subscriber.next(window_1.asObservable());
	                executeSchedule(subs, scheduler, function () { return closeWindow(record_1); }, windowTimeSpan);
	            }
	        };
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
	        }
	        else {
	            restartOnClose = true;
	        }
	        startWindow();
	        var loop = function (cb) { return windowRecords.slice().forEach(cb); };
	        var terminate = function (cb) {
	            loop(function (_a) {
	                var window = _a.window;
	                return cb(window);
	            });
	            cb(subscriber);
	            subscriber.unsubscribe();
	        };
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            loop(function (record) {
	                record.window.next(value);
	                maxWindowSize <= ++record.seen && closeWindow(record);
	            });
	        }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
	        return function () {
	            windowRecords = null;
	        };
	    });
	}

	function windowToggle$1(openings, closingSelector) {
	    return operate(function (source, subscriber) {
	        var windows = [];
	        var handleError = function (err) {
	            while (0 < windows.length) {
	                windows.shift().error(err);
	            }
	            subscriber.error(err);
	        };
	        innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
	            var window = new Subject$1();
	            windows.push(window);
	            var closingSubscription = new Subscription$1();
	            var closeWindow = function () {
	                arrRemove(windows, window);
	                window.complete();
	                closingSubscription.unsubscribe();
	            };
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom(closingSelector(openValue));
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            subscriber.next(window.asObservable());
	            closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber(subscriber, closeWindow, noop$1, handleError)));
	        }, noop$1));
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            var e_1, _a;
	            var windowsCopy = windows.slice();
	            try {
	                for (var windowsCopy_1 = __values$1(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
	                    var window_1 = windowsCopy_1_1.value;
	                    window_1.next(value);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }, function () {
	            while (0 < windows.length) {
	                windows.shift().complete();
	            }
	            subscriber.complete();
	        }, handleError, function () {
	            while (0 < windows.length) {
	                windows.shift().unsubscribe();
	            }
	        }));
	    });
	}

	function windowWhen$1(closingSelector) {
	    return operate(function (source, subscriber) {
	        var window;
	        var closingSubscriber;
	        var handleError = function (err) {
	            window.error(err);
	            subscriber.error(err);
	        };
	        var openWindow = function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window === null || window === void 0 ? void 0 : window.complete();
	            window = new Subject$1();
	            subscriber.next(window.asObservable());
	            var closingNotifier;
	            try {
	                closingNotifier = innerFrom(closingSelector());
	            }
	            catch (err) {
	                handleError(err);
	                return;
	            }
	            closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError)));
	        };
	        openWindow();
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) { return window.next(value); }, function () {
	            window.complete();
	            subscriber.complete();
	        }, handleError, function () {
	            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
	            window = null;
	        }));
	    });
	}

	function withLatestFrom$1() {
	    var inputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        inputs[_i] = arguments[_i];
	    }
	    var project = popResultSelector(inputs);
	    return operate(function (source, subscriber) {
	        var len = inputs.length;
	        var otherValues = new Array(len);
	        var hasValue = inputs.map(function () { return false; });
	        var ready = false;
	        var _loop_1 = function (i) {
	            innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
	                otherValues[i] = value;
	                if (!ready && !hasValue[i]) {
	                    hasValue[i] = true;
	                    (ready = hasValue.every(identity$4)) && (hasValue = null);
	                }
	            }, noop$1));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
	            if (ready) {
	                var values = __spreadArray([value], __read$1(otherValues));
	                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read$1(values))) : values);
	            }
	        }));
	    });
	}

	function zipAll$1(project) {
	    return joinAllInternals(zip$3, project);
	}

	function zip$2() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    return operate(function (source, subscriber) {
	        zip$3.apply(void 0, __spreadArray([source], __read$1(sources))).subscribe(subscriber);
	    });
	}

	function zipWith() {
	    var otherInputs = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        otherInputs[_i] = arguments[_i];
	    }
	    return zip$2.apply(void 0, __spreadArray([], __read$1(otherInputs)));
	}

	var esm5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Observable: Observable$1,
		ConnectableObservable: ConnectableObservable$1,
		observable: observable$1,
		animationFrames: animationFrames,
		Subject: Subject$1,
		BehaviorSubject: BehaviorSubject$1,
		ReplaySubject: ReplaySubject$1,
		AsyncSubject: AsyncSubject$1,
		asap: asap$1,
		asapScheduler: asapScheduler$1,
		async: async$1,
		asyncScheduler: asyncScheduler$1,
		queue: queue$1,
		queueScheduler: queueScheduler$1,
		animationFrame: animationFrame$1,
		animationFrameScheduler: animationFrameScheduler$1,
		VirtualTimeScheduler: VirtualTimeScheduler$1,
		VirtualAction: VirtualAction$1,
		Scheduler: Scheduler$1,
		Subscription: Subscription$1,
		Subscriber: Subscriber$1,
		Notification: Notification$1,
		get NotificationKind () { return NotificationKind$1; },
		pipe: pipe$1,
		noop: noop$1,
		identity: identity$4,
		isObservable: isObservable$1,
		lastValueFrom: lastValueFrom,
		firstValueFrom: firstValueFrom,
		ArgumentOutOfRangeError: ArgumentOutOfRangeError$1,
		EmptyError: EmptyError$1,
		NotFoundError: NotFoundError,
		ObjectUnsubscribedError: ObjectUnsubscribedError$1,
		SequenceError: SequenceError,
		TimeoutError: TimeoutError$1,
		UnsubscriptionError: UnsubscriptionError$1,
		bindCallback: bindCallback$1,
		bindNodeCallback: bindNodeCallback$1,
		combineLatest: combineLatest$3,
		concat: concat$5,
		connectable: connectable,
		defer: defer$1,
		empty: empty$2,
		forkJoin: forkJoin$1,
		from: from$3,
		fromEvent: fromEvent$1,
		fromEventPattern: fromEventPattern$1,
		generate: generate$4,
		iif: iif$1,
		interval: interval$1,
		merge: merge$3,
		never: never$1,
		of: of$1,
		onErrorResumeNext: onErrorResumeNext$2,
		pairs: pairs$1,
		partition: partition$3,
		race: race$3,
		range: range$1,
		throwError: throwError$1,
		timer: timer$1,
		using: using$1,
		zip: zip$3,
		scheduled: scheduled$1,
		EMPTY: EMPTY$1,
		NEVER: NEVER$1,
		config: config$1,
		audit: audit$1,
		auditTime: auditTime$1,
		buffer: buffer$1,
		bufferCount: bufferCount$1,
		bufferTime: bufferTime$1,
		bufferToggle: bufferToggle$1,
		bufferWhen: bufferWhen$1,
		catchError: catchError$1,
		combineAll: combineAll$1,
		combineLatestAll: combineLatestAll,
		combineLatestWith: combineLatestWith,
		concatAll: concatAll$1,
		concatMap: concatMap$1,
		concatMapTo: concatMapTo$1,
		concatWith: concatWith,
		connect: connect$2,
		count: count$1,
		debounce: debounce$1,
		debounceTime: debounceTime$1,
		defaultIfEmpty: defaultIfEmpty$1,
		delay: delay$1,
		delayWhen: delayWhen$1,
		dematerialize: dematerialize$1,
		distinct: distinct$1,
		distinctUntilChanged: distinctUntilChanged$1,
		distinctUntilKeyChanged: distinctUntilKeyChanged$1,
		elementAt: elementAt$1,
		endWith: endWith$1,
		every: every$1,
		exhaust: exhaust$1,
		exhaustAll: exhaustAll,
		exhaustMap: exhaustMap$1,
		expand: expand$1,
		filter: filter$1,
		finalize: finalize$1,
		find: find$2,
		findIndex: findIndex$1,
		first: first$1,
		groupBy: groupBy$1,
		ignoreElements: ignoreElements$1,
		isEmpty: isEmpty$1,
		last: last$1,
		map: map$2,
		mapTo: mapTo$1,
		materialize: materialize$1,
		max: max$1,
		mergeAll: mergeAll$1,
		flatMap: flatMap$1,
		mergeMap: mergeMap$1,
		mergeMapTo: mergeMapTo$1,
		mergeScan: mergeScan$1,
		mergeWith: mergeWith,
		min: min$1,
		multicast: multicast$1,
		observeOn: observeOn$1,
		pairwise: pairwise$1,
		pluck: pluck$3,
		publish: publish$1,
		publishBehavior: publishBehavior$1,
		publishLast: publishLast$1,
		publishReplay: publishReplay$1,
		raceWith: raceWith,
		reduce: reduce$1,
		repeat: repeat$1,
		repeatWhen: repeatWhen$1,
		retry: retry$1,
		retryWhen: retryWhen$1,
		refCount: refCount$1,
		sample: sample$1,
		sampleTime: sampleTime$1,
		scan: scan$1,
		sequenceEqual: sequenceEqual$1,
		share: share$1,
		shareReplay: shareReplay$1,
		single: single$1,
		skip: skip$1,
		skipLast: skipLast$1,
		skipUntil: skipUntil$1,
		skipWhile: skipWhile$1,
		startWith: startWith$1,
		subscribeOn: subscribeOn$1,
		switchAll: switchAll$1,
		switchMap: switchMap$1,
		switchMapTo: switchMapTo$1,
		switchScan: switchScan,
		take: take$1,
		takeLast: takeLast$1,
		takeUntil: takeUntil$1,
		takeWhile: takeWhile$1,
		tap: tap$1,
		throttle: throttle$1,
		throttleTime: throttleTime$1,
		throwIfEmpty: throwIfEmpty$1,
		timeInterval: timeInterval$1,
		timeout: timeout$1,
		timeoutWith: timeoutWith$1,
		timestamp: timestamp$1,
		toArray: toArray$2,
		window: window$2,
		windowCount: windowCount$1,
		windowTime: windowTime$1,
		windowToggle: windowToggle$1,
		windowWhen: windowWhen$1,
		withLatestFrom: withLatestFrom$1,
		zipAll: zipAll$1,
		zipWith: zipWith
	});

	var require$$0$5 = /*@__PURE__*/getAugmentedNamespace(esm5);

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.StreamStatic = exports.Stream = exports.CommitType = exports.AnchorStatus = exports.SignatureStatus = void 0;
	const lodash_clonedeep_1 = __importDefault(lodash_clonedeep.exports);
	const streamid_1 = lib$f;
	const rxjs_1 = require$$0$5;
	const streamopts_1 = streamopts;
	(function (SignatureStatus) {
	    SignatureStatus[SignatureStatus["GENESIS"] = 0] = "GENESIS";
	    SignatureStatus[SignatureStatus["PARTIAL"] = 1] = "PARTIAL";
	    SignatureStatus[SignatureStatus["SIGNED"] = 2] = "SIGNED";
	})(exports.SignatureStatus || (exports.SignatureStatus = {}));
	(function (AnchorStatus) {
	    AnchorStatus[AnchorStatus["NOT_REQUESTED"] = 0] = "NOT_REQUESTED";
	    AnchorStatus[AnchorStatus["PENDING"] = 1] = "PENDING";
	    AnchorStatus[AnchorStatus["PROCESSING"] = 2] = "PROCESSING";
	    AnchorStatus[AnchorStatus["ANCHORED"] = 3] = "ANCHORED";
	    AnchorStatus[AnchorStatus["FAILED"] = 4] = "FAILED";
	})(exports.AnchorStatus || (exports.AnchorStatus = {}));
	var CommitType;
	(function (CommitType) {
	    CommitType[CommitType["GENESIS"] = 0] = "GENESIS";
	    CommitType[CommitType["SIGNED"] = 1] = "SIGNED";
	    CommitType[CommitType["ANCHOR"] = 2] = "ANCHOR";
	})(CommitType = exports.CommitType || (exports.CommitType = {}));
	class Stream extends rxjs_1.Observable {
	    constructor(state$, _context) {
	        super((subscriber) => {
	            state$.subscribe(subscriber);
	        });
	        this.state$ = state$;
	        this._context = _context;
	    }
	    get id() {
	        return new streamid_1.StreamID(this.state$.value.type, this.state$.value.log[0].cid);
	    }
	    get api() {
	        return this._context.api;
	    }
	    get metadata() {
	        var _a;
	        const { next, metadata } = this.state$.value;
	        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.metadata) !== null && _a !== void 0 ? _a : metadata);
	    }
	    get content() {
	        var _a;
	        const { next, content } = this.state$.value;
	        return lodash_clonedeep_1.default((_a = next === null || next === void 0 ? void 0 : next.content) !== null && _a !== void 0 ? _a : content);
	    }
	    get controllers() {
	        return this.metadata.controllers;
	    }
	    get tip() {
	        return this.state$.value.log[this.state$.value.log.length - 1].cid;
	    }
	    get commitId() {
	        return this.id.atCommit(this.tip);
	    }
	    get allCommitIds() {
	        return this.state$.value.log.map(({ cid }) => this.id.atCommit(cid));
	    }
	    get anchorCommitIds() {
	        return this.state$.value.log
	            .filter(({ type }) => type === CommitType.ANCHOR)
	            .map(({ cid }) => this.id.atCommit(cid));
	    }
	    get state() {
	        return lodash_clonedeep_1.default(this.state$.value);
	    }
	    async sync(opts = {}) {
	        opts = { sync: streamopts_1.SyncOptions.PREFER_CACHE, ...opts };
	        const stream = await this.api.loadStream(this.id, opts);
	        this.state$.next(stream.state);
	    }
	    async requestAnchor() {
	        return this.api.requestAnchor(this.id);
	    }
	}
	exports.Stream = Stream;
	function StreamStatic() {
	    return (constructor) => {
	    };
	}
	exports.StreamStatic = StreamStatic;

	}(stream$2));

	var httpUtils = {};

	var nodePonyfill = {exports: {}};

	// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

	// fix for "Readable" isn't a named export issue
	const Readable = Stream__default["default"].Readable;

	const BUFFER = Symbol('buffer');
	const TYPE = Symbol('type');

	class Blob {
		constructor() {
			this[TYPE] = '';

			const blobParts = arguments[0];
			const options = arguments[1];

			const buffers = [];
			let size = 0;

			if (blobParts) {
				const a = blobParts;
				const length = Number(a.length);
				for (let i = 0; i < length; i++) {
					const element = a[i];
					let buffer;
					if (element instanceof Buffer) {
						buffer = element;
					} else if (ArrayBuffer.isView(element)) {
						buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
					} else if (element instanceof ArrayBuffer) {
						buffer = Buffer.from(element);
					} else if (element instanceof Blob) {
						buffer = element[BUFFER];
					} else {
						buffer = Buffer.from(typeof element === 'string' ? element : String(element));
					}
					size += buffer.length;
					buffers.push(buffer);
				}
			}

			this[BUFFER] = Buffer.concat(buffers);

			let type = options && options.type !== undefined && String(options.type).toLowerCase();
			if (type && !/[^\u0020-\u007E]/.test(type)) {
				this[TYPE] = type;
			}
		}
		get size() {
			return this[BUFFER].length;
		}
		get type() {
			return this[TYPE];
		}
		text() {
			return Promise.resolve(this[BUFFER].toString());
		}
		arrayBuffer() {
			const buf = this[BUFFER];
			const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
			return Promise.resolve(ab);
		}
		stream() {
			const readable = new Readable();
			readable._read = function () {};
			readable.push(this[BUFFER]);
			readable.push(null);
			return readable;
		}
		toString() {
			return '[object Blob]';
		}
		slice() {
			const size = this.size;

			const start = arguments[0];
			const end = arguments[1];
			let relativeStart, relativeEnd;
			if (start === undefined) {
				relativeStart = 0;
			} else if (start < 0) {
				relativeStart = Math.max(size + start, 0);
			} else {
				relativeStart = Math.min(start, size);
			}
			if (end === undefined) {
				relativeEnd = size;
			} else if (end < 0) {
				relativeEnd = Math.max(size + end, 0);
			} else {
				relativeEnd = Math.min(end, size);
			}
			const span = Math.max(relativeEnd - relativeStart, 0);

			const buffer = this[BUFFER];
			const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
			const blob = new Blob([], { type: arguments[2] });
			blob[BUFFER] = slicedBuffer;
			return blob;
		}
	}

	Object.defineProperties(Blob.prototype, {
		size: { enumerable: true },
		type: { enumerable: true },
		slice: { enumerable: true }
	});

	Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
		value: 'Blob',
		writable: false,
		enumerable: false,
		configurable: true
	});

	/**
	 * fetch-error.js
	 *
	 * FetchError interface for operational errors
	 */

	/**
	 * Create FetchError instance
	 *
	 * @param   String      message      Error message for human
	 * @param   String      type         Error type for machine
	 * @param   String      systemError  For Node.js system error
	 * @return  FetchError
	 */
	function FetchError(message, type, systemError) {
	  Error.call(this, message);

	  this.message = message;
	  this.type = type;

	  // when err.type is `system`, err.code contains system error code
	  if (systemError) {
	    this.code = this.errno = systemError.code;
	  }

	  // hide custom error implementation details from end-users
	  Error.captureStackTrace(this, this.constructor);
	}

	FetchError.prototype = Object.create(Error.prototype);
	FetchError.prototype.constructor = FetchError;
	FetchError.prototype.name = 'FetchError';

	let convert$1;
	try {
		convert$1 = require('encoding').convert;
	} catch (e) {}

	const INTERNALS = Symbol('Body internals');

	// fix an issue where "PassThrough" isn't a named export for node <10
	const PassThrough$1 = Stream__default["default"].PassThrough;

	/**
	 * Body mixin
	 *
	 * Ref: https://fetch.spec.whatwg.org/#body
	 *
	 * @param   Stream  body  Readable stream
	 * @param   Object  opts  Response options
	 * @return  Void
	 */
	function Body(body) {
		var _this = this;

		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		    _ref$size = _ref.size;

		let size = _ref$size === undefined ? 0 : _ref$size;
		var _ref$timeout = _ref.timeout;
		let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

		if (body == null) {
			// body is undefined or null
			body = null;
		} else if (isURLSearchParams(body)) {
			// body is a URLSearchParams
			body = Buffer.from(body.toString());
		} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
			// body is ArrayBuffer
			body = Buffer.from(body);
		} else if (ArrayBuffer.isView(body)) {
			// body is ArrayBufferView
			body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
		} else if (body instanceof Stream__default["default"]) ; else {
			// none of the above
			// coerce to string then buffer
			body = Buffer.from(String(body));
		}
		this[INTERNALS] = {
			body,
			disturbed: false,
			error: null
		};
		this.size = size;
		this.timeout = timeout;

		if (body instanceof Stream__default["default"]) {
			body.on('error', function (err) {
				const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
				_this[INTERNALS].error = error;
			});
		}
	}

	Body.prototype = {
		get body() {
			return this[INTERNALS].body;
		},

		get bodyUsed() {
			return this[INTERNALS].disturbed;
		},

		/**
	  * Decode response as ArrayBuffer
	  *
	  * @return  Promise
	  */
		arrayBuffer() {
			return consumeBody.call(this).then(function (buf) {
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
			});
		},

		/**
	  * Return raw response as Blob
	  *
	  * @return Promise
	  */
		blob() {
			let ct = this.headers && this.headers.get('content-type') || '';
			return consumeBody.call(this).then(function (buf) {
				return Object.assign(
				// Prevent copying
				new Blob([], {
					type: ct.toLowerCase()
				}), {
					[BUFFER]: buf
				});
			});
		},

		/**
	  * Decode response as json
	  *
	  * @return  Promise
	  */
		json() {
			var _this2 = this;

			return consumeBody.call(this).then(function (buffer) {
				try {
					return JSON.parse(buffer.toString());
				} catch (err) {
					return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
				}
			});
		},

		/**
	  * Decode response as text
	  *
	  * @return  Promise
	  */
		text() {
			return consumeBody.call(this).then(function (buffer) {
				return buffer.toString();
			});
		},

		/**
	  * Decode response as buffer (non-spec api)
	  *
	  * @return  Promise
	  */
		buffer() {
			return consumeBody.call(this);
		},

		/**
	  * Decode response as text, while automatically detecting the encoding and
	  * trying to decode to UTF-8 (non-spec api)
	  *
	  * @return  Promise
	  */
		textConverted() {
			var _this3 = this;

			return consumeBody.call(this).then(function (buffer) {
				return convertBody(buffer, _this3.headers);
			});
		}
	};

	// In browsers, all properties are enumerable.
	Object.defineProperties(Body.prototype, {
		body: { enumerable: true },
		bodyUsed: { enumerable: true },
		arrayBuffer: { enumerable: true },
		blob: { enumerable: true },
		json: { enumerable: true },
		text: { enumerable: true }
	});

	Body.mixIn = function (proto) {
		for (const name of Object.getOwnPropertyNames(Body.prototype)) {
			// istanbul ignore else: future proof
			if (!(name in proto)) {
				const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
				Object.defineProperty(proto, name, desc);
			}
		}
	};

	/**
	 * Consume and convert an entire Body to a Buffer.
	 *
	 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
	 *
	 * @return  Promise
	 */
	function consumeBody() {
		var _this4 = this;

		if (this[INTERNALS].disturbed) {
			return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
		}

		this[INTERNALS].disturbed = true;

		if (this[INTERNALS].error) {
			return Body.Promise.reject(this[INTERNALS].error);
		}

		let body = this.body;

		// body is null
		if (body === null) {
			return Body.Promise.resolve(Buffer.alloc(0));
		}

		// body is blob
		if (isBlob(body)) {
			body = body.stream();
		}

		// body is buffer
		if (Buffer.isBuffer(body)) {
			return Body.Promise.resolve(body);
		}

		// istanbul ignore if: should never happen
		if (!(body instanceof Stream__default["default"])) {
			return Body.Promise.resolve(Buffer.alloc(0));
		}

		// body is stream
		// get ready to actually consume the body
		let accum = [];
		let accumBytes = 0;
		let abort = false;

		return new Body.Promise(function (resolve, reject) {
			let resTimeout;

			// allow timeout on slow response body
			if (_this4.timeout) {
				resTimeout = setTimeout(function () {
					abort = true;
					reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
				}, _this4.timeout);
			}

			// handle stream errors
			body.on('error', function (err) {
				if (err.name === 'AbortError') {
					// if the request was aborted, reject with this Error
					abort = true;
					reject(err);
				} else {
					// other errors, such as incorrect content-encoding
					reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
				}
			});

			body.on('data', function (chunk) {
				if (abort || chunk === null) {
					return;
				}

				if (_this4.size && accumBytes + chunk.length > _this4.size) {
					abort = true;
					reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
					return;
				}

				accumBytes += chunk.length;
				accum.push(chunk);
			});

			body.on('end', function () {
				if (abort) {
					return;
				}

				clearTimeout(resTimeout);

				try {
					resolve(Buffer.concat(accum, accumBytes));
				} catch (err) {
					// handle streams that have accumulated too much data (issue #414)
					reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
				}
			});
		});
	}

	/**
	 * Detect buffer encoding and convert to target encoding
	 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
	 *
	 * @param   Buffer  buffer    Incoming buffer
	 * @param   String  encoding  Target encoding
	 * @return  String
	 */
	function convertBody(buffer, headers) {
		if (typeof convert$1 !== 'function') {
			throw new Error('The package `encoding` must be installed to use the textConverted() function');
		}

		const ct = headers.get('content-type');
		let charset = 'utf-8';
		let res, str;

		// header
		if (ct) {
			res = /charset=([^;]*)/i.exec(ct);
		}

		// no charset in content type, peek at response body for at most 1024 bytes
		str = buffer.slice(0, 1024).toString();

		// html5
		if (!res && str) {
			res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
		}

		// html4
		if (!res && str) {
			res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
			if (!res) {
				res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
				if (res) {
					res.pop(); // drop last quote
				}
			}

			if (res) {
				res = /charset=(.*)/i.exec(res.pop());
			}
		}

		// xml
		if (!res && str) {
			res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
		}

		// found charset
		if (res) {
			charset = res.pop();

			// prevent decode issues when sites use incorrect encoding
			// ref: https://hsivonen.fi/encoding-menu/
			if (charset === 'gb2312' || charset === 'gbk') {
				charset = 'gb18030';
			}
		}

		// turn raw buffers into a single utf-8 buffer
		return convert$1(buffer, 'UTF-8', charset).toString();
	}

	/**
	 * Detect a URLSearchParams object
	 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
	 *
	 * @param   Object  obj     Object to detect by type or brand
	 * @return  String
	 */
	function isURLSearchParams(obj) {
		// Duck-typing as a necessary condition.
		if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
			return false;
		}

		// Brand-checking and more duck-typing as optional condition.
		return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
	}

	/**
	 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
	 * @param  {*} obj
	 * @return {boolean}
	 */
	function isBlob(obj) {
		return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
	}

	/**
	 * Clone body given Res/Req instance
	 *
	 * @param   Mixed  instance  Response or Request instance
	 * @return  Mixed
	 */
	function clone(instance) {
		let p1, p2;
		let body = instance.body;

		// don't allow cloning a used body
		if (instance.bodyUsed) {
			throw new Error('cannot clone body after it is used');
		}

		// check that body is a stream and not form-data object
		// note: we can't clone the form-data object without having it as a dependency
		if (body instanceof Stream__default["default"] && typeof body.getBoundary !== 'function') {
			// tee instance body
			p1 = new PassThrough$1();
			p2 = new PassThrough$1();
			body.pipe(p1);
			body.pipe(p2);
			// set instance body to teed body and return the other teed body
			instance[INTERNALS].body = p1;
			body = p2;
		}

		return body;
	}

	/**
	 * Performs the operation "extract a `Content-Type` value from |object|" as
	 * specified in the specification:
	 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
	 *
	 * This function assumes that instance.body is present.
	 *
	 * @param   Mixed  instance  Any options.body input
	 */
	function extractContentType(body) {
		if (body === null) {
			// body is null
			return null;
		} else if (typeof body === 'string') {
			// body is string
			return 'text/plain;charset=UTF-8';
		} else if (isURLSearchParams(body)) {
			// body is a URLSearchParams
			return 'application/x-www-form-urlencoded;charset=UTF-8';
		} else if (isBlob(body)) {
			// body is blob
			return body.type || null;
		} else if (Buffer.isBuffer(body)) {
			// body is buffer
			return null;
		} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
			// body is ArrayBuffer
			return null;
		} else if (ArrayBuffer.isView(body)) {
			// body is ArrayBufferView
			return null;
		} else if (typeof body.getBoundary === 'function') {
			// detect form data input from form-data module
			return `multipart/form-data;boundary=${body.getBoundary()}`;
		} else if (body instanceof Stream__default["default"]) {
			// body is stream
			// can't really do much about this
			return null;
		} else {
			// Body constructor defaults other things to string
			return 'text/plain;charset=UTF-8';
		}
	}

	/**
	 * The Fetch Standard treats this as if "total bytes" is a property on the body.
	 * For us, we have to explicitly get it with a function.
	 *
	 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
	 *
	 * @param   Body    instance   Instance of Body
	 * @return  Number?            Number of bytes, or null if not possible
	 */
	function getTotalBytes(instance) {
		const body = instance.body;


		if (body === null) {
			// body is null
			return 0;
		} else if (isBlob(body)) {
			return body.size;
		} else if (Buffer.isBuffer(body)) {
			// body is buffer
			return body.length;
		} else if (body && typeof body.getLengthSync === 'function') {
			// detect form data input from form-data module
			if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
			body.hasKnownLength && body.hasKnownLength()) {
				// 2.x
				return body.getLengthSync();
			}
			return null;
		} else {
			// body is stream
			return null;
		}
	}

	/**
	 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
	 *
	 * @param   Body    instance   Instance of Body
	 * @return  Void
	 */
	function writeToStream(dest, instance) {
		const body = instance.body;


		if (body === null) {
			// body is null
			dest.end();
		} else if (isBlob(body)) {
			body.stream().pipe(dest);
		} else if (Buffer.isBuffer(body)) {
			// body is buffer
			dest.write(body);
			dest.end();
		} else {
			// body is stream
			body.pipe(dest);
		}
	}

	// expose Promise
	Body.Promise = global.Promise;

	/**
	 * headers.js
	 *
	 * Headers class offers convenient helpers
	 */

	const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
	const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

	function validateName(name) {
		name = `${name}`;
		if (invalidTokenRegex.test(name) || name === '') {
			throw new TypeError(`${name} is not a legal HTTP header name`);
		}
	}

	function validateValue(value) {
		value = `${value}`;
		if (invalidHeaderCharRegex.test(value)) {
			throw new TypeError(`${value} is not a legal HTTP header value`);
		}
	}

	/**
	 * Find the key in the map object given a header name.
	 *
	 * Returns undefined if not found.
	 *
	 * @param   String  name  Header name
	 * @return  String|Undefined
	 */
	function find$1(map, name) {
		name = name.toLowerCase();
		for (const key in map) {
			if (key.toLowerCase() === name) {
				return key;
			}
		}
		return undefined;
	}

	const MAP = Symbol('map');
	class Headers {
		/**
	  * Headers class
	  *
	  * @param   Object  headers  Response headers
	  * @return  Void
	  */
		constructor() {
			let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

			this[MAP] = Object.create(null);

			if (init instanceof Headers) {
				const rawHeaders = init.raw();
				const headerNames = Object.keys(rawHeaders);

				for (const headerName of headerNames) {
					for (const value of rawHeaders[headerName]) {
						this.append(headerName, value);
					}
				}

				return;
			}

			// We don't worry about converting prop to ByteString here as append()
			// will handle it.
			if (init == null) ; else if (typeof init === 'object') {
				const method = init[Symbol.iterator];
				if (method != null) {
					if (typeof method !== 'function') {
						throw new TypeError('Header pairs must be iterable');
					}

					// sequence<sequence<ByteString>>
					// Note: per spec we have to first exhaust the lists then process them
					const pairs = [];
					for (const pair of init) {
						if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
							throw new TypeError('Each header pair must be iterable');
						}
						pairs.push(Array.from(pair));
					}

					for (const pair of pairs) {
						if (pair.length !== 2) {
							throw new TypeError('Each header pair must be a name/value tuple');
						}
						this.append(pair[0], pair[1]);
					}
				} else {
					// record<ByteString, ByteString>
					for (const key of Object.keys(init)) {
						const value = init[key];
						this.append(key, value);
					}
				}
			} else {
				throw new TypeError('Provided initializer must be an object');
			}
		}

		/**
	  * Return combined header value given name
	  *
	  * @param   String  name  Header name
	  * @return  Mixed
	  */
		get(name) {
			name = `${name}`;
			validateName(name);
			const key = find$1(this[MAP], name);
			if (key === undefined) {
				return null;
			}

			return this[MAP][key].join(', ');
		}

		/**
	  * Iterate over all headers
	  *
	  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
	  * @param   Boolean   thisArg   `this` context for callback function
	  * @return  Void
	  */
		forEach(callback) {
			let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

			let pairs = getHeaders(this);
			let i = 0;
			while (i < pairs.length) {
				var _pairs$i = pairs[i];
				const name = _pairs$i[0],
				      value = _pairs$i[1];

				callback.call(thisArg, value, name, this);
				pairs = getHeaders(this);
				i++;
			}
		}

		/**
	  * Overwrite header values given name
	  *
	  * @param   String  name   Header name
	  * @param   String  value  Header value
	  * @return  Void
	  */
		set(name, value) {
			name = `${name}`;
			value = `${value}`;
			validateName(name);
			validateValue(value);
			const key = find$1(this[MAP], name);
			this[MAP][key !== undefined ? key : name] = [value];
		}

		/**
	  * Append a value onto existing header
	  *
	  * @param   String  name   Header name
	  * @param   String  value  Header value
	  * @return  Void
	  */
		append(name, value) {
			name = `${name}`;
			value = `${value}`;
			validateName(name);
			validateValue(value);
			const key = find$1(this[MAP], name);
			if (key !== undefined) {
				this[MAP][key].push(value);
			} else {
				this[MAP][name] = [value];
			}
		}

		/**
	  * Check for header name existence
	  *
	  * @param   String   name  Header name
	  * @return  Boolean
	  */
		has(name) {
			name = `${name}`;
			validateName(name);
			return find$1(this[MAP], name) !== undefined;
		}

		/**
	  * Delete all header values given name
	  *
	  * @param   String  name  Header name
	  * @return  Void
	  */
		delete(name) {
			name = `${name}`;
			validateName(name);
			const key = find$1(this[MAP], name);
			if (key !== undefined) {
				delete this[MAP][key];
			}
		}

		/**
	  * Return raw headers (non-spec api)
	  *
	  * @return  Object
	  */
		raw() {
			return this[MAP];
		}

		/**
	  * Get an iterator on keys.
	  *
	  * @return  Iterator
	  */
		keys() {
			return createHeadersIterator(this, 'key');
		}

		/**
	  * Get an iterator on values.
	  *
	  * @return  Iterator
	  */
		values() {
			return createHeadersIterator(this, 'value');
		}

		/**
	  * Get an iterator on entries.
	  *
	  * This is the default iterator of the Headers object.
	  *
	  * @return  Iterator
	  */
		[Symbol.iterator]() {
			return createHeadersIterator(this, 'key+value');
		}
	}
	Headers.prototype.entries = Headers.prototype[Symbol.iterator];

	Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
		value: 'Headers',
		writable: false,
		enumerable: false,
		configurable: true
	});

	Object.defineProperties(Headers.prototype, {
		get: { enumerable: true },
		forEach: { enumerable: true },
		set: { enumerable: true },
		append: { enumerable: true },
		has: { enumerable: true },
		delete: { enumerable: true },
		keys: { enumerable: true },
		values: { enumerable: true },
		entries: { enumerable: true }
	});

	function getHeaders(headers) {
		let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

		const keys = Object.keys(headers[MAP]).sort();
		return keys.map(kind === 'key' ? function (k) {
			return k.toLowerCase();
		} : kind === 'value' ? function (k) {
			return headers[MAP][k].join(', ');
		} : function (k) {
			return [k.toLowerCase(), headers[MAP][k].join(', ')];
		});
	}

	const INTERNAL = Symbol('internal');

	function createHeadersIterator(target, kind) {
		const iterator = Object.create(HeadersIteratorPrototype);
		iterator[INTERNAL] = {
			target,
			kind,
			index: 0
		};
		return iterator;
	}

	const HeadersIteratorPrototype = Object.setPrototypeOf({
		next() {
			// istanbul ignore if
			if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
				throw new TypeError('Value of `this` is not a HeadersIterator');
			}

			var _INTERNAL = this[INTERNAL];
			const target = _INTERNAL.target,
			      kind = _INTERNAL.kind,
			      index = _INTERNAL.index;

			const values = getHeaders(target, kind);
			const len = values.length;
			if (index >= len) {
				return {
					value: undefined,
					done: true
				};
			}

			this[INTERNAL].index = index + 1;

			return {
				value: values[index],
				done: false
			};
		}
	}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

	Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
		value: 'HeadersIterator',
		writable: false,
		enumerable: false,
		configurable: true
	});

	/**
	 * Export the Headers object in a form that Node.js can consume.
	 *
	 * @param   Headers  headers
	 * @return  Object
	 */
	function exportNodeCompatibleHeaders(headers) {
		const obj = Object.assign({ __proto__: null }, headers[MAP]);

		// http.request() only supports string as Host header. This hack makes
		// specifying custom Host header possible.
		const hostHeaderKey = find$1(headers[MAP], 'Host');
		if (hostHeaderKey !== undefined) {
			obj[hostHeaderKey] = obj[hostHeaderKey][0];
		}

		return obj;
	}

	/**
	 * Create a Headers object from an object of headers, ignoring those that do
	 * not conform to HTTP grammar productions.
	 *
	 * @param   Object  obj  Object of headers
	 * @return  Headers
	 */
	function createHeadersLenient(obj) {
		const headers = new Headers();
		for (const name of Object.keys(obj)) {
			if (invalidTokenRegex.test(name)) {
				continue;
			}
			if (Array.isArray(obj[name])) {
				for (const val of obj[name]) {
					if (invalidHeaderCharRegex.test(val)) {
						continue;
					}
					if (headers[MAP][name] === undefined) {
						headers[MAP][name] = [val];
					} else {
						headers[MAP][name].push(val);
					}
				}
			} else if (!invalidHeaderCharRegex.test(obj[name])) {
				headers[MAP][name] = [obj[name]];
			}
		}
		return headers;
	}

	const INTERNALS$1 = Symbol('Response internals');

	// fix an issue where "STATUS_CODES" aren't a named export for node <10
	const STATUS_CODES = http__default["default"].STATUS_CODES;

	/**
	 * Response class
	 *
	 * @param   Stream  body  Readable stream
	 * @param   Object  opts  Response options
	 * @return  Void
	 */
	class Response {
		constructor() {
			let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
			let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			Body.call(this, body, opts);

			const status = opts.status || 200;
			const headers = new Headers(opts.headers);

			if (body != null && !headers.has('Content-Type')) {
				const contentType = extractContentType(body);
				if (contentType) {
					headers.append('Content-Type', contentType);
				}
			}

			this[INTERNALS$1] = {
				url: opts.url,
				status,
				statusText: opts.statusText || STATUS_CODES[status],
				headers,
				counter: opts.counter
			};
		}

		get url() {
			return this[INTERNALS$1].url || '';
		}

		get status() {
			return this[INTERNALS$1].status;
		}

		/**
	  * Convenience property representing if the request ended normally
	  */
		get ok() {
			return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
		}

		get redirected() {
			return this[INTERNALS$1].counter > 0;
		}

		get statusText() {
			return this[INTERNALS$1].statusText;
		}

		get headers() {
			return this[INTERNALS$1].headers;
		}

		/**
	  * Clone this response
	  *
	  * @return  Response
	  */
		clone() {
			return new Response(clone(this), {
				url: this.url,
				status: this.status,
				statusText: this.statusText,
				headers: this.headers,
				ok: this.ok,
				redirected: this.redirected
			});
		}
	}

	Body.mixIn(Response.prototype);

	Object.defineProperties(Response.prototype, {
		url: { enumerable: true },
		status: { enumerable: true },
		ok: { enumerable: true },
		redirected: { enumerable: true },
		statusText: { enumerable: true },
		headers: { enumerable: true },
		clone: { enumerable: true }
	});

	Object.defineProperty(Response.prototype, Symbol.toStringTag, {
		value: 'Response',
		writable: false,
		enumerable: false,
		configurable: true
	});

	const INTERNALS$2 = Symbol('Request internals');

	// fix an issue where "format", "parse" aren't a named export for node <10
	const parse_url = Url__default["default"].parse;
	const format_url = Url__default["default"].format;

	const streamDestructionSupported = 'destroy' in Stream__default["default"].Readable.prototype;

	/**
	 * Check if a value is an instance of Request.
	 *
	 * @param   Mixed   input
	 * @return  Boolean
	 */
	function isRequest(input) {
		return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
	}

	function isAbortSignal(signal) {
		const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
		return !!(proto && proto.constructor.name === 'AbortSignal');
	}

	/**
	 * Request class
	 *
	 * @param   Mixed   input  Url or Request instance
	 * @param   Object  init   Custom options
	 * @return  Void
	 */
	class Request {
		constructor(input) {
			let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			let parsedURL;

			// normalize input
			if (!isRequest(input)) {
				if (input && input.href) {
					// in order to support Node.js' Url objects; though WHATWG's URL objects
					// will fall into this branch also (since their `toString()` will return
					// `href` property anyway)
					parsedURL = parse_url(input.href);
				} else {
					// coerce input to a string before attempting to parse
					parsedURL = parse_url(`${input}`);
				}
				input = {};
			} else {
				parsedURL = parse_url(input.url);
			}

			let method = init.method || input.method || 'GET';
			method = method.toUpperCase();

			if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
				throw new TypeError('Request with GET/HEAD method cannot have body');
			}

			let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

			Body.call(this, inputBody, {
				timeout: init.timeout || input.timeout || 0,
				size: init.size || input.size || 0
			});

			const headers = new Headers(init.headers || input.headers || {});

			if (inputBody != null && !headers.has('Content-Type')) {
				const contentType = extractContentType(inputBody);
				if (contentType) {
					headers.append('Content-Type', contentType);
				}
			}

			let signal = isRequest(input) ? input.signal : null;
			if ('signal' in init) signal = init.signal;

			if (signal != null && !isAbortSignal(signal)) {
				throw new TypeError('Expected signal to be an instanceof AbortSignal');
			}

			this[INTERNALS$2] = {
				method,
				redirect: init.redirect || input.redirect || 'follow',
				headers,
				parsedURL,
				signal
			};

			// node-fetch-only options
			this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
			this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
			this.counter = init.counter || input.counter || 0;
			this.agent = init.agent || input.agent;
		}

		get method() {
			return this[INTERNALS$2].method;
		}

		get url() {
			return format_url(this[INTERNALS$2].parsedURL);
		}

		get headers() {
			return this[INTERNALS$2].headers;
		}

		get redirect() {
			return this[INTERNALS$2].redirect;
		}

		get signal() {
			return this[INTERNALS$2].signal;
		}

		/**
	  * Clone this request
	  *
	  * @return  Request
	  */
		clone() {
			return new Request(this);
		}
	}

	Body.mixIn(Request.prototype);

	Object.defineProperty(Request.prototype, Symbol.toStringTag, {
		value: 'Request',
		writable: false,
		enumerable: false,
		configurable: true
	});

	Object.defineProperties(Request.prototype, {
		method: { enumerable: true },
		url: { enumerable: true },
		headers: { enumerable: true },
		redirect: { enumerable: true },
		clone: { enumerable: true },
		signal: { enumerable: true }
	});

	/**
	 * Convert a Request to Node.js http request options.
	 *
	 * @param   Request  A Request instance
	 * @return  Object   The options object to be passed to http.request
	 */
	function getNodeRequestOptions(request) {
		const parsedURL = request[INTERNALS$2].parsedURL;
		const headers = new Headers(request[INTERNALS$2].headers);

		// fetch step 1.3
		if (!headers.has('Accept')) {
			headers.set('Accept', '*/*');
		}

		// Basic fetch
		if (!parsedURL.protocol || !parsedURL.hostname) {
			throw new TypeError('Only absolute URLs are supported');
		}

		if (!/^https?:$/.test(parsedURL.protocol)) {
			throw new TypeError('Only HTTP(S) protocols are supported');
		}

		if (request.signal && request.body instanceof Stream__default["default"].Readable && !streamDestructionSupported) {
			throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
		}

		// HTTP-network-or-cache fetch steps 2.4-2.7
		let contentLengthValue = null;
		if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
			contentLengthValue = '0';
		}
		if (request.body != null) {
			const totalBytes = getTotalBytes(request);
			if (typeof totalBytes === 'number') {
				contentLengthValue = String(totalBytes);
			}
		}
		if (contentLengthValue) {
			headers.set('Content-Length', contentLengthValue);
		}

		// HTTP-network-or-cache fetch step 2.11
		if (!headers.has('User-Agent')) {
			headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
		}

		// HTTP-network-or-cache fetch step 2.15
		if (request.compress && !headers.has('Accept-Encoding')) {
			headers.set('Accept-Encoding', 'gzip,deflate');
		}

		let agent = request.agent;
		if (typeof agent === 'function') {
			agent = agent(parsedURL);
		}

		if (!headers.has('Connection') && !agent) {
			headers.set('Connection', 'close');
		}

		// HTTP-network fetch step 4.2
		// chunked encoding is handled by Node.js

		return Object.assign({}, parsedURL, {
			method: request.method,
			headers: exportNodeCompatibleHeaders(headers),
			agent
		});
	}

	/**
	 * abort-error.js
	 *
	 * AbortError interface for cancelled requests
	 */

	/**
	 * Create AbortError instance
	 *
	 * @param   String      message      Error message for human
	 * @return  AbortError
	 */
	function AbortError(message) {
	  Error.call(this, message);

	  this.type = 'aborted';
	  this.message = message;

	  // hide custom error implementation details from end-users
	  Error.captureStackTrace(this, this.constructor);
	}

	AbortError.prototype = Object.create(Error.prototype);
	AbortError.prototype.constructor = AbortError;
	AbortError.prototype.name = 'AbortError';

	// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
	const PassThrough$1$1 = Stream__default["default"].PassThrough;
	const resolve_url = Url__default["default"].resolve;

	/**
	 * Fetch function
	 *
	 * @param   Mixed    url   Absolute url or Request instance
	 * @param   Object   opts  Fetch options
	 * @return  Promise
	 */
	function fetch$2(url, opts) {

		// allow custom promise
		if (!fetch$2.Promise) {
			throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
		}

		Body.Promise = fetch$2.Promise;

		// wrap http.request into fetch
		return new fetch$2.Promise(function (resolve, reject) {
			// build request object
			const request = new Request(url, opts);
			const options = getNodeRequestOptions(request);

			const send = (options.protocol === 'https:' ? https__default["default"] : http__default["default"]).request;
			const signal = request.signal;

			let response = null;

			const abort = function abort() {
				let error = new AbortError('The user aborted a request.');
				reject(error);
				if (request.body && request.body instanceof Stream__default["default"].Readable) {
					request.body.destroy(error);
				}
				if (!response || !response.body) return;
				response.body.emit('error', error);
			};

			if (signal && signal.aborted) {
				abort();
				return;
			}

			const abortAndFinalize = function abortAndFinalize() {
				abort();
				finalize();
			};

			// send request
			const req = send(options);
			let reqTimeout;

			if (signal) {
				signal.addEventListener('abort', abortAndFinalize);
			}

			function finalize() {
				req.abort();
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
				clearTimeout(reqTimeout);
			}

			if (request.timeout) {
				req.once('socket', function (socket) {
					reqTimeout = setTimeout(function () {
						reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
						finalize();
					}, request.timeout);
				});
			}

			req.on('error', function (err) {
				reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
				finalize();
			});

			req.on('response', function (res) {
				clearTimeout(reqTimeout);

				const headers = createHeadersLenient(res.headers);

				// HTTP fetch step 5
				if (fetch$2.isRedirect(res.statusCode)) {
					// HTTP fetch step 5.2
					const location = headers.get('Location');

					// HTTP fetch step 5.3
					const locationURL = location === null ? null : resolve_url(request.url, location);

					// HTTP fetch step 5.5
					switch (request.redirect) {
						case 'error':
							reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
							finalize();
							return;
						case 'manual':
							// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
							if (locationURL !== null) {
								// handle corrupted header
								try {
									headers.set('Location', locationURL);
								} catch (err) {
									// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
									reject(err);
								}
							}
							break;
						case 'follow':
							// HTTP-redirect fetch step 2
							if (locationURL === null) {
								break;
							}

							// HTTP-redirect fetch step 5
							if (request.counter >= request.follow) {
								reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
								finalize();
								return;
							}

							// HTTP-redirect fetch step 6 (counter increment)
							// Create a new Request object.
							const requestOpts = {
								headers: new Headers(request.headers),
								follow: request.follow,
								counter: request.counter + 1,
								agent: request.agent,
								compress: request.compress,
								method: request.method,
								body: request.body,
								signal: request.signal,
								timeout: request.timeout,
								size: request.size
							};

							// HTTP-redirect fetch step 9
							if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
								reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
								finalize();
								return;
							}

							// HTTP-redirect fetch step 11
							if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
								requestOpts.method = 'GET';
								requestOpts.body = undefined;
								requestOpts.headers.delete('content-length');
							}

							// HTTP-redirect fetch step 15
							resolve(fetch$2(new Request(locationURL, requestOpts)));
							finalize();
							return;
					}
				}

				// prepare response
				res.once('end', function () {
					if (signal) signal.removeEventListener('abort', abortAndFinalize);
				});
				let body = res.pipe(new PassThrough$1$1());

				const response_options = {
					url: request.url,
					status: res.statusCode,
					statusText: res.statusMessage,
					headers: headers,
					size: request.size,
					timeout: request.timeout,
					counter: request.counter
				};

				// HTTP-network fetch step 12.1.1.3
				const codings = headers.get('Content-Encoding');

				// HTTP-network fetch step 12.1.1.4: handle content codings

				// in following scenarios we ignore compression support
				// 1. compression support is disabled
				// 2. HEAD request
				// 3. no Content-Encoding header
				// 4. no content response (204)
				// 5. content not modified response (304)
				if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
					response = new Response(body, response_options);
					resolve(response);
					return;
				}

				// For Node v6+
				// Be less strict when decoding compressed responses, since sometimes
				// servers send slightly invalid responses that are still accepted
				// by common browsers.
				// Always using Z_SYNC_FLUSH is what cURL does.
				const zlibOptions = {
					flush: zlib__default["default"].Z_SYNC_FLUSH,
					finishFlush: zlib__default["default"].Z_SYNC_FLUSH
				};

				// for gzip
				if (codings == 'gzip' || codings == 'x-gzip') {
					body = body.pipe(zlib__default["default"].createGunzip(zlibOptions));
					response = new Response(body, response_options);
					resolve(response);
					return;
				}

				// for deflate
				if (codings == 'deflate' || codings == 'x-deflate') {
					// handle the infamous raw deflate response from old servers
					// a hack for old IIS and Apache servers
					const raw = res.pipe(new PassThrough$1$1());
					raw.once('data', function (chunk) {
						// see http://stackoverflow.com/questions/37519828
						if ((chunk[0] & 0x0F) === 0x08) {
							body = body.pipe(zlib__default["default"].createInflate());
						} else {
							body = body.pipe(zlib__default["default"].createInflateRaw());
						}
						response = new Response(body, response_options);
						resolve(response);
					});
					return;
				}

				// for br
				if (codings == 'br' && typeof zlib__default["default"].createBrotliDecompress === 'function') {
					body = body.pipe(zlib__default["default"].createBrotliDecompress());
					response = new Response(body, response_options);
					resolve(response);
					return;
				}

				// otherwise, use response as-is
				response = new Response(body, response_options);
				resolve(response);
			});

			writeToStream(req, request);
		});
	}
	/**
	 * Redirect code matching
	 *
	 * @param   Number   code  Status code
	 * @return  Boolean
	 */
	fetch$2.isRedirect = function (code) {
		return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
	};

	// expose Promise
	fetch$2.Promise = global.Promise;

	var lib$d = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': fetch$2,
		Headers: Headers,
		Request: Request,
		Response: Response,
		FetchError: FetchError
	});

	var require$$0$4 = /*@__PURE__*/getAugmentedNamespace(lib$d);

	(function (module, exports) {
	const nodeFetch = require$$0$4;
	const realFetch = nodeFetch.default || nodeFetch;

	const fetch = function (url, options) {
	  // Support schemaless URIs on the server for parity with the browser.
	  // Ex: //github.com/ -> https://github.com/
	  if (/^\/\//.test(url)) {
	    url = 'https:' + url;
	  }
	  return realFetch.call(this, url, options)
	};

	fetch.ponyfill = true;

	module.exports = exports = fetch;
	exports.fetch = fetch;
	exports.Headers = nodeFetch.Headers;
	exports.Request = nodeFetch.Request;
	exports.Response = nodeFetch.Response;

	// Needed for TypeScript consumers without esModuleInterop.
	exports.default = fetch;
	}(nodePonyfill, nodePonyfill.exports));

	var fetch$1 = nodePonyfill.exports;

	var __importDefault$r = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(httpUtils, "__esModule", { value: true });
	httpUtils.fetchJson = void 0;
	const cross_fetch_1$1 = __importDefault$r(nodePonyfill.exports);
	async function fetchJson$2(url, opts = {}) {
	    if (opts.body) {
	        Object.assign(opts, {
	            body: JSON.stringify(opts.body),
	            headers: { 'Content-Type': 'application/json' },
	        });
	    }
	    const res = await cross_fetch_1$1.default(url, opts);
	    if (!res.ok) {
	        const text = await res.text();
	        throw new Error(`HTTP request to '${url}' failed with status '${res.statusText}': ${text}`);
	    }
	    return res.json();
	}
	httpUtils.fetchJson = fetchJson$2;

	var streamUtils = {};

	var __createBinding$k = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$j = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$k = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$k(result, mod, k);
	    __setModuleDefault$j(result, mod);
	    return result;
	};
	var __importDefault$q = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(streamUtils, "__esModule", { value: true });
	streamUtils.StreamUtils = void 0;
	const cids_1$3 = __importDefault$q(src$5);
	const lodash_clonedeep_1 = __importDefault$q(lodash_clonedeep.exports);
	const u8a$7 = __importStar$k(uint8arrays$7);
	const stream_1 = stream$2;
	const streamid_1$5 = lib$f;
	class StreamUtils {
	    static streamIdFromState(state) {
	        return new streamid_1$5.StreamID(state.type, state.log[0].cid);
	    }
	    static serializeCommit(commit) {
	        const cloned = lodash_clonedeep_1.default(commit);
	        if (StreamUtils.isSignedCommitContainer(cloned)) {
	            cloned.jws.link = cloned.jws.link.toString();
	            cloned.linkedBlock = u8a$7.toString(cloned.linkedBlock, 'base64');
	            return cloned;
	        }
	        if (StreamUtils.isSignedCommit(commit)) {
	            cloned.link = cloned.link.toString();
	        }
	        if (StreamUtils.isAnchorCommit(commit)) {
	            cloned.proof = cloned.proof.toString();
	        }
	        if (cloned.id) {
	            cloned.id = cloned.id.toString();
	        }
	        if (cloned.prev) {
	            cloned.prev = cloned.prev.toString();
	        }
	        return cloned;
	    }
	    static deserializeCommit(commit) {
	        const cloned = lodash_clonedeep_1.default(commit);
	        if (StreamUtils.isSignedCommitContainer(cloned)) {
	            cloned.jws.link = new cids_1$3.default(cloned.jws.link);
	            cloned.linkedBlock = u8a$7.fromString(cloned.linkedBlock, 'base64');
	            return cloned;
	        }
	        if (StreamUtils.isSignedCommit(cloned)) {
	            cloned.link = new cids_1$3.default(cloned.link);
	        }
	        if (StreamUtils.isAnchorCommit(cloned)) {
	            cloned.proof = new cids_1$3.default(cloned.proof);
	        }
	        if (cloned.id) {
	            cloned.id = new cids_1$3.default(cloned.id);
	        }
	        if (cloned.prev) {
	            cloned.prev = new cids_1$3.default(cloned.prev);
	        }
	        return cloned;
	    }
	    static serializeState(state) {
	        const cloned = lodash_clonedeep_1.default(state);
	        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: entry.cid.toString() }));
	        if (cloned.anchorStatus != null) {
	            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];
	        }
	        if (cloned.anchorScheduledFor != null) {
	            cloned.anchorScheduledFor = new Date(cloned.anchorScheduledFor).toISOString();
	        }
	        if (cloned.anchorProof != null) {
	            cloned.anchorProof.txHash = cloned.anchorProof.txHash.toString();
	            cloned.anchorProof.root = cloned.anchorProof.root.toString();
	        }
	        if (cloned.lastAnchored != null) {
	            cloned.lastAnchored = cloned.lastAnchored.toString();
	        }
	        cloned.doctype = streamid_1$5.StreamType.nameByCode(cloned.type);
	        return cloned;
	    }
	    static deserializeState(state) {
	        const cloned = lodash_clonedeep_1.default(state);
	        if (cloned.doctype) {
	            cloned.type = streamid_1$5.StreamType.codeByName(cloned.doctype);
	            delete cloned.doctype;
	        }
	        cloned.log = cloned.log.map((entry) => ({ ...entry, cid: new cids_1$3.default(entry.cid) }));
	        if (cloned.anchorProof) {
	            cloned.anchorProof.txHash = new cids_1$3.default(cloned.anchorProof.txHash);
	            cloned.anchorProof.root = new cids_1$3.default(cloned.anchorProof.root);
	        }
	        let showScheduledFor = true;
	        if (cloned.anchorStatus) {
	            cloned.anchorStatus = stream_1.AnchorStatus[cloned.anchorStatus];
	            showScheduledFor =
	                cloned.anchorStatus !== stream_1.AnchorStatus.FAILED && cloned.anchorStatus !== stream_1.AnchorStatus.ANCHORED;
	        }
	        if (cloned.anchorScheduledFor) {
	            if (showScheduledFor) {
	                cloned.anchorScheduledFor = Date.parse(cloned.anchorScheduledFor);
	            }
	            else {
	                delete cloned.anchorScheduledFor;
	            }
	        }
	        if (cloned.lastAnchored) {
	            cloned.lastAnchored = new cids_1$3.default(cloned.lastAnchored);
	        }
	        return cloned;
	    }
	    static statesEqual(state1, state2) {
	        return (JSON.stringify(StreamUtils.serializeState(state1)) ===
	            JSON.stringify(StreamUtils.serializeState(state2)));
	    }
	    static isStateSupersetOf(state, base) {
	        if (state.log.length < base.log.length) {
	            return false;
	        }
	        for (const i in base.log) {
	            if (!state.log[i].cid.equals(base.log[i].cid)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    static async convertCommitToSignedCommitContainer(commit, ipfs) {
	        if (StreamUtils.isSignedCommit(commit)) {
	            const block = await ipfs.block.get(commit.link);
	            return {
	                jws: commit,
	                linkedBlock: block.data,
	            };
	        }
	        return commit;
	    }
	    static isSignedCommitContainer(commit) {
	        return commit && commit.jws !== undefined;
	    }
	    static isSignedCommit(commit) {
	        return commit && commit.link !== undefined;
	    }
	    static isAnchorCommit(commit) {
	        return commit && commit.proof !== undefined;
	    }
	    static isSignedCommitData(commitData) {
	        return commitData && commitData.envelope !== undefined;
	    }
	    static isAnchorCommitData(commitData) {
	        return commitData && commitData.proof !== undefined;
	    }
	}
	streamUtils.StreamUtils = StreamUtils;

	var testUtils = {};

	function partition$2(predicate, thisArg) {
	    return function (source) {
	        return [filter$1(predicate, thisArg)(source), filter$1(not$1(predicate, thisArg))(source)];
	    };
	}

	function race$2() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return raceWith.apply(void 0, __spreadArray([], __read$1(argsOrArgArray(args))));
	}

	var operators$6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		audit: audit$1,
		auditTime: auditTime$1,
		buffer: buffer$1,
		bufferCount: bufferCount$1,
		bufferTime: bufferTime$1,
		bufferToggle: bufferToggle$1,
		bufferWhen: bufferWhen$1,
		catchError: catchError$1,
		combineAll: combineAll$1,
		combineLatestAll: combineLatestAll,
		combineLatest: combineLatest$2,
		combineLatestWith: combineLatestWith,
		concat: concat$4,
		concatAll: concatAll$1,
		concatMap: concatMap$1,
		concatMapTo: concatMapTo$1,
		concatWith: concatWith,
		connect: connect$2,
		count: count$1,
		debounce: debounce$1,
		debounceTime: debounceTime$1,
		defaultIfEmpty: defaultIfEmpty$1,
		delay: delay$1,
		delayWhen: delayWhen$1,
		dematerialize: dematerialize$1,
		distinct: distinct$1,
		distinctUntilChanged: distinctUntilChanged$1,
		distinctUntilKeyChanged: distinctUntilKeyChanged$1,
		elementAt: elementAt$1,
		endWith: endWith$1,
		every: every$1,
		exhaust: exhaust$1,
		exhaustAll: exhaustAll,
		exhaustMap: exhaustMap$1,
		expand: expand$1,
		filter: filter$1,
		finalize: finalize$1,
		find: find$2,
		findIndex: findIndex$1,
		first: first$1,
		groupBy: groupBy$1,
		ignoreElements: ignoreElements$1,
		isEmpty: isEmpty$1,
		last: last$1,
		map: map$2,
		mapTo: mapTo$1,
		materialize: materialize$1,
		max: max$1,
		merge: merge$2,
		mergeAll: mergeAll$1,
		flatMap: flatMap$1,
		mergeMap: mergeMap$1,
		mergeMapTo: mergeMapTo$1,
		mergeScan: mergeScan$1,
		mergeWith: mergeWith,
		min: min$1,
		multicast: multicast$1,
		observeOn: observeOn$1,
		onErrorResumeNext: onErrorResumeNext$3,
		pairwise: pairwise$1,
		partition: partition$2,
		pluck: pluck$3,
		publish: publish$1,
		publishBehavior: publishBehavior$1,
		publishLast: publishLast$1,
		publishReplay: publishReplay$1,
		race: race$2,
		raceWith: raceWith,
		reduce: reduce$1,
		repeat: repeat$1,
		repeatWhen: repeatWhen$1,
		retry: retry$1,
		retryWhen: retryWhen$1,
		refCount: refCount$1,
		sample: sample$1,
		sampleTime: sampleTime$1,
		scan: scan$1,
		sequenceEqual: sequenceEqual$1,
		share: share$1,
		shareReplay: shareReplay$1,
		single: single$1,
		skip: skip$1,
		skipLast: skipLast$1,
		skipUntil: skipUntil$1,
		skipWhile: skipWhile$1,
		startWith: startWith$1,
		subscribeOn: subscribeOn$1,
		switchAll: switchAll$1,
		switchMap: switchMap$1,
		switchMapTo: switchMapTo$1,
		switchScan: switchScan,
		take: take$1,
		takeLast: takeLast$1,
		takeUntil: takeUntil$1,
		takeWhile: takeWhile$1,
		tap: tap$1,
		throttle: throttle$1,
		throttleTime: throttleTime$1,
		throwIfEmpty: throwIfEmpty$1,
		timeInterval: timeInterval$1,
		timeout: timeout$1,
		timeoutWith: timeoutWith$1,
		timestamp: timestamp$1,
		toArray: toArray$2,
		window: window$2,
		windowCount: windowCount$1,
		windowTime: windowTime$1,
		windowToggle: windowToggle$1,
		windowWhen: windowWhen$1,
		withLatestFrom: withLatestFrom$1,
		zip: zip$2,
		zipAll: zipAll$1,
		zipWith: zipWith
	});

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(operators$6);

	Object.defineProperty(testUtils, "__esModule", { value: true });
	testUtils.TestUtils = void 0;
	const operators_1$1 = require$$0$3;
	const rxjs_1$2 = require$$0$5;
	const streamid_1$4 = lib$f;
	class FakeRunningState extends rxjs_1$2.BehaviorSubject {
	    constructor(value) {
	        super(value);
	        this.state = this.value;
	        this.id = new streamid_1$4.StreamID(this.state.type, this.state.log[0].cid);
	    }
	}
	class TestUtils {
	    static registerChangeListener(stream) {
	        return stream.pipe(operators_1$1.take(1)).toPromise();
	    }
	    static async waitForState(stream, timeout, predicate, onFailure) {
	        if (predicate(stream.state))
	            return;
	        const timeoutPromise = new Promise((resolve) => setTimeout(resolve, timeout));
	        const completionPromise = stream.pipe(operators_1$1.filter((state) => predicate(state))).toPromise();
	        await Promise.race([timeoutPromise, completionPromise]);
	        if (!predicate(stream.state)) {
	            onFailure();
	        }
	    }
	    static runningState(state) {
	        return new FakeRunningState(state);
	    }
	}
	testUtils.TestUtils = TestUtils;

	var loggerProvider = {};

	var loggers = {};

	var lib$c = {};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends$1(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign$2 = function() {
	    __assign$2 = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __decorate$3(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __awaiter$6(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator$1(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __createBinding$j(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}

	function __exportStar(m, exports) {
	    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}
	function __await(v) {
	    return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncDelegator(o) {
	    var i, p;
	    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	}

	function __asyncValues(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function __makeTemplateObject(cooked, raw) {
	    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	    return cooked;
	}
	function __importStar$j(mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
	    result.default = mod;
	    return result;
	}

	function __importDefault$p(mod) {
	    return (mod && mod.__esModule) ? mod : { default: mod };
	}

	function __classPrivateFieldGet(receiver, privateMap) {
	    if (!privateMap.has(receiver)) {
	        throw new TypeError("attempted to get private field on non-instance");
	    }
	    return privateMap.get(receiver);
	}

	function __classPrivateFieldSet(receiver, privateMap, value) {
	    if (!privateMap.has(receiver)) {
	        throw new TypeError("attempted to set private field on non-instance");
	    }
	    privateMap.set(receiver, value);
	    return value;
	}

	var tslib_es6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		__extends: __extends$1,
		get __assign () { return __assign$2; },
		__rest: __rest,
		__decorate: __decorate$3,
		__param: __param,
		__metadata: __metadata,
		__awaiter: __awaiter$6,
		__generator: __generator$1,
		__createBinding: __createBinding$j,
		__exportStar: __exportStar,
		__values: __values,
		__read: __read,
		__spread: __spread,
		__spreadArrays: __spreadArrays,
		__await: __await,
		__asyncGenerator: __asyncGenerator,
		__asyncDelegator: __asyncDelegator,
		__asyncValues: __asyncValues,
		__makeTemplateObject: __makeTemplateObject,
		__importStar: __importStar$j,
		__importDefault: __importDefault$p,
		__classPrivateFieldGet: __classPrivateFieldGet,
		__classPrivateFieldSet: __classPrivateFieldSet
	});

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

	var Logger$2 = {};

	var lib$b = {exports: {}};

	var colors$1 = {exports: {}};

	var styles = {exports: {}};

	/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	(function (module) {
	var styles = {};
	module['exports'] = styles;

	var codes = {
	  reset: [0, 0],

	  bold: [1, 22],
	  dim: [2, 22],
	  italic: [3, 23],
	  underline: [4, 24],
	  inverse: [7, 27],
	  hidden: [8, 28],
	  strikethrough: [9, 29],

	  black: [30, 39],
	  red: [31, 39],
	  green: [32, 39],
	  yellow: [33, 39],
	  blue: [34, 39],
	  magenta: [35, 39],
	  cyan: [36, 39],
	  white: [37, 39],
	  gray: [90, 39],
	  grey: [90, 39],

	  brightRed: [91, 39],
	  brightGreen: [92, 39],
	  brightYellow: [93, 39],
	  brightBlue: [94, 39],
	  brightMagenta: [95, 39],
	  brightCyan: [96, 39],
	  brightWhite: [97, 39],

	  bgBlack: [40, 49],
	  bgRed: [41, 49],
	  bgGreen: [42, 49],
	  bgYellow: [43, 49],
	  bgBlue: [44, 49],
	  bgMagenta: [45, 49],
	  bgCyan: [46, 49],
	  bgWhite: [47, 49],
	  bgGray: [100, 49],
	  bgGrey: [100, 49],

	  bgBrightRed: [101, 49],
	  bgBrightGreen: [102, 49],
	  bgBrightYellow: [103, 49],
	  bgBrightBlue: [104, 49],
	  bgBrightMagenta: [105, 49],
	  bgBrightCyan: [106, 49],
	  bgBrightWhite: [107, 49],

	  // legacy styles for colors pre v1.0.0
	  blackBG: [40, 49],
	  redBG: [41, 49],
	  greenBG: [42, 49],
	  yellowBG: [43, 49],
	  blueBG: [44, 49],
	  magentaBG: [45, 49],
	  cyanBG: [46, 49],
	  whiteBG: [47, 49],

	};

	Object.keys(codes).forEach(function(key) {
	  var val = codes[key];
	  var style = styles[key] = [];
	  style.open = '\u001b[' + val[0] + 'm';
	  style.close = '\u001b[' + val[1] + 'm';
	});
	}(styles));

	/*
	MIT License

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy of
	this software and associated documentation files (the "Software"), to deal in
	the Software without restriction, including without limitation the rights to
	use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	of the Software, and to permit persons to whom the Software is furnished to do
	so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	*/

	var hasFlag$1 = function(flag, argv) {
	  argv = argv || process.argv;

	  var terminatorPos = argv.indexOf('--');
	  var prefix = /^-{1,2}/.test(flag) ? '' : '--';
	  var pos = argv.indexOf(prefix + flag);

	  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};

	/*
	The MIT License (MIT)

	Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	var os$1 = require$$0__default$1["default"];
	var hasFlag = hasFlag$1;

	var env = process.env;

	var forceColor = void 0;
	if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
	  forceColor = false;
	} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')
	           || hasFlag('color=always')) {
	  forceColor = true;
	}
	if ('FORCE_COLOR' in env) {
	  forceColor = env.FORCE_COLOR.length === 0
	    || parseInt(env.FORCE_COLOR, 10) !== 0;
	}

	function translateLevel(level) {
	  if (level === 0) {
	    return false;
	  }

	  return {
	    level: level,
	    hasBasic: true,
	    has256: level >= 2,
	    has16m: level >= 3,
	  };
	}

	function supportsColor(stream) {
	  if (forceColor === false) {
	    return 0;
	  }

	  if (hasFlag('color=16m') || hasFlag('color=full')
	      || hasFlag('color=truecolor')) {
	    return 3;
	  }

	  if (hasFlag('color=256')) {
	    return 2;
	  }

	  if (stream && !stream.isTTY && forceColor !== true) {
	    return 0;
	  }

	  var min = forceColor ? 1 : 0;

	  if (process.platform === 'win32') {
	    // Node.js 7.5.0 is the first version of Node.js to include a patch to
	    // libuv that enables 256 color output on Windows. Anything earlier and it
	    // won't work. However, here we target Node.js 8 at minimum as it is an LTS
	    // release, and Node.js 7 is not. Windows 10 build 10586 is the first
	    // Windows release that supports 256 colors. Windows 10 build 14931 is the
	    // first release that supports 16m/TrueColor.
	    var osRelease = os$1.release().split('.');
	    if (Number(process.versions.node.split('.')[0]) >= 8
	        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
	      return Number(osRelease[2]) >= 14931 ? 3 : 2;
	    }

	    return 1;
	  }

	  if ('CI' in env) {
	    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {
	      return sign in env;
	    }) || env.CI_NAME === 'codeship') {
	      return 1;
	    }

	    return min;
	  }

	  if ('TEAMCITY_VERSION' in env) {
	    return (/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0
	    );
	  }

	  if ('TERM_PROGRAM' in env) {
	    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

	    switch (env.TERM_PROGRAM) {
	      case 'iTerm.app':
	        return version >= 3 ? 3 : 2;
	      case 'Hyper':
	        return 3;
	      case 'Apple_Terminal':
	        return 2;
	      // No default
	    }
	  }

	  if (/-256(color)?$/i.test(env.TERM)) {
	    return 2;
	  }

	  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
	    return 1;
	  }

	  if ('COLORTERM' in env) {
	    return 1;
	  }

	  if (env.TERM === 'dumb') {
	    return min;
	  }

	  return min;
	}

	function getSupportLevel(stream) {
	  var level = supportsColor(stream);
	  return translateLevel(level);
	}

	var supportsColors = {
	  supportsColor: getSupportLevel,
	  stdout: getSupportLevel(process.stdout),
	  stderr: getSupportLevel(process.stderr),
	};

	var trap = {exports: {}};

	(function (module) {
	module['exports'] = function runTheTrap(text, options) {
	  var result = '';
	  text = text || 'Run the trap, drop the bass';
	  text = text.split('');
	  var trap = {
	    a: ['\u0040', '\u0104', '\u023a', '\u0245', '\u0394', '\u039b', '\u0414'],
	    b: ['\u00df', '\u0181', '\u0243', '\u026e', '\u03b2', '\u0e3f'],
	    c: ['\u00a9', '\u023b', '\u03fe'],
	    d: ['\u00d0', '\u018a', '\u0500', '\u0501', '\u0502', '\u0503'],
	    e: ['\u00cb', '\u0115', '\u018e', '\u0258', '\u03a3', '\u03be', '\u04bc',
	      '\u0a6c'],
	    f: ['\u04fa'],
	    g: ['\u0262'],
	    h: ['\u0126', '\u0195', '\u04a2', '\u04ba', '\u04c7', '\u050a'],
	    i: ['\u0f0f'],
	    j: ['\u0134'],
	    k: ['\u0138', '\u04a0', '\u04c3', '\u051e'],
	    l: ['\u0139'],
	    m: ['\u028d', '\u04cd', '\u04ce', '\u0520', '\u0521', '\u0d69'],
	    n: ['\u00d1', '\u014b', '\u019d', '\u0376', '\u03a0', '\u048a'],
	    o: ['\u00d8', '\u00f5', '\u00f8', '\u01fe', '\u0298', '\u047a', '\u05dd',
	      '\u06dd', '\u0e4f'],
	    p: ['\u01f7', '\u048e'],
	    q: ['\u09cd'],
	    r: ['\u00ae', '\u01a6', '\u0210', '\u024c', '\u0280', '\u042f'],
	    s: ['\u00a7', '\u03de', '\u03df', '\u03e8'],
	    t: ['\u0141', '\u0166', '\u0373'],
	    u: ['\u01b1', '\u054d'],
	    v: ['\u05d8'],
	    w: ['\u0428', '\u0460', '\u047c', '\u0d70'],
	    x: ['\u04b2', '\u04fe', '\u04fc', '\u04fd'],
	    y: ['\u00a5', '\u04b0', '\u04cb'],
	    z: ['\u01b5', '\u0240'],
	  };
	  text.forEach(function(c) {
	    c = c.toLowerCase();
	    var chars = trap[c] || [' '];
	    var rand = Math.floor(Math.random() * chars.length);
	    if (typeof trap[c] !== 'undefined') {
	      result += trap[c][rand];
	    } else {
	      result += c;
	    }
	  });
	  return result;
	};
	}(trap));

	var zalgo = {exports: {}};

	(function (module) {
	// please no
	module['exports'] = function zalgo(text, options) {
	  text = text || '   he is here   ';
	  var soul = {
	    'up': [
	      '̍', '̎', '̄', '̅',
	      '̿', '̑', '̆', '̐',
	      '͒', '͗', '͑', '̇',
	      '̈', '̊', '͂', '̓',
	      '̈', '͊', '͋', '͌',
	      '̃', '̂', '̌', '͐',
	      '̀', '́', '̋', '̏',
	      '̒', '̓', '̔', '̽',
	      '̉', 'ͣ', 'ͤ', 'ͥ',
	      'ͦ', 'ͧ', 'ͨ', 'ͩ',
	      'ͪ', 'ͫ', 'ͬ', 'ͭ',
	      'ͮ', 'ͯ', '̾', '͛',
	      '͆', '̚',
	    ],
	    'down': [
	      '̖', '̗', '̘', '̙',
	      '̜', '̝', '̞', '̟',
	      '̠', '̤', '̥', '̦',
	      '̩', '̪', '̫', '̬',
	      '̭', '̮', '̯', '̰',
	      '̱', '̲', '̳', '̹',
	      '̺', '̻', '̼', 'ͅ',
	      '͇', '͈', '͉', '͍',
	      '͎', '͓', '͔', '͕',
	      '͖', '͙', '͚', '̣',
	    ],
	    'mid': [
	      '̕', '̛', '̀', '́',
	      '͘', '̡', '̢', '̧',
	      '̨', '̴', '̵', '̶',
	      '͜', '͝', '͞',
	      '͟', '͠', '͢', '̸',
	      '̷', '͡', ' ҉',
	    ],
	  };
	  var all = [].concat(soul.up, soul.down, soul.mid);

	  function randomNumber(range) {
	    var r = Math.floor(Math.random() * range);
	    return r;
	  }

	  function isChar(character) {
	    var bool = false;
	    all.filter(function(i) {
	      bool = (i === character);
	    });
	    return bool;
	  }


	  function heComes(text, options) {
	    var result = '';
	    var counts;
	    var l;
	    options = options || {};
	    options['up'] =
	      typeof options['up'] !== 'undefined' ? options['up'] : true;
	    options['mid'] =
	      typeof options['mid'] !== 'undefined' ? options['mid'] : true;
	    options['down'] =
	      typeof options['down'] !== 'undefined' ? options['down'] : true;
	    options['size'] =
	      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';
	    text = text.split('');
	    for (l in text) {
	      if (isChar(l)) {
	        continue;
	      }
	      result = result + text[l];
	      counts = {'up': 0, 'down': 0, 'mid': 0};
	      switch (options.size) {
	        case 'mini':
	          counts.up = randomNumber(8);
	          counts.mid = randomNumber(2);
	          counts.down = randomNumber(8);
	          break;
	        case 'maxi':
	          counts.up = randomNumber(16) + 3;
	          counts.mid = randomNumber(4) + 1;
	          counts.down = randomNumber(64) + 3;
	          break;
	        default:
	          counts.up = randomNumber(8) + 1;
	          counts.mid = randomNumber(6) / 2;
	          counts.down = randomNumber(8) + 1;
	          break;
	      }

	      var arr = ['up', 'mid', 'down'];
	      for (var d in arr) {
	        var index = arr[d];
	        for (var i = 0; i <= counts[index]; i++) {
	          if (options[index]) {
	            result = result + soul[index][randomNumber(soul[index].length)];
	          }
	        }
	      }
	    }
	    return result;
	  }
	  // don't summon him
	  return heComes(text, options);
	};
	}(zalgo));

	var america = {exports: {}};

	(function (module) {
	module['exports'] = function(colors) {
	  return function(letter, i, exploded) {
	    if (letter === ' ') return letter;
	    switch (i%3) {
	      case 0: return colors.red(letter);
	      case 1: return colors.white(letter);
	      case 2: return colors.blue(letter);
	    }
	  };
	};
	}(america));

	var zebra = {exports: {}};

	(function (module) {
	module['exports'] = function(colors) {
	  return function(letter, i, exploded) {
	    return i % 2 === 0 ? letter : colors.inverse(letter);
	  };
	};
	}(zebra));

	var rainbow = {exports: {}};

	(function (module) {
	module['exports'] = function(colors) {
	  // RoY G BiV
	  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];
	  return function(letter, i, exploded) {
	    if (letter === ' ') {
	      return letter;
	    } else {
	      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
	    }
	  };
	};
	}(rainbow));

	var random$3 = {exports: {}};

	(function (module) {
	module['exports'] = function(colors) {
	  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',
	    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',
	    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];
	  return function(letter, i, exploded) {
	    return letter === ' ' ? letter :
	      colors[
	          available[Math.round(Math.random() * (available.length - 2))]
	      ](letter);
	  };
	};
	}(random$3));

	/*

	The MIT License (MIT)

	Original Library
	  - Copyright (c) Marak Squires

	Additional functionality
	 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/

	(function (module) {
	var colors = {};
	module['exports'] = colors;

	colors.themes = {};

	var util = require$$2__default["default"];
	var ansiStyles = colors.styles = styles.exports;
	var defineProps = Object.defineProperties;
	var newLineRegex = new RegExp(/[\r\n]+/g);

	colors.supportsColor = supportsColors.supportsColor;

	if (typeof colors.enabled === 'undefined') {
	  colors.enabled = colors.supportsColor() !== false;
	}

	colors.enable = function() {
	  colors.enabled = true;
	};

	colors.disable = function() {
	  colors.enabled = false;
	};

	colors.stripColors = colors.strip = function(str) {
	  return ('' + str).replace(/\x1B\[\d+m/g, '');
	};

	// eslint-disable-next-line no-unused-vars
	colors.stylize = function stylize(str, style) {
	  if (!colors.enabled) {
	    return str+'';
	  }

	  var styleMap = ansiStyles[style];

	  // Stylize should work for non-ANSI styles, too
	  if(!styleMap && style in colors){
	    // Style maps like trap operate as functions on strings;
	    // they don't have properties like open or close.
	    return colors[style](str);
	  }

	  return styleMap.open + str + styleMap.close;
	};

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
	var escapeStringRegexp = function(str) {
	  if (typeof str !== 'string') {
	    throw new TypeError('Expected a string');
	  }
	  return str.replace(matchOperatorsRe, '\\$&');
	};

	function build(_styles) {
	  var builder = function builder() {
	    return applyStyle.apply(builder, arguments);
	  };
	  builder._styles = _styles;
	  // __proto__ is used because we must return a function, but there is
	  // no way to create a function with a different prototype.
	  builder.__proto__ = proto;
	  return builder;
	}

	var styles$1 = (function() {
	  var ret = {};
	  ansiStyles.grey = ansiStyles.gray;
	  Object.keys(ansiStyles).forEach(function(key) {
	    ansiStyles[key].closeRe =
	      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
	    ret[key] = {
	      get: function() {
	        return build(this._styles.concat(key));
	      },
	    };
	  });
	  return ret;
	})();

	var proto = defineProps(function colors() {}, styles$1);

	function applyStyle() {
	  var args = Array.prototype.slice.call(arguments);

	  var str = args.map(function(arg) {
	    // Use weak equality check so we can colorize null/undefined in safe mode
	    if (arg != null && arg.constructor === String) {
	      return arg;
	    } else {
	      return util.inspect(arg);
	    }
	  }).join(' ');

	  if (!colors.enabled || !str) {
	    return str;
	  }

	  var newLinesPresent = str.indexOf('\n') != -1;

	  var nestedStyles = this._styles;

	  var i = nestedStyles.length;
	  while (i--) {
	    var code = ansiStyles[nestedStyles[i]];
	    str = code.open + str.replace(code.closeRe, code.open) + code.close;
	    if (newLinesPresent) {
	      str = str.replace(newLineRegex, function(match) {
	        return code.close + match + code.open;
	      });
	    }
	  }

	  return str;
	}

	colors.setTheme = function(theme) {
	  if (typeof theme === 'string') {
	    console.log('colors.setTheme now only accepts an object, not a string.  ' +
	      'If you are trying to set a theme from a file, it is now your (the ' +
	      'caller\'s) responsibility to require the file.  The old syntax ' +
	      'looked like colors.setTheme(__dirname + ' +
	      '\'/../themes/generic-logging.js\'); The new syntax looks like '+
	      'colors.setTheme(require(__dirname + ' +
	      '\'/../themes/generic-logging.js\'));');
	    return;
	  }
	  for (var style in theme) {
	    (function(style) {
	      colors[style] = function(str) {
	        if (typeof theme[style] === 'object') {
	          var out = str;
	          for (var i in theme[style]) {
	            out = colors[theme[style][i]](out);
	          }
	          return out;
	        }
	        return colors[theme[style]](str);
	      };
	    })(style);
	  }
	};

	function init() {
	  var ret = {};
	  Object.keys(styles$1).forEach(function(name) {
	    ret[name] = {
	      get: function() {
	        return build([name]);
	      },
	    };
	  });
	  return ret;
	}

	var sequencer = function sequencer(map, str) {
	  var exploded = str.split('');
	  exploded = exploded.map(map);
	  return exploded.join('');
	};

	// custom formatter methods
	colors.trap = trap.exports;
	colors.zalgo = zalgo.exports;

	// maps
	colors.maps = {};
	colors.maps.america = america.exports(colors);
	colors.maps.zebra = zebra.exports(colors);
	colors.maps.rainbow = rainbow.exports(colors);
	colors.maps.random = random$3.exports(colors);

	for (var map in colors.maps) {
	  (function(map) {
	    colors[map] = function(str) {
	      return sequencer(colors.maps[map], str);
	    };
	  })(map);
	}

	defineProps(colors, init());
	}(colors$1));

	var extendStringPrototype = {exports: {}};

	(function (module) {
	var colors = colors$1.exports;

	module['exports'] = function() {
	  //
	  // Extends prototype of native string object to allow for "foo".red syntax
	  //
	  var addProperty = function(color, func) {
	    String.prototype.__defineGetter__(color, func);
	  };

	  addProperty('strip', function() {
	    return colors.strip(this);
	  });

	  addProperty('stripColors', function() {
	    return colors.strip(this);
	  });

	  addProperty('trap', function() {
	    return colors.trap(this);
	  });

	  addProperty('zalgo', function() {
	    return colors.zalgo(this);
	  });

	  addProperty('zebra', function() {
	    return colors.zebra(this);
	  });

	  addProperty('rainbow', function() {
	    return colors.rainbow(this);
	  });

	  addProperty('random', function() {
	    return colors.random(this);
	  });

	  addProperty('america', function() {
	    return colors.america(this);
	  });

	  //
	  // Iterate through all default styles and colors
	  //
	  var x = Object.keys(colors.styles);
	  x.forEach(function(style) {
	    addProperty(style, function() {
	      return colors.stylize(this, style);
	    });
	  });

	  function applyTheme(theme) {
	    //
	    // Remark: This is a list of methods that exist
	    // on String that you should not overwrite.
	    //
	    var stringPrototypeBlacklist = [
	      '__defineGetter__', '__defineSetter__', '__lookupGetter__',
	      '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty',
	      'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString',
	      'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length',
	      'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice',
	      'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase',
	      'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight',
	    ];

	    Object.keys(theme).forEach(function(prop) {
	      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
	        console.log('warn: '.red + ('String.prototype' + prop).magenta +
	          ' is probably something you don\'t want to override.  ' +
	          'Ignoring style name');
	      } else {
	        if (typeof(theme[prop]) === 'string') {
	          colors[prop] = colors[theme[prop]];
	          addProperty(prop, function() {
	            return colors[prop](this);
	          });
	        } else {
	          var themePropApplicator = function(str) {
	            var ret = str || this;
	            for (var t = 0; t < theme[prop].length; t++) {
	              ret = colors[theme[prop][t]](ret);
	            }
	            return ret;
	          };
	          addProperty(prop, themePropApplicator);
	          colors[prop] = function(str) {
	            return themePropApplicator(str);
	          };
	        }
	      }
	    });
	  }

	  colors.setTheme = function(theme) {
	    if (typeof theme === 'string') {
	      console.log('colors.setTheme now only accepts an object, not a string. ' +
	        'If you are trying to set a theme from a file, it is now your (the ' +
	        'caller\'s) responsibility to require the file.  The old syntax ' +
	        'looked like colors.setTheme(__dirname + ' +
	        '\'/../themes/generic-logging.js\'); The new syntax looks like '+
	        'colors.setTheme(require(__dirname + ' +
	        '\'/../themes/generic-logging.js\'));');
	      return;
	    } else {
	      applyTheme(theme);
	    }
	  };
	};
	}(extendStringPrototype));

	(function (module) {
	var colors = colors$1.exports;
	module['exports'] = colors;

	// Remark: By default, colors will add style properties to String.prototype.
	//
	// If you don't wish to extend String.prototype, you can do this instead and
	// native String will not be touched:
	//
	//   var colors = require('colors/safe);
	//   colors.red("foo")
	//
	//
	extendStringPrototype.exports();
	}(lib$b));

	var constants$1 = {};

	Object.defineProperty(constants$1, "__esModule", { value: true });
	constants$1.DEFAULT_LOG_FILE_NAME = 'overnight.log';
	constants$1.loggerModeArr = ["CONSOLE", "FILE", "CUSTOM",
	    "OFF"];
	constants$1.INFO = {
	    color: 'green',
	    prefix: 'INFO',
	};
	constants$1.IMP = {
	    color: 'magenta',
	    prefix: 'IMPORTANT',
	};
	constants$1.WARN = {
	    color: 'yellow',
	    prefix: 'WARNING',
	};
	constants$1.ERR = {
	    color: 'red',
	    prefix: 'ERROR',
	};

	Object.defineProperty(Logger$2, "__esModule", { value: true });
	var colors = lib$b.exports;
	var fs = require$$1__default["default"];
	var os = require$$0__default$1["default"];
	var path = require$$1__default$1["default"];
	var util$9 = require$$2__default["default"];
	var constants_1$1 = constants$1;
	var Logger$1 = (function () {
	    function Logger(mode, filePath, rmTimestamp, customLogger) {
	        this._mode = Logger.initMode();
	        this._filePath = Logger.initFilePath();
	        this._rmTimestamp = Logger.initRmTimestamp();
	        this._customLogger = null;
	        if (mode) {
	            this._mode = mode;
	        }
	        if (filePath) {
	            this._filePath = filePath;
	        }
	        if (rmTimestamp) {
	            this._rmTimestamp = rmTimestamp;
	        }
	        if (customLogger) {
	            this._customLogger = customLogger;
	        }
	    }
	    Logger.initFilePath = function () {
	        if (process.env.OVERNIGHT_LOGGER_FILEPATH) {
	            return process.env.OVERNIGHT_LOGGER_FILEPATH;
	        }
	        else {
	            return path.join(os.homedir(), constants_1$1.DEFAULT_LOG_FILE_NAME);
	        }
	    };
	    Logger.initMode = function () {
	        var mode = (process.env.OVERNIGHT_LOGGER_MODE || '').toLocaleUpperCase();
	        for (var _i = 0, loggerModeArr_1 = constants_1$1.loggerModeArr; _i < loggerModeArr_1.length; _i++) {
	            var val = loggerModeArr_1[_i];
	            if (mode === val) {
	                return mode;
	            }
	        }
	        return "CONSOLE";
	    };
	    Logger.initRmTimestamp = function () {
	        var rmTimestamp = (process.env.OVERNIGHT_LOGGER_RM_TIMESTAMP || '').toLocaleUpperCase();
	        return rmTimestamp === 'TRUE';
	    };
	    Object.defineProperty(Logger, "mode", {
	        get: function () {
	            return Logger._mode;
	        },
	        set: function (mode) {
	            Logger._mode = mode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "mode", {
	        get: function () {
	            return this._mode;
	        },
	        set: function (mode) {
	            this._mode = mode;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger, "filePath", {
	        get: function () {
	            return Logger._filePath;
	        },
	        set: function (filePath) {
	            Logger._filePath = filePath;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "filePath", {
	        get: function () {
	            return this._filePath;
	        },
	        set: function (filePath) {
	            this._filePath = filePath;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger, "rmTimestamp", {
	        get: function () {
	            return Logger._rmTimestamp;
	        },
	        set: function (rmTimestamp) {
	            Logger._rmTimestamp = rmTimestamp;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "rmTimestamp", {
	        get: function () {
	            return this._rmTimestamp;
	        },
	        set: function (rmTimestamp) {
	            this._rmTimestamp = rmTimestamp;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger, "customLogger", {
	        get: function () {
	            return Logger._customLogger;
	        },
	        set: function (customLogger) {
	            Logger._customLogger = customLogger;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Logger.prototype, "customLogger", {
	        get: function () {
	            return this._customLogger;
	        },
	        set: function (customLogger) {
	            this._customLogger = customLogger;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Logger.Info = function (content, printFull) {
	        Logger.PrintLogHelper(content, printFull || false, constants_1$1.INFO);
	    };
	    Logger.Imp = function (content, printFull) {
	        Logger.PrintLogHelper(content, printFull || false, constants_1$1.IMP);
	    };
	    Logger.Warn = function (content, printFull) {
	        Logger.PrintLogHelper(content, printFull || false, constants_1$1.WARN);
	    };
	    Logger.Err = function (content, printFull) {
	        Logger.PrintLogHelper(content, printFull || false, constants_1$1.ERR);
	    };
	    Logger.PrintLogHelper = function (content, printFull, logType) {
	        Logger.PrintLog(content, printFull, logType, Logger.mode, Logger.rmTimestamp, Logger.filePath, Logger.customLogger);
	    };
	    Logger.prototype.info = function (content, printFull) {
	        this.printLogHelper(content, printFull || false, constants_1$1.INFO);
	    };
	    Logger.prototype.imp = function (content, printFull) {
	        this.printLogHelper(content, printFull || false, constants_1$1.IMP);
	    };
	    Logger.prototype.warn = function (content, printFull) {
	        this.printLogHelper(content, printFull || false, constants_1$1.WARN);
	    };
	    Logger.prototype.err = function (content, printFull) {
	        this.printLogHelper(content, printFull || false, constants_1$1.ERR);
	    };
	    Logger.prototype.printLogHelper = function (content, printFull, logType) {
	        Logger.PrintLog(content, printFull, logType, this.mode, this.rmTimestamp, this.filePath, this.customLogger);
	    };
	    Logger.PrintLog = function (content, printFull, logType, mode, rmTimestamp, filePath, customLogger) {
	        if (mode === "OFF") {
	            return;
	        }
	        if (printFull) {
	            content = util$9.inspect(content);
	        }
	        if (!rmTimestamp) {
	            var time = '[' + new Date().toISOString() + ']: ';
	            content = time + content;
	        }
	        if (mode === "CONSOLE") {
	            content = colors[logType.color](content);
	            console.log(content);
	        }
	        else if (mode === "FILE") {
	            Logger.WriteToFile(logType.prefix + content + '\n', filePath);
	        }
	        else if (mode === "CUSTOM") {
	            if (customLogger) {
	                customLogger.sendLog(content, logType.prefix);
	            }
	            else {
	                throw Error(Logger.CUSTOM_LOGGER_ERR);
	            }
	        }
	    };
	    Logger.WriteToFile = function (content, filePath) {
	        try {
	            var fileExists = Logger.CheckExists(filePath);
	            if (fileExists) {
	                fs.appendFileSync(filePath, content);
	            }
	            else {
	                fs.writeFileSync(filePath, content);
	            }
	        }
	        catch (err) {
	            console.error(err);
	        }
	    };
	    Logger.CheckExists = function (filePath) {
	        try {
	            fs.accessSync(filePath);
	            return true;
	        }
	        catch (e) {
	            return false;
	        }
	    };
	    Logger._mode = Logger.initMode();
	    Logger._filePath = Logger.initFilePath();
	    Logger._rmTimestamp = Logger.initRmTimestamp();
	    Logger._customLogger = null;
	    Logger.CUSTOM_LOGGER_ERR = 'Custom logger mode set to true, but no ' +
	        'custom logger was provided.';
	    return Logger;
	}());
	Logger$2.Logger = Logger$1;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var tslib_1 = require$$0$2;
	tslib_1.__exportStar(Logger$2, exports);

	}(lib$c));

	var streaming$1 = {};

	var through$2 = {exports: {}};

	(function (module, exports) {
	var Stream = Stream__default["default"];

	// through
	//
	// a stream that does nothing but re-emit the input.
	// useful for aggregating a series of changing but not ending streams into one stream)

	module.exports = through;
	through.through = through;

	//create a readable writable stream.

	function through (write, end, opts) {
	  write = write || function (data) { this.queue(data); };
	  end = end || function () { this.queue(null); };

	  var ended = false, destroyed = false, buffer = [], _ended = false;
	  var stream = new Stream();
	  stream.readable = stream.writable = true;
	  stream.paused = false;

	//  stream.autoPause   = !(opts && opts.autoPause   === false)
	  stream.autoDestroy = !(opts && opts.autoDestroy === false);

	  stream.write = function (data) {
	    write.call(this, data);
	    return !stream.paused
	  };

	  function drain() {
	    while(buffer.length && !stream.paused) {
	      var data = buffer.shift();
	      if(null === data)
	        return stream.emit('end')
	      else
	        stream.emit('data', data);
	    }
	  }

	  stream.queue = stream.push = function (data) {
	//    console.error(ended)
	    if(_ended) return stream
	    if(data === null) _ended = true;
	    buffer.push(data);
	    drain();
	    return stream
	  };

	  //this will be registered as the first 'end' listener
	  //must call destroy next tick, to make sure we're after any
	  //stream piped from here.
	  //this is only a problem if end is not emitted synchronously.
	  //a nicer way to do this is to make sure this is the last listener for 'end'

	  stream.on('end', function () {
	    stream.readable = false;
	    if(!stream.writable && stream.autoDestroy)
	      process.nextTick(function () {
	        stream.destroy();
	      });
	  });

	  function _end () {
	    stream.writable = false;
	    end.call(stream);
	    if(!stream.readable && stream.autoDestroy)
	      stream.destroy();
	  }

	  stream.end = function (data) {
	    if(ended) return
	    ended = true;
	    if(arguments.length) stream.write(data);
	    _end(); // will emit or queue
	    return stream
	  };

	  stream.destroy = function () {
	    if(destroyed) return
	    destroyed = true;
	    ended = true;
	    buffer.length = 0;
	    stream.writable = stream.readable = false;
	    stream.emit('close');
	    return stream
	  };

	  stream.pause = function () {
	    if(stream.paused) return
	    stream.paused = true;
	    return stream
	  };

	  stream.resume = function () {
	    if(stream.paused) {
	      stream.paused = false;
	      stream.emit('resume');
	    }
	    drain();
	    //may have become paused again,
	    //as drain emits 'data'.
	    if(!stream.paused)
	      stream.emit('drain');
	    return stream
	  };
	  return stream
	}
	}(through$2));

	//filter will reemit the data if cb(err,pass) pass is truthy

	// reduce is more tricky
	// maybe we want to group the reductions or emit progress updates occasionally
	// the most basic reduce just emits one 'data' event after it has recieved 'end'


	var through$1 = through$2.exports;
	var Decoder$1 = require$$1__default$2["default"].StringDecoder;

	var split_1 = split$1;

	//TODO pass in a function to map across the lines.

	function split$1 (matcher, mapper) {
	  var decoder = new Decoder$1();
	  var soFar = '';
	  if('function' === typeof matcher)
	    mapper = matcher, matcher = null;
	  if (!matcher)
	    matcher = /\r?\n/;

	  function emit(stream, piece) {
	    if(mapper) {
	      try {
	        piece = mapper(piece);
	      }
	      catch (err) {
	        return stream.emit('error', err)
	      }
	      if('undefined' !== typeof piece)
	        stream.queue(piece);
	    }
	    else
	      stream.queue(piece);
	  }

	  function next (stream, buffer) { 
	    var pieces = (soFar + buffer).split(matcher);
	    soFar = pieces.pop();

	    for (var i = 0; i < pieces.length; i++) {
	      var piece = pieces[i];
	      emit(stream, piece);
	    }
	  }

	  return through$1(function (b) {
	    next(this, decoder.write(b));
	  },
	  function () {
	    if(decoder.end) 
	      next(this, decoder.end());
	    if(soFar != null)
	      emit(this, soFar);
	    this.queue(null);
	  })
	}

	var split       = split_1;
	var through     = through$2.exports;
	var PassThrough = Stream__default["default"].PassThrough;

	//returns a stream that splits and parses logfmt into objects
	streaming$1.streamParser = function(options){

	  var streamParser = new PassThrough();
	  var self = this;

	  var logfmtStream = through(function(line){
	    if(line !== '') this.queue(self.parse(line));
	  });

	  // When a source stream is piped to us, undo that pipe, and save
	  // off the source stream piped into our internally managed streams.
	  streamParser.on('pipe', function(source) {
	    if(source.unpipe) source.unpipe(this);
	    this.transformStream = source.pipe(split()).pipe(logfmtStream);
	  });

	  // When we're piped to another stream, instead pipe our internal
	  // transform stream to that destination.
	  streamParser.pipe = function(destination, options) {
	    return this.transformStream.pipe(destination, options);
	  };

	  return streamParser;
	};

	// returns a stream that stringifies objects
	streaming$1.streamStringify = function(options){
	  var self = this;
	  var options = options || {};
	  if(options.hasOwnProperty('delimiter')){
	    var delim = options.delimiter;
	  }else {
	    var delim = "\n";
	  }

	  return through(function(data){
	    this.queue(self.stringify(data) + delim);
	  }, function(){
	    this.queue(null);
	  })
	};

	var body_parser = {exports: {}};

	(function (module, exports) {
	/*
	Module dependencies.
	*/

	/*
	JSON:

	Parse logplex request bodies, providing the
	parsed object as `req.body`.

	Options: none

	@param content_type {String} use when Content-Type matches this string
	@param parser {Function} parsing function takes String body and returns new body
	@return {Function}
	@api public
	*/

	module.exports = function(options) {
	  if (options == null) options = {};

	  return function(req, res, next) {
	    if (req._body) return next();
	    var is_mime = req.header('content-type') === options.contentType;
	    if (!is_mime) return next();
	    req._body = true;
	    req.body = req.body || {};
	    var buf;
	    buf = "";
	    req.setEncoding("utf8");
	    req.on("data", function(chunk) {
	      return buf += chunk;
	    });
	    req.on("end", function() {
	      try {
	        var lines = [];
	        buf.trim().split("\n").forEach(function(line){
	          lines.push(options.parser(line));
	        });
	        req.body = lines;
	      } catch (err) {
	        err.body = buf;
	        err.status = 400;
	        return next(err);
	      }
	      return next();
	    });
	  };
	};
	}(body_parser));

	var body_parser_stream = {exports: {}};

	(function (module, exports) {
	Stream__default["default"].Readable;
	var PassThrough = Stream__default["default"].PassThrough;
	var logfmt   = logfmt_1;

	module.exports = function(options){
	  if(options == null) options = {};
	  var mime = options.contentType || "application/logplex-1";

	  return function(req, res, next) {

	    //honor already parsed bodies
	    if (req._body) return next();

	    //mime-type check
	    var is_mime = req.header('content-type') === mime;
	    if (!is_mime) return next();
	    req._body = true;
	    req.body = new PassThrough({objectMode: true});
	    req.pipe(logfmt.streamParser()).pipe(req.body);

	    return next();
	  }
	};
	}(body_parser_stream));

	var logfmt_parser = {};

	(function (exports) {
	exports.debug = false;

	exports.parse = function(line) {
	  var key = '';
	  var value = '';
	  var in_key    = false;
	  var in_value  = false;
	  var in_quote  = false;
	  var had_quote = false;
	  var object    = {};
	  var debug     = exports.debug;

	  if(line[line.length - 1] == '\n'){
	    line = line.slice(0,line.length - 1);
	  }

	  for(var i=0; i <= line.length; i++){

	    if((line[i] == ' ' && !in_quote) || i == line.length){
	      if(in_key && key.length > 0){
	        object[key] = true;
	      }else if(in_value){
	        if(value == 'true') value = true;
	        else if(value == 'false') value = false;
	        else if(value === '' && !had_quote) value = null;
	        object[key] = value;
	        value = '';
	      }

	      if(i == line.length) break;
	      else {
	        in_key   = false;
	        in_value = false;
	        in_quote = false;
	        had_quote = false;
	      }
	    }

	    if(line[i] == '=' && !in_quote){
	      if(debug) console.log('split');
	      //split
	      in_key = false;
	      in_value = true;
	    }
	    else if(line[i] == '\\'){
	      i ++ ;
	      value += line[i];
	      if(debug) console.log('escape: ' + line[i]);
	    }
	    else if(line[i] == '"'){
	      had_quote = true;
	      in_quote = !in_quote;
	      if(debug) console.log('in quote: ' + in_quote);
	    }
	    else if(line[i] != ' ' && !in_value && !in_key){
	      if(debug) console.log('start key with: ' + line[i]);
	      in_key = true;
	      key = line[i];
	    }
	    else if(in_key){
	      if(debug) console.log('add to key: ' + line[i]);
	      key += line[i];
	    }
	    else if(in_value){
	      if(debug) console.log('add to value: ' + line[i]);
	      value += line[i];
	    }
	  }

	  return object;
	};
	}(logfmt_parser));

	var logger$9 = {};

	logger$9.log = function(data, stream) {
	  this.stream = this.stream || process.stdout;
	  if(stream == undefined) stream = this.stream;

	  var logData = Object.assign({}, this.defaultData, data);

	  if(this.timers){
	    for(var key in this.timers){
	      var now = (new Date()).getTime();
	      logData[key] = (now - this.timers[key]).toString() + 'ms' ;
	    }
	  }

	  stream.write(this.stringify(logData) + "\n");
	};

	logger$9.time = function(label) {
	  var logfmt = logfmt_1;
	  var startTime = (new Date()).getTime();
	  var label  = label || 'elapsed';
	  var timer  = new logfmt();
	  timer.stream = this.stream;
	  timer.defaultData = this.defaultData;
	  timer.timers = Object.assign({}, this.timers);
	  timer.timers[label] = startTime;
	  return timer;
	};

	logger$9.namespace = function(object) {
	  var logfmt = logfmt_1;
	  var namespaced = new logfmt();
	  var namespace  = Object.assign({}, this.defaultData, object);
	  namespaced.stream = this.stream;
	  namespaced.defaultData = namespace;
	  namespaced.timers = this.timers;
	  return namespaced;
	};

	logger$9.error = function(err, id) {
	  this.maxErrorLines = this.maxErrorLines || 10;
	  if (id === undefined) {
	    id = Math.random().toString().slice(2, 12);
	  }
	  var errorLogger = this.namespace({
	    error: true,
	    id:id,
	    now: (new Date()).toISOString()
	  });
	  errorLogger.log({ message:err.message });
	  if (err.stack) {
	    var stack = err.stack.split('\n');
	    for (var line in stack) {
	      if (line >= this.maxErrorLines) break;
	      errorLogger.log({ line:line, trace:stack[line] });
	    }
	  }
	};

	var request_logger = {};

	var commonFormatter = function(req, res){
	  if((typeof req.path) == 'function'){
	    //in restify path is a function
	    var path = req.path();
	  }
	  else {
	    //in express it is an attribute
	    var path = req.originalUrl || req.path || req.url;
	  }

	  var httpHeader = req.header && req.header('x-forwarded-for');
	  var requestID  = req.header && req.header('x-request-id');

	  var ip = req.ip || httpHeader
	                  || req.connection.remoteAddress;

	  var requestData =  {
	    ip: ip,
	    time: (new Date()).toISOString(),
	    method: req.method,
	    path: path,
	    "status": res.statusCode,
	  };

	  if (requestID) {
	    requestData.request_id = requestID;
	  }

	  if(res.get){
	    requestData.content_length = res.get('content-length');
	    requestData.content_type = res.get('content-type');
	  }
	  return requestData;
	};

	var immediateLogger = function(logger, options, formatter){
	  return function(req, res, next){
	    var data = formatter(req, res);
	    logger.log(data);
	    next();
	  }
	};

	var timingLogger = function(logger, options, formatter){
	  return function(req, res, next){
	    var elapsed = options.elapsed || 'elapsed';
	    var timer   = logger.time(elapsed);
	    var end = res.end;
	    res.end = function(chunk, encoding) {
	      var data = formatter(req, res);
	      res.end = end;
	      res.end(chunk, encoding);
	      timer.log(data);
	    };
	    next();
	  }
	};

	request_logger.init = function(logger, options, formatter) {
	  this.logger = logger;

	  if(!formatter && !options){
	    formatter = commonFormatter;
	    options = {};
	  }
	  else if(!formatter){
	    if(typeof options == 'function'){
	      formatter = options;
	      options = {};
	    }else {
	      formatter = commonFormatter;
	    }
	  }
	  options = options || {};

	  if(options.immediate){
	    return immediateLogger(logger, options, formatter);
	  }else {
	    return timingLogger(logger, options, formatter);
	  }
	};

	request_logger.commonFormatter = commonFormatter;

	var stringify = {};

	stringify.stringify = function(data){
	  var line = '';

	  for(var key in data) {
	    var value = data[key];
	    var is_null = false;
	    if(value == null) {
	      is_null = true;
	      value = '';
	    }
	    else value = value.toString();

	    var needs_quoting  = value.indexOf(' ') > -1 || value.indexOf('=') > -1;
	    var needs_escaping = value.indexOf('"') > -1 || value.indexOf("\\") > -1;

	    if(needs_escaping) value = value.replace(/["\\]/g, '\\$&');
	    if(needs_quoting) value = '"' + value + '"';
	    if(value === '' && !is_null) value = '""';

	    line += key + '=' + value + ' ';
	  }

	  //trim traling space
	  return line.substring(0,line.length-1);
	};

	//constructor
	function logfmt$1() {
	}
	var logfmt_1 = logfmt$1;

	var streaming        = streaming$1;
	var bodyParser       = body_parser.exports;
	var bodyParserStream = body_parser_stream.exports;
	var logfmtParser     = logfmt_parser;
	var logger$8           = logger$9;
	var requestLogger    = request_logger;
	var serializer       = stringify;

	//Build up logfmt prototype
	Object.assign(logfmt$1.prototype, logger$8);
	Object.assign(logfmt$1.prototype, streaming);

	logfmt$1.prototype.stringify = serializer.stringify;
	logfmt$1.prototype.parse = logfmtParser.parse;

	// Synchronous body parser
	logfmt$1.prototype.bodyParser = function(options) {
	  options || (options = {});
	  var mime = options.contentType || "application/logplex-1";
	  return bodyParser({ contentType: mime, parser: this.parse });
	};

	// Stream parser
	logfmt$1.prototype.bodyParserStream = function(options) {
	  options || (options = {});
	  var mime = options.contentType || "application/logplex-1";
	  return bodyParserStream({ contentType: mime });
	};

	logfmt$1.prototype.requestLogger = function(options, formatter) {
	  return requestLogger.init(this, options, formatter);
	};

	logfmt$1.prototype.requestLogger.commonFormatter = requestLogger.commonFormatter;

	Object.assign(logfmt$1, logfmt$1.prototype);

	var flat = flatten;
	flatten.flatten = flatten;
	flatten.unflatten = unflatten;

	function isBuffer (obj) {
	  return obj &&
	    obj.constructor &&
	    (typeof obj.constructor.isBuffer === 'function') &&
	    obj.constructor.isBuffer(obj)
	}

	function keyIdentity (key) {
	  return key
	}

	function flatten (target, opts) {
	  opts = opts || {};

	  const delimiter = opts.delimiter || '.';
	  const maxDepth = opts.maxDepth;
	  const transformKey = opts.transformKey || keyIdentity;
	  const output = {};

	  function step (object, prev, currentDepth) {
	    currentDepth = currentDepth || 1;
	    Object.keys(object).forEach(function (key) {
	      const value = object[key];
	      const isarray = opts.safe && Array.isArray(value);
	      const type = Object.prototype.toString.call(value);
	      const isbuffer = isBuffer(value);
	      const isobject = (
	        type === '[object Object]' ||
	        type === '[object Array]'
	      );

	      const newKey = prev
	        ? prev + delimiter + transformKey(key)
	        : transformKey(key);

	      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
	        (!opts.maxDepth || currentDepth < maxDepth)) {
	        return step(value, newKey, currentDepth + 1)
	      }

	      output[newKey] = value;
	    });
	  }

	  step(target);

	  return output
	}

	function unflatten (target, opts) {
	  opts = opts || {};

	  const delimiter = opts.delimiter || '.';
	  const overwrite = opts.overwrite || false;
	  const transformKey = opts.transformKey || keyIdentity;
	  const result = {};

	  const isbuffer = isBuffer(target);
	  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
	    return target
	  }

	  // safely ensure that the key is
	  // an integer.
	  function getkey (key) {
	    const parsedKey = Number(key);

	    return (
	      isNaN(parsedKey) ||
	      key.indexOf('.') !== -1 ||
	      opts.object
	    ) ? key
	      : parsedKey
	  }

	  function addKeys (keyPrefix, recipient, target) {
	    return Object.keys(target).reduce(function (result, key) {
	      result[keyPrefix + delimiter + key] = target[key];

	      return result
	    }, recipient)
	  }

	  function isEmpty (val) {
	    const type = Object.prototype.toString.call(val);
	    const isArray = type === '[object Array]';
	    const isObject = type === '[object Object]';

	    if (!val) {
	      return true
	    } else if (isArray) {
	      return !val.length
	    } else if (isObject) {
	      return !Object.keys(val).length
	    }
	  }

	  target = Object.keys(target).reduce(function (result, key) {
	    const type = Object.prototype.toString.call(target[key]);
	    const isObject = (type === '[object Object]' || type === '[object Array]');
	    if (!isObject || isEmpty(target[key])) {
	      result[key] = target[key];
	      return result
	    } else {
	      return addKeys(
	        key,
	        result,
	        flatten(target[key], opts)
	      )
	    }
	  }, {});

	  Object.keys(target).forEach(function (key) {
	    const split = key.split(delimiter).map(transformKey);
	    let key1 = getkey(split.shift());
	    let key2 = getkey(split[0]);
	    let recipient = result;

	    while (key2 !== undefined) {
	      if (key1 === '__proto__') {
	        return
	      }

	      const type = Object.prototype.toString.call(recipient[key1]);
	      const isobject = (
	        type === '[object Object]' ||
	        type === '[object Array]'
	      );

	      // do not write over falsey, non-undefined values if overwrite is false
	      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
	        return
	      }

	      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
	        recipient[key1] = (
	          typeof key2 === 'number' &&
	          !opts.object ? [] : {}
	        );
	      }

	      recipient = recipient[key1];
	      if (split.length > 0) {
	        key1 = getkey(split.shift());
	        key2 = getkey(split[0]);
	      }
	    }

	    // unflatten again for 'messy objects'
	    recipient[key1] = unflatten(target[key], opts);
	  });

	  return result
	}

	var loggerBase = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LoggerProviderBase = exports.ServiceLoggerBase = exports.DiagnosticsLoggerBase = exports.LogLevel = exports.LogStyle = void 0;
	var LogStyle;
	(function (LogStyle) {
	    LogStyle["verbose"] = "info";
	    LogStyle["info"] = "info";
	    LogStyle["imp"] = "imp";
	    LogStyle["warn"] = "warn";
	    LogStyle["err"] = "err";
	})(LogStyle = exports.LogStyle || (exports.LogStyle = {}));
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["verbose"] = 0] = "verbose";
	    LogLevel[LogLevel["debug"] = 1] = "debug";
	    LogLevel[LogLevel["important"] = 2] = "important";
	    LogLevel[LogLevel["warn"] = 3] = "warn";
	})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
	class DiagnosticsLoggerBase {
	    constructor(logLevel, logToFiles, fileLogger) {
	        this.logLevel = logLevel;
	        this.includeStackTrace = this.logLevel <= LogLevel.debug ? true : false;
	        this.logToFiles = logToFiles;
	        this.fileLogger = fileLogger;
	    }
	    write(content) {
	        this.debug(content);
	    }
	    verbose(content) {
	        if (this.logLevel > LogLevel.verbose) {
	            return;
	        }
	        this.log(LogStyle.verbose, content);
	    }
	    debug(content) {
	        if (this.logLevel > LogLevel.debug) {
	            return;
	        }
	        this.log(LogStyle.info, content);
	    }
	    imp(content) {
	        if (this.logLevel > LogLevel.important) {
	            return;
	        }
	        this.log(LogStyle.imp, content);
	    }
	    warn(content) {
	        this.log(LogStyle.warn, content);
	    }
	    err(content) {
	        this.log(LogStyle.err, content);
	    }
	    log(style, content) {
	        throw new Error('Not implmented in base class');
	    }
	}
	exports.DiagnosticsLoggerBase = DiagnosticsLoggerBase;
	class ServiceLoggerBase {
	    constructor(service, logLevel, logToFiles, stream) {
	        this.service = service;
	        this.logLevel = logLevel;
	        this.logToFiles = logToFiles;
	        this.stream = stream;
	        this.logToConsole = this.logLevel <= LogLevel.debug;
	    }
	    log(serviceLog) {
	        this.write(this.format(serviceLog));
	    }
	    write(message) {
	        const now = new Date();
	        message = `[${now.toUTCString()}] service=${this.service} ${message}`;
	        if (this.logToConsole) {
	            console.log(message);
	        }
	    }
	    format(serviceLog) {
	        throw new Error('Not implmented in base class');
	    }
	}
	exports.ServiceLoggerBase = ServiceLoggerBase;
	const DEFAULT_LOG_CONFIG = {
	    logLevel: LogLevel.important,
	    logToFiles: false,
	};
	class LoggerProviderBase {
	    constructor(config = {}, fileLoggerFactory) {
	        this.config = {
	            logLevel: config.logLevel !== undefined ? config.logLevel : DEFAULT_LOG_CONFIG.logLevel,
	            logToFiles: config.logToFiles !== undefined ? config.logToFiles : DEFAULT_LOG_CONFIG.logToFiles,
	            logDirectory: config.logDirectory,
	        };
	        this._fileLoggerFactory = fileLoggerFactory;
	        if (this.config.logToFiles && !this._fileLoggerFactory) {
	            throw new Error('Must provide a FileLoggerFactory in order to log to files');
	        }
	        this._diagnosticLogger = this._makeDiagnosticLogger();
	    }
	    _makeDiagnosticLogger() {
	        throw new Error('Not implmented in base class');
	    }
	    getDiagnosticsLogger() {
	        return this._diagnosticLogger;
	    }
	    makeServiceLogger(serviceName) {
	        throw new Error('Not implmented in base class');
	    }
	}
	exports.LoggerProviderBase = LoggerProviderBase;

	}(loggerBase));

	var __createBinding$i = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$i = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$i = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$i(result, mod, k);
	    __setModuleDefault$i(result, mod);
	    return result;
	};
	var __importDefault$o = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(loggers, "__esModule", { value: true });
	loggers.ServiceLogger = loggers.DiagnosticsLogger = void 0;
	const logger_1 = lib$c;
	const logfmt = __importStar$i(logfmt_1);
	const util_1$7 = __importDefault$o(require$$2__default["default"]);
	const flat_1 = __importDefault$o(flat);
	const logger_base_1$1 = loggerBase;
	class DiagnosticsLogger extends logger_base_1$1.DiagnosticsLoggerBase {
	    constructor(logLevel, logToFiles, fileLogger) {
	        super(logLevel, logToFiles, fileLogger);
	        const removeTimestamp = true;
	        this.logger = new logger_1.Logger("CONSOLE", '', removeTimestamp);
	    }
	    log(style, content) {
	        this.logger[style](content, this.includeStackTrace);
	        if (this.logToFiles) {
	            const now = new Date();
	            const message = `[${now.toUTCString()}] ${content}\n`;
	            this.fileLogger.write(message);
	        }
	    }
	}
	loggers.DiagnosticsLogger = DiagnosticsLogger;
	class ServiceLogger extends logger_base_1$1.ServiceLoggerBase {
	    write(message) {
	        super.write(message);
	        if (this.logToFiles) {
	            const now = new Date();
	            message = `[${now.toUTCString()}] service=${this.service} ${util_1$7.default
                .format(message, '\n')
                .replace(/\n\s*\n$/, '\n')}`;
	            this.stream.write(message);
	        }
	    }
	    format(serviceLog) {
	        return logfmt.stringify(flat_1.default(serviceLog));
	    }
	}
	loggers.ServiceLogger = ServiceLogger;

	var __importDefault$n = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(loggerProvider, "__esModule", { value: true });
	loggerProvider.LoggerProvider = void 0;
	const loggers_1 = loggers;
	const logger_base_1 = loggerBase;
	const path_1$1 = __importDefault$n(require$$1__default$1["default"]);
	const os_1 = __importDefault$n(require$$0__default$1["default"]);
	class LoggerProvider extends logger_base_1.LoggerProviderBase {
	    _getLogPath(filename) {
	        if (!this.config.logToFiles) {
	            throw new Error('Tried to generate log path when logToFiles is false');
	        }
	        const logDirectory = this.config.logDirectory || path_1$1.default.join(os_1.default.homedir(), '.ceramic', 'logs/');
	        return path_1$1.default.join(logDirectory, filename);
	    }
	    _makeDiagnosticLogger() {
	        let stream = null;
	        if (this.config.logToFiles) {
	            stream = this._fileLoggerFactory(this._getLogPath('diagnostics.log'));
	        }
	        return new loggers_1.DiagnosticsLogger(this.config.logLevel, this.config.logToFiles, stream);
	    }
	    makeServiceLogger(serviceName, fileName) {
	        let stream = null;
	        if (this.config.logToFiles) {
	            const logName = fileName || serviceName;
	            stream = this._fileLoggerFactory(this._getLogPath(`${logName}.log`));
	        }
	        return new loggers_1.ServiceLogger(serviceName, this.config.logLevel, this.config.logToFiles, stream);
	    }
	}
	loggerProvider.LoggerProvider = LoggerProvider;

	var networks = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Networks = void 0;
	(function (Networks) {
	    Networks["MAINNET"] = "mainnet";
	    Networks["ELP"] = "elp";
	    Networks["TESTNET_CLAY"] = "testnet-clay";
	    Networks["DEV_UNSTABLE"] = "dev-unstable";
	    Networks["LOCAL"] = "local";
	    Networks["INMEMORY"] = "inmemory";
	})(exports.Networks || (exports.Networks = {}));

	}(networks));

	var pinning = {};

	Object.defineProperty(pinning, "__esModule", { value: true });

	var unreachableCaseError = {};

	Object.defineProperty(unreachableCaseError, "__esModule", { value: true });
	unreachableCaseError.UnreachableCaseError = void 0;
	class UnreachableCaseError extends Error {
	    constructor(variant, message) {
	        super(`Unhandled ${JSON.stringify(variant)}: ${message}`);
	    }
	}
	unreachableCaseError.UnreachableCaseError = UnreachableCaseError;

	var runningStateLike = {};

	Object.defineProperty(runningStateLike, "__esModule", { value: true });

	var streamStateSubject = {};

	Object.defineProperty(streamStateSubject, "__esModule", { value: true });
	streamStateSubject.StreamStateSubject = void 0;
	const rxjs_1$1 = require$$0$5;
	const stream_utils_1 = streamUtils;
	class StreamStateSubject extends rxjs_1$1.BehaviorSubject {
	    next(next) {
	        const current = this.value;
	        if (!stream_utils_1.StreamUtils.statesEqual(current, next)) {
	            super.next(next);
	        }
	    }
	}
	streamStateSubject.StreamStateSubject = StreamStateSubject;

	var subscriptionSet = {};

	Object.defineProperty(subscriptionSet, "__esModule", { value: true });
	subscriptionSet.SubscriptionSet = void 0;
	class SubscriptionSet {
	    constructor(subscriptions = new Set()) {
	        this.subscriptions = subscriptions;
	    }
	    add(subscription) {
	        subscription.add(() => {
	            this.subscriptions.delete(subscription);
	        });
	        this.subscriptions.add(subscription);
	    }
	    unsubscribe() {
	        this.subscriptions.forEach((s) => s.unsubscribe());
	    }
	}
	subscriptionSet.SubscriptionSet = SubscriptionSet;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(anchorService, exports);
	__exportStar(ceramicApi, exports);
	__exportStar(context$1, exports);
	__exportStar(streamopts, exports);
	__exportStar(stream$2, exports);
	__exportStar(httpUtils, exports);
	__exportStar(streamUtils, exports);
	__exportStar(testUtils, exports);
	__exportStar(loggerProvider, exports);
	__exportStar(loggers, exports);
	__exportStar(networks, exports);
	__exportStar(loggerBase, exports);
	__exportStar(pinning, exports);
	__exportStar(unreachableCaseError, exports);
	__exportStar(runningStateLike, exports);
	__exportStar(streamStateSubject, exports);
	__exportStar(subscriptionSet, exports);

	}(lib$e));

	var queryString = {};

	var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

	var token = '%[a-f0-9]{2}';
	var singleMatcher = new RegExp(token, 'gi');
	var multiMatcher = new RegExp('(' + token + ')+', 'gi');

	function decodeComponents(components, split) {
		try {
			// Try to decode the entire string first
			return decodeURIComponent(components.join(''));
		} catch (err) {
			// Do nothing
		}

		if (components.length === 1) {
			return components;
		}

		split = split || 1;

		// Split the array in 2 parts
		var left = components.slice(0, split);
		var right = components.slice(split);

		return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
	}

	function decode$2(input) {
		try {
			return decodeURIComponent(input);
		} catch (err) {
			var tokens = input.match(singleMatcher);

			for (var i = 1; i < tokens.length; i++) {
				input = decodeComponents(tokens, i).join('');

				tokens = input.match(singleMatcher);
			}

			return input;
		}
	}

	function customDecodeURIComponent(input) {
		// Keep track of all the replacements and prefill the map with the `BOM`
		var replaceMap = {
			'%FE%FF': '\uFFFD\uFFFD',
			'%FF%FE': '\uFFFD\uFFFD'
		};

		var match = multiMatcher.exec(input);
		while (match) {
			try {
				// Decode as big chunks as possible
				replaceMap[match[0]] = decodeURIComponent(match[0]);
			} catch (err) {
				var result = decode$2(match[0]);

				if (result !== match[0]) {
					replaceMap[match[0]] = result;
				}
			}

			match = multiMatcher.exec(input);
		}

		// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
		replaceMap['%C2'] = '\uFFFD';

		var entries = Object.keys(replaceMap);

		for (var i = 0; i < entries.length; i++) {
			// Replace all decoded components
			var key = entries[i];
			input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
		}

		return input;
	}

	var decodeUriComponent = function (encodedURI) {
		if (typeof encodedURI !== 'string') {
			throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
		}

		try {
			encodedURI = encodedURI.replace(/\+/g, ' ');

			// Try the built in decoder first
			return decodeURIComponent(encodedURI);
		} catch (err) {
			// Fallback to a more advanced decoder
			return customDecodeURIComponent(encodedURI);
		}
	};

	var splitOnFirst = (string, separator) => {
		if (!(typeof string === 'string' && typeof separator === 'string')) {
			throw new TypeError('Expected the arguments to be of type `string`');
		}

		if (separator === '') {
			return [string];
		}

		const separatorIndex = string.indexOf(separator);

		if (separatorIndex === -1) {
			return [string];
		}

		return [
			string.slice(0, separatorIndex),
			string.slice(separatorIndex + separator.length)
		];
	};

	var filterObj = function (obj, predicate) {
		var ret = {};
		var keys = Object.keys(obj);
		var isArr = Array.isArray(predicate);

		for (var i = 0; i < keys.length; i++) {
			var key = keys[i];
			var val = obj[key];

			if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
				ret[key] = val;
			}
		}

		return ret;
	};

	(function (exports) {
	const strictUriEncode$1 = strictUriEncode;
	const decodeComponent = decodeUriComponent;
	const splitOnFirst$1 = splitOnFirst;
	const filterObject = filterObj;

	const isNullOrUndefined = value => value === null || value === undefined;

	const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

	function encoderForArrayFormat(options) {
		switch (options.arrayFormat) {
			case 'index':
				return key => (result, value) => {
					const index = result.length;

					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, [encode(key, options), '[', index, ']'].join('')];
					}

					return [
						...result,
						[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
					];
				};

			case 'bracket':
				return key => (result, value) => {
					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, [encode(key, options), '[]'].join('')];
					}

					return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
				};

			case 'comma':
			case 'separator':
			case 'bracket-separator': {
				const keyValueSep = options.arrayFormat === 'bracket-separator' ?
					'[]=' :
					'=';

				return key => (result, value) => {
					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					// Translate null to an empty string so that it doesn't serialize as 'null'
					value = value === null ? '' : value;

					if (result.length === 0) {
						return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
					}

					return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
				};
			}

			default:
				return key => (result, value) => {
					if (
						value === undefined ||
						(options.skipNull && value === null) ||
						(options.skipEmptyString && value === '')
					) {
						return result;
					}

					if (value === null) {
						return [...result, encode(key, options)];
					}

					return [...result, [encode(key, options), '=', encode(value, options)].join('')];
				};
		}
	}

	function parserForArrayFormat(options) {
		let result;

		switch (options.arrayFormat) {
			case 'index':
				return (key, value, accumulator) => {
					result = /\[(\d*)\]$/.exec(key);

					key = key.replace(/\[\d*\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = {};
					}

					accumulator[key][result[1]] = value;
				};

			case 'bracket':
				return (key, value, accumulator) => {
					result = /(\[\])$/.exec(key);
					key = key.replace(/\[\]$/, '');

					if (!result) {
						accumulator[key] = value;
						return;
					}

					if (accumulator[key] === undefined) {
						accumulator[key] = [value];
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};

			case 'comma':
			case 'separator':
				return (key, value, accumulator) => {
					const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
					const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
					value = isEncodedArray ? decode(value, options) : value;
					const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
					accumulator[key] = newValue;
				};

			case 'bracket-separator':
				return (key, value, accumulator) => {
					const isArray = /(\[\])$/.test(key);
					key = key.replace(/\[\]$/, '');

					if (!isArray) {
						accumulator[key] = value ? decode(value, options) : value;
						return;
					}

					const arrayValue = value === null ?
						[] :
						value.split(options.arrayFormatSeparator).map(item => decode(item, options));

					if (accumulator[key] === undefined) {
						accumulator[key] = arrayValue;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], arrayValue);
				};

			default:
				return (key, value, accumulator) => {
					if (accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}

					accumulator[key] = [].concat(accumulator[key], value);
				};
		}
	}

	function validateArrayFormatSeparator(value) {
		if (typeof value !== 'string' || value.length !== 1) {
			throw new TypeError('arrayFormatSeparator must be single character string');
		}
	}

	function encode(value, options) {
		if (options.encode) {
			return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
		}

		return value;
	}

	function decode(value, options) {
		if (options.decode) {
			return decodeComponent(value);
		}

		return value;
	}

	function keysSorter(input) {
		if (Array.isArray(input)) {
			return input.sort();
		}

		if (typeof input === 'object') {
			return keysSorter(Object.keys(input))
				.sort((a, b) => Number(a) - Number(b))
				.map(key => input[key]);
		}

		return input;
	}

	function removeHash(input) {
		const hashStart = input.indexOf('#');
		if (hashStart !== -1) {
			input = input.slice(0, hashStart);
		}

		return input;
	}

	function getHash(url) {
		let hash = '';
		const hashStart = url.indexOf('#');
		if (hashStart !== -1) {
			hash = url.slice(hashStart);
		}

		return hash;
	}

	function extract(input) {
		input = removeHash(input);
		const queryStart = input.indexOf('?');
		if (queryStart === -1) {
			return '';
		}

		return input.slice(queryStart + 1);
	}

	function parseValue(value, options) {
		if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
			value = Number(value);
		} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
			value = value.toLowerCase() === 'true';
		}

		return value;
	}

	function parse(query, options) {
		options = Object.assign({
			decode: true,
			sort: true,
			arrayFormat: 'none',
			arrayFormatSeparator: ',',
			parseNumbers: false,
			parseBooleans: false
		}, options);

		validateArrayFormatSeparator(options.arrayFormatSeparator);

		const formatter = parserForArrayFormat(options);

		// Create an object with no prototype
		const ret = Object.create(null);

		if (typeof query !== 'string') {
			return ret;
		}

		query = query.trim().replace(/^[?#&]/, '');

		if (!query) {
			return ret;
		}

		for (const param of query.split('&')) {
			if (param === '') {
				continue;
			}

			let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, ' ') : param, '=');

			// Missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
			formatter(decode(key, options), value, ret);
		}

		for (const key of Object.keys(ret)) {
			const value = ret[key];
			if (typeof value === 'object' && value !== null) {
				for (const k of Object.keys(value)) {
					value[k] = parseValue(value[k], options);
				}
			} else {
				ret[key] = parseValue(value, options);
			}
		}

		if (options.sort === false) {
			return ret;
		}

		return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
			const value = ret[key];
			if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
				// Sort object keys, not values
				result[key] = keysSorter(value);
			} else {
				result[key] = value;
			}

			return result;
		}, Object.create(null));
	}

	exports.extract = extract;
	exports.parse = parse;

	exports.stringify = (object, options) => {
		if (!object) {
			return '';
		}

		options = Object.assign({
			encode: true,
			strict: true,
			arrayFormat: 'none',
			arrayFormatSeparator: ','
		}, options);

		validateArrayFormatSeparator(options.arrayFormatSeparator);

		const shouldFilter = key => (
			(options.skipNull && isNullOrUndefined(object[key])) ||
			(options.skipEmptyString && object[key] === '')
		);

		const formatter = encoderForArrayFormat(options);

		const objectCopy = {};

		for (const key of Object.keys(object)) {
			if (!shouldFilter(key)) {
				objectCopy[key] = object[key];
			}
		}

		const keys = Object.keys(objectCopy);

		if (options.sort !== false) {
			keys.sort(options.sort);
		}

		return keys.map(key => {
			const value = object[key];

			if (value === undefined) {
				return '';
			}

			if (value === null) {
				return encode(key, options);
			}

			if (Array.isArray(value)) {
				if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
					return encode(key, options) + '[]';
				}

				return value
					.reduce(formatter(key), [])
					.join('&');
			}

			return encode(key, options) + '=' + encode(value, options);
		}).filter(x => x.length > 0).join('&');
	};

	exports.parseUrl = (url, options) => {
		options = Object.assign({
			decode: true
		}, options);

		const [url_, hash] = splitOnFirst$1(url, '#');

		return Object.assign(
			{
				url: url_.split('?')[0] || '',
				query: parse(extract(url), options)
			},
			options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
		);
	};

	exports.stringifyUrl = (object, options) => {
		options = Object.assign({
			encode: true,
			strict: true,
			[encodeFragmentIdentifier]: true
		}, options);

		const url = removeHash(object.url).split('?')[0] || '';
		const queryFromUrl = exports.extract(object.url);
		const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

		const query = Object.assign(parsedQueryFromUrl, object.query);
		let queryString = exports.stringify(query, options);
		if (queryString) {
			queryString = `?${queryString}`;
		}

		let hash = getHash(object.url);
		if (object.fragmentIdentifier) {
			hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
		}

		return `${url}${queryString}${hash}`;
	};

	exports.pick = (input, filter, options) => {
		options = Object.assign({
			parseFragmentIdentifier: true,
			[encodeFragmentIdentifier]: false
		}, options);

		const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
		return exports.stringifyUrl({
			url,
			query: filterObject(query, filter),
			fragmentIdentifier
		}, options);
	};

	exports.exclude = (input, filter, options) => {
		const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

		return exports.pick(input, exclusionFilter, options);
	};
	}(queryString));

	var __importDefault$m = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(document$1, "__esModule", { value: true });
	document$1.Document = void 0;
	const rxjs_1 = require$$0$6;
	const operators_1 = require$$1$3;
	const common_1$5 = lib$e;
	const streamid_1$3 = lib$f;
	const query_string_1 = __importDefault$m(queryString);
	class Document extends rxjs_1.Observable {
	    constructor(initial, _apiUrl, syncInterval) {
	        super((subscriber) => {
	            const isFirstObserver = this.state$.observers.length === 0;
	            if (isFirstObserver) {
	                this.periodicSubscription = rxjs_1.timer(0, syncInterval)
	                    .pipe(operators_1.throttle(() => this._syncState(this.id, { sync: common_1$5.SyncOptions.PREFER_CACHE })))
	                    .subscribe();
	            }
	            this.state$.subscribe(subscriber).add(() => {
	                var _a;
	                const isNoObserversLeft = this.state$.observers.length === 0;
	                if (isNoObserversLeft) {
	                    (_a = this.periodicSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
	                }
	            });
	        });
	        this._apiUrl = _apiUrl;
	        this.state$ = new common_1$5.StreamStateSubject(initial);
	    }
	    get value() {
	        return this.state$.value;
	    }
	    get state() {
	        return this.state$.value;
	    }
	    next(state) {
	        this.state$.next(state);
	    }
	    async _syncState(streamId, opts) {
	        const state = await Document._load(streamId, this._apiUrl, opts);
	        this.state$.next(common_1$5.StreamUtils.deserializeState(state));
	    }
	    get id() {
	        return new streamid_1$3.StreamID(this.state$.value.type, this.state$.value.log[0].cid);
	    }
	    static async createFromGenesis(apiUrl, type, genesis, opts, syncInterval) {
	        const { state } = await common_1$5.fetchJson(apiUrl + '/streams', {
	            method: 'post',
	            body: {
	                type,
	                genesis: common_1$5.StreamUtils.serializeCommit(genesis),
	                opts,
	            },
	        });
	        return new Document(common_1$5.StreamUtils.deserializeState(state), apiUrl, syncInterval);
	    }
	    static async applyCommit(apiUrl, streamId, commit, opts, syncInterval) {
	        const { state } = await common_1$5.fetchJson(apiUrl + '/commits', {
	            method: 'post',
	            body: {
	                streamId: streamId.toString(),
	                commit: common_1$5.StreamUtils.serializeCommit(commit),
	                opts,
	            },
	        });
	        return new Document(common_1$5.StreamUtils.deserializeState(state), apiUrl, syncInterval);
	    }
	    static async _load(streamId, apiUrl, opts) {
	        const url = apiUrl + '/streams/' + streamId.toString() + '?' + query_string_1.default.stringify(opts);
	        const { state } = await common_1$5.fetchJson(url);
	        return state;
	    }
	    static async load(streamId, apiUrl, syncInterval, opts) {
	        const state = await Document._load(streamId, apiUrl, opts);
	        return new Document(common_1$5.StreamUtils.deserializeState(state), apiUrl, syncInterval);
	    }
	    static async loadStreamCommits(streamId, apiUrl) {
	        const { commits } = await common_1$5.fetchJson(`${apiUrl}/commits/${streamId}`);
	        return commits.map((r) => {
	            return {
	                cid: r.cid,
	                value: common_1$5.StreamUtils.deserializeCommit(r.value),
	            };
	        });
	    }
	    complete() {
	        this.state$.complete();
	    }
	}
	document$1.Document = Document;

	var lib$a = {};

	var tileDocument = {};

	var duplex = {};

	var helpers = {};

	/*!
	 * https://github.com/Starcounter-Jack/JSON-Patch
	 * (c) 2017 Joachim Wester
	 * MIT license
	 */

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(helpers, "__esModule", { value: true });
	var _hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwnProperty(obj, key) {
	    return _hasOwnProperty.call(obj, key);
	}
	helpers.hasOwnProperty = hasOwnProperty;
	function _objectKeys(obj) {
	    if (Array.isArray(obj)) {
	        var keys = new Array(obj.length);
	        for (var k = 0; k < keys.length; k++) {
	            keys[k] = "" + k;
	        }
	        return keys;
	    }
	    if (Object.keys) {
	        return Object.keys(obj);
	    }
	    var keys = [];
	    for (var i in obj) {
	        if (hasOwnProperty(obj, i)) {
	            keys.push(i);
	        }
	    }
	    return keys;
	}
	helpers._objectKeys = _objectKeys;
	/**
	* Deeply clone the object.
	* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
	* @param  {any} obj value to clone
	* @return {any} cloned obj
	*/
	function _deepClone(obj) {
	    switch (typeof obj) {
	        case "object":
	            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
	        case "undefined":
	            return null; //this is how JSON.stringify behaves for array items
	        default:
	            return obj; //no need to clone primitives
	    }
	}
	helpers._deepClone = _deepClone;
	//3x faster than cached /^\d+$/.test(str)
	function isInteger$1(str) {
	    var i = 0;
	    var len = str.length;
	    var charCode;
	    while (i < len) {
	        charCode = str.charCodeAt(i);
	        if (charCode >= 48 && charCode <= 57) {
	            i++;
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	helpers.isInteger = isInteger$1;
	/**
	* Escapes a json pointer path
	* @param path The raw pointer
	* @return the Escaped path
	*/
	function escapePathComponent(path) {
	    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)
	        return path;
	    return path.replace(/~/g, '~0').replace(/\//g, '~1');
	}
	helpers.escapePathComponent = escapePathComponent;
	/**
	 * Unescapes a json pointer path
	 * @param path The escaped pointer
	 * @return The unescaped path
	 */
	function unescapePathComponent(path) {
	    return path.replace(/~1/g, '/').replace(/~0/g, '~');
	}
	helpers.unescapePathComponent = unescapePathComponent;
	function _getPathRecursive(root, obj) {
	    var found;
	    for (var key in root) {
	        if (hasOwnProperty(root, key)) {
	            if (root[key] === obj) {
	                return escapePathComponent(key) + '/';
	            }
	            else if (typeof root[key] === 'object') {
	                found = _getPathRecursive(root[key], obj);
	                if (found != '') {
	                    return escapePathComponent(key) + '/' + found;
	                }
	            }
	        }
	    }
	    return '';
	}
	helpers._getPathRecursive = _getPathRecursive;
	function getPath(root, obj) {
	    if (root === obj) {
	        return '/';
	    }
	    var path = _getPathRecursive(root, obj);
	    if (path === '') {
	        throw new Error("Object not found in root");
	    }
	    return '/' + path;
	}
	helpers.getPath = getPath;
	/**
	* Recursively checks whether an object has any undefined values inside.
	*/
	function hasUndefined(obj) {
	    if (obj === undefined) {
	        return true;
	    }
	    if (obj) {
	        if (Array.isArray(obj)) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (hasUndefined(obj[i])) {
	                    return true;
	                }
	            }
	        }
	        else if (typeof obj === "object") {
	            var objKeys = _objectKeys(obj);
	            var objKeysLength = objKeys.length;
	            for (var i = 0; i < objKeysLength; i++) {
	                if (hasUndefined(obj[objKeys[i]])) {
	                    return true;
	                }
	            }
	        }
	    }
	    return false;
	}
	helpers.hasUndefined = hasUndefined;
	function patchErrorMessageFormatter(message, args) {
	    var messageParts = [message];
	    for (var key in args) {
	        var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print
	        if (typeof value !== 'undefined') {
	            messageParts.push(key + ": " + value);
	        }
	    }
	    return messageParts.join('\n');
	}
	var PatchError = /** @class */ (function (_super) {
	    __extends(PatchError, _super);
	    function PatchError(message, name, index, operation, tree) {
	        var _newTarget = this.constructor;
	        var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree })) || this;
	        _this.name = name;
	        _this.index = index;
	        _this.operation = operation;
	        _this.tree = tree;
	        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359
	        _this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });
	        return _this;
	    }
	    return PatchError;
	}(Error));
	helpers.PatchError = PatchError;

	var core$2 = {};

	var isArray$1 = Array.isArray;
	var keyList = Object.keys;
	var hasProp = Object.prototype.hasOwnProperty;

	var fastDeepEqual = function equal(a, b) {
	  if (a === b) return true;

	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    var arrA = isArray$1(a)
	      , arrB = isArray$1(b)
	      , i
	      , length
	      , key;

	    if (arrA && arrB) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;)
	        if (!equal(a[i], b[i])) return false;
	      return true;
	    }

	    if (arrA != arrB) return false;

	    var dateA = a instanceof Date
	      , dateB = b instanceof Date;
	    if (dateA != dateB) return false;
	    if (dateA && dateB) return a.getTime() == b.getTime();

	    var regexpA = a instanceof RegExp
	      , regexpB = b instanceof RegExp;
	    if (regexpA != regexpB) return false;
	    if (regexpA && regexpB) return a.toString() == b.toString();

	    var keys = keyList(a);
	    length = keys.length;

	    if (length !== keyList(b).length)
	      return false;

	    for (i = length; i-- !== 0;)
	      if (!hasProp.call(b, keys[i])) return false;

	    for (i = length; i-- !== 0;) {
	      key = keys[i];
	      if (!equal(a[key], b[key])) return false;
	    }

	    return true;
	  }

	  return a!==a && b!==b;
	};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var areEquals = fastDeepEqual;
	var helpers_1 = helpers;
	exports.JsonPatchError = helpers_1.PatchError;
	exports.deepClone = helpers_1._deepClone;
	/* We use a Javascript hash to store each
	 function. Each hash entry (property) uses
	 the operation identifiers specified in rfc6902.
	 In this way, we can map each patch operation
	 to its dedicated function in efficient way.
	 */
	/* The operations applicable to an object */
	var objOps = {
	    add: function (obj, key, document) {
	        obj[key] = this.value;
	        return { newDocument: document };
	    },
	    remove: function (obj, key, document) {
	        var removed = obj[key];
	        delete obj[key];
	        return { newDocument: document, removed: removed };
	    },
	    replace: function (obj, key, document) {
	        var removed = obj[key];
	        obj[key] = this.value;
	        return { newDocument: document, removed: removed };
	    },
	    move: function (obj, key, document) {
	        /* in case move target overwrites an existing value,
	        return the removed value, this can be taxing performance-wise,
	        and is potentially unneeded */
	        var removed = getValueByPointer(document, this.path);
	        if (removed) {
	            removed = helpers_1._deepClone(removed);
	        }
	        var originalValue = applyOperation(document, { op: "remove", path: this.from }).removed;
	        applyOperation(document, { op: "add", path: this.path, value: originalValue });
	        return { newDocument: document, removed: removed };
	    },
	    copy: function (obj, key, document) {
	        var valueToCopy = getValueByPointer(document, this.from);
	        // enforce copy by value so further operations don't affect source (see issue #177)
	        applyOperation(document, { op: "add", path: this.path, value: helpers_1._deepClone(valueToCopy) });
	        return { newDocument: document };
	    },
	    test: function (obj, key, document) {
	        return { newDocument: document, test: areEquals(obj[key], this.value) };
	    },
	    _get: function (obj, key, document) {
	        this.value = obj[key];
	        return { newDocument: document };
	    }
	};
	/* The operations applicable to an array. Many are the same as for the object */
	var arrOps = {
	    add: function (arr, i, document) {
	        if (helpers_1.isInteger(i)) {
	            arr.splice(i, 0, this.value);
	        }
	        else { // array props
	            arr[i] = this.value;
	        }
	        // this may be needed when using '-' in an array
	        return { newDocument: document, index: i };
	    },
	    remove: function (arr, i, document) {
	        var removedList = arr.splice(i, 1);
	        return { newDocument: document, removed: removedList[0] };
	    },
	    replace: function (arr, i, document) {
	        var removed = arr[i];
	        arr[i] = this.value;
	        return { newDocument: document, removed: removed };
	    },
	    move: objOps.move,
	    copy: objOps.copy,
	    test: objOps.test,
	    _get: objOps._get
	};
	/**
	 * Retrieves a value from a JSON document by a JSON pointer.
	 * Returns the value.
	 *
	 * @param document The document to get the value from
	 * @param pointer an escaped JSON pointer
	 * @return The retrieved value
	 */
	function getValueByPointer(document, pointer) {
	    if (pointer == '') {
	        return document;
	    }
	    var getOriginalDestination = { op: "_get", path: pointer };
	    applyOperation(document, getOriginalDestination);
	    return getOriginalDestination.value;
	}
	exports.getValueByPointer = getValueByPointer;
	/**
	 * Apply a single JSON Patch Operation on a JSON document.
	 * Returns the {newDocument, result} of the operation.
	 * It modifies the `document` and `operation` objects - it gets the values by reference.
	 * If you would like to avoid touching your values, clone them:
	 * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
	 *
	 * @param document The document to patch
	 * @param operation The operation to apply
	 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
	 * @param mutateDocument Whether to mutate the original document or clone it before applying
	 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
	 * @return `{newDocument, result}` after the operation
	 */
	function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
	    if (validateOperation === void 0) { validateOperation = false; }
	    if (mutateDocument === void 0) { mutateDocument = true; }
	    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
	    if (index === void 0) { index = 0; }
	    if (validateOperation) {
	        if (typeof validateOperation == 'function') {
	            validateOperation(operation, 0, document, operation.path);
	        }
	        else {
	            validator(operation, 0);
	        }
	    }
	    /* ROOT OPERATIONS */
	    if (operation.path === "") {
	        var returnValue = { newDocument: document };
	        if (operation.op === 'add') {
	            returnValue.newDocument = operation.value;
	            return returnValue;
	        }
	        else if (operation.op === 'replace') {
	            returnValue.newDocument = operation.value;
	            returnValue.removed = document; //document we removed
	            return returnValue;
	        }
	        else if (operation.op === 'move' || operation.op === 'copy') { // it's a move or copy to root
	            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field
	            if (operation.op === 'move') { // report removed item
	                returnValue.removed = document;
	            }
	            return returnValue;
	        }
	        else if (operation.op === 'test') {
	            returnValue.test = areEquals(document, operation.value);
	            if (returnValue.test === false) {
	                throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
	            }
	            returnValue.newDocument = document;
	            return returnValue;
	        }
	        else if (operation.op === 'remove') { // a remove on root
	            returnValue.removed = document;
	            returnValue.newDocument = null;
	            return returnValue;
	        }
	        else if (operation.op === '_get') {
	            operation.value = document;
	            return returnValue;
	        }
	        else { /* bad operation */
	            if (validateOperation) {
	                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
	            }
	            else {
	                return returnValue;
	            }
	        }
	    } /* END ROOT OPERATIONS */
	    else {
	        if (!mutateDocument) {
	            document = helpers_1._deepClone(document);
	        }
	        var path = operation.path || "";
	        var keys = path.split('/');
	        var obj = document;
	        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
	        var len = keys.length;
	        var existingPathFragment = undefined;
	        var key = void 0;
	        var validateFunction = void 0;
	        if (typeof validateOperation == 'function') {
	            validateFunction = validateOperation;
	        }
	        else {
	            validateFunction = validator;
	        }
	        while (true) {
	            key = keys[t];
	            if (banPrototypeModifications && key == '__proto__') {
	                throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
	            }
	            if (validateOperation) {
	                if (existingPathFragment === undefined) {
	                    if (obj[key] === undefined) {
	                        existingPathFragment = keys.slice(0, t).join('/');
	                    }
	                    else if (t == len - 1) {
	                        existingPathFragment = operation.path;
	                    }
	                    if (existingPathFragment !== undefined) {
	                        validateFunction(operation, 0, document, existingPathFragment);
	                    }
	                }
	            }
	            t++;
	            if (Array.isArray(obj)) {
	                if (key === '-') {
	                    key = obj.length;
	                }
	                else {
	                    if (validateOperation && !helpers_1.isInteger(key)) {
	                        throw new exports.JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
	                    } // only parse key when it's an integer for `arr.prop` to work
	                    else if (helpers_1.isInteger(key)) {
	                        key = ~~key;
	                    }
	                }
	                if (t >= len) {
	                    if (validateOperation && operation.op === "add" && key > obj.length) {
	                        throw new exports.JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
	                    }
	                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch
	                    if (returnValue.test === false) {
	                        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
	                    }
	                    return returnValue;
	                }
	            }
	            else {
	                if (key && key.indexOf('~') != -1) {
	                    key = helpers_1.unescapePathComponent(key);
	                }
	                if (t >= len) {
	                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch
	                    if (returnValue.test === false) {
	                        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
	                    }
	                    return returnValue;
	                }
	            }
	            obj = obj[key];
	        }
	    }
	}
	exports.applyOperation = applyOperation;
	/**
	 * Apply a full JSON Patch array on a JSON document.
	 * Returns the {newDocument, result} of the patch.
	 * It modifies the `document` object and `patch` - it gets the values by reference.
	 * If you would like to avoid touching your values, clone them:
	 * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
	 *
	 * @param document The document to patch
	 * @param patch The patch to apply
	 * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
	 * @param mutateDocument Whether to mutate the original document or clone it before applying
	 * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
	 * @return An array of `{newDocument, result}` after the patch
	 */
	function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
	    if (mutateDocument === void 0) { mutateDocument = true; }
	    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
	    if (validateOperation) {
	        if (!Array.isArray(patch)) {
	            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
	        }
	    }
	    if (!mutateDocument) {
	        document = helpers_1._deepClone(document);
	    }
	    var results = new Array(patch.length);
	    for (var i = 0, length_1 = patch.length; i < length_1; i++) {
	        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
	        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);
	        document = results[i].newDocument; // in case root was replaced
	    }
	    results.newDocument = document;
	    return results;
	}
	exports.applyPatch = applyPatch;
	/**
	 * Apply a single JSON Patch Operation on a JSON document.
	 * Returns the updated document.
	 * Suitable as a reducer.
	 *
	 * @param document The document to patch
	 * @param operation The operation to apply
	 * @return The updated document
	 */
	function applyReducer(document, operation, index) {
	    var operationResult = applyOperation(document, operation);
	    if (operationResult.test === false) { // failed test
	        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
	    }
	    return operationResult.newDocument;
	}
	exports.applyReducer = applyReducer;
	/**
	 * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
	 * @param {object} operation - operation object (patch)
	 * @param {number} index - index of operation in the sequence
	 * @param {object} [document] - object where the operation is supposed to be applied
	 * @param {string} [existingPathFragment] - comes along with `document`
	 */
	function validator(operation, index, document, existingPathFragment) {
	    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {
	        throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
	    }
	    else if (!objOps[operation.op]) {
	        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
	    }
	    else if (typeof operation.path !== 'string') {
	        throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
	    }
	    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
	        // paths that aren't empty string should start with "/"
	        throw new exports.JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
	    }
	    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
	        throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
	    }
	    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
	        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
	    }
	    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {
	        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
	    }
	    else if (document) {
	        if (operation.op == "add") {
	            var pathLen = operation.path.split("/").length;
	            var existingPathLen = existingPathFragment.split("/").length;
	            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
	                throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
	            }
	        }
	        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
	            if (operation.path !== existingPathFragment) {
	                throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
	            }
	        }
	        else if (operation.op === 'move' || operation.op === 'copy') {
	            var existingValue = { op: "_get", path: operation.from, value: undefined };
	            var error = validate([existingValue], document);
	            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
	                throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
	            }
	        }
	    }
	}
	exports.validator = validator;
	/**
	 * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
	 * If error is encountered, returns a JsonPatchError object
	 * @param sequence
	 * @param document
	 * @returns {JsonPatchError|undefined}
	 */
	function validate(sequence, document, externalValidator) {
	    try {
	        if (!Array.isArray(sequence)) {
	            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
	        }
	        if (document) {
	            //clone document and sequence so that we can safely try applying operations
	            applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);
	        }
	        else {
	            externalValidator = externalValidator || validator;
	            for (var i = 0; i < sequence.length; i++) {
	                externalValidator(sequence[i], i, document, undefined);
	            }
	        }
	    }
	    catch (e) {
	        if (e instanceof exports.JsonPatchError) {
	            return e;
	        }
	        else {
	            throw e;
	        }
	    }
	}
	exports.validate = validate;
	/**
	 * Default export for backwards compat
	 */
	exports.default = {
	    JsonPatchError: exports.JsonPatchError,
	    deepClone: exports.deepClone,
	    getValueByPointer: getValueByPointer,
	    applyOperation: applyOperation,
	    applyPatch: applyPatch,
	    applyReducer: applyReducer,
	    validator: validator,
	    validate: validate
	};
	}(core$2));

	var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	Object.defineProperty(duplex, "__esModule", { value: true });
	/*!
	 * https://github.com/Starcounter-Jack/JSON-Patch
	 * (c) 2017 Joachim Wester
	 * MIT license
	 */
	var helpers_1 = helpers;
	var core_1 = core$2;
	/* export all core functions and types */
	var core_2 = core$2;
	duplex.applyOperation = core_2.applyOperation;
	duplex.applyPatch = core_2.applyPatch;
	duplex.applyReducer = core_2.applyReducer;
	duplex.getValueByPointer = core_2.getValueByPointer;
	duplex.validate = core_2.validate;
	duplex.validator = core_2.validator;
	/* export some helpers */
	var helpers_2 = helpers;
	duplex.JsonPatchError = helpers_2.PatchError;
	duplex.deepClone = helpers_2._deepClone;
	duplex.escapePathComponent = helpers_2.escapePathComponent;
	duplex.unescapePathComponent = helpers_2.unescapePathComponent;
	var beforeDict = new WeakMap();
	var Mirror = /** @class */ (function () {
	    function Mirror(obj) {
	        this.observers = new Map();
	        this.obj = obj;
	    }
	    return Mirror;
	}());
	var ObserverInfo = /** @class */ (function () {
	    function ObserverInfo(callback, observer) {
	        this.callback = callback;
	        this.observer = observer;
	    }
	    return ObserverInfo;
	}());
	function getMirror(obj) {
	    return beforeDict.get(obj);
	}
	function getObserverFromMirror(mirror, callback) {
	    return mirror.observers.get(callback);
	}
	function removeObserverFromMirror(mirror, observer) {
	    mirror.observers.delete(observer.callback);
	}
	/**
	 * Detach an observer from an object
	 */
	function unobserve(root, observer) {
	    observer.unobserve();
	}
	duplex.unobserve = unobserve;
	/**
	 * Observes changes made to an object, which can then be retrieved using generate
	 */
	function observe(obj, callback) {
	    var patches = [];
	    var observer;
	    var mirror = getMirror(obj);
	    if (!mirror) {
	        mirror = new Mirror(obj);
	        beforeDict.set(obj, mirror);
	    }
	    else {
	        var observerInfo = getObserverFromMirror(mirror, callback);
	        observer = observerInfo && observerInfo.observer;
	    }
	    if (observer) {
	        return observer;
	    }
	    observer = {};
	    mirror.value = helpers_1._deepClone(obj);
	    if (callback) {
	        observer.callback = callback;
	        observer.next = null;
	        var dirtyCheck = function () {
	            generate$3(observer);
	        };
	        var fastCheck = function () {
	            clearTimeout(observer.next);
	            observer.next = setTimeout(dirtyCheck);
	        };
	        if (typeof window !== 'undefined') { //not Node
	            window.addEventListener('mouseup', fastCheck);
	            window.addEventListener('keyup', fastCheck);
	            window.addEventListener('mousedown', fastCheck);
	            window.addEventListener('keydown', fastCheck);
	            window.addEventListener('change', fastCheck);
	        }
	    }
	    observer.patches = patches;
	    observer.object = obj;
	    observer.unobserve = function () {
	        generate$3(observer);
	        clearTimeout(observer.next);
	        removeObserverFromMirror(mirror, observer);
	        if (typeof window !== 'undefined') {
	            window.removeEventListener('mouseup', fastCheck);
	            window.removeEventListener('keyup', fastCheck);
	            window.removeEventListener('mousedown', fastCheck);
	            window.removeEventListener('keydown', fastCheck);
	            window.removeEventListener('change', fastCheck);
	        }
	    };
	    mirror.observers.set(callback, new ObserverInfo(callback, observer));
	    return observer;
	}
	duplex.observe = observe;
	/**
	 * Generate an array of patches from an observer
	 */
	function generate$3(observer, invertible) {
	    if (invertible === void 0) { invertible = false; }
	    var mirror = beforeDict.get(observer.object);
	    _generate(mirror.value, observer.object, observer.patches, "", invertible);
	    if (observer.patches.length) {
	        core_1.applyPatch(mirror.value, observer.patches);
	    }
	    var temp = observer.patches;
	    if (temp.length > 0) {
	        observer.patches = [];
	        if (observer.callback) {
	            observer.callback(temp);
	        }
	    }
	    return temp;
	}
	duplex.generate = generate$3;
	// Dirty check if obj is different from mirror, generate patches and update mirror
	function _generate(mirror, obj, patches, path, invertible) {
	    if (obj === mirror) {
	        return;
	    }
	    if (typeof obj.toJSON === "function") {
	        obj = obj.toJSON();
	    }
	    var newKeys = helpers_1._objectKeys(obj);
	    var oldKeys = helpers_1._objectKeys(mirror);
	    var deleted = false;
	    //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
	    for (var t = oldKeys.length - 1; t >= 0; t--) {
	        var key = oldKeys[t];
	        var oldVal = mirror[key];
	        if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
	            var newVal = obj[key];
	            if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
	                _generate(oldVal, newVal, patches, path + "/" + helpers_1.escapePathComponent(key), invertible);
	            }
	            else {
	                if (oldVal !== newVal) {
	                    if (invertible) {
	                        patches.push({ op: "test", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });
	                    }
	                    patches.push({ op: "replace", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });
	                }
	            }
	        }
	        else if (Array.isArray(mirror) === Array.isArray(obj)) {
	            if (invertible) {
	                patches.push({ op: "test", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });
	            }
	            patches.push({ op: "remove", path: path + "/" + helpers_1.escapePathComponent(key) });
	            deleted = true; // property has been deleted
	        }
	        else {
	            if (invertible) {
	                patches.push({ op: "test", path: path, value: mirror });
	            }
	            patches.push({ op: "replace", path: path, value: obj });
	        }
	    }
	    if (!deleted && newKeys.length == oldKeys.length) {
	        return;
	    }
	    for (var t = 0; t < newKeys.length; t++) {
	        var key = newKeys[t];
	        if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {
	            patches.push({ op: "add", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });
	        }
	    }
	}
	/**
	 * Create an array of patches from the differences in two objects
	 */
	function compare$1(tree1, tree2, invertible) {
	    if (invertible === void 0) { invertible = false; }
	    var patches = [];
	    _generate(tree1, tree2, patches, '', invertible);
	    return patches;
	}
	duplex.compare = compare$1;
	/**
	 * Default export for backwards compat
	 */
	// import just to re-export as default
	var core$1 = core$2;
	var helpers_3 = helpers;
	duplex.default = __assign$1({}, core$1, { 
	    // duplex
	    unobserve: unobserve,
	    observe: observe,
	    generate: generate$3,
	    compare: compare$1,
	    // helpers
	    JsonPatchError: helpers_3.PatchError, deepClone: helpers_1._deepClone, escapePathComponent: helpers_1.escapePathComponent,
	    unescapePathComponent: helpers_3.unescapePathComponent });

	var random$2 = {};

	var system = {};

	var browser = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(browser, "__esModule", { value: true });
	var QUOTA = 65536;
	var BrowserRandomSource = /** @class */ (function () {
	    function BrowserRandomSource() {
	        this.isAvailable = false;
	        this.isInstantiated = false;
	        var browserCrypto = typeof self !== 'undefined'
	            ? (self.crypto || self.msCrypto) // IE11 has msCrypto
	            : null;
	        if (browserCrypto && browserCrypto.getRandomValues) {
	            this._crypto = browserCrypto;
	            this.isAvailable = true;
	            this.isInstantiated = true;
	        }
	    }
	    BrowserRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable || !this._crypto) {
	            throw new Error("Browser random byte generator is not available.");
	        }
	        var out = new Uint8Array(length);
	        for (var i = 0; i < out.length; i += QUOTA) {
	            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
	        }
	        return out;
	    };
	    return BrowserRandomSource;
	}());
	browser.BrowserRandomSource = BrowserRandomSource;

	var node = {};

	var wipe$1 = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(wipe$1, "__esModule", { value: true });
	/**
	 * Sets all values in the given array to zero and returns it.
	 *
	 * The fact that it sets bytes to zero can be relied on.
	 *
	 * There is no guarantee that this function makes data disappear from memory,
	 * as runtime implementation can, for example, have copying garbage collector
	 * that will make copies of sensitive data before we wipe it. Or that an
	 * operating system will write our data to swap or sleep image. Another thing
	 * is that an optimizing compiler can remove calls to this function or make it
	 * no-op. There's nothing we can do with it, so we just do our best and hope
	 * that everything will be okay and good will triumph over evil.
	 */
	function wipe(array) {
	    // Right now it's similar to array.fill(0). If it turns
	    // out that runtimes optimize this call away, maybe
	    // we can try something else.
	    for (var i = 0; i < array.length; i++) {
	        array[i] = 0;
	    }
	    return array;
	}
	wipe$1.wipe = wipe;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(node, "__esModule", { value: true });
	var wipe_1$2 = wipe$1;
	var NodeRandomSource = /** @class */ (function () {
	    function NodeRandomSource() {
	        this.isAvailable = false;
	        this.isInstantiated = false;
	        if (typeof commonjsRequire$1 !== "undefined") {
	            var nodeCrypto = crypto__default$1["default"];
	            if (nodeCrypto && nodeCrypto.randomBytes) {
	                this._crypto = nodeCrypto;
	                this.isAvailable = true;
	                this.isInstantiated = true;
	            }
	        }
	    }
	    NodeRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable || !this._crypto) {
	            throw new Error("Node.js random byte generator is not available.");
	        }
	        // Get random bytes (result is Buffer).
	        var buffer = this._crypto.randomBytes(length);
	        // Make sure we got the length that we requested.
	        if (buffer.length !== length) {
	            throw new Error("NodeRandomSource: got fewer bytes than requested");
	        }
	        // Allocate output array.
	        var out = new Uint8Array(length);
	        // Copy bytes from buffer to output.
	        for (var i = 0; i < out.length; i++) {
	            out[i] = buffer[i];
	        }
	        // Cleanup.
	        wipe_1$2.wipe(buffer);
	        return out;
	    };
	    return NodeRandomSource;
	}());
	node.NodeRandomSource = NodeRandomSource;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(system, "__esModule", { value: true });
	var browser_1 = browser;
	var node_1 = node;
	var SystemRandomSource = /** @class */ (function () {
	    function SystemRandomSource() {
	        this.isAvailable = false;
	        this.name = "";
	        // Try browser.
	        this._source = new browser_1.BrowserRandomSource();
	        if (this._source.isAvailable) {
	            this.isAvailable = true;
	            this.name = "Browser";
	            return;
	        }
	        // If no browser source, try Node.
	        this._source = new node_1.NodeRandomSource();
	        if (this._source.isAvailable) {
	            this.isAvailable = true;
	            this.name = "Node";
	            return;
	        }
	        // No sources, we're out of options.
	    }
	    SystemRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable) {
	            throw new Error("System random byte generator is not available.");
	        }
	        return this._source.randomBytes(length);
	    };
	    return SystemRandomSource;
	}());
	system.SystemRandomSource = SystemRandomSource;

	var binary = {};

	var int = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package int provides helper functions for integerss.
	 */
	// Shim using 16-bit pieces.
	function imulShim(a, b) {
	    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;
	    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;
	    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
	}
	/** 32-bit integer multiplication.  */
	// Use system Math.imul if available, otherwise use our shim.
	exports.mul = Math.imul || imulShim;
	/** 32-bit integer addition.  */
	function add(a, b) {
	    return (a + b) | 0;
	}
	exports.add = add;
	/**  32-bit integer subtraction.  */
	function sub(a, b) {
	    return (a - b) | 0;
	}
	exports.sub = sub;
	/** 32-bit integer left rotation */
	function rotl(x, n) {
	    return x << n | x >>> (32 - n);
	}
	exports.rotl = rotl;
	/** 32-bit integer left rotation */
	function rotr(x, n) {
	    return x << (32 - n) | x >>> n;
	}
	exports.rotr = rotr;
	function isIntegerShim(n) {
	    return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
	}
	/**
	 * Returns true if the argument is an integer number.
	 *
	 * In ES2015, Number.isInteger.
	 */
	exports.isInteger = Number.isInteger || isIntegerShim;
	/**
	 *  Math.pow(2, 53) - 1
	 *
	 *  In ES2015 Number.MAX_SAFE_INTEGER.
	 */
	exports.MAX_SAFE_INTEGER = 9007199254740991;
	/**
	 * Returns true if the argument is a safe integer number
	 * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
	 *
	 * In ES2015, Number.isSafeInteger.
	 */
	exports.isSafeInteger = function (n) {
	    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
	};

	}(int));

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(binary, "__esModule", { value: true });
	/**
	 * Package binary provides functions for encoding and decoding numbers in byte arrays.
	 */
	var int_1 = int;
	// TODO(dchest): add asserts for correct value ranges and array offsets.
	/**
	 * Reads 2 bytes from array starting at offset as big-endian
	 * signed 16-bit integer and returns it.
	 */
	function readInt16BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;
	}
	binary.readInt16BE = readInt16BE;
	/**
	 * Reads 2 bytes from array starting at offset as big-endian
	 * unsigned 16-bit integer and returns it.
	 */
	function readUint16BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;
	}
	binary.readUint16BE = readUint16BE;
	/**
	 * Reads 2 bytes from array starting at offset as little-endian
	 * signed 16-bit integer and returns it.
	 */
	function readInt16LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;
	}
	binary.readInt16LE = readInt16LE;
	/**
	 * Reads 2 bytes from array starting at offset as little-endian
	 * unsigned 16-bit integer and returns it.
	 */
	function readUint16LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 1] << 8) | array[offset]) >>> 0;
	}
	binary.readUint16LE = readUint16LE;
	/**
	 * Writes 2-byte big-endian representation of 16-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 2-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint16BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(2); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 8;
	    out[offset + 1] = value >>> 0;
	    return out;
	}
	binary.writeUint16BE = writeUint16BE;
	binary.writeInt16BE = writeUint16BE;
	/**
	 * Writes 2-byte little-endian representation of 16-bit unsigned
	 * value to array starting at offset.
	 *
	 * If byte array is not given, creates a new 2-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint16LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(2); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 0;
	    out[offset + 1] = value >>> 8;
	    return out;
	}
	binary.writeUint16LE = writeUint16LE;
	binary.writeInt16LE = writeUint16LE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * signed 32-bit integer and returns it.
	 */
	function readInt32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (array[offset] << 24) |
	        (array[offset + 1] << 16) |
	        (array[offset + 2] << 8) |
	        array[offset + 3];
	}
	binary.readInt32BE = readInt32BE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * unsigned 32-bit integer and returns it.
	 */
	function readUint32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset] << 24) |
	        (array[offset + 1] << 16) |
	        (array[offset + 2] << 8) |
	        array[offset + 3]) >>> 0;
	}
	binary.readUint32BE = readUint32BE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * signed 32-bit integer and returns it.
	 */
	function readInt32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (array[offset + 3] << 24) |
	        (array[offset + 2] << 16) |
	        (array[offset + 1] << 8) |
	        array[offset];
	}
	binary.readInt32LE = readInt32LE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * unsigned 32-bit integer and returns it.
	 */
	function readUint32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 3] << 24) |
	        (array[offset + 2] << 16) |
	        (array[offset + 1] << 8) |
	        array[offset]) >>> 0;
	}
	binary.readUint32LE = readUint32LE;
	/**
	 * Writes 4-byte big-endian representation of 32-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint32BE$1(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 24;
	    out[offset + 1] = value >>> 16;
	    out[offset + 2] = value >>> 8;
	    out[offset + 3] = value >>> 0;
	    return out;
	}
	binary.writeUint32BE = writeUint32BE$1;
	binary.writeInt32BE = writeUint32BE$1;
	/**
	 * Writes 4-byte little-endian representation of 32-bit unsigned
	 * value to array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint32LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 0;
	    out[offset + 1] = value >>> 8;
	    out[offset + 2] = value >>> 16;
	    out[offset + 3] = value >>> 24;
	    return out;
	}
	binary.writeUint32LE = writeUint32LE;
	binary.writeInt32LE = writeUint32LE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * signed 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports exact
	 * numbers in range -9007199254740991 to 9007199254740991.
	 * If the number stored in the byte array is outside this range,
	 * the result is not exact.
	 */
	function readInt64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var hi = readInt32BE(array, offset);
	    var lo = readInt32BE(array, offset + 4);
	    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
	}
	binary.readInt64BE = readInt64BE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * unsigned 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
	 */
	function readUint64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var hi = readUint32BE(array, offset);
	    var lo = readUint32BE(array, offset + 4);
	    return hi * 0x100000000 + lo;
	}
	binary.readUint64BE = readUint64BE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * signed 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports exact
	 * numbers in range -9007199254740991 to 9007199254740991.
	 * If the number stored in the byte array is outside this range,
	 * the result is not exact.
	 */
	function readInt64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var lo = readInt32LE(array, offset);
	    var hi = readInt32LE(array, offset + 4);
	    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
	}
	binary.readInt64LE = readInt64LE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * unsigned 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
	 */
	function readUint64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var lo = readUint32LE(array, offset);
	    var hi = readUint32LE(array, offset + 4);
	    return hi * 0x100000000 + lo;
	}
	binary.readUint64LE = readUint64LE;
	/**
	 * Writes 8-byte big-endian representation of 64-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * Due to JavaScript limitation, supports values up to 2^53-1.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint64BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    writeUint32BE$1(value / 0x100000000 >>> 0, out, offset);
	    writeUint32BE$1(value >>> 0, out, offset + 4);
	    return out;
	}
	binary.writeUint64BE = writeUint64BE;
	binary.writeInt64BE = writeUint64BE;
	/**
	 * Writes 8-byte little-endian representation of 64-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * Due to JavaScript limitation, supports values up to 2^53-1.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint64LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    writeUint32LE(value >>> 0, out, offset);
	    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
	    return out;
	}
	binary.writeUint64LE = writeUint64LE;
	binary.writeInt64LE = writeUint64LE;
	/**
	 * Reads bytes from array starting at offset as big-endian
	 * unsigned bitLen-bit integer and returns it.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 */
	function readUintBE(bitLength, array, offset) {
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("readUintBE supports only bitLengths divisible by 8");
	    }
	    if (bitLength / 8 > array.length - offset) {
	        throw new Error("readUintBE: array is too short for the given bitLength");
	    }
	    var result = 0;
	    var mul = 1;
	    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
	        result += array[i] * mul;
	        mul *= 256;
	    }
	    return result;
	}
	binary.readUintBE = readUintBE;
	/**
	 * Reads bytes from array starting at offset as little-endian
	 * unsigned bitLen-bit integer and returns it.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 */
	function readUintLE(bitLength, array, offset) {
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("readUintLE supports only bitLengths divisible by 8");
	    }
	    if (bitLength / 8 > array.length - offset) {
	        throw new Error("readUintLE: array is too short for the given bitLength");
	    }
	    var result = 0;
	    var mul = 1;
	    for (var i = offset; i < offset + bitLength / 8; i++) {
	        result += array[i] * mul;
	        mul *= 256;
	    }
	    return result;
	}
	binary.readUintLE = readUintLE;
	/**
	 * Writes a big-endian representation of bitLen-bit unsigned
	 * value to array starting at offset.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 *
	 * If byte array is not given, creates a new one.
	 *
	 * Returns the output byte array.
	 */
	function writeUintBE(bitLength, value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(bitLength / 8); }
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("writeUintBE supports only bitLengths divisible by 8");
	    }
	    if (!int_1.isSafeInteger(value)) {
	        throw new Error("writeUintBE value must be an integer");
	    }
	    var div = 1;
	    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
	        out[i] = (value / div) & 0xff;
	        div *= 256;
	    }
	    return out;
	}
	binary.writeUintBE = writeUintBE;
	/**
	 * Writes a little-endian representation of bitLen-bit unsigned
	 * value to array starting at offset.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 *
	 * If byte array is not given, creates a new one.
	 *
	 * Returns the output byte array.
	 */
	function writeUintLE(bitLength, value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(bitLength / 8); }
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("writeUintLE supports only bitLengths divisible by 8");
	    }
	    if (!int_1.isSafeInteger(value)) {
	        throw new Error("writeUintLE value must be an integer");
	    }
	    var div = 1;
	    for (var i = offset; i < offset + bitLength / 8; i++) {
	        out[i] = (value / div) & 0xff;
	        div *= 256;
	    }
	    return out;
	}
	binary.writeUintLE = writeUintLE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * 32-bit floating-point number and returns it.
	 */
	function readFloat32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat32(offset);
	}
	binary.readFloat32BE = readFloat32BE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * 32-bit floating-point number and returns it.
	 */
	function readFloat32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat32(offset, true);
	}
	binary.readFloat32LE = readFloat32LE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * 64-bit floating-point number ("double") and returns it.
	 */
	function readFloat64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat64(offset);
	}
	binary.readFloat64BE = readFloat64BE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * 64-bit floating-point number ("double") and returns it.
	 */
	function readFloat64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat64(offset, true);
	}
	binary.readFloat64LE = readFloat64LE;
	/**
	 * Writes 4-byte big-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat32BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat32(offset, value);
	    return out;
	}
	binary.writeFloat32BE = writeFloat32BE;
	/**
	 * Writes 4-byte little-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat32LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat32(offset, value, true);
	    return out;
	}
	binary.writeFloat32LE = writeFloat32LE;
	/**
	 * Writes 8-byte big-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat64BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat64(offset, value);
	    return out;
	}
	binary.writeFloat64BE = writeFloat64BE;
	/**
	 * Writes 8-byte little-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat64LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat64(offset, value, true);
	    return out;
	}
	binary.writeFloat64LE = writeFloat64LE;

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var system_1 = system;
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	exports.defaultRandomSource = new system_1.SystemRandomSource();
	function randomBytes(length, prng) {
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    return prng.randomBytes(length);
	}
	exports.randomBytes = randomBytes;
	/**
	 * Returns a uniformly random unsigned 32-bit integer.
	 */
	function randomUint32(prng) {
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    // Generate 4-byte random buffer.
	    var buf = randomBytes(4, prng);
	    // Convert bytes from buffer into a 32-bit integer.
	    // It's not important which byte order to use, since
	    // the result is random.
	    var result = binary_1.readUint32LE(buf);
	    // Clean the buffer.
	    wipe_1.wipe(buf);
	    return result;
	}
	exports.randomUint32 = randomUint32;
	/** 62 alphanumeric characters for default charset of randomString() */
	var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	/**
	 * Returns a uniform random string of the given length
	 * with characters from the given charset.
	 *
	 * Charset must not have more than 256 characters.
	 *
	 * Default charset generates case-sensitive alphanumeric
	 * strings (0-9, A-Z, a-z).
	 */
	function randomString(length, charset, prng) {
	    if (charset === void 0) { charset = ALPHANUMERIC; }
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    if (charset.length < 2) {
	        throw new Error("randomString charset is too short");
	    }
	    if (charset.length > 256) {
	        throw new Error("randomString charset is too long");
	    }
	    var out = '';
	    var charsLen = charset.length;
	    var maxByte = 256 - (256 % charsLen);
	    while (length > 0) {
	        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
	        for (var i = 0; i < buf.length && length > 0; i++) {
	            var randomByte = buf[i];
	            if (randomByte < maxByte) {
	                out += charset.charAt(randomByte % charsLen);
	                length--;
	            }
	        }
	        wipe_1.wipe(buf);
	    }
	    return out;
	}
	exports.randomString = randomString;
	/**
	 * Returns uniform random string containing at least the given
	 * number of bits of entropy.
	 *
	 * For example, randomStringForEntropy(128) will return a 22-character
	 * alphanumeric string, while randomStringForEntropy(128, "0123456789")
	 * will return a 39-character numeric string, both will contain at
	 * least 128 bits of entropy.
	 *
	 * Default charset generates case-sensitive alphanumeric
	 * strings (0-9, A-Z, a-z).
	 */
	function randomStringForEntropy(bits, charset, prng) {
	    if (charset === void 0) { charset = ALPHANUMERIC; }
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
	    return randomString(length, charset, prng);
	}
	exports.randomStringForEntropy = randomStringForEntropy;

	}(random$2));

	var __createBinding$h = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$h = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __decorate$2 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __importStar$h = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$h(result, mod, k);
	    __setModuleDefault$h(result, mod);
	    return result;
	};
	var __importDefault$l = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	var TileDocument_1;
	Object.defineProperty(tileDocument, "__esModule", { value: true });
	tileDocument.TileDocument = void 0;
	const fast_json_patch_1 = __importDefault$l(duplex);
	const uint8arrays$6 = __importStar$h(uint8arrays$7);
	const random_1$1 = random$2;
	const common_1$4 = lib$e;
	const streamid_1$2 = lib$f;
	const DEFAULT_CREATE_OPTS$1 = { anchor: true, publish: true, sync: common_1$4.SyncOptions.PREFER_CACHE };
	const DEFAULT_LOAD_OPTS$1 = { sync: common_1$4.SyncOptions.PREFER_CACHE };
	const DEFAULT_UPDATE_OPTS$1 = { anchor: true, publish: true, throwOnInvalidCommit: true };
	function headerFromMetadata(metadata, genesis) {
	    var _a, _b;
	    if (typeof (metadata === null || metadata === void 0 ? void 0 : metadata.schema) === 'string') {
	        try {
	            streamid_1$2.CommitID.fromString(metadata.schema);
	        }
	        catch (_c) {
	            throw new Error('Schema must be a CommitID');
	        }
	    }
	    const header = {
	        controllers: metadata === null || metadata === void 0 ? void 0 : metadata.controllers,
	        family: metadata === null || metadata === void 0 ? void 0 : metadata.family,
	        schema: (_a = metadata === null || metadata === void 0 ? void 0 : metadata.schema) === null || _a === void 0 ? void 0 : _a.toString(),
	        tags: metadata === null || metadata === void 0 ? void 0 : metadata.tags,
	    };
	    if (genesis) {
	        if (!(metadata === null || metadata === void 0 ? void 0 : metadata.deterministic)) {
	            header.unique = uint8arrays$6.toString(random_1$1.randomBytes(12), 'base64');
	        }
	        if (metadata === null || metadata === void 0 ? void 0 : metadata.forbidControllerChange) {
	            header.forbidControllerChange = true;
	        }
	    }
	    else {
	        if ((metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) !== undefined || ((_b = metadata) === null || _b === void 0 ? void 0 : _b.unique) !== undefined) {
	            throw new Error("Cannot change 'deterministic' or 'unique' properties on existing Streams");
	        }
	        if ((metadata === null || metadata === void 0 ? void 0 : metadata.forbidControllerChange) !== undefined) {
	            throw new Error("Cannot change 'forbidControllerChange' property on existing Streams");
	        }
	    }
	    Object.keys(header).forEach((key) => header[key] === undefined && delete header[key]);
	    return header;
	}
	async function _ensureAuthenticated(signer) {
	    if (signer.did == null) {
	        throw new Error('No DID provided');
	    }
	    if (!signer.did.authenticated) {
	        await signer.did.authenticate();
	        if (signer.loggerProvider) {
	            signer.loggerProvider.getDiagnosticsLogger().imp(`Now authenticated as DID ${signer.did.id}`);
	        }
	    }
	}
	async function _signDagJWS(signer, commit) {
	    await _ensureAuthenticated(signer);
	    return signer.did.createDagJWS(commit);
	}
	async function throwReadOnlyError$1() {
	    throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');
	}
	let TileDocument = TileDocument_1 = class TileDocument extends common_1$4.Stream {
	    constructor() {
	        super(...arguments);
	        this._isReadOnly = false;
	    }
	    get content() {
	        return super.content;
	    }
	    static async create(ceramic, content, metadata, opts = {}) {
	        opts = { ...DEFAULT_CREATE_OPTS$1, ...opts };
	        if (!(metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) && opts.syncTimeoutSeconds == undefined) {
	            opts.syncTimeoutSeconds = 0;
	        }
	        const commit = await TileDocument_1.makeGenesis(ceramic, content, metadata);
	        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
	    }
	    static async createFromGenesis(ceramic, genesisCommit, opts = {}) {
	        var _a;
	        opts = { ...DEFAULT_CREATE_OPTS$1, ...opts };
	        if (((_a = genesisCommit.header) === null || _a === void 0 ? void 0 : _a.unique) && opts.syncTimeoutSeconds == undefined) {
	            opts.syncTimeoutSeconds = 0;
	        }
	        const commit = genesisCommit.data ? await _signDagJWS(ceramic, genesisCommit) : genesisCommit;
	        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
	    }
	    static async deterministic(ceramic, metadata, opts = {}) {
	        opts = { ...DEFAULT_CREATE_OPTS$1, ...opts };
	        metadata = { ...metadata, deterministic: true };
	        if (metadata.family == null && metadata.tags == null) {
	            throw new Error('Family and/or tags are required when creating a deterministic tile document');
	        }
	        const commit = await TileDocument_1.makeGenesis(ceramic, null, metadata);
	        return ceramic.createStreamFromGenesis(TileDocument_1.STREAM_TYPE_ID, commit, opts);
	    }
	    static async load(ceramic, streamId, opts = {}) {
	        opts = { ...DEFAULT_LOAD_OPTS$1, ...opts };
	        const streamRef = streamid_1$2.StreamRef.from(streamId);
	        if (streamRef.type != TileDocument_1.STREAM_TYPE_ID) {
	            throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${TileDocument_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);
	        }
	        return ceramic.loadStream(streamRef, opts);
	    }
	    async update(content, metadata, opts = {}) {
	        opts = { ...DEFAULT_UPDATE_OPTS$1, ...opts };
	        const updateCommit = await this.makeCommit(this.api, content, metadata);
	        const updated = await this.api.applyCommit(this.id, updateCommit, opts);
	        this.state$.next(updated.state);
	    }
	    async patch(jsonPatch, opts = {}) {
	        opts = { ...DEFAULT_UPDATE_OPTS$1, ...opts };
	        const header = headerFromMetadata(this.metadata, false);
	        const rawCommit = {
	            header,
	            data: jsonPatch,
	            prev: this.tip,
	            id: this.state$.id.cid,
	        };
	        const commit = await _signDagJWS(this.api, rawCommit);
	        const updated = await this.api.applyCommit(this.id, commit, opts);
	        this.state$.next(updated.state);
	    }
	    makeReadOnly() {
	        this.update = throwReadOnlyError$1;
	        this.patch = throwReadOnlyError$1;
	        this.sync = throwReadOnlyError$1;
	        this._isReadOnly = true;
	    }
	    get isReadOnly() {
	        return this._isReadOnly;
	    }
	    async makeCommit(signer, newContent, newMetadata) {
	        var _a;
	        const header = headerFromMetadata(newMetadata, false);
	        if (newContent == null) {
	            newContent = this.content;
	        }
	        if (header.controllers && ((_a = header.controllers) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
	            throw new Error('Exactly one controller must be specified');
	        }
	        const patch = fast_json_patch_1.default.compare(this.content, newContent);
	        const commit = {
	            header,
	            data: patch,
	            prev: this.tip,
	            id: this.state.log[0].cid,
	        };
	        return _signDagJWS(signer, commit);
	    }
	    static async makeGenesis(signer, content, metadata) {
	        var _a;
	        if (!metadata) {
	            metadata = {};
	        }
	        if (!metadata.controllers || metadata.controllers.length === 0) {
	            if (signer.did) {
	                await _ensureAuthenticated(signer);
	                metadata.controllers = [signer.did.id];
	            }
	            else {
	                throw new Error('No controllers specified');
	            }
	        }
	        if (((_a = metadata.controllers) === null || _a === void 0 ? void 0 : _a.length) !== 1) {
	            throw new Error('Exactly one controller must be specified');
	        }
	        const header = headerFromMetadata(metadata, true);
	        if ((metadata === null || metadata === void 0 ? void 0 : metadata.deterministic) && content) {
	            throw new Error('Initial content must be null when creating a deterministic Tile document');
	        }
	        if (content == null) {
	            return { header };
	        }
	        const commit = { data: content, header };
	        return await _signDagJWS(signer, commit);
	    }
	};
	TileDocument.STREAM_TYPE_NAME = 'tile';
	TileDocument.STREAM_TYPE_ID = 0;
	TileDocument = TileDocument_1 = __decorate$2([
	    common_1$4.StreamStatic()
	], TileDocument);
	tileDocument.TileDocument = TileDocument;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(tileDocument, exports);

	}(lib$a));

	var lib$9 = {};

	var caip10Link = {};

	var cjs = {};

	var account$1 = {};

	var chain = {};

	var spec = {};

	Object.defineProperty(spec, "__esModule", { value: true });
	const CAIP2 = {
	    name: "chainId",
	    regex: "[-:a-zA-Z0-9]{5,64}",
	    parameters: {
	        delimiter: ":",
	        values: {
	            0: {
	                name: "namespace",
	                regex: "[-a-z0-9]{3,16}",
	            },
	            1: {
	                name: "reference",
	                regex: "[-a-zA-Z0-9]{1,47}",
	            },
	        },
	    },
	};
	const CAIP10 = {
	    name: "accountId",
	    regex: "[-@:a-zA-Z0-9]{7,128}",
	    parameters: {
	        delimiter: "@",
	        values: {
	            0: {
	                name: "address",
	                regex: "[a-zA-Z0-9]{1,63}",
	            },
	            1: CAIP2,
	        },
	    },
	};
	spec.CAIP = {
	    "2": CAIP2,
	    "10": CAIP10,
	};

	var utils$q = {};

	Object.defineProperty(utils$q, "__esModule", { value: true });
	function splitParams(id, spec) {
	    return id.split(spec.parameters.delimiter);
	}
	utils$q.splitParams = splitParams;
	function getParams(id, spec) {
	    const arr = splitParams(id, spec);
	    const params = {};
	    arr.forEach((value, index) => {
	        params[spec.parameters.values[index].name] = value;
	    });
	    return params;
	}
	utils$q.getParams = getParams;
	function joinParams(params, spec) {
	    return Object.values(spec.parameters.values)
	        .map(parameter => {
	        const param = params[parameter.name];
	        return typeof param === "string"
	            ? param
	            : joinParams(param, parameter);
	    })
	        .join(spec.parameters.delimiter);
	}
	utils$q.joinParams = joinParams;
	function isValidId(id, spec) {
	    if (!new RegExp(spec.regex).test(id))
	        return false;
	    const params = splitParams(id, spec);
	    if (params.length !== Object.keys(spec.parameters.values).length)
	        return false;
	    const matches = params
	        .map((param, index) => new RegExp(spec.parameters.values[index].regex).test(param))
	        .filter(x => !!x);
	    if (matches.length !== params.length)
	        return false;
	    return true;
	}
	utils$q.isValidId = isValidId;

	Object.defineProperty(chain, "__esModule", { value: true });
	const spec_1$1 = spec;
	const utils_1$5 = utils$q;
	class ChainID {
	    constructor(params) {
	        if (typeof params === "string") {
	            params = ChainID.parse(params);
	        }
	        this.namespace = params.namespace;
	        this.reference = params.reference;
	    }
	    static parse(id) {
	        if (!utils_1$5.isValidId(id, this.spec)) {
	            throw new Error(`Invalid ${this.spec.name} provided: ${id}`);
	        }
	        return new ChainID(utils_1$5.getParams(id, this.spec)).toJson();
	    }
	    static format(params) {
	        return utils_1$5.joinParams(params, this.spec);
	    }
	    toString() {
	        return ChainID.format(this.toJson());
	    }
	    toJson() {
	        return {
	            namespace: this.namespace,
	            reference: this.reference,
	        };
	    }
	}
	chain.ChainID = ChainID;
	ChainID.spec = spec_1$1.CAIP["2"];

	Object.defineProperty(account$1, "__esModule", { value: true });
	const chain_1 = chain;
	const spec_1 = spec;
	const utils_1$4 = utils$q;
	class AccountID {
	    constructor(params) {
	        if (typeof params === "string") {
	            params = AccountID.parse(params);
	        }
	        this.chainId = new chain_1.ChainID(params.chainId);
	        this.address = params.address;
	    }
	    static parse(id) {
	        if (!utils_1$4.isValidId(id, this.spec)) {
	            throw new Error(`Invalid ${this.spec.name} provided: ${id}`);
	        }
	        return new AccountID(utils_1$4.getParams(id, this.spec)).toJson();
	    }
	    static format(params) {
	        return utils_1$4.joinParams(params, this.spec);
	    }
	    toString() {
	        return AccountID.format(this.toJson());
	    }
	    toJson() {
	        return {
	            chainId: this.chainId.toJson(),
	            address: this.address,
	        };
	    }
	}
	account$1.AccountID = AccountID;
	AccountID.spec = spec_1.CAIP["10"];

	(function (exports) {
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(account$1);
	__export(chain);

	}(cjs));

	// Copyright 2018 Consensys AG
	function _catch(body, recover) {
	  try {
	    var result = body();
	  } catch (e) {
	    return recover(e);
	  }

	  if (result && result.then) {
	    return result.then(void 0, recover);
	  }

	  return result;
	}

	function inMemoryCache() {
	  const cache = new Map();
	  return function (parsed, resolve) {
	    try {
	      let _exit;

	      function _temp2(_result) {
	        if (_exit) return _result;
	        const cached = cache.get(parsed.didUrl);
	        return cached !== undefined ? cached : Promise.resolve(resolve()).then(function (result) {
	          var _result$didResolution;

	          if (((_result$didResolution = result.didResolutionMetadata) == null ? void 0 : _result$didResolution.error) !== 'notFound') {
	            cache.set(parsed.didUrl, result);
	          }

	          return result;
	        });
	      }

	      const _temp = function () {
	        if (parsed.params && parsed.params['no-cache'] === 'true') {
	          _exit = 1;
	          return Promise.resolve(resolve());
	        }
	      }();

	      return Promise.resolve(_temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}
	function noCache(parsed, resolve) {
	  return resolve();
	}
	const PCT_ENCODED = '(?:%[0-9a-fA-F]{2})';
	const ID_CHAR = `(?:[a-zA-Z0-9._-]|${PCT_ENCODED})`;
	const METHOD = '([a-z0-9]+)';
	const METHOD_ID = `((?:${ID_CHAR}*:)*(${ID_CHAR}+))`;
	const PARAM_CHAR = '[a-zA-Z0-9_.:%-]';
	const PARAM = `;${PARAM_CHAR}+=${PARAM_CHAR}*`;
	const PARAMS = `((${PARAM})*)`;
	const PATH = `(/[^#?]*)?`;
	const QUERY = `([?][^#]*)?`;
	const FRAGMENT = `(#.*)?`;
	const DID_MATCHER = new RegExp(`^did:${METHOD}:${METHOD_ID}${PARAMS}${PATH}${QUERY}${FRAGMENT}$`);
	function parse(didUrl) {
	  if (didUrl === '' || !didUrl) return null;
	  const sections = didUrl.match(DID_MATCHER);

	  if (sections) {
	    const parts = {
	      did: `did:${sections[1]}:${sections[2]}`,
	      method: sections[1],
	      id: sections[2],
	      didUrl
	    };

	    if (sections[4]) {
	      const params = sections[4].slice(1).split(';');
	      parts.params = {};

	      for (const p of params) {
	        const kv = p.split('=');
	        parts.params[kv[0]] = kv[1];
	      }
	    }

	    if (sections[6]) parts.path = sections[6];
	    if (sections[7]) parts.query = sections[7].slice(1);
	    if (sections[8]) parts.fragment = sections[8].slice(1);
	    return parts;
	  }

	  return null;
	}
	const EMPTY_RESULT = {
	  didResolutionMetadata: {},
	  didDocument: null,
	  didDocumentMetadata: {}
	};
	function wrapLegacyResolver(resolve) {
	  return function (did, parsed, resolver) {
	    try {
	      return Promise.resolve(_catch(function () {
	        return Promise.resolve(resolve(did, parsed, resolver)).then(function (doc) {
	          return { ...EMPTY_RESULT,
	            didResolutionMetadata: {
	              contentType: 'application/did+ld+json'
	            },
	            didDocument: doc
	          };
	        });
	      }, function (e) {
	        return { ...EMPTY_RESULT,
	          didResolutionMetadata: {
	            error: 'notFound',
	            message: e.toString() // This is not in spec, nut may be helpful

	          }
	        };
	      }));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}
	class Resolver {
	  constructor(registry = {}, options = {}) {
	    this.registry = void 0;
	    this.cache = void 0;
	    this.registry = registry;
	    this.cache = options.cache === true ? inMemoryCache() : options.cache || noCache;

	    if (options.legacyResolvers) {
	      Object.keys(options.legacyResolvers).map(methodName => {
	        if (!this.registry[methodName]) {
	          this.registry[methodName] = wrapLegacyResolver( // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	          options.legacyResolvers[methodName]);
	        }
	      });
	    }
	  }

	  resolve(didUrl, options = {}) {
	    try {
	      const _this = this;

	      const parsed = parse(didUrl);

	      if (parsed === null) {
	        return Promise.resolve({ ...EMPTY_RESULT,
	          didResolutionMetadata: {
	            error: 'invalidDid'
	          }
	        });
	      }

	      const resolver = _this.registry[parsed.method];

	      if (!resolver) {
	        return Promise.resolve({ ...EMPTY_RESULT,
	          didResolutionMetadata: {
	            error: 'unsupportedDidMethod'
	          }
	        });
	      }

	      return Promise.resolve(_this.cache(parsed, () => resolver(parsed.did, parsed, _this, options)));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  }

	}

	var resolver_module = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Resolver: Resolver,
		inMemoryCache: inMemoryCache,
		noCache: noCache,
		parse: parse,
		wrapLegacyResolver: wrapLegacyResolver
	});

	var require$$7 = /*@__PURE__*/getAugmentedNamespace(resolver_module);

	var __decorate$1 = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var Caip10Link_1;
	Object.defineProperty(caip10Link, "__esModule", { value: true });
	caip10Link.Caip10Link = void 0;
	const common_1$3 = lib$e;
	const streamid_1$1 = lib$f;
	const caip_1$6 = cjs;
	const did_resolver_1$2 = require$$7;
	const throwReadOnlyError = () => {
	    throw new Error('Historical stream commits cannot be modified. Load the stream without specifying a commit to make updates.');
	};
	const DEFAULT_CREATE_OPTS = { anchor: false, publish: true, sync: common_1$3.SyncOptions.PREFER_CACHE };
	const DEFAULT_UPDATE_OPTS = { anchor: true, publish: true, throwOnInvalidCommit: true };
	const DEFAULT_LOAD_OPTS = { sync: common_1$3.SyncOptions.PREFER_CACHE };
	let Caip10Link = Caip10Link_1 = class Caip10Link extends common_1$3.Stream {
	    constructor() {
	        super(...arguments);
	        this._isReadOnly = false;
	    }
	    get did() {
	        return this.content;
	    }
	    static async fromAccount(ceramic, accountId, opts = {}) {
	        opts = { ...DEFAULT_CREATE_OPTS, ...opts };
	        const normalizedAccountId = new caip_1$6.AccountID(accountId);
	        const genesisCommit = Caip10Link_1.makeGenesis(normalizedAccountId);
	        return Caip10Link_1.fromGenesis(ceramic, genesisCommit, opts);
	    }
	    static async fromGenesis(ceramic, genesisCommit, opts = {}) {
	        opts = { ...DEFAULT_CREATE_OPTS, ...opts };
	        return ceramic.createStreamFromGenesis(Caip10Link_1.STREAM_TYPE_ID, genesisCommit, opts);
	    }
	    async setDid(did, authProvider, opts = {}) {
	        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };
	        const didStr = typeof did == 'string' ? did.trim() : did.id;
	        const parsedDid = did_resolver_1$2.parse(didStr);
	        if ((parsedDid === null || parsedDid === void 0 ? void 0 : parsedDid.did) !== didStr) {
	            throw new Error(`DID is not valid: '${didStr}'`);
	        }
	        const linkProof = await authProvider.createLink(didStr);
	        return this.setDidProof(linkProof, opts);
	    }
	    async setDidProof(proof, opts = {}) {
	        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };
	        const commit = this.makeCommit(proof);
	        const updated = await this.api.applyCommit(this.id, commit, opts);
	        this.state$.next(updated.state);
	    }
	    async clearDid(authProvider, opts = {}) {
	        opts = { ...DEFAULT_UPDATE_OPTS, ...opts };
	        const linkProof = await authProvider.createLink('');
	        return this.setDidProof(linkProof, opts);
	    }
	    static async load(ceramic, streamId, opts = {}) {
	        opts = { ...DEFAULT_LOAD_OPTS, ...opts };
	        const streamRef = streamid_1$1.StreamRef.from(streamId);
	        if (streamRef.type != Caip10Link_1.STREAM_TYPE_ID) {
	            throw new Error(`StreamID ${streamRef.toString()} does not refer to a '${Caip10Link_1.STREAM_TYPE_NAME}' stream, but to a ${streamRef.typeName}`);
	        }
	        return ceramic.loadStream(streamRef, opts);
	    }
	    static makeGenesis(accountId) {
	        if (accountId.chainId.namespace === 'eip155') {
	            accountId.address = accountId.address.toLowerCase();
	        }
	        return {
	            header: {
	                controllers: [accountId.toString()],
	                family: `caip10-${accountId.chainId.toString()}`,
	            },
	        };
	    }
	    makeCommit(proof) {
	        return { data: proof, prev: this.tip, id: this.state$.id.cid };
	    }
	    makeReadOnly() {
	        this.setDidProof = throwReadOnlyError;
	        this.setDid = throwReadOnlyError;
	        this.sync = throwReadOnlyError;
	        this._isReadOnly = true;
	    }
	    get isReadOnly() {
	        return this._isReadOnly;
	    }
	};
	Caip10Link.STREAM_TYPE_NAME = 'caip10-link';
	Caip10Link.STREAM_TYPE_ID = 1;
	Caip10Link = Caip10Link_1 = __decorate$1([
	    common_1$3.StreamStatic()
	], Caip10Link);
	caip10Link.Caip10Link = Caip10Link;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(caip10Link, exports);

	}(lib$9));

	var remotePinApi = {};

	Object.defineProperty(remotePinApi, "__esModule", { value: true });
	remotePinApi.RemotePinApi = void 0;
	const common_1$2 = lib$e;
	class RemotePinApi {
	    constructor(_apiUrl) {
	        this._apiUrl = _apiUrl;
	    }
	    async add(streamId, force) {
	        const args = {};
	        if (force) {
	            args.force = true;
	        }
	        await common_1$2.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, {
	            method: 'post',
	            body: args,
	        });
	    }
	    async rm(streamId, opts) {
	        await common_1$2.fetchJson(this._apiUrl + '/pins' + `/${streamId.toString()}`, {
	            method: 'delete',
	            body: { opts },
	        });
	    }
	    async ls(streamId) {
	        let url = this._apiUrl + '/pins';
	        if (streamId) {
	            url += `/${streamId.toString()}`;
	        }
	        const result = await common_1$2.fetchJson(url);
	        const { pinnedStreamIds } = result;
	        return {
	            [Symbol.asyncIterator]() {
	                let index = 0;
	                return {
	                    next() {
	                        if (index === pinnedStreamIds.length) {
	                            return Promise.resolve({ value: null, done: true });
	                        }
	                        return Promise.resolve({ value: pinnedStreamIds[index++], done: false });
	                    },
	                };
	            },
	        };
	    }
	}
	remotePinApi.RemotePinApi = RemotePinApi;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CeramicClient = exports.DEFAULT_CLIENT_CONFIG = void 0;
	const utils_1 = utils$w;
	const document_1 = document$1;
	const common_1 = lib$e;
	const stream_tile_1 = lib$a;
	const stream_caip10_link_1 = lib$9;
	const streamid_1 = lib$f;
	const remote_pin_api_1 = remotePinApi;
	const API_PATH = '/api/v0';
	const CERAMIC_HOST = 'http://localhost:7007';
	exports.DEFAULT_CLIENT_CONFIG = {
	    syncInterval: 5000,
	};
	const DEFAULT_APPLY_COMMIT_OPTS = { anchor: true, publish: true, sync: common_1.SyncOptions.PREFER_CACHE };
	const DEFAULT_CREATE_FROM_GENESIS_OPTS = {
	    anchor: true,
	    publish: true,
	    sync: common_1.SyncOptions.PREFER_CACHE,
	};
	const DEFAULT_LOAD_OPTS = { sync: common_1.SyncOptions.PREFER_CACHE };
	class CeramicClient {
	    constructor(apiHost = CERAMIC_HOST, config = {}) {
	        this._config = { ...exports.DEFAULT_CLIENT_CONFIG, ...config };
	        this._apiUrl = utils_1.combineURLs(apiHost, API_PATH);
	        this._streamCache = new Map();
	        this.context = { api: this };
	        this.pin = new remote_pin_api_1.RemotePinApi(this._apiUrl);
	        this._streamConstructors = {
	            [stream_tile_1.TileDocument.STREAM_TYPE_ID]: stream_tile_1.TileDocument,
	            [stream_caip10_link_1.Caip10Link.STREAM_TYPE_ID]: stream_caip10_link_1.Caip10Link,
	        };
	    }
	    get did() {
	        return this.context.did;
	    }
	    set did(did) {
	        this.context.did = did;
	    }
	    async createStreamFromGenesis(type, genesis, opts = {}) {
	        opts = { ...DEFAULT_CREATE_FROM_GENESIS_OPTS, ...opts };
	        const stream = await document_1.Document.createFromGenesis(this._apiUrl, type, genesis, opts, this._config.syncInterval);
	        const found = this._streamCache.get(stream.id.toString());
	        if (found) {
	            if (!common_1.StreamUtils.statesEqual(stream.state, found.state))
	                found.next(stream.state);
	            return this.buildStream(found);
	        }
	        else {
	            this._streamCache.set(stream.id.toString(), stream);
	            return this.buildStream(stream);
	        }
	    }
	    async loadStream(streamId, opts = {}) {
	        opts = { ...DEFAULT_LOAD_OPTS, ...opts };
	        const streamRef = streamid_1.StreamRef.from(streamId);
	        let stream = this._streamCache.get(streamRef.baseID.toString());
	        if (stream) {
	            await stream._syncState(streamRef, opts);
	        }
	        else {
	            stream = await document_1.Document.load(streamRef, this._apiUrl, this._config.syncInterval, opts);
	            this._streamCache.set(stream.id.toString(), stream);
	        }
	        return this.buildStream(stream);
	    }
	    async multiQuery(queries) {
	        const queriesJSON = queries.map((q) => {
	            return {
	                ...q,
	                streamId: typeof q.streamId === 'string' ? q.streamId : q.streamId.toString(),
	            };
	        });
	        const results = await common_1.fetchJson(this._apiUrl + '/multiqueries', {
	            method: 'post',
	            body: {
	                queries: queriesJSON,
	            },
	        });
	        return Object.entries(results).reduce((acc, e) => {
	            const [k, v] = e;
	            const state = common_1.StreamUtils.deserializeState(v);
	            const stream = new document_1.Document(state, this._apiUrl, this._config.syncInterval);
	            acc[k] = this.buildStream(stream);
	            return acc;
	        }, {});
	    }
	    loadStreamCommits(streamId) {
	        const effectiveStreamId = utils_1.typeStreamID(streamId);
	        return document_1.Document.loadStreamCommits(effectiveStreamId, this._apiUrl);
	    }
	    async applyCommit(streamId, commit, opts = {}) {
	        opts = { ...DEFAULT_APPLY_COMMIT_OPTS, ...opts };
	        const effectiveStreamId = utils_1.typeStreamID(streamId);
	        const document = await document_1.Document.applyCommit(this._apiUrl, effectiveStreamId, commit, opts, this._config.syncInterval);
	        const fromCache = this._streamCache.get(effectiveStreamId.toString());
	        if (fromCache) {
	            fromCache.next(document.state);
	            return this.buildStream(document);
	        }
	        else {
	            this._streamCache.set(effectiveStreamId.toString(), document);
	            return this.buildStream(document);
	        }
	    }
	    async requestAnchor(streamId, opts = {}) {
	        opts = { ...DEFAULT_LOAD_OPTS, ...opts };
	        const { anchorStatus } = await common_1.fetchJson(`${this._apiUrl}/streams/${streamId.toString()}/anchor`, {
	            method: 'post',
	            body: {
	                opts,
	            },
	        });
	        return anchorStatus;
	    }
	    addStreamHandler(streamHandler) {
	        this._streamConstructors[streamHandler.name] = streamHandler.stream_constructor;
	    }
	    findStreamConstructor(type) {
	        const constructor = this._streamConstructors[type];
	        if (constructor) {
	            return constructor;
	        }
	        else {
	            throw new Error(`Failed to find constructor for stream ${type}`);
	        }
	    }
	    buildStream(stream) {
	        const streamConstructor = this.findStreamConstructor(stream.state.type);
	        return new streamConstructor(stream, this.context);
	    }
	    async setDID(did) {
	        this.context.did = did;
	    }
	    async getSupportedChains() {
	        if (this._supportedChains) {
	            return this._supportedChains;
	        }
	        const { supportedChains } = await common_1.fetchJson(this._apiUrl + '/node/chains');
	        this._supportedChains = supportedChains;
	        return supportedChains;
	    }
	    async close() {
	        Array.from(this._streamCache).map(([, stream]) => {
	            stream.complete();
	        });
	        this._streamCache.clear();
	    }
	}
	exports.CeramicClient = CeramicClient;
	exports.default = CeramicClient;

	}(ceramicHttpClient));

	var lib$8 = {};

	var secp256k1$3 = {};

	var __createBinding$g = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$g = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$g = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$g(result, mod, k);
	    __setModuleDefault$g(result, mod);
	    return result;
	};
	Object.defineProperty(secp256k1$3, "__esModule", { value: true });
	secp256k1$3.keyToDidDoc = void 0;
	const u8a$6 = __importStar$g(uint8arrays$7);
	function keyToDidDoc$1(pubKeyBytes, fingerprint) {
	    const did = `did:key:${fingerprint}`;
	    const keyId = `${did}#${fingerprint}`;
	    return {
	        id: did,
	        verificationMethod: [
	            {
	                id: keyId,
	                type: 'Secp256k1VerificationKey2018',
	                controller: did,
	                publicKeyBase58: u8a$6.toString(pubKeyBytes, 'base58btc'),
	            },
	        ],
	        authentication: [keyId],
	        assertionMethod: [keyId],
	        capabilityDelegation: [keyId],
	        capabilityInvocation: [keyId],
	    };
	}
	secp256k1$3.keyToDidDoc = keyToDidDoc$1;

	var ed25519$2 = {};

	var ed25519$1 = {};

	var sha512$1 = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	exports.DIGEST_LENGTH = 64;
	exports.BLOCK_SIZE = 128;
	/**
	 * SHA-2-512 cryptographic hash algorithm.
	 */
	var SHA512 = /** @class */ (function () {
	    function SHA512() {
	        /** Length of hash output */
	        this.digestLength = exports.DIGEST_LENGTH;
	        /** Block size */
	        this.blockSize = exports.BLOCK_SIZE;
	        // Note: Int32Array is used instead of Uint32Array for performance reasons.
	        this._stateHi = new Int32Array(8); // hash state, high bytes
	        this._stateLo = new Int32Array(8); // hash state, low bytes
	        this._tempHi = new Int32Array(16); // temporary state, high bytes
	        this._tempLo = new Int32Array(16); // temporary state, low bytes
	        this._buffer = new Uint8Array(256); // buffer for data to hash
	        this._bufferLength = 0; // number of bytes in buffer
	        this._bytesHashed = 0; // number of total bytes hashed
	        this._finished = false; // indicates whether the hash was finalized
	        this.reset();
	    }
	    SHA512.prototype._initState = function () {
	        this._stateHi[0] = 0x6a09e667;
	        this._stateHi[1] = 0xbb67ae85;
	        this._stateHi[2] = 0x3c6ef372;
	        this._stateHi[3] = 0xa54ff53a;
	        this._stateHi[4] = 0x510e527f;
	        this._stateHi[5] = 0x9b05688c;
	        this._stateHi[6] = 0x1f83d9ab;
	        this._stateHi[7] = 0x5be0cd19;
	        this._stateLo[0] = 0xf3bcc908;
	        this._stateLo[1] = 0x84caa73b;
	        this._stateLo[2] = 0xfe94f82b;
	        this._stateLo[3] = 0x5f1d36f1;
	        this._stateLo[4] = 0xade682d1;
	        this._stateLo[5] = 0x2b3e6c1f;
	        this._stateLo[6] = 0xfb41bd6b;
	        this._stateLo[7] = 0x137e2179;
	    };
	    /**
	     * Resets hash state making it possible
	     * to re-use this instance to hash other data.
	     */
	    SHA512.prototype.reset = function () {
	        this._initState();
	        this._bufferLength = 0;
	        this._bytesHashed = 0;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans internal buffers and resets hash state.
	     */
	    SHA512.prototype.clean = function () {
	        wipe_1.wipe(this._buffer);
	        wipe_1.wipe(this._tempHi);
	        wipe_1.wipe(this._tempLo);
	        this.reset();
	    };
	    /**
	     * Updates hash state with the given data.
	     *
	     * Throws error when trying to update already finalized hash:
	     * instance must be reset to update it again.
	     */
	    SHA512.prototype.update = function (data, dataLength) {
	        if (dataLength === void 0) { dataLength = data.length; }
	        if (this._finished) {
	            throw new Error("SHA512: can't update because hash was finished.");
	        }
	        var dataPos = 0;
	        this._bytesHashed += dataLength;
	        if (this._bufferLength > 0) {
	            while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {
	                this._buffer[this._bufferLength++] = data[dataPos++];
	                dataLength--;
	            }
	            if (this._bufferLength === this.blockSize) {
	                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
	                this._bufferLength = 0;
	            }
	        }
	        if (dataLength >= this.blockSize) {
	            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
	            dataLength %= this.blockSize;
	        }
	        while (dataLength > 0) {
	            this._buffer[this._bufferLength++] = data[dataPos++];
	            dataLength--;
	        }
	        return this;
	    };
	    /**
	     * Finalizes hash state and puts hash into out.
	     * If hash was already finalized, puts the same value.
	     */
	    SHA512.prototype.finish = function (out) {
	        if (!this._finished) {
	            var bytesHashed = this._bytesHashed;
	            var left = this._bufferLength;
	            var bitLenHi = (bytesHashed / 0x20000000) | 0;
	            var bitLenLo = bytesHashed << 3;
	            var padLength = (bytesHashed % 128 < 112) ? 128 : 256;
	            this._buffer[left] = 0x80;
	            for (var i = left + 1; i < padLength - 8; i++) {
	                this._buffer[i] = 0;
	            }
	            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
	            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
	            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
	            this._finished = true;
	        }
	        for (var i = 0; i < this.digestLength / 8; i++) {
	            binary_1.writeUint32BE(this._stateHi[i], out, i * 8);
	            binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);
	        }
	        return this;
	    };
	    /**
	     * Returns the final hash digest.
	     */
	    SHA512.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be
	     * used with restoreState(). Only chain value is saved, not buffers or
	     * other state variables.
	     */
	    SHA512.prototype.saveState = function () {
	        if (this._finished) {
	            throw new Error("SHA256: cannot save finished state");
	        }
	        return {
	            stateHi: new Int32Array(this._stateHi),
	            stateLo: new Int32Array(this._stateLo),
	            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
	            bufferLength: this._bufferLength,
	            bytesHashed: this._bytesHashed
	        };
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by
	     * saveState() and sets bytesHashed to the given value.
	     */
	    SHA512.prototype.restoreState = function (savedState) {
	        this._stateHi.set(savedState.stateHi);
	        this._stateLo.set(savedState.stateLo);
	        this._bufferLength = savedState.bufferLength;
	        if (savedState.buffer) {
	            this._buffer.set(savedState.buffer);
	        }
	        this._bytesHashed = savedState.bytesHashed;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans state returned by saveState().
	     */
	    SHA512.prototype.cleanSavedState = function (savedState) {
	        wipe_1.wipe(savedState.stateHi);
	        wipe_1.wipe(savedState.stateLo);
	        if (savedState.buffer) {
	            wipe_1.wipe(savedState.buffer);
	        }
	        savedState.bufferLength = 0;
	        savedState.bytesHashed = 0;
	    };
	    return SHA512;
	}());
	exports.SHA512 = SHA512;
	// Constants
	var K = new Int32Array([
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	]);
	function hashBlocks(wh, wl, hh, hl, m, pos, len) {
	    var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
	    var h, l;
	    var th, tl;
	    var a, b, c, d;
	    while (len >= 128) {
	        for (var i = 0; i < 16; i++) {
	            var j = 8 * i + pos;
	            wh[i] = binary_1.readUint32BE(m, j);
	            wl[i] = binary_1.readUint32BE(m, j + 4);
	        }
	        for (var i = 0; i < 80; i++) {
	            var bh0 = ah0;
	            var bh1 = ah1;
	            var bh2 = ah2;
	            var bh3 = ah3;
	            var bh4 = ah4;
	            var bh5 = ah5;
	            var bh6 = ah6;
	            var bh7 = ah7;
	            var bl0 = al0;
	            var bl1 = al1;
	            var bl2 = al2;
	            var bl3 = al3;
	            var bl4 = al4;
	            var bl5 = al5;
	            var bl6 = al6;
	            var bl7 = al7;
	            // add
	            h = ah7;
	            l = al7;
	            a = l & 0xffff;
	            b = l >>> 16;
	            c = h & 0xffff;
	            d = h >>> 16;
	            // Sigma1
	            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) |
	                (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
	            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) |
	                (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            // Ch
	            h = (ah4 & ah5) ^ (~ah4 & ah6);
	            l = (al4 & al5) ^ (~al4 & al6);
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            // K
	            h = K[i * 2];
	            l = K[i * 2 + 1];
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            // w
	            h = wh[i % 16];
	            l = wl[i % 16];
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            b += a >>> 16;
	            c += b >>> 16;
	            d += c >>> 16;
	            th = c & 0xffff | d << 16;
	            tl = a & 0xffff | b << 16;
	            // add
	            h = th;
	            l = tl;
	            a = l & 0xffff;
	            b = l >>> 16;
	            c = h & 0xffff;
	            d = h >>> 16;
	            // Sigma0
	            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) |
	                (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
	            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) |
	                (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            // Maj
	            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            b += a >>> 16;
	            c += b >>> 16;
	            d += c >>> 16;
	            bh7 = (c & 0xffff) | (d << 16);
	            bl7 = (a & 0xffff) | (b << 16);
	            // add
	            h = bh3;
	            l = bl3;
	            a = l & 0xffff;
	            b = l >>> 16;
	            c = h & 0xffff;
	            d = h >>> 16;
	            h = th;
	            l = tl;
	            a += l & 0xffff;
	            b += l >>> 16;
	            c += h & 0xffff;
	            d += h >>> 16;
	            b += a >>> 16;
	            c += b >>> 16;
	            d += c >>> 16;
	            bh3 = (c & 0xffff) | (d << 16);
	            bl3 = (a & 0xffff) | (b << 16);
	            ah1 = bh0;
	            ah2 = bh1;
	            ah3 = bh2;
	            ah4 = bh3;
	            ah5 = bh4;
	            ah6 = bh5;
	            ah7 = bh6;
	            ah0 = bh7;
	            al1 = bl0;
	            al2 = bl1;
	            al3 = bl2;
	            al4 = bl3;
	            al5 = bl4;
	            al6 = bl5;
	            al7 = bl6;
	            al0 = bl7;
	            if (i % 16 === 15) {
	                for (var j = 0; j < 16; j++) {
	                    // add
	                    h = wh[j];
	                    l = wl[j];
	                    a = l & 0xffff;
	                    b = l >>> 16;
	                    c = h & 0xffff;
	                    d = h >>> 16;
	                    h = wh[(j + 9) % 16];
	                    l = wl[(j + 9) % 16];
	                    a += l & 0xffff;
	                    b += l >>> 16;
	                    c += h & 0xffff;
	                    d += h >>> 16;
	                    // sigma0
	                    th = wh[(j + 1) % 16];
	                    tl = wl[(j + 1) % 16];
	                    h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) |
	                        (tl << (32 - 8))) ^ (th >>> 7);
	                    l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) |
	                        (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));
	                    a += l & 0xffff;
	                    b += l >>> 16;
	                    c += h & 0xffff;
	                    d += h >>> 16;
	                    // sigma1
	                    th = wh[(j + 14) % 16];
	                    tl = wl[(j + 14) % 16];
	                    h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) |
	                        (th << (32 - (61 - 32)))) ^ (th >>> 6);
	                    l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) |
	                        (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));
	                    a += l & 0xffff;
	                    b += l >>> 16;
	                    c += h & 0xffff;
	                    d += h >>> 16;
	                    b += a >>> 16;
	                    c += b >>> 16;
	                    d += c >>> 16;
	                    wh[j] = (c & 0xffff) | (d << 16);
	                    wl[j] = (a & 0xffff) | (b << 16);
	                }
	            }
	        }
	        // add
	        h = ah0;
	        l = al0;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[0];
	        l = hl[0];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[0] = ah0 = (c & 0xffff) | (d << 16);
	        hl[0] = al0 = (a & 0xffff) | (b << 16);
	        h = ah1;
	        l = al1;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[1];
	        l = hl[1];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[1] = ah1 = (c & 0xffff) | (d << 16);
	        hl[1] = al1 = (a & 0xffff) | (b << 16);
	        h = ah2;
	        l = al2;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[2];
	        l = hl[2];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[2] = ah2 = (c & 0xffff) | (d << 16);
	        hl[2] = al2 = (a & 0xffff) | (b << 16);
	        h = ah3;
	        l = al3;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[3];
	        l = hl[3];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[3] = ah3 = (c & 0xffff) | (d << 16);
	        hl[3] = al3 = (a & 0xffff) | (b << 16);
	        h = ah4;
	        l = al4;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[4];
	        l = hl[4];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[4] = ah4 = (c & 0xffff) | (d << 16);
	        hl[4] = al4 = (a & 0xffff) | (b << 16);
	        h = ah5;
	        l = al5;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[5];
	        l = hl[5];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[5] = ah5 = (c & 0xffff) | (d << 16);
	        hl[5] = al5 = (a & 0xffff) | (b << 16);
	        h = ah6;
	        l = al6;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[6];
	        l = hl[6];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[6] = ah6 = (c & 0xffff) | (d << 16);
	        hl[6] = al6 = (a & 0xffff) | (b << 16);
	        h = ah7;
	        l = al7;
	        a = l & 0xffff;
	        b = l >>> 16;
	        c = h & 0xffff;
	        d = h >>> 16;
	        h = hh[7];
	        l = hl[7];
	        a += l & 0xffff;
	        b += l >>> 16;
	        c += h & 0xffff;
	        d += h >>> 16;
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	        hh[7] = ah7 = (c & 0xffff) | (d << 16);
	        hl[7] = al7 = (a & 0xffff) | (b << 16);
	        pos += 128;
	        len -= 128;
	    }
	    return pos;
	}
	function hash(data) {
	    var h = new SHA512();
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.hash = hash;

	}(sha512$1));

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package ed25519 implements Ed25519 public-key signature algorithm.
	 */
	var random_1 = random$2;
	var sha512_1 = sha512$1;
	var wipe_1 = wipe$1;
	exports.SIGNATURE_LENGTH = 64;
	exports.PUBLIC_KEY_LENGTH = 32;
	exports.SECRET_KEY_LENGTH = 64;
	exports.SEED_LENGTH = 32;
	// Returns new zero-filled 16-element GF (Float64Array).
	// If passed an array of numbers, prefills the returned
	// array with them.
	//
	// We use Float64Array, because we need 48-bit numbers
	// for this implementation.
	function gf(init) {
	    var r = new Float64Array(16);
	    if (init) {
	        for (var i = 0; i < init.length; i++) {
	            r[i] = init[i];
	        }
	    }
	    return r;
	}
	// Base point.
	var _9 = new Uint8Array(32);
	_9[0] = 9;
	var gf0 = gf();
	var gf1 = gf([1]);
	var D = gf([
	    0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,
	    0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203
	]);
	var D2 = gf([
	    0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,
	    0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406
	]);
	var X = gf([
	    0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,
	    0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169
	]);
	var Y = gf([
	    0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,
	    0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666
	]);
	var I = gf([
	    0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,
	    0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83
	]);
	function set25519(r, a) {
	    for (var i = 0; i < 16; i++) {
	        r[i] = a[i] | 0;
	    }
	}
	function car25519(o) {
	    var c = 1;
	    for (var i = 0; i < 16; i++) {
	        var v = o[i] + c + 65535;
	        c = Math.floor(v / 65536);
	        o[i] = v - c * 65536;
	    }
	    o[0] += c - 1 + 37 * (c - 1);
	}
	function sel25519(p, q, b) {
	    var c = ~(b - 1);
	    for (var i = 0; i < 16; i++) {
	        var t = c & (p[i] ^ q[i]);
	        p[i] ^= t;
	        q[i] ^= t;
	    }
	}
	function pack25519(o, n) {
	    var m = gf();
	    var t = gf();
	    for (var i = 0; i < 16; i++) {
	        t[i] = n[i];
	    }
	    car25519(t);
	    car25519(t);
	    car25519(t);
	    for (var j = 0; j < 2; j++) {
	        m[0] = t[0] - 0xffed;
	        for (var i = 1; i < 15; i++) {
	            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
	            m[i - 1] &= 0xffff;
	        }
	        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
	        var b = (m[15] >> 16) & 1;
	        m[14] &= 0xffff;
	        sel25519(t, m, 1 - b);
	    }
	    for (var i = 0; i < 16; i++) {
	        o[2 * i] = t[i] & 0xff;
	        o[2 * i + 1] = t[i] >> 8;
	    }
	}
	function verify32(x, y) {
	    var d = 0;
	    for (var i = 0; i < 32; i++) {
	        d |= x[i] ^ y[i];
	    }
	    return (1 & ((d - 1) >>> 8)) - 1;
	}
	function neq25519(a, b) {
	    var c = new Uint8Array(32);
	    var d = new Uint8Array(32);
	    pack25519(c, a);
	    pack25519(d, b);
	    return verify32(c, d);
	}
	function par25519(a) {
	    var d = new Uint8Array(32);
	    pack25519(d, a);
	    return d[0] & 1;
	}
	function unpack25519(o, n) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
	    }
	    o[15] &= 0x7fff;
	}
	function add(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] + b[i];
	    }
	}
	function sub(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] - b[i];
	    }
	}
	function mul(o, a, b) {
	    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
	    v = a[0];
	    t0 += v * b0;
	    t1 += v * b1;
	    t2 += v * b2;
	    t3 += v * b3;
	    t4 += v * b4;
	    t5 += v * b5;
	    t6 += v * b6;
	    t7 += v * b7;
	    t8 += v * b8;
	    t9 += v * b9;
	    t10 += v * b10;
	    t11 += v * b11;
	    t12 += v * b12;
	    t13 += v * b13;
	    t14 += v * b14;
	    t15 += v * b15;
	    v = a[1];
	    t1 += v * b0;
	    t2 += v * b1;
	    t3 += v * b2;
	    t4 += v * b3;
	    t5 += v * b4;
	    t6 += v * b5;
	    t7 += v * b6;
	    t8 += v * b7;
	    t9 += v * b8;
	    t10 += v * b9;
	    t11 += v * b10;
	    t12 += v * b11;
	    t13 += v * b12;
	    t14 += v * b13;
	    t15 += v * b14;
	    t16 += v * b15;
	    v = a[2];
	    t2 += v * b0;
	    t3 += v * b1;
	    t4 += v * b2;
	    t5 += v * b3;
	    t6 += v * b4;
	    t7 += v * b5;
	    t8 += v * b6;
	    t9 += v * b7;
	    t10 += v * b8;
	    t11 += v * b9;
	    t12 += v * b10;
	    t13 += v * b11;
	    t14 += v * b12;
	    t15 += v * b13;
	    t16 += v * b14;
	    t17 += v * b15;
	    v = a[3];
	    t3 += v * b0;
	    t4 += v * b1;
	    t5 += v * b2;
	    t6 += v * b3;
	    t7 += v * b4;
	    t8 += v * b5;
	    t9 += v * b6;
	    t10 += v * b7;
	    t11 += v * b8;
	    t12 += v * b9;
	    t13 += v * b10;
	    t14 += v * b11;
	    t15 += v * b12;
	    t16 += v * b13;
	    t17 += v * b14;
	    t18 += v * b15;
	    v = a[4];
	    t4 += v * b0;
	    t5 += v * b1;
	    t6 += v * b2;
	    t7 += v * b3;
	    t8 += v * b4;
	    t9 += v * b5;
	    t10 += v * b6;
	    t11 += v * b7;
	    t12 += v * b8;
	    t13 += v * b9;
	    t14 += v * b10;
	    t15 += v * b11;
	    t16 += v * b12;
	    t17 += v * b13;
	    t18 += v * b14;
	    t19 += v * b15;
	    v = a[5];
	    t5 += v * b0;
	    t6 += v * b1;
	    t7 += v * b2;
	    t8 += v * b3;
	    t9 += v * b4;
	    t10 += v * b5;
	    t11 += v * b6;
	    t12 += v * b7;
	    t13 += v * b8;
	    t14 += v * b9;
	    t15 += v * b10;
	    t16 += v * b11;
	    t17 += v * b12;
	    t18 += v * b13;
	    t19 += v * b14;
	    t20 += v * b15;
	    v = a[6];
	    t6 += v * b0;
	    t7 += v * b1;
	    t8 += v * b2;
	    t9 += v * b3;
	    t10 += v * b4;
	    t11 += v * b5;
	    t12 += v * b6;
	    t13 += v * b7;
	    t14 += v * b8;
	    t15 += v * b9;
	    t16 += v * b10;
	    t17 += v * b11;
	    t18 += v * b12;
	    t19 += v * b13;
	    t20 += v * b14;
	    t21 += v * b15;
	    v = a[7];
	    t7 += v * b0;
	    t8 += v * b1;
	    t9 += v * b2;
	    t10 += v * b3;
	    t11 += v * b4;
	    t12 += v * b5;
	    t13 += v * b6;
	    t14 += v * b7;
	    t15 += v * b8;
	    t16 += v * b9;
	    t17 += v * b10;
	    t18 += v * b11;
	    t19 += v * b12;
	    t20 += v * b13;
	    t21 += v * b14;
	    t22 += v * b15;
	    v = a[8];
	    t8 += v * b0;
	    t9 += v * b1;
	    t10 += v * b2;
	    t11 += v * b3;
	    t12 += v * b4;
	    t13 += v * b5;
	    t14 += v * b6;
	    t15 += v * b7;
	    t16 += v * b8;
	    t17 += v * b9;
	    t18 += v * b10;
	    t19 += v * b11;
	    t20 += v * b12;
	    t21 += v * b13;
	    t22 += v * b14;
	    t23 += v * b15;
	    v = a[9];
	    t9 += v * b0;
	    t10 += v * b1;
	    t11 += v * b2;
	    t12 += v * b3;
	    t13 += v * b4;
	    t14 += v * b5;
	    t15 += v * b6;
	    t16 += v * b7;
	    t17 += v * b8;
	    t18 += v * b9;
	    t19 += v * b10;
	    t20 += v * b11;
	    t21 += v * b12;
	    t22 += v * b13;
	    t23 += v * b14;
	    t24 += v * b15;
	    v = a[10];
	    t10 += v * b0;
	    t11 += v * b1;
	    t12 += v * b2;
	    t13 += v * b3;
	    t14 += v * b4;
	    t15 += v * b5;
	    t16 += v * b6;
	    t17 += v * b7;
	    t18 += v * b8;
	    t19 += v * b9;
	    t20 += v * b10;
	    t21 += v * b11;
	    t22 += v * b12;
	    t23 += v * b13;
	    t24 += v * b14;
	    t25 += v * b15;
	    v = a[11];
	    t11 += v * b0;
	    t12 += v * b1;
	    t13 += v * b2;
	    t14 += v * b3;
	    t15 += v * b4;
	    t16 += v * b5;
	    t17 += v * b6;
	    t18 += v * b7;
	    t19 += v * b8;
	    t20 += v * b9;
	    t21 += v * b10;
	    t22 += v * b11;
	    t23 += v * b12;
	    t24 += v * b13;
	    t25 += v * b14;
	    t26 += v * b15;
	    v = a[12];
	    t12 += v * b0;
	    t13 += v * b1;
	    t14 += v * b2;
	    t15 += v * b3;
	    t16 += v * b4;
	    t17 += v * b5;
	    t18 += v * b6;
	    t19 += v * b7;
	    t20 += v * b8;
	    t21 += v * b9;
	    t22 += v * b10;
	    t23 += v * b11;
	    t24 += v * b12;
	    t25 += v * b13;
	    t26 += v * b14;
	    t27 += v * b15;
	    v = a[13];
	    t13 += v * b0;
	    t14 += v * b1;
	    t15 += v * b2;
	    t16 += v * b3;
	    t17 += v * b4;
	    t18 += v * b5;
	    t19 += v * b6;
	    t20 += v * b7;
	    t21 += v * b8;
	    t22 += v * b9;
	    t23 += v * b10;
	    t24 += v * b11;
	    t25 += v * b12;
	    t26 += v * b13;
	    t27 += v * b14;
	    t28 += v * b15;
	    v = a[14];
	    t14 += v * b0;
	    t15 += v * b1;
	    t16 += v * b2;
	    t17 += v * b3;
	    t18 += v * b4;
	    t19 += v * b5;
	    t20 += v * b6;
	    t21 += v * b7;
	    t22 += v * b8;
	    t23 += v * b9;
	    t24 += v * b10;
	    t25 += v * b11;
	    t26 += v * b12;
	    t27 += v * b13;
	    t28 += v * b14;
	    t29 += v * b15;
	    v = a[15];
	    t15 += v * b0;
	    t16 += v * b1;
	    t17 += v * b2;
	    t18 += v * b3;
	    t19 += v * b4;
	    t20 += v * b5;
	    t21 += v * b6;
	    t22 += v * b7;
	    t23 += v * b8;
	    t24 += v * b9;
	    t25 += v * b10;
	    t26 += v * b11;
	    t27 += v * b12;
	    t28 += v * b13;
	    t29 += v * b14;
	    t30 += v * b15;
	    t0 += 38 * t16;
	    t1 += 38 * t17;
	    t2 += 38 * t18;
	    t3 += 38 * t19;
	    t4 += 38 * t20;
	    t5 += 38 * t21;
	    t6 += 38 * t22;
	    t7 += 38 * t23;
	    t8 += 38 * t24;
	    t9 += 38 * t25;
	    t10 += 38 * t26;
	    t11 += 38 * t27;
	    t12 += 38 * t28;
	    t13 += 38 * t29;
	    t14 += 38 * t30;
	    // t15 left as is
	    // first car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    // second car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    o[0] = t0;
	    o[1] = t1;
	    o[2] = t2;
	    o[3] = t3;
	    o[4] = t4;
	    o[5] = t5;
	    o[6] = t6;
	    o[7] = t7;
	    o[8] = t8;
	    o[9] = t9;
	    o[10] = t10;
	    o[11] = t11;
	    o[12] = t12;
	    o[13] = t13;
	    o[14] = t14;
	    o[15] = t15;
	}
	function square(o, a) {
	    mul(o, a, a);
	}
	function inv25519(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) {
	        c[a] = i[a];
	    }
	    for (a = 253; a >= 0; a--) {
	        square(c, c);
	        if (a !== 2 && a !== 4) {
	            mul(c, c, i);
	        }
	    }
	    for (a = 0; a < 16; a++) {
	        o[a] = c[a];
	    }
	}
	function pow2523(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) {
	        c[a] = i[a];
	    }
	    for (a = 250; a >= 0; a--) {
	        square(c, c);
	        if (a !== 1) {
	            mul(c, c, i);
	        }
	    }
	    for (a = 0; a < 16; a++) {
	        o[a] = c[a];
	    }
	}
	function edadd(p, q) {
	    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
	    sub(a, p[1], p[0]);
	    sub(t, q[1], q[0]);
	    mul(a, a, t);
	    add(b, p[0], p[1]);
	    add(t, q[0], q[1]);
	    mul(b, b, t);
	    mul(c, p[3], q[3]);
	    mul(c, c, D2);
	    mul(d, p[2], q[2]);
	    add(d, d, d);
	    sub(e, b, a);
	    sub(f, d, c);
	    add(g, d, c);
	    add(h, b, a);
	    mul(p[0], e, f);
	    mul(p[1], h, g);
	    mul(p[2], g, f);
	    mul(p[3], e, h);
	}
	function cswap(p, q, b) {
	    for (var i = 0; i < 4; i++) {
	        sel25519(p[i], q[i], b);
	    }
	}
	function pack(r, p) {
	    var tx = gf(), ty = gf(), zi = gf();
	    inv25519(zi, p[2]);
	    mul(tx, p[0], zi);
	    mul(ty, p[1], zi);
	    pack25519(r, ty);
	    r[31] ^= par25519(tx) << 7;
	}
	function scalarmult(p, q, s) {
	    set25519(p[0], gf0);
	    set25519(p[1], gf1);
	    set25519(p[2], gf1);
	    set25519(p[3], gf0);
	    for (var i = 255; i >= 0; --i) {
	        var b = (s[(i / 8) | 0] >> (i & 7)) & 1;
	        cswap(p, q, b);
	        edadd(q, p);
	        edadd(p, p);
	        cswap(p, q, b);
	    }
	}
	function scalarbase(p, s) {
	    var q = [gf(), gf(), gf(), gf()];
	    set25519(q[0], X);
	    set25519(q[1], Y);
	    set25519(q[2], gf1);
	    mul(q[3], X, Y);
	    scalarmult(p, q, s);
	}
	// Generates key pair from secret 32-byte seed.
	function generateKeyPairFromSeed(seed) {
	    if (seed.length !== exports.SEED_LENGTH) {
	        throw new Error("ed25519: seed must be " + exports.SEED_LENGTH + " bytes");
	    }
	    var d = sha512_1.hash(seed);
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	    var publicKey = new Uint8Array(32);
	    var p = [gf(), gf(), gf(), gf()];
	    scalarbase(p, d);
	    pack(publicKey, p);
	    var secretKey = new Uint8Array(64);
	    secretKey.set(seed);
	    secretKey.set(publicKey, 32);
	    return {
	        publicKey: publicKey,
	        secretKey: secretKey
	    };
	}
	exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
	function generateKeyPair(prng) {
	    var seed = random_1.randomBytes(32, prng);
	    var result = generateKeyPairFromSeed(seed);
	    wipe_1.wipe(seed);
	    return result;
	}
	exports.generateKeyPair = generateKeyPair;
	function extractPublicKeyFromSecretKey(secretKey) {
	    if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
	        throw new Error("ed25519: secret key must be " + exports.SECRET_KEY_LENGTH + " bytes");
	    }
	    return new Uint8Array(secretKey.subarray(32));
	}
	exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
	var L = new Float64Array([
	    0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2,
	    0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10
	]);
	function modL(r, x) {
	    var carry;
	    var i;
	    var j;
	    var k;
	    for (i = 63; i >= 32; --i) {
	        carry = 0;
	        for (j = i - 32, k = i - 12; j < k; ++j) {
	            x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	            carry = Math.floor((x[j] + 128) / 256);
	            x[j] -= carry * 256;
	        }
	        x[j] += carry;
	        x[i] = 0;
	    }
	    carry = 0;
	    for (j = 0; j < 32; j++) {
	        x[j] += carry - (x[31] >> 4) * L[j];
	        carry = x[j] >> 8;
	        x[j] &= 255;
	    }
	    for (j = 0; j < 32; j++) {
	        x[j] -= carry * L[j];
	    }
	    for (i = 0; i < 32; i++) {
	        x[i + 1] += x[i] >> 8;
	        r[i] = x[i] & 255;
	    }
	}
	function reduce(r) {
	    var x = new Float64Array(64);
	    for (var i = 0; i < 64; i++) {
	        x[i] = r[i];
	    }
	    for (var i = 0; i < 64; i++) {
	        r[i] = 0;
	    }
	    modL(r, x);
	}
	// Returns 64-byte signature of the message under the 64-byte secret key.
	function sign(secretKey, message) {
	    var x = new Float64Array(64);
	    var p = [gf(), gf(), gf(), gf()];
	    var d = sha512_1.hash(secretKey.subarray(0, 32));
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	    var signature = new Uint8Array(64);
	    signature.set(d.subarray(32), 32);
	    var hs = new sha512_1.SHA512();
	    hs.update(signature.subarray(32));
	    hs.update(message);
	    var r = hs.digest();
	    hs.clean();
	    reduce(r);
	    scalarbase(p, r);
	    pack(signature, p);
	    hs.reset();
	    hs.update(signature.subarray(0, 32));
	    hs.update(secretKey.subarray(32));
	    hs.update(message);
	    var h = hs.digest();
	    reduce(h);
	    for (var i = 0; i < 32; i++) {
	        x[i] = r[i];
	    }
	    for (var i = 0; i < 32; i++) {
	        for (var j = 0; j < 32; j++) {
	            x[i + j] += h[i] * d[j];
	        }
	    }
	    modL(signature.subarray(32), x);
	    return signature;
	}
	exports.sign = sign;
	function unpackneg(r, p) {
	    var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
	    set25519(r[2], gf1);
	    unpack25519(r[1], p);
	    square(num, r[1]);
	    mul(den, num, D);
	    sub(num, num, r[2]);
	    add(den, r[2], den);
	    square(den2, den);
	    square(den4, den2);
	    mul(den6, den4, den2);
	    mul(t, den6, num);
	    mul(t, t, den);
	    pow2523(t, t);
	    mul(t, t, num);
	    mul(t, t, den);
	    mul(t, t, den);
	    mul(r[0], t, den);
	    square(chk, r[0]);
	    mul(chk, chk, den);
	    if (neq25519(chk, num)) {
	        mul(r[0], r[0], I);
	    }
	    square(chk, r[0]);
	    mul(chk, chk, den);
	    if (neq25519(chk, num)) {
	        return -1;
	    }
	    if (par25519(r[0]) === (p[31] >> 7)) {
	        sub(r[0], gf0, r[0]);
	    }
	    mul(r[3], r[0], r[1]);
	    return 0;
	}
	function verify(publicKey, message, signature) {
	    var t = new Uint8Array(32);
	    var p = [gf(), gf(), gf(), gf()];
	    var q = [gf(), gf(), gf(), gf()];
	    if (signature.length !== exports.SIGNATURE_LENGTH) {
	        throw new Error("ed25519: signature must be " + exports.SIGNATURE_LENGTH + " bytes");
	    }
	    if (unpackneg(q, publicKey)) {
	        return false;
	    }
	    var hs = new sha512_1.SHA512();
	    hs.update(signature.subarray(0, 32));
	    hs.update(publicKey);
	    hs.update(message);
	    var h = hs.digest();
	    reduce(h);
	    scalarmult(p, q, h);
	    scalarbase(q, signature.subarray(32));
	    edadd(p, q);
	    pack(t, p);
	    if (verify32(signature, t)) {
	        return false;
	    }
	    return true;
	}
	exports.verify = verify;
	/**
	 * Convert Ed25519 public key to X25519 public key.
	 *
	 * Throws if given an invalid public key.
	 */
	function convertPublicKeyToX25519(publicKey) {
	    var q = [gf(), gf(), gf(), gf()];
	    if (unpackneg(q, publicKey)) {
	        throw new Error("Ed25519: invalid public key");
	    }
	    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
	    var a = gf();
	    var b = gf();
	    var y = q[1];
	    add(a, gf1, y);
	    sub(b, gf1, y);
	    inv25519(b, b);
	    mul(a, a, b);
	    var z = new Uint8Array(32);
	    pack25519(z, a);
	    return z;
	}
	exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
	/**
	 *  Convert Ed25519 secret (private) key to X25519 secret key.
	 */
	function convertSecretKeyToX25519(secretKey) {
	    var d = sha512_1.hash(secretKey.subarray(0, 32));
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	    var o = new Uint8Array(d.subarray(0, 32));
	    wipe_1.wipe(d);
	    return o;
	}
	exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;

	}(ed25519$1));

	var __createBinding$f = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$f = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$f = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$f(result, mod, k);
	    __setModuleDefault$f(result, mod);
	    return result;
	};
	Object.defineProperty(ed25519$2, "__esModule", { value: true });
	ed25519$2.keyToDidDoc = void 0;
	const u8a$5 = __importStar$f(uint8arrays$7);
	const ed25519_1 = ed25519$1;
	function encodeKey$2(key) {
	    const bytes = new Uint8Array(key.length + 2);
	    bytes[0] = 0xec;
	    bytes[1] = 0x01;
	    bytes.set(key, 2);
	    return `z${u8a$5.toString(bytes, 'base58btc')}`;
	}
	function keyToDidDoc(pubKeyBytes, fingerprint) {
	    const did = `did:key:${fingerprint}`;
	    const keyId = `${did}#${fingerprint}`;
	    const x25519PubBytes = ed25519_1.convertPublicKeyToX25519(pubKeyBytes);
	    const x25519KeyId = `${did}#${encodeKey$2(x25519PubBytes)}`;
	    return {
	        id: did,
	        verificationMethod: [
	            {
	                id: keyId,
	                type: 'Ed25519VerificationKey2018',
	                controller: did,
	                publicKeyBase58: u8a$5.toString(pubKeyBytes, 'base58btc'),
	            },
	        ],
	        authentication: [keyId],
	        assertionMethod: [keyId],
	        capabilityDelegation: [keyId],
	        capabilityInvocation: [keyId],
	        keyAgreement: [
	            {
	                id: x25519KeyId,
	                type: 'X25519KeyAgreementKey2019',
	                controller: did,
	                publicKeyBase58: u8a$5.toString(x25519PubBytes, 'base58btc'),
	            },
	        ],
	    };
	}
	ed25519$2.keyToDidDoc = keyToDidDoc;

	var __createBinding$e = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$e = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$e = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$e(result, mod, k);
	    __setModuleDefault$e(result, mod);
	    return result;
	};
	var __importDefault$k = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$8, "__esModule", { value: true });
	lib$8.getResolver = void 0;
	const varint_1$1 = __importDefault$k(varint$3);
	const multibase_1 = __importDefault$k(src$b.exports);
	const secp256k1$2 = __importStar$e(secp256k1$3);
	const ed25519 = __importStar$e(ed25519$2);
	const DID_LD_JSON$1 = 'application/did+ld+json';
	const DID_JSON$2 = 'application/did+json';
	const prefixToDriverMap = {
	    0xe7: secp256k1$2,
	    0xed: ed25519,
	};
	function getResolver$1() {
	    return {
	        key: async (did, parsed, r, options) => {
	            const contentType = options.accept || DID_JSON$2;
	            const response = {
	                didResolutionMetadata: { contentType },
	                didDocument: null,
	                didDocumentMetadata: {},
	            };
	            try {
	                const multicodecPubKey = multibase_1.default.decode(parsed.id);
	                const keyType = varint_1$1.default.decode(multicodecPubKey);
	                const pubKeyBytes = multicodecPubKey.slice(varint_1$1.default.decode.bytes);
	                const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);
	                if (contentType === DID_LD_JSON$1) {
	                    doc['@context'] = 'https://w3id.org/did/v1';
	                    response.didDocument = doc;
	                }
	                else if (contentType === DID_JSON$2) {
	                    response.didDocument = doc;
	                }
	                else {
	                    delete response.didResolutionMetadata.contentType;
	                    response.didResolutionMetadata.error = 'representationNotSupported';
	                }
	            }
	            catch (e) {
	                response.didResolutionMetadata.error = 'invalidDid';
	                response.didResolutionMetadata.message = e.toString();
	            }
	            return response;
	        },
	    };
	}
	lib$8.getResolver = getResolver$1;
	lib$8.default = { getResolver: getResolver$1 };

	var lib$7 = {};

	var legacyResolver = {};

	var lru = {exports: {}};

	(function (module, exports) {
	!function(g,c){c(exports);}(commonjsGlobal,function(g){const c=Symbol("newer"),e=Symbol("older");class n{constructor(a,b){typeof a!=="number"&&(b=a,a=0),this.size=0,this.limit=a,this.oldest=this.newest=void 0,this._keymap=new Map(),b&&(this.assign(b),a<1&&(this.limit=this.size));}_markEntryAsUsed(a){if(a===this.newest)return;a[c]&&(a===this.oldest&&(this.oldest=a[c]),a[c][e]=a[e]),a[e]&&(a[e][c]=a[c]),a[c]=void 0,a[e]=this.newest,this.newest&&(this.newest[c]=a),this.newest=a;}assign(a){let b,d=this.limit||Number.MAX_VALUE;this._keymap.clear();let m=a[Symbol.iterator]();for(let h=m.next();!h.done;h=m.next()){let f=new l(h.value[0],h.value[1]);this._keymap.set(f.key,f),b?(b[c]=f,f[e]=b):this.oldest=f,b=f;if(d--==0)throw new Error("overflow")}this.newest=b,this.size=this._keymap.size;}get(a){var b=this._keymap.get(a);return b?(this._markEntryAsUsed(b),b.value):void 0}set(a,b){var d=this._keymap.get(a);return d?(d.value=b,this._markEntryAsUsed(d),this):(this._keymap.set(a,d=new l(a,b)),this.newest?(this.newest[c]=d,d[e]=this.newest):this.oldest=d,this.newest=d,++this.size,this.size>this.limit&&this.shift(),this)}shift(){var a=this.oldest;if(a)return this.oldest[c]?(this.oldest=this.oldest[c],this.oldest[e]=void 0):(this.oldest=void 0,this.newest=void 0),a[c]=a[e]=void 0,this._keymap.delete(a.key),--this.size,[a.key,a.value]}find(a){let b=this._keymap.get(a);return b?b.value:void 0}has(a){return this._keymap.has(a)}delete(a){var b=this._keymap.get(a);return b?(this._keymap.delete(b.key),b[c]&&b[e]?(b[e][c]=b[c],b[c][e]=b[e]):b[c]?(b[c][e]=void 0,this.oldest=b[c]):b[e]?(b[e][c]=void 0,this.newest=b[e]):this.oldest=this.newest=void 0,this.size--,b.value):void 0}clear(){this.oldest=this.newest=void 0,this.size=0,this._keymap.clear();}keys(){return new j(this.oldest)}values(){return new k(this.oldest)}entries(){return this}[Symbol.iterator](){return new i(this.oldest)}forEach(a,b){typeof b!=="object"&&(b=this);let d=this.oldest;for(;d;)a.call(b,d.value,d.key,this),d=d[c];}toJSON(){for(var a=new Array(this.size),b=0,d=this.oldest;d;)a[b++]={key:d.key,value:d.value},d=d[c];return a}toString(){for(var a="",b=this.oldest;b;)a+=String(b.key)+":"+b.value,b=b[c],b&&(a+=" < ");return a}}g.LRUMap=n;function l(a,b){this.key=a,this.value=b,this[c]=void 0,this[e]=void 0;}function i(a){this.entry=a;}i.prototype[Symbol.iterator]=function(){return this},i.prototype.next=function(){let a=this.entry;return a?(this.entry=a[c],{done:!1,value:[a.key,a.value]}):{done:!0,value:void 0}};function j(a){this.entry=a;}j.prototype[Symbol.iterator]=function(){return this},j.prototype.next=function(){let a=this.entry;return a?(this.entry=a[c],{done:!1,value:a.key}):{done:!0,value:void 0}};function k(a){this.entry=a;}k.prototype[Symbol.iterator]=function(){return this},k.prototype.next=function(){let a=this.entry;return a?(this.entry=a[c],{done:!1,value:a.value}):{done:!0,value:void 0}};});

	}(lru, lru.exports));

	var __createBinding$d = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$d = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$d = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$d(result, mod, k);
	    __setModuleDefault$d(result, mod);
	    return result;
	};
	var __importDefault$j = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(legacyResolver, "__esModule", { value: true });
	const cross_fetch_1 = __importDefault$j(nodePonyfill.exports);
	const u8a$4 = __importStar$d(uint8arrays$7);
	const lru_map_1 = lru.exports;
	const THREEBOX_API_URL = 'https://ipfs.3box.io';
	const LIMIT = 100;
	const fetchCache = new lru_map_1.LRUMap(LIMIT);
	const fetchJson$1 = async (url) => {
	    const cached = fetchCache.get(url);
	    if (cached)
	        return cached;
	    const r = await cross_fetch_1.default(url);
	    if (r.ok) {
	        const json = await r.json();
	        fetchCache.set(url, json);
	        return json;
	    }
	    else {
	        throw new Error('Not a valid 3ID');
	    }
	};
	const didDocReq = (cid) => `${THREEBOX_API_URL}/did-doc?cid=${encodeURIComponent(cid)}`;
	const ipfsMock = {
	    dag: {
	        get: async (cid) => fetchJson$1(didDocReq(cid)),
	    },
	};
	const encodeKey$1 = (key, encryption) => {
	    const bytes = new Uint8Array(key.length + 2);
	    if (encryption) {
	        bytes[0] = 0xec;
	    }
	    else {
	        bytes[0] = 0xe7;
	    }
	    bytes[1] = 0x01;
	    bytes.set(key, 2);
	    return `z${u8a$4.toString(bytes, 'base58btc')}`;
	};
	const compressKey = (key) => {
	    const xpoint = key.slice(2, 66);
	    const ypoint = key.slice(66, 130);
	    const prefix = (ypoint & 1) === 0 ? '02' : '03';
	    return `${prefix}${xpoint}`;
	};
	const LegacyResolver = async (didId, ipfs = ipfsMock) => {
	    const doc = (await ipfs.dag.get(didId)).value;
	    let signingKey, encryptionKey;
	    try {
	        const keyEntrySigning = doc.publicKey.findIndex((e) => e.id.endsWith('signingKey'));
	        const keyEntryEncryption = doc.publicKey.findIndex((e) => e.id.endsWith('encryptionKey'));
	        signingKey = doc.publicKey[keyEntrySigning].publicKeyHex;
	        encryptionKey = doc.publicKey[keyEntryEncryption].publicKeyBase64;
	    }
	    catch (e) {
	        throw new Error('Not a valid 3ID');
	    }
	    const signingKeyCompressed = compressKey(signingKey);
	    const signing = encodeKey$1(u8a$4.fromString(signingKeyCompressed, 'base16'));
	    const encryption = encodeKey$1(u8a$4.fromString(encryptionKey, 'base64pad'), true);
	    return {
	        keyDid: `did:key:${signing}`,
	        publicKeys: {
	            [signing.slice(-15)]: signing,
	            [encryption.slice(-15)]: encryption,
	        },
	    };
	};
	legacyResolver.default = LegacyResolver;

	var errorRepresentation = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.withResolutionError = exports.errorRepresentation = void 0;
	const errorRepresentation = (metadata) => {
	    return {
	        didResolutionMetadata: metadata,
	        didDocument: null,
	        didDocumentMetadata: {},
	    };
	};
	exports.errorRepresentation = errorRepresentation;
	const withResolutionError = (f) => {
	    return f().catch((e) => exports.errorRepresentation({
	        error: 'invalidDid',
	        message: e.toString(),
	    }));
	};
	exports.withResolutionError = withResolutionError;

	}(errorRepresentation));

	var __createBinding$c = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$c = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$c = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$c(result, mod, k);
	    __setModuleDefault$c(result, mod);
	    return result;
	};
	var __importDefault$i = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$7, "__esModule", { value: true });
	lib$7.getResolver = lib$7.wrapDocument = void 0;
	const stream_tile_1$1 = lib$a;
	const legacyResolver_1 = __importDefault$i(legacyResolver);
	const u8a$3 = __importStar$c(uint8arrays$7);
	const streamid_1 = lib$f;
	const cids_1$2 = __importDefault$i(src$5);
	const error_representation_1 = errorRepresentation;
	const common_1$1 = lib$e;
	const DID_LD_JSON = 'application/did+ld+json';
	const DID_JSON$1 = 'application/did+json';
	const isLegacyDid$1 = (didId) => {
	    try {
	        new cids_1$2.default(didId);
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	};
	const formatTime = (timestamp) => {
	    return new Date(timestamp * 1000).toISOString().split('.')[0] + 'Z';
	};
	function wrapDocument(content, did) {
	    if (!(content && content.publicKeys))
	        return null;
	    const startDoc = {
	        id: did,
	        verificationMethod: [],
	        authentication: [],
	        keyAgreement: [],
	    };
	    return Object.entries(content.publicKeys).reduce((diddoc, [keyName, keyValue]) => {
	        const keyBuf = u8a$3.fromString(keyValue.slice(1), 'base58btc');
	        const entry = {
	            id: `${did}#${keyName}`,
	            type: '',
	            controller: did,
	            publicKeyBase58: u8a$3.toString(keyBuf.slice(2), 'base58btc'),
	        };
	        if (keyBuf[0] === 0xe7) {
	            entry.type = 'EcdsaSecp256k1Signature2019';
	            diddoc.verificationMethod.push(entry);
	            diddoc.authentication.push(entry);
	        }
	        else if (keyBuf[0] === 0xec) {
	            entry.type = 'X25519KeyAgreementKey2019';
	            diddoc.verificationMethod.push(entry);
	            diddoc.keyAgreement.push(entry);
	        }
	        return diddoc;
	    }, startDoc);
	}
	lib$7.wrapDocument = wrapDocument;
	function lastAnchorOrGenesisEntry(log) {
	    for (let index = log.length - 1; index >= 0; index--) {
	        const entry = log[index];
	        if (entry.type === common_1$1.CommitType.ANCHOR) {
	            return entry;
	        }
	    }
	    return log[0];
	}
	function extractMetadata(requestedVersionState, latestVersionState) {
	    const metadata = {};
	    const { timestamp: updated, cid: versionId } = lastAnchorOrGenesisEntry(requestedVersionState.log);
	    const { timestamp: nextUpdate, cid: nextVersionId } = latestVersionState.log.find(({ timestamp }) => timestamp > updated || (!updated && timestamp)) || {};
	    if (updated) {
	        metadata.updated = formatTime(updated);
	    }
	    if (nextUpdate) {
	        metadata.nextUpdate = formatTime(nextUpdate);
	    }
	    if (versionId) {
	        metadata.versionId = requestedVersionState.log.length === 1 ? '0' : versionId === null || versionId === void 0 ? void 0 : versionId.toString();
	    }
	    if (nextVersionId) {
	        metadata.nextVersionId = nextVersionId.toString();
	    }
	    return metadata;
	}
	function getVersionInfo(query = '') {
	    const versionId = query
	        .split('&')
	        .find((e) => e.includes('versionId') || e.includes('version-id'));
	    const versionTime = query.split('&').find((e) => e.includes('versionTime'));
	    return {
	        commit: versionId ? versionId.split('=')[1] : undefined,
	        timestamp: versionTime
	            ? Math.floor(new Date(versionTime.split('=')[1]).getTime() / 1000)
	            : undefined,
	    };
	}
	const legacyResolve = async (ceramic, didId, verNfo) => {
	    const legacyPublicKeys = await legacyResolver_1.default(didId);
	    const metadata = { controllers: [legacyPublicKeys.keyDid], family: '3id', deterministic: true };
	    const streamid = (await stream_tile_1$1.TileDocument.create(ceramic, null, metadata, { anchor: false, publish: false })).id;
	    const didResult = await resolve(ceramic, streamid.toString(), verNfo, didId);
	    if (didResult.didDocument === null) {
	        didResult.didDocument = wrapDocument(legacyPublicKeys, `did:3:${didId}`);
	    }
	    return didResult;
	};
	const resolve = async (ceramic, didId, verNfo, v03ID) => {
	    var _a;
	    const streamId = streamid_1.StreamID.fromString(didId);
	    let commitId;
	    const query = [{ streamId }];
	    if (verNfo.commit) {
	        commitId = streamId.atCommit(verNfo.commit);
	        query.push({ streamId: commitId });
	    }
	    else if (verNfo.timestamp) {
	        query.push({
	            streamId,
	            atTime: verNfo.timestamp,
	        });
	    }
	    const resp = await ceramic.multiQuery(query);
	    const latestVersionState = resp[didId].state;
	    const commitIdStr = (commitId === null || commitId === void 0 ? void 0 : commitId.toString()) || Object.keys(resp).find((k) => k !== didId);
	    const requestedVersionState = ((_a = resp[commitIdStr]) === null || _a === void 0 ? void 0 : _a.state) || latestVersionState;
	    const metadata = extractMetadata(requestedVersionState, latestVersionState);
	    const tile = resp[commitIdStr || didId];
	    if (commitIdStr && !tile) {
	        throw new Error(`No resolution for commit ${commitIdStr}`);
	    }
	    const content = tile.state.content;
	    const document = wrapDocument(content, `did:3:${v03ID || didId}`);
	    return {
	        didResolutionMetadata: { contentType: DID_JSON$1 },
	        didDocument: document,
	        didDocumentMetadata: metadata,
	    };
	};
	function getResolver(ceramic) {
	    return {
	        '3': (did, parsed, resolver, options) => {
	            return error_representation_1.withResolutionError(async () => {
	                const contentType = options.accept || DID_JSON$1;
	                const verNfo = getVersionInfo(parsed.query);
	                const id = parsed.id;
	                const didResult = () => {
	                    if (isLegacyDid$1(id)) {
	                        return legacyResolve(ceramic, id, verNfo);
	                    }
	                    else {
	                        return resolve(ceramic, id, verNfo);
	                    }
	                };
	                switch (contentType) {
	                    case DID_JSON$1:
	                        return didResult();
	                    case DID_LD_JSON: {
	                        const result = await didResult();
	                        result.didDocument['@context'] = 'https://www.w3.org/ns/did/v1';
	                        result.didResolutionMetadata.contentType = DID_LD_JSON;
	                        return result;
	                    }
	                    default:
	                        return error_representation_1.errorRepresentation({ error: 'representationNotSupported' });
	                }
	            });
	        },
	    };
	}
	lib$7.getResolver = getResolver;
	lib$7.default = { getResolver };

	var threeidProvider = {};

	var didProvider = {};

	var lib$6 = {};

	var __createBinding$b = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$b = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$b = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$b(result, mod, k);
	    __setModuleDefault$b(result, mod);
	    return result;
	};
	var __awaiter$5 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __importDefault$h = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$6, "__esModule", { value: true });
	lib$6.decodeCleartext = lib$6.prepareCleartext = lib$6.decodeIdentityCID = lib$6.encodeIdentityCID = lib$6.encodePayload = void 0;
	const ipld_dag_cbor_1 = __importDefault$h(src$4);
	const cids_1$1 = __importDefault$h(src$5);
	const multihashes_1 = __importDefault$h(src$7);
	const u8a$2 = __importStar$b(uint8arrays$7);
	const varint_1 = __importDefault$h(varint$3);
	const DAG_CBOR_CODE = 113;
	const ID_MULTIHASH = 0;
	const ENC_BLOCK_SIZE = 24;
	function encodePayload(payload) {
	    return __awaiter$5(this, void 0, void 0, function* () {
	        const block = new Uint8Array(ipld_dag_cbor_1.default.util.serialize(payload));
	        return {
	            cid: yield ipld_dag_cbor_1.default.util.cid(block),
	            linkedBlock: block,
	        };
	    });
	}
	lib$6.encodePayload = encodePayload;
	function pad(b, blockSize = ENC_BLOCK_SIZE) {
	    const padLen = (blockSize - (b.length % blockSize)) % blockSize;
	    return u8a$2.concat([b, new Uint8Array(padLen)]);
	}
	function unpadCIDBytes(b) {
	    let offset = 0;
	    let mhLen;
	    for (let i = 0; i < 4; i++) {
	        mhLen = varint_1.default.decode(b, offset);
	        offset += varint_1.default.decode.bytes;
	    }
	    return new cids_1$1.default(b.slice(0, offset + mhLen));
	}
	function encodeIdentityCID(obj) {
	    const block = ipld_dag_cbor_1.default.util.serialize(obj);
	    const idMultiHash = multihashes_1.default.encode(block, ID_MULTIHASH);
	    return new cids_1$1.default(1, DAG_CBOR_CODE, idMultiHash);
	}
	lib$6.encodeIdentityCID = encodeIdentityCID;
	function decodeIdentityCID(cid) {
	    cids_1$1.default.validateCID(cid);
	    if (cid.code !== DAG_CBOR_CODE)
	        throw new Error('CID codec must be dag-cbor');
	    const { code, digest } = multihashes_1.default.decode(cid.multihash);
	    if (code !== ID_MULTIHASH)
	        throw new Error('CID must use identity multihash');
	    return ipld_dag_cbor_1.default.util.deserialize(digest);
	}
	lib$6.decodeIdentityCID = decodeIdentityCID;
	function prepareCleartext(cleartext, blockSize) {
	    return pad(encodeIdentityCID(cleartext).bytes, blockSize);
	}
	lib$6.prepareCleartext = prepareCleartext;
	function decodeCleartext(b) {
	    return decodeIdentityCID(unpadCIDBytes(b));
	}
	lib$6.decodeCleartext = decodeCleartext;

	function concat$3(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	function base$3(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array);
	    else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${ name } character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src$1 = base$3;
	var _brrp__multiformats_scope_baseX = src$1;

	const coerce = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
	    return o;
	  if (o instanceof ArrayBuffer)
	    return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const fromString$1 = str => new TextEncoder().encode(str);
	const toString$1 = b => new TextDecoder().decode(b);

	class Encoder {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${ this.prefix }${ this.baseEncode(bytes) }`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      switch (text[0]) {
	      case this.prefix: {
	          return this.baseDecode(text.slice(1));
	        }
	      default: {
	          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
	        }
	      }
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    const decoders = {
	      [this.prefix]: this,
	      ...decoder.decoders || { [decoder.prefix]: decoder }
	    };
	    return new ComposedDecoder(decoders);
	  }
	}
	class ComposedDecoder {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    const other = decoder.decoders || { [decoder.prefix]: decoder };
	    return new ComposedDecoder({
	      ...this.decoders,
	      ...other
	    });
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
	    }
	  }
	}
	class Codec {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder(name, prefix, baseEncode);
	    this.decoder = new Decoder(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from$2 = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);
	const baseX = ({prefix, name, alphabet}) => {
	  const {encode, decode} = _brrp__multiformats_scope_baseX(alphabet, name);
	  return from$2({
	    prefix,
	    name,
	    encode,
	    decode: text => coerce(decode(text))
	  });
	};
	const decode$1 = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${ name } character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode$1 = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
	  return from$2({
	    prefix,
	    name,
	    encode(input) {
	      return encode$1(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode$1(input, alphabet, bitsPerChar, name);
	    }
	  });
	};

	const identity$3 = from$2({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => toString$1(buf),
	  decode: str => fromString$1(str)
	});

	var identityBase = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity$3
	});

	const base2 = rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});

	var base2$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base2: base2
	});

	const base8 = rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});

	var base8$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base8: base8
	});

	const base10 = baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});

	var base10$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base10: base10
	});

	const base16 = rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper = rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});

	var base16$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base16: base16,
		base16upper: base16upper
	});

	const base32 = rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper = rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad = rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper = rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex = rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper = rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad = rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper = rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z = rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});

	var base32$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base32: base32,
		base32upper: base32upper,
		base32pad: base32pad,
		base32padupper: base32padupper,
		base32hex: base32hex,
		base32hexupper: base32hexupper,
		base32hexpad: base32hexpad,
		base32hexpadupper: base32hexpadupper,
		base32z: base32z
	});

	const base36 = baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper = baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});

	var base36$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base36: base36,
		base36upper: base36upper
	});

	const base58btc = baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr = baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});

	var base58 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base58btc: base58btc,
		base58flickr: base58flickr
	});

	const base64 = rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad = rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url = rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad = rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});

	var base64$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base64: base64,
		base64pad: base64pad,
		base64url: base64url,
		base64urlpad: base64urlpad
	});

	var encode_1 = encode;
	var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
	function encode(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT) {
	    out[offset++] = num & 255 | MSB;
	    num /= 128;
	  }
	  while (num & MSBALL) {
	    out[offset++] = num & 255 | MSB;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode = read$6;
	var MSB$1 = 128, REST$1 = 127;
	function read$6(buf, offset) {
	  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
	  do {
	    if (counter >= l) {
	      read$6.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1);
	  read$6.bytes = counter - offset;
	  return res;
	}
	var N1 = Math.pow(2, 7);
	var N2 = Math.pow(2, 14);
	var N3 = Math.pow(2, 21);
	var N4 = Math.pow(2, 28);
	var N5 = Math.pow(2, 35);
	var N6 = Math.pow(2, 42);
	var N7 = Math.pow(2, 49);
	var N8 = Math.pow(2, 56);
	var N9 = Math.pow(2, 63);
	var length = function (value) {
	  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
	};
	var varint = {
	  encode: encode_1,
	  decode: decode,
	  encodingLength: length
	};
	var _brrp_varint = varint;

	const encodeTo = (int, target, offset = 0) => {
	  _brrp_varint.encode(int, target, offset);
	  return target;
	};
	const encodingLength = int => {
	  return _brrp_varint.encodingLength(int);
	};

	const create$2 = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = encodingLength(code);
	  const digestOffset = sizeOffset + encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  encodeTo(code, bytes, 0);
	  encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest(code, size, digest, bytes);
	};
	class Digest {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}

	const from$1 = ({name, code, encode}) => new Hasher(name, code, encode);
	class Hasher {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  async digest(input) {
	    if (input instanceof Uint8Array) {
	      const digest = await this.encode(input);
	      return create$2(this.code, digest);
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}

	const sha256$6 = from$1({
	  name: 'sha2-256',
	  code: 18,
	  encode: input => coerce(crypto__default$1["default"].createHash('sha256').update(input).digest())
	});
	const sha512 = from$1({
	  name: 'sha2-512',
	  code: 19,
	  encode: input => coerce(crypto__default$1["default"].createHash('sha512').update(input).digest())
	});

	var sha2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		sha256: sha256$6,
		sha512: sha512
	});

	const identity$1 = from$1({
	  name: 'identity',
	  code: 0,
	  encode: input => coerce(input)
	});

	var identity$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity$1
	});

	new TextEncoder();
	new TextDecoder();

	const bases = {
	  ...identityBase,
	  ...base2$1,
	  ...base8$1,
	  ...base10$1,
	  ...base16$1,
	  ...base32$1,
	  ...base36$1,
	  ...base58,
	  ...base64$1
	};
	({
	  ...sha2,
	  ...identity$2
	});

	function createCodec(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string = createCodec('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii = createCodec('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES = {
	  utf8: string,
	  'utf-8': string,
	  hex: bases.base16,
	  latin1: ascii,
	  ascii: ascii,
	  binary: ascii,
	  ...bases
	};

	function fromString(string, encoding = 'utf8') {
	  const base = BASES[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	function toString(array, encoding = 'utf8') {
	  const base = BASES[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	var sha256$5 = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	exports.DIGEST_LENGTH = 32;
	exports.BLOCK_SIZE = 64;
	/**
	 * SHA2-256 cryptographic hash algorithm.
	 */
	var SHA256 = /** @class */ (function () {
	    function SHA256() {
	        /** Length of hash output */
	        this.digestLength = exports.DIGEST_LENGTH;
	        /** Block size */
	        this.blockSize = exports.BLOCK_SIZE;
	        // Note: Int32Array is used instead of Uint32Array for performance reasons.
	        this._state = new Int32Array(8); // hash state
	        this._temp = new Int32Array(64); // temporary state
	        this._buffer = new Uint8Array(128); // buffer for data to hash
	        this._bufferLength = 0; // number of bytes in buffer
	        this._bytesHashed = 0; // number of total bytes hashed
	        this._finished = false; // indicates whether the hash was finalized
	        this.reset();
	    }
	    SHA256.prototype._initState = function () {
	        this._state[0] = 0x6a09e667;
	        this._state[1] = 0xbb67ae85;
	        this._state[2] = 0x3c6ef372;
	        this._state[3] = 0xa54ff53a;
	        this._state[4] = 0x510e527f;
	        this._state[5] = 0x9b05688c;
	        this._state[6] = 0x1f83d9ab;
	        this._state[7] = 0x5be0cd19;
	    };
	    /**
	     * Resets hash state making it possible
	     * to re-use this instance to hash other data.
	     */
	    SHA256.prototype.reset = function () {
	        this._initState();
	        this._bufferLength = 0;
	        this._bytesHashed = 0;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans internal buffers and resets hash state.
	     */
	    SHA256.prototype.clean = function () {
	        wipe_1.wipe(this._buffer);
	        wipe_1.wipe(this._temp);
	        this.reset();
	    };
	    /**
	     * Updates hash state with the given data.
	     *
	     * Throws error when trying to update already finalized hash:
	     * instance must be reset to update it again.
	     */
	    SHA256.prototype.update = function (data, dataLength) {
	        if (dataLength === void 0) { dataLength = data.length; }
	        if (this._finished) {
	            throw new Error("SHA256: can't update because hash was finished.");
	        }
	        var dataPos = 0;
	        this._bytesHashed += dataLength;
	        if (this._bufferLength > 0) {
	            while (this._bufferLength < this.blockSize && dataLength > 0) {
	                this._buffer[this._bufferLength++] = data[dataPos++];
	                dataLength--;
	            }
	            if (this._bufferLength === this.blockSize) {
	                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
	                this._bufferLength = 0;
	            }
	        }
	        if (dataLength >= this.blockSize) {
	            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
	            dataLength %= this.blockSize;
	        }
	        while (dataLength > 0) {
	            this._buffer[this._bufferLength++] = data[dataPos++];
	            dataLength--;
	        }
	        return this;
	    };
	    /**
	     * Finalizes hash state and puts hash into out.
	     * If hash was already finalized, puts the same value.
	     */
	    SHA256.prototype.finish = function (out) {
	        if (!this._finished) {
	            var bytesHashed = this._bytesHashed;
	            var left = this._bufferLength;
	            var bitLenHi = (bytesHashed / 0x20000000) | 0;
	            var bitLenLo = bytesHashed << 3;
	            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
	            this._buffer[left] = 0x80;
	            for (var i = left + 1; i < padLength - 8; i++) {
	                this._buffer[i] = 0;
	            }
	            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
	            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
	            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
	            this._finished = true;
	        }
	        for (var i = 0; i < this.digestLength / 4; i++) {
	            binary_1.writeUint32BE(this._state[i], out, i * 4);
	        }
	        return this;
	    };
	    /**
	     * Returns the final hash digest.
	     */
	    SHA256.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization.
	     * Returns hash state to be used with restoreState().
	     * Only chain value is saved, not buffers or other
	     * state variables.
	     */
	    SHA256.prototype.saveState = function () {
	        if (this._finished) {
	            throw new Error("SHA256: cannot save finished state");
	        }
	        return {
	            state: new Int32Array(this._state),
	            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
	            bufferLength: this._bufferLength,
	            bytesHashed: this._bytesHashed
	        };
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization.
	     * Restores state saved by saveState() and sets bytesHashed
	     * to the given value.
	     */
	    SHA256.prototype.restoreState = function (savedState) {
	        this._state.set(savedState.state);
	        this._bufferLength = savedState.bufferLength;
	        if (savedState.buffer) {
	            this._buffer.set(savedState.buffer);
	        }
	        this._bytesHashed = savedState.bytesHashed;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans state returned by saveState().
	     */
	    SHA256.prototype.cleanSavedState = function (savedState) {
	        wipe_1.wipe(savedState.state);
	        if (savedState.buffer) {
	            wipe_1.wipe(savedState.buffer);
	        }
	        savedState.bufferLength = 0;
	        savedState.bytesHashed = 0;
	    };
	    return SHA256;
	}());
	exports.SHA256 = SHA256;
	// Constants
	var K = new Int32Array([
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	]);
	function hashBlocks(w, v, p, pos, len) {
	    while (len >= 64) {
	        var a = v[0];
	        var b = v[1];
	        var c = v[2];
	        var d = v[3];
	        var e = v[4];
	        var f = v[5];
	        var g = v[6];
	        var h = v[7];
	        for (var i = 0; i < 16; i++) {
	            var j = pos + i * 4;
	            w[i] = binary_1.readUint32BE(p, j);
	        }
	        for (var i = 16; i < 64; i++) {
	            var u = w[i - 2];
	            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
	            u = w[i - 15];
	            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
	            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
	        }
	        for (var i = 0; i < 64; i++) {
	            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
	                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
	                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
	            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
	                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
	            h = g;
	            g = f;
	            f = e;
	            e = (d + t1) | 0;
	            d = c;
	            c = b;
	            b = a;
	            a = (t1 + t2) | 0;
	        }
	        v[0] += a;
	        v[1] += b;
	        v[2] += c;
	        v[3] += d;
	        v[4] += e;
	        v[5] += f;
	        v[6] += g;
	        v[7] += h;
	        pos += 64;
	        len -= 64;
	    }
	    return pos;
	}
	function hash(data) {
	    var h = new SHA256();
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.hash = hash;

	}(sha256$5));

	var elliptic = {};

	var name = "elliptic";
	var version$c = "6.5.4";
	var description = "EC cryptography";
	var main = "lib/elliptic.js";
	var files = [
		"lib"
	];
	var scripts = {
		lint: "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		unit: "istanbul test _mocha --reporter=spec test/index.js",
		test: "npm run lint && npm run unit",
		version: "grunt dist && git add dist/"
	};
	var repository = {
		type: "git",
		url: "git@github.com:indutny/elliptic"
	};
	var keywords = [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	];
	var author = "Fedor Indutny <fedor@indutny.com>";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/indutny/elliptic/issues"
	};
	var homepage = "https://github.com/indutny/elliptic";
	var devDependencies = {
		brfs: "^2.0.2",
		coveralls: "^3.1.0",
		eslint: "^7.6.0",
		grunt: "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		istanbul: "^0.4.5",
		mocha: "^8.0.1"
	};
	var dependencies = {
		"bn.js": "^4.11.9",
		brorand: "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		inherits: "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	};
	var require$$0$1 = {
		name: name,
		version: version$c,
		description: description,
		main: main,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		dependencies: dependencies
	};

	var utils$p = {};

	var bn$2 = {exports: {}};

	(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // 'A' - 'F'
	    if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    // '0' - '9'
	    } else {
	      return (c - 48) & 0xf;
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this.strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert(carry === 0);
	    assert((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is BN v4 instance
	        r.strip();
	      } else {
	        // r is BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	}(bn$2));

	var BN$9 = bn$2.exports;

	var minimalisticAssert$1 = assert$l;

	function assert$l(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$l.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils$o = {};

	(function (exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	}(utils$o));

	(function (exports) {

	var utils = exports;
	var BN = bn$2.exports;
	var minAssert = minimalisticAssert$1;
	var minUtils = utils$o;

	utils.assert = minAssert;
	utils.toArray = minUtils.toArray;
	utils.zero2 = minUtils.zero2;
	utils.toHex = minUtils.toHex;
	utils.encode = minUtils.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new BN(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	}(utils$p));

	var brorand = {exports: {}};

	var r$8;

	brorand.exports = function rand(len) {
	  if (!r$8)
	    r$8 = new Rand(null);

	  return r$8.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	brorand.exports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$2 = require('crypto');
	    if (typeof crypto$2.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$2.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}

	var curve = {};

	var BN$8 = bn$2.exports;
	var utils$n = utils$p;
	var getNAF$1 = utils$n.getNAF;
	var getJSF$1 = utils$n.getJSF;
	var assert$k = utils$n.assert;

	function BaseCurve$1(type, conf) {
	  this.type = type;
	  this.p = new BN$8(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$8.red(conf.prime) : BN$8.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$8(0).toRed(this.red);
	  this.one = new BN$8(1).toRed(this.red);
	  this.two = new BN$8(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$8(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base$2 = BaseCurve$1;

	BaseCurve$1.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve$1.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve$1.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$k(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF$1(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve$1.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF$1(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$k(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve$1.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF$1(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF$1(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF$1(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint$1(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve$1.BasePoint = BasePoint$1;

	BasePoint$1.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint$1.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve$1.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils$n.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$k(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$k(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint$1.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint$1.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint$1.prototype.encode = function encode(enc, compact) {
	  return utils$n.encode(this._encode(compact), enc);
	};

	BasePoint$1.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint$1.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint$1.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint$1.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint$1.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint$1.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits$4 = {exports: {}};

	var inherits_browser$1 = {exports: {}};

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser$1.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser$1.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}

	try {
	  var util$8 = require('util');
	  /* istanbul ignore next */
	  if (typeof util$8.inherits !== 'function') throw '';
	  inherits$4.exports = util$8.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  inherits$4.exports = inherits_browser$1.exports;
	}

	var utils$m = utils$p;
	var BN$7 = bn$2.exports;
	var inherits$3 = inherits$4.exports;
	var Base$2 = base$2;

	var assert$j = utils$m.assert;

	function ShortCurve$1(conf) {
	  Base$2.call(this, 'short', conf);

	  this.a = new BN$7(conf.a, 16).toRed(this.red);
	  this.b = new BN$7(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits$3(ShortCurve$1, Base$2);
	var short = ShortCurve$1;

	ShortCurve$1.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$7(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$7(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$j(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$7(vec.a, 16),
	        b: new BN$7(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve$1.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$7.mont(num);
	  var tinv = new BN$7(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$7(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve$1.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$7(1);
	  var y1 = new BN$7(0);
	  var x2 = new BN$7(0);
	  var y2 = new BN$7(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve$1.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve$1.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$7(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve$1.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve$1.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point$3(curve, x, y, isRed) {
	  Base$2.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$7(x, 16);
	    this.y = new BN$7(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits$3(Point$3, Base$2.BasePoint);

	ShortCurve$1.prototype.point = function point(x, y, isRed) {
	  return new Point$3(this, x, y, isRed);
	};

	ShortCurve$1.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point$3.fromJSON(this, obj, red);
	};

	Point$3.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point$3.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point$3.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point$3.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point$3.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point$3.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$3.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point$3.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point$3.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point$3.prototype.mul = function mul(k) {
	  k = new BN$7(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$3.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point$3.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point$3.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point$3.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point$3.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint$1(curve, x, y, z) {
	  Base$2.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$7(0);
	  } else {
	    this.x = new BN$7(x, 16);
	    this.y = new BN$7(y, 16);
	    this.z = new BN$7(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits$3(JPoint$1, Base$2.BasePoint);

	ShortCurve$1.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint$1(this, x, y, z);
	};

	JPoint$1.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint$1.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint$1.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint$1.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint$1.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint$1.prototype.mul = function mul(k, kbase) {
	  k = new BN$7(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint$1.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint$1.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var BN$6 = bn$2.exports;
	var inherits$2 = inherits$4.exports;
	var Base$1 = base$2;

	var utils$l = utils$p;

	function MontCurve(conf) {
	  Base$1.call(this, 'mont', conf);

	  this.a = new BN$6(conf.a, 16).toRed(this.red);
	  this.b = new BN$6(conf.b, 16).toRed(this.red);
	  this.i4 = new BN$6(4).toRed(this.red).redInvm();
	  this.two = new BN$6(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits$2(MontCurve, Base$1);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$2(curve, x, z) {
	  Base$1.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new BN$6(x, 16);
	    this.z = new BN$6(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits$2(Point$2, Base$1.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils$l.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$2(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$2.fromJSON(this, obj);
	};

	Point$2.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$2.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$2.fromJSON = function fromJSON(curve, obj) {
	  return new Point$2(curve, obj[0], obj[1] || curve.one);
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$2.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$2.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$2.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$2.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$2.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$2.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$2.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$2.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$2.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var utils$k = utils$p;
	var BN$5 = bn$2.exports;
	var inherits$1 = inherits$4.exports;
	var Base = base$2;

	var assert$i = utils$k.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new BN$5(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN$5(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN$5(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$i(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits$1(EdwardsCurve, Base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$5(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN$5(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point$1(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new BN$5(x, 16);
	    this.y = new BN$5(y, 16);
	    this.z = z ? new BN$5(z, 16) : this.curve.one;
	    this.t = t && new BN$5(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits$1(Point$1, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point$1(this, x, y, z, t);
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1], obj[2]);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point$1.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$1.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
	    // E = a * C
	    e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      h = this.z.redSqr();
	      // J = F - 2 * H
	      j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    e = c.redAdd(d);
	    // H = (c * Z1)^2
	    h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$1.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point$1.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$1.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$1.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point$1.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$1.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point$1.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point$1.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point$1.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	    this.y,
	    this.z,
	    this.t && this.t.redNeg());
	};

	Point$1.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point$1.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point$1.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point$1.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point$1.prototype.toP = Point$1.prototype.normalize;
	Point$1.prototype.mixedAdd = Point$1.prototype.add;

	(function (exports) {

	var curve = exports;

	curve.base = base$2;
	curve.short = short;
	curve.mont = mont;
	curve.edwards = edwards;
	}(curve));

	var curves$2 = {};

	var hash$2 = {};

	var utils$j = {};

	var assert$h = minimalisticAssert$1;
	var inherits = inherits$4.exports;

	utils$j.inherits = inherits;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray$1(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils$j.toArray = toArray$1;

	function toHex$1(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils$j.toHex = toHex$1;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils$j.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils$j.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils$j.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils$j.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert$h(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils$j.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils$j.split32 = split32;

	function rotr32$1(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils$j.rotr32 = rotr32$1;

	function rotl32$2(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils$j.rotl32 = rotl32$2;

	function sum32$3(a, b) {
	  return (a + b) >>> 0;
	}
	utils$j.sum32 = sum32$3;

	function sum32_3$1(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils$j.sum32_3 = sum32_3$1;

	function sum32_4$2(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils$j.sum32_4 = sum32_4$2;

	function sum32_5$2(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils$j.sum32_5 = sum32_5$2;

	function sum64$1(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	utils$j.sum64 = sum64$1;

	function sum64_hi$1(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	utils$j.sum64_hi = sum64_hi$1;

	function sum64_lo$1(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	utils$j.sum64_lo = sum64_lo$1;

	function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	utils$j.sum64_4_hi = sum64_4_hi$1;

	function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	utils$j.sum64_4_lo = sum64_4_lo$1;

	function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	utils$j.sum64_5_hi = sum64_5_hi$1;

	function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	utils$j.sum64_5_lo = sum64_5_lo$1;

	function rotr64_hi$1(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	utils$j.rotr64_hi = rotr64_hi$1;

	function rotr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$j.rotr64_lo = rotr64_lo$1;

	function shr64_hi$1(ah, al, num) {
	  return ah >>> num;
	}
	utils$j.shr64_hi = shr64_hi$1;

	function shr64_lo$1(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	utils$j.shr64_lo = shr64_lo$1;

	var common$5 = {};

	var utils$i = utils$j;
	var assert$g = minimalisticAssert$1;

	function BlockHash$4() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	common$5.BlockHash = BlockHash$4;

	BlockHash$4.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils$i.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils$i.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash$4.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert$g(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash$4.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var sha = {};

	var common$4 = {};

	var utils$h = utils$j;
	var rotr32 = utils$h.rotr32;

	function ft_1$1(s, x, y, z) {
	  if (s === 0)
	    return ch32$1(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32$1(x, y, z);
	}
	common$4.ft_1 = ft_1$1;

	function ch32$1(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	common$4.ch32 = ch32$1;

	function maj32$1(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	common$4.maj32 = maj32$1;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	common$4.p32 = p32;

	function s0_256$1(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	common$4.s0_256 = s0_256$1;

	function s1_256$1(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	common$4.s1_256 = s1_256$1;

	function g0_256$1(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	common$4.g0_256 = g0_256$1;

	function g1_256$1(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	common$4.g1_256 = g1_256$1;

	var utils$g = utils$j;
	var common$3 = common$5;
	var shaCommon$1 = common$4;

	var rotl32$1 = utils$g.rotl32;
	var sum32$2 = utils$g.sum32;
	var sum32_5$1 = utils$g.sum32_5;
	var ft_1 = shaCommon$1.ft_1;
	var BlockHash$3 = common$3.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$3.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils$g.inherits(SHA1, BlockHash$3);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$g.toHex32(this.h, 'big');
	  else
	    return utils$g.split32(this.h, 'big');
	};

	var utils$f = utils$j;
	var common$2 = common$5;
	var shaCommon = common$4;
	var assert$f = minimalisticAssert$1;

	var sum32$1 = utils$f.sum32;
	var sum32_4$1 = utils$f.sum32_4;
	var sum32_5 = utils$f.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;

	var BlockHash$2 = common$2.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256$1() {
	  if (!(this instanceof SHA256$1))
	    return new SHA256$1();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils$f.inherits(SHA256$1, BlockHash$2);
	var _256 = SHA256$1;

	SHA256$1.blockSize = 512;
	SHA256$1.outSize = 256;
	SHA256$1.hmacStrength = 192;
	SHA256$1.padLength = 64;

	SHA256$1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert$f(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$1(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$1(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$1(T1, T2);
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	  this.h[5] = sum32$1(this.h[5], f);
	  this.h[6] = sum32$1(this.h[6], g);
	  this.h[7] = sum32$1(this.h[7], h);
	};

	SHA256$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$f.toHex32(this.h, 'big');
	  else
	    return utils$f.split32(this.h, 'big');
	};

	var utils$e = utils$j;
	var SHA256 = _256;

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils$e.inherits(SHA224, SHA256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils$e.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils$e.split32(this.h.slice(0, 7), 'big');
	};

	var utils$d = utils$j;
	var common$1 = common$5;
	var assert$e = minimalisticAssert$1;

	var rotr64_hi = utils$d.rotr64_hi;
	var rotr64_lo = utils$d.rotr64_lo;
	var shr64_hi = utils$d.shr64_hi;
	var shr64_lo = utils$d.shr64_lo;
	var sum64 = utils$d.sum64;
	var sum64_hi = utils$d.sum64_hi;
	var sum64_lo = utils$d.sum64_lo;
	var sum64_4_hi = utils$d.sum64_4_hi;
	var sum64_4_lo = utils$d.sum64_4_lo;
	var sum64_5_hi = utils$d.sum64_5_hi;
	var sum64_5_lo = utils$d.sum64_5_lo;

	var BlockHash$1 = common$1.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512$1() {
	  if (!(this instanceof SHA512$1))
	    return new SHA512$1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils$d.inherits(SHA512$1, BlockHash$1);
	var _512 = SHA512$1;

	SHA512$1.blockSize = 1024;
	SHA512$1.outSize = 512;
	SHA512$1.hmacStrength = 192;
	SHA512$1.padLength = 128;

	SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512$1.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert$e(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512$1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$d.toHex32(this.h, 'big');
	  else
	    return utils$d.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	var utils$c = utils$j;

	var SHA512 = _512;

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils$c.inherits(SHA384, SHA512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$c.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils$c.split32(this.h.slice(0, 12), 'big');
	};

	sha.sha1 = _1;
	sha.sha224 = _224;
	sha.sha256 = _256;
	sha.sha384 = _384;
	sha.sha512 = _512;

	var ripemd = {};

	var utils$b = utils$j;
	var common = common$5;

	var rotl32 = utils$b.rotl32;
	var sum32 = utils$b.sum32;
	var sum32_3 = utils$b.sum32_3;
	var sum32_4 = utils$b.sum32_4;
	var BlockHash = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils$b.inherits(RIPEMD160, BlockHash);
	ripemd.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f$2(j, B, C, D), msg[r$7[j] + start], K(j)),
	        s$4[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils$b.toHex32(this.h, 'little');
	  else
	    return utils$b.split32(this.h, 'little');
	};

	function f$2(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r$7 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s$4 = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var utils$a = utils$j;
	var assert$d = minimalisticAssert$1;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils$a.toArray(key, enc));
	}
	var hmac = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert$d(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	(function (exports) {
	var hash = exports;

	hash.utils = utils$j;
	hash.common = common$5;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	}(hash$2));

	(function (exports) {

	var curves = exports;

	var hash = hash$2;
	var curve$1 = curve;
	var utils = utils$p;

	var assert = utils.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve$1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve$1.edwards(options);
	  else
	    this.curve = new curve$1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = require('./precomputed/secp256k1');
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	});
	}(curves$2));

	var hash$1 = hash$2;
	var utils$9 = utils$o;
	var assert$c = minimalisticAssert$1;

	function HmacDRBG$2(options) {
	  if (!(this instanceof HmacDRBG$2))
	    return new HmacDRBG$2(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils$9.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils$9.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils$9.toArray(options.pers, options.persEnc || 'hex');
	  assert$c(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg$1 = HmacDRBG$2;

	HmacDRBG$2.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG$2.prototype._hmac = function hmac() {
	  return new hash$1.hmac(this.hash, this.K);
	};

	HmacDRBG$2.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG$2.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils$9.toArray(entropy, entropyEnc);
	  add = utils$9.toArray(add, addEnc);

	  assert$c(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG$2.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils$9.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils$9.encode(res, enc);
	};

	var BN$4 = bn$2.exports;
	var utils$8 = utils$p;
	var assert$b = utils$8.assert;

	function KeyPair$4(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key$2 = KeyPair$4;

	KeyPair$4.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair$4)
	    return pub;

	  return new KeyPair$4(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair$4.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair$4)
	    return priv;

	  return new KeyPair$4(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair$4.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair$4.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair$4.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair$4.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$4(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair$4.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$b(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$b(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair$4.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$b(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair$4.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair$4.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair$4.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var BN$3 = bn$2.exports;

	var utils$7 = utils$p;
	var assert$a = utils$7.assert;

	function Signature$4(options, enc) {
	  if (options instanceof Signature$4)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$a(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$3(options.r, 16);
	  this.s = new BN$3(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature$2 = Signature$4;

	function Position$1() {
	  this.place = 0;
	}

	function getLength$1(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding$1(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature$4.prototype._importDER = function _importDER(data, enc) {
	  data = utils$7.toArray(data, enc);
	  var p = new Position$1();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength$1(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength$1(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength$1(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$3(r);
	  this.s = new BN$3(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength$1(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature$4.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding$1(r);
	  s = rmPadding$1(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength$1(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength$1(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength$1(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils$7.encode(res, enc);
	};

	var BN$2 = bn$2.exports;
	var HmacDRBG$1 = hmacDrbg$1;
	var utils$6 = utils$p;
	var curves$1 = curves$2;
	var rand$1 = brorand.exports;
	var assert$9 = utils$6.assert;

	var KeyPair$3 = key$2;
	var Signature$3 = signature$2;

	function EC$2(options) {
	  if (!(this instanceof EC$2))
	    return new EC$2(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$9(Object.prototype.hasOwnProperty.call(curves$1, options),
	      'Unknown curve ' + options);

	    options = curves$1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves$1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec$1 = EC$2;

	EC$2.prototype.keyPair = function keyPair(options) {
	  return new KeyPair$3(this, options);
	};

	EC$2.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair$3.fromPrivate(this, priv, enc);
	};

	EC$2.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair$3.fromPublic(this, pub, enc);
	};

	EC$2.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG$1({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand$1(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$2(2));
	  for (;;) {
	    var priv = new BN$2(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC$2.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC$2.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$2(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG$1({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$2(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$2(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new Signature$3({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC$2.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN$2(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature$3(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC$2.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert$9((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature$3(signature, enc);

	  var n = this.n;
	  var e = new BN$2(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC$2.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature$3(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var utils$5 = utils$p;
	var assert$8 = utils$5.assert;
	var parseBytes$2 = utils$5.parseBytes;
	var cachedProperty$1 = utils$5.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$2(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes$2(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes$2(params.pub);
	}

	KeyPair$2.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$2)
	    return pub;
	  return new KeyPair$2(eddsa, { pub: pub });
	};

	KeyPair$2.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$2)
	    return secret;
	  return new KeyPair$2(eddsa, { secret: secret });
	};

	KeyPair$2.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty$1(KeyPair$2, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty$1(KeyPair$2, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty$1(KeyPair$2, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty$1(KeyPair$2, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty$1(KeyPair$2, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty$1(KeyPair$2, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$2.prototype.sign = function sign(message) {
	  assert$8(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$2.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$2.prototype.getSecret = function getSecret(enc) {
	  assert$8(this._secret, 'KeyPair is public only');
	  return utils$5.encode(this.secret(), enc);
	};

	KeyPair$2.prototype.getPublic = function getPublic(enc) {
	  return utils$5.encode(this.pubBytes(), enc);
	};

	var key$1 = KeyPair$2;

	var BN$1 = bn$2.exports;
	var utils$4 = utils$p;
	var assert$7 = utils$4.assert;
	var cachedProperty = utils$4.cachedProperty;
	var parseBytes$1 = utils$4.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$2(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength),
	    };
	  }

	  assert$7(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof BN$1)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty(Signature$2, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty(Signature$2, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty(Signature$2, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty(Signature$2, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$2.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$2.prototype.toHex = function toHex() {
	  return utils$4.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature$1 = Signature$2;

	var hash = hash$2;
	var curves = curves$2;
	var utils$3 = utils$p;
	var assert$6 = utils$3.assert;
	var parseBytes = utils$3.parseBytes;
	var KeyPair$1 = key$1;
	var Signature$1 = signature$1;

	function EDDSA(curve) {
	  assert$6(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	    .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils$3.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair$1.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair$1.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature$1)
	    return sig;
	  return new Signature$1(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils$3.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils$3.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils$3.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	(function (exports) {

	var elliptic = exports;

	elliptic.version = require$$0$1.version;
	elliptic.utils = utils$p;
	elliptic.rand = brorand.exports;
	elliptic.curve = curve;
	elliptic.curves = curves$2;

	// Protocols
	elliptic.ec = ec$1;
	elliptic.eddsa = eddsa;
	}(elliptic));

	/* jshint esversion: 6 */

	var canonicalize = function serialize (object) {
	  if (object === null || typeof object !== 'object' || object.toJSON != null) {
	    return JSON.stringify(object);
	  }

	  if (Array.isArray(object)) {
	    return '[' + object.reduce((t, cv, ci) => {
	      const comma = ci === 0 ? '' : ',';
	      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;
	      return t + comma + serialize(value);
	    }, '') + ']';
	  }

	  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {
	    if (object[cv] === undefined ||
	        typeof object[cv] === 'symbol') {
	      return t;
	    }
	    const comma = t.length === 0 ? '' : ',';
	    return t + comma + serialize(cv) + ':' + serialize(object[cv]);
	  }, '') + '}';
	};

	var dist$8 = {};

	Object.defineProperty(dist$8, "__esModule", { value: true });
	dist$8.bech32m = bech32 = dist$8.bech32 = void 0;
	const ALPHABET$1 = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';
	const ALPHABET_MAP = {};
	for (let z = 0; z < ALPHABET$1.length; z++) {
	    const x = ALPHABET$1.charAt(z);
	    ALPHABET_MAP[x] = z;
	}
	function polymodStep(pre) {
	    const b = pre >> 25;
	    return (((pre & 0x1ffffff) << 5) ^
	        (-((b >> 0) & 1) & 0x3b6a57b2) ^
	        (-((b >> 1) & 1) & 0x26508e6d) ^
	        (-((b >> 2) & 1) & 0x1ea119fa) ^
	        (-((b >> 3) & 1) & 0x3d4233dd) ^
	        (-((b >> 4) & 1) & 0x2a1462b3));
	}
	function prefixChk(prefix) {
	    let chk = 1;
	    for (let i = 0; i < prefix.length; ++i) {
	        const c = prefix.charCodeAt(i);
	        if (c < 33 || c > 126)
	            return 'Invalid prefix (' + prefix + ')';
	        chk = polymodStep(chk) ^ (c >> 5);
	    }
	    chk = polymodStep(chk);
	    for (let i = 0; i < prefix.length; ++i) {
	        const v = prefix.charCodeAt(i);
	        chk = polymodStep(chk) ^ (v & 0x1f);
	    }
	    return chk;
	}
	function convert(data, inBits, outBits, pad) {
	    let value = 0;
	    let bits = 0;
	    const maxV = (1 << outBits) - 1;
	    const result = [];
	    for (let i = 0; i < data.length; ++i) {
	        value = (value << inBits) | data[i];
	        bits += inBits;
	        while (bits >= outBits) {
	            bits -= outBits;
	            result.push((value >> bits) & maxV);
	        }
	    }
	    if (pad) {
	        if (bits > 0) {
	            result.push((value << (outBits - bits)) & maxV);
	        }
	    }
	    else {
	        if (bits >= inBits)
	            return 'Excess padding';
	        if ((value << (outBits - bits)) & maxV)
	            return 'Non-zero padding';
	    }
	    return result;
	}
	function toWords(bytes) {
	    return convert(bytes, 8, 5, true);
	}
	function fromWordsUnsafe(words) {
	    const res = convert(words, 5, 8, false);
	    if (Array.isArray(res))
	        return res;
	}
	function fromWords(words) {
	    const res = convert(words, 5, 8, false);
	    if (Array.isArray(res))
	        return res;
	    throw new Error(res);
	}
	function getLibraryFromEncoding(encoding) {
	    let ENCODING_CONST;
	    if (encoding === 'bech32') {
	        ENCODING_CONST = 1;
	    }
	    else {
	        ENCODING_CONST = 0x2bc830a3;
	    }
	    function encode(prefix, words, LIMIT) {
	        LIMIT = LIMIT || 90;
	        if (prefix.length + 7 + words.length > LIMIT)
	            throw new TypeError('Exceeds length limit');
	        prefix = prefix.toLowerCase();
	        // determine chk mod
	        let chk = prefixChk(prefix);
	        if (typeof chk === 'string')
	            throw new Error(chk);
	        let result = prefix + '1';
	        for (let i = 0; i < words.length; ++i) {
	            const x = words[i];
	            if (x >> 5 !== 0)
	                throw new Error('Non 5-bit word');
	            chk = polymodStep(chk) ^ x;
	            result += ALPHABET$1.charAt(x);
	        }
	        for (let i = 0; i < 6; ++i) {
	            chk = polymodStep(chk);
	        }
	        chk ^= ENCODING_CONST;
	        for (let i = 0; i < 6; ++i) {
	            const v = (chk >> ((5 - i) * 5)) & 0x1f;
	            result += ALPHABET$1.charAt(v);
	        }
	        return result;
	    }
	    function __decode(str, LIMIT) {
	        LIMIT = LIMIT || 90;
	        if (str.length < 8)
	            return str + ' too short';
	        if (str.length > LIMIT)
	            return 'Exceeds length limit';
	        // don't allow mixed case
	        const lowered = str.toLowerCase();
	        const uppered = str.toUpperCase();
	        if (str !== lowered && str !== uppered)
	            return 'Mixed-case string ' + str;
	        str = lowered;
	        const split = str.lastIndexOf('1');
	        if (split === -1)
	            return 'No separator character for ' + str;
	        if (split === 0)
	            return 'Missing prefix for ' + str;
	        const prefix = str.slice(0, split);
	        const wordChars = str.slice(split + 1);
	        if (wordChars.length < 6)
	            return 'Data too short';
	        let chk = prefixChk(prefix);
	        if (typeof chk === 'string')
	            return chk;
	        const words = [];
	        for (let i = 0; i < wordChars.length; ++i) {
	            const c = wordChars.charAt(i);
	            const v = ALPHABET_MAP[c];
	            if (v === undefined)
	                return 'Unknown character ' + c;
	            chk = polymodStep(chk) ^ v;
	            // not in the checksum?
	            if (i + 6 >= wordChars.length)
	                continue;
	            words.push(v);
	        }
	        if (chk !== ENCODING_CONST)
	            return 'Invalid checksum for ' + str;
	        return { prefix, words };
	    }
	    function decodeUnsafe(str, LIMIT) {
	        const res = __decode(str, LIMIT);
	        if (typeof res === 'object')
	            return res;
	    }
	    function decode(str, LIMIT) {
	        const res = __decode(str, LIMIT);
	        if (typeof res === 'object')
	            return res;
	        throw new Error(res);
	    }
	    return {
	        decodeUnsafe,
	        decode,
	        encode,
	        toWords,
	        fromWordsUnsafe,
	        fromWords,
	    };
	}
	var bech32 = dist$8.bech32 = getLibraryFromEncoding('bech32');
	dist$8.bech32m = getLibraryFromEncoding('bech32m');

	var x25519 = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package x25519 implements X25519 key agreement.
	 */
	var random_1 = random$2;
	var wipe_1 = wipe$1;
	exports.PUBLIC_KEY_LENGTH = 32;
	exports.SECRET_KEY_LENGTH = 32;
	exports.SHARED_KEY_LENGTH = 32;
	// Returns new zero-filled 16-element GF (Float64Array).
	// If passed an array of numbers, prefills the returned
	// array with them.
	//
	// We use Float64Array, because we need 48-bit numbers
	// for this implementation.
	function gf(init) {
	    var r = new Float64Array(16);
	    if (init) {
	        for (var i = 0; i < init.length; i++) {
	            r[i] = init[i];
	        }
	    }
	    return r;
	}
	// Base point.
	var _9 = new Uint8Array(32);
	_9[0] = 9;
	var _121665 = gf([0xdb41, 1]);
	function car25519(o) {
	    var c = 1;
	    for (var i = 0; i < 16; i++) {
	        var v = o[i] + c + 65535;
	        c = Math.floor(v / 65536);
	        o[i] = v - c * 65536;
	    }
	    o[0] += c - 1 + 37 * (c - 1);
	}
	function sel25519(p, q, b) {
	    var c = ~(b - 1);
	    for (var i = 0; i < 16; i++) {
	        var t = c & (p[i] ^ q[i]);
	        p[i] ^= t;
	        q[i] ^= t;
	    }
	}
	function pack25519(o, n) {
	    var m = gf();
	    var t = gf();
	    for (var i = 0; i < 16; i++) {
	        t[i] = n[i];
	    }
	    car25519(t);
	    car25519(t);
	    car25519(t);
	    for (var j = 0; j < 2; j++) {
	        m[0] = t[0] - 0xffed;
	        for (var i = 1; i < 15; i++) {
	            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
	            m[i - 1] &= 0xffff;
	        }
	        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
	        var b = (m[15] >> 16) & 1;
	        m[14] &= 0xffff;
	        sel25519(t, m, 1 - b);
	    }
	    for (var i = 0; i < 16; i++) {
	        o[2 * i] = t[i] & 0xff;
	        o[2 * i + 1] = t[i] >> 8;
	    }
	}
	function unpack25519(o, n) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
	    }
	    o[15] &= 0x7fff;
	}
	function add(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] + b[i];
	    }
	}
	function sub(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] - b[i];
	    }
	}
	function mul(o, a, b) {
	    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
	    v = a[0];
	    t0 += v * b0;
	    t1 += v * b1;
	    t2 += v * b2;
	    t3 += v * b3;
	    t4 += v * b4;
	    t5 += v * b5;
	    t6 += v * b6;
	    t7 += v * b7;
	    t8 += v * b8;
	    t9 += v * b9;
	    t10 += v * b10;
	    t11 += v * b11;
	    t12 += v * b12;
	    t13 += v * b13;
	    t14 += v * b14;
	    t15 += v * b15;
	    v = a[1];
	    t1 += v * b0;
	    t2 += v * b1;
	    t3 += v * b2;
	    t4 += v * b3;
	    t5 += v * b4;
	    t6 += v * b5;
	    t7 += v * b6;
	    t8 += v * b7;
	    t9 += v * b8;
	    t10 += v * b9;
	    t11 += v * b10;
	    t12 += v * b11;
	    t13 += v * b12;
	    t14 += v * b13;
	    t15 += v * b14;
	    t16 += v * b15;
	    v = a[2];
	    t2 += v * b0;
	    t3 += v * b1;
	    t4 += v * b2;
	    t5 += v * b3;
	    t6 += v * b4;
	    t7 += v * b5;
	    t8 += v * b6;
	    t9 += v * b7;
	    t10 += v * b8;
	    t11 += v * b9;
	    t12 += v * b10;
	    t13 += v * b11;
	    t14 += v * b12;
	    t15 += v * b13;
	    t16 += v * b14;
	    t17 += v * b15;
	    v = a[3];
	    t3 += v * b0;
	    t4 += v * b1;
	    t5 += v * b2;
	    t6 += v * b3;
	    t7 += v * b4;
	    t8 += v * b5;
	    t9 += v * b6;
	    t10 += v * b7;
	    t11 += v * b8;
	    t12 += v * b9;
	    t13 += v * b10;
	    t14 += v * b11;
	    t15 += v * b12;
	    t16 += v * b13;
	    t17 += v * b14;
	    t18 += v * b15;
	    v = a[4];
	    t4 += v * b0;
	    t5 += v * b1;
	    t6 += v * b2;
	    t7 += v * b3;
	    t8 += v * b4;
	    t9 += v * b5;
	    t10 += v * b6;
	    t11 += v * b7;
	    t12 += v * b8;
	    t13 += v * b9;
	    t14 += v * b10;
	    t15 += v * b11;
	    t16 += v * b12;
	    t17 += v * b13;
	    t18 += v * b14;
	    t19 += v * b15;
	    v = a[5];
	    t5 += v * b0;
	    t6 += v * b1;
	    t7 += v * b2;
	    t8 += v * b3;
	    t9 += v * b4;
	    t10 += v * b5;
	    t11 += v * b6;
	    t12 += v * b7;
	    t13 += v * b8;
	    t14 += v * b9;
	    t15 += v * b10;
	    t16 += v * b11;
	    t17 += v * b12;
	    t18 += v * b13;
	    t19 += v * b14;
	    t20 += v * b15;
	    v = a[6];
	    t6 += v * b0;
	    t7 += v * b1;
	    t8 += v * b2;
	    t9 += v * b3;
	    t10 += v * b4;
	    t11 += v * b5;
	    t12 += v * b6;
	    t13 += v * b7;
	    t14 += v * b8;
	    t15 += v * b9;
	    t16 += v * b10;
	    t17 += v * b11;
	    t18 += v * b12;
	    t19 += v * b13;
	    t20 += v * b14;
	    t21 += v * b15;
	    v = a[7];
	    t7 += v * b0;
	    t8 += v * b1;
	    t9 += v * b2;
	    t10 += v * b3;
	    t11 += v * b4;
	    t12 += v * b5;
	    t13 += v * b6;
	    t14 += v * b7;
	    t15 += v * b8;
	    t16 += v * b9;
	    t17 += v * b10;
	    t18 += v * b11;
	    t19 += v * b12;
	    t20 += v * b13;
	    t21 += v * b14;
	    t22 += v * b15;
	    v = a[8];
	    t8 += v * b0;
	    t9 += v * b1;
	    t10 += v * b2;
	    t11 += v * b3;
	    t12 += v * b4;
	    t13 += v * b5;
	    t14 += v * b6;
	    t15 += v * b7;
	    t16 += v * b8;
	    t17 += v * b9;
	    t18 += v * b10;
	    t19 += v * b11;
	    t20 += v * b12;
	    t21 += v * b13;
	    t22 += v * b14;
	    t23 += v * b15;
	    v = a[9];
	    t9 += v * b0;
	    t10 += v * b1;
	    t11 += v * b2;
	    t12 += v * b3;
	    t13 += v * b4;
	    t14 += v * b5;
	    t15 += v * b6;
	    t16 += v * b7;
	    t17 += v * b8;
	    t18 += v * b9;
	    t19 += v * b10;
	    t20 += v * b11;
	    t21 += v * b12;
	    t22 += v * b13;
	    t23 += v * b14;
	    t24 += v * b15;
	    v = a[10];
	    t10 += v * b0;
	    t11 += v * b1;
	    t12 += v * b2;
	    t13 += v * b3;
	    t14 += v * b4;
	    t15 += v * b5;
	    t16 += v * b6;
	    t17 += v * b7;
	    t18 += v * b8;
	    t19 += v * b9;
	    t20 += v * b10;
	    t21 += v * b11;
	    t22 += v * b12;
	    t23 += v * b13;
	    t24 += v * b14;
	    t25 += v * b15;
	    v = a[11];
	    t11 += v * b0;
	    t12 += v * b1;
	    t13 += v * b2;
	    t14 += v * b3;
	    t15 += v * b4;
	    t16 += v * b5;
	    t17 += v * b6;
	    t18 += v * b7;
	    t19 += v * b8;
	    t20 += v * b9;
	    t21 += v * b10;
	    t22 += v * b11;
	    t23 += v * b12;
	    t24 += v * b13;
	    t25 += v * b14;
	    t26 += v * b15;
	    v = a[12];
	    t12 += v * b0;
	    t13 += v * b1;
	    t14 += v * b2;
	    t15 += v * b3;
	    t16 += v * b4;
	    t17 += v * b5;
	    t18 += v * b6;
	    t19 += v * b7;
	    t20 += v * b8;
	    t21 += v * b9;
	    t22 += v * b10;
	    t23 += v * b11;
	    t24 += v * b12;
	    t25 += v * b13;
	    t26 += v * b14;
	    t27 += v * b15;
	    v = a[13];
	    t13 += v * b0;
	    t14 += v * b1;
	    t15 += v * b2;
	    t16 += v * b3;
	    t17 += v * b4;
	    t18 += v * b5;
	    t19 += v * b6;
	    t20 += v * b7;
	    t21 += v * b8;
	    t22 += v * b9;
	    t23 += v * b10;
	    t24 += v * b11;
	    t25 += v * b12;
	    t26 += v * b13;
	    t27 += v * b14;
	    t28 += v * b15;
	    v = a[14];
	    t14 += v * b0;
	    t15 += v * b1;
	    t16 += v * b2;
	    t17 += v * b3;
	    t18 += v * b4;
	    t19 += v * b5;
	    t20 += v * b6;
	    t21 += v * b7;
	    t22 += v * b8;
	    t23 += v * b9;
	    t24 += v * b10;
	    t25 += v * b11;
	    t26 += v * b12;
	    t27 += v * b13;
	    t28 += v * b14;
	    t29 += v * b15;
	    v = a[15];
	    t15 += v * b0;
	    t16 += v * b1;
	    t17 += v * b2;
	    t18 += v * b3;
	    t19 += v * b4;
	    t20 += v * b5;
	    t21 += v * b6;
	    t22 += v * b7;
	    t23 += v * b8;
	    t24 += v * b9;
	    t25 += v * b10;
	    t26 += v * b11;
	    t27 += v * b12;
	    t28 += v * b13;
	    t29 += v * b14;
	    t30 += v * b15;
	    t0 += 38 * t16;
	    t1 += 38 * t17;
	    t2 += 38 * t18;
	    t3 += 38 * t19;
	    t4 += 38 * t20;
	    t5 += 38 * t21;
	    t6 += 38 * t22;
	    t7 += 38 * t23;
	    t8 += 38 * t24;
	    t9 += 38 * t25;
	    t10 += 38 * t26;
	    t11 += 38 * t27;
	    t12 += 38 * t28;
	    t13 += 38 * t29;
	    t14 += 38 * t30;
	    // t15 left as is
	    // first car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    // second car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    o[0] = t0;
	    o[1] = t1;
	    o[2] = t2;
	    o[3] = t3;
	    o[4] = t4;
	    o[5] = t5;
	    o[6] = t6;
	    o[7] = t7;
	    o[8] = t8;
	    o[9] = t9;
	    o[10] = t10;
	    o[11] = t11;
	    o[12] = t12;
	    o[13] = t13;
	    o[14] = t14;
	    o[15] = t15;
	}
	function square(o, a) {
	    mul(o, a, a);
	}
	function inv25519(o, inp) {
	    var c = gf();
	    for (var i = 0; i < 16; i++) {
	        c[i] = inp[i];
	    }
	    for (var i = 253; i >= 0; i--) {
	        square(c, c);
	        if (i !== 2 && i !== 4) {
	            mul(c, c, inp);
	        }
	    }
	    for (var i = 0; i < 16; i++) {
	        o[i] = c[i];
	    }
	}
	function scalarMult(n, p) {
	    var z = new Uint8Array(32);
	    var x = new Float64Array(80);
	    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
	    for (var i = 0; i < 31; i++) {
	        z[i] = n[i];
	    }
	    z[31] = (n[31] & 127) | 64;
	    z[0] &= 248;
	    unpack25519(x, p);
	    for (var i = 0; i < 16; i++) {
	        b[i] = x[i];
	    }
	    a[0] = d[0] = 1;
	    for (var i = 254; i >= 0; --i) {
	        var r = (z[i >>> 3] >>> (i & 7)) & 1;
	        sel25519(a, b, r);
	        sel25519(c, d, r);
	        add(e, a, c);
	        sub(a, a, c);
	        add(c, b, d);
	        sub(b, b, d);
	        square(d, e);
	        square(f, a);
	        mul(a, c, a);
	        mul(c, b, e);
	        add(e, a, c);
	        sub(a, a, c);
	        square(b, a);
	        sub(c, d, f);
	        mul(a, c, _121665);
	        add(a, a, d);
	        mul(c, c, a);
	        mul(a, d, f);
	        mul(d, b, x);
	        square(b, e);
	        sel25519(a, b, r);
	        sel25519(c, d, r);
	    }
	    for (var i = 0; i < 16; i++) {
	        x[i + 16] = a[i];
	        x[i + 32] = c[i];
	        x[i + 48] = b[i];
	        x[i + 64] = d[i];
	    }
	    var x32 = x.subarray(32);
	    var x16 = x.subarray(16);
	    inv25519(x32, x32);
	    mul(x16, x16, x32);
	    var q = new Uint8Array(32);
	    pack25519(q, x16);
	    return q;
	}
	exports.scalarMult = scalarMult;
	function scalarMultBase(n) {
	    return scalarMult(n, _9);
	}
	exports.scalarMultBase = scalarMultBase;
	function generateKeyPairFromSeed(seed) {
	    if (seed.length !== exports.SECRET_KEY_LENGTH) {
	        throw new Error("x25519: seed must be " + exports.SECRET_KEY_LENGTH + " bytes");
	    }
	    var secretKey = new Uint8Array(seed);
	    var publicKey = scalarMultBase(secretKey);
	    return {
	        publicKey: publicKey,
	        secretKey: secretKey
	    };
	}
	exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
	function generateKeyPair(prng) {
	    var seed = random_1.randomBytes(32, prng);
	    var result = generateKeyPairFromSeed(seed);
	    wipe_1.wipe(seed);
	    return result;
	}
	exports.generateKeyPair = generateKeyPair;
	/**
	 * Returns a shared key between our secret key and a peer's public key.
	 *
	 * Throws an error if the given keys are of wrong length.
	 *
	 * If rejectZero is true throws if the calculated shared key is all-zero.
	 * From RFC 7748:
	 *
	 * > Protocol designers using Diffie-Hellman over the curves defined in
	 * > this document must not assume "contributory behavior".  Specially,
	 * > contributory behavior means that both parties' private keys
	 * > contribute to the resulting shared key.  Since curve25519 and
	 * > curve448 have cofactors of 8 and 4 (respectively), an input point of
	 * > small order will eliminate any contribution from the other party's
	 * > private key.  This situation can be detected by checking for the all-
	 * > zero output, which implementations MAY do, as specified in Section 6.
	 * > However, a large number of existing implementations do not do this.
	 *
	 * IMPORTANT: the returned key is a raw result of scalar multiplication.
	 * To use it as a key material, hash it with a cryptographic hash function.
	 */
	function sharedKey(mySecretKey, theirPublicKey, rejectZero) {
	    if (rejectZero === void 0) { rejectZero = false; }
	    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
	        throw new Error("X25519: incorrect secret key length");
	    }
	    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
	        throw new Error("X25519: incorrect public key length");
	    }
	    var result = scalarMult(mySecretKey, theirPublicKey);
	    if (rejectZero) {
	        var zeros = 0;
	        for (var i = 0; i < result.length; i++) {
	            zeros |= result[i];
	        }
	        if (zeros === 0) {
	            throw new Error("X25519: invalid shared key");
	        }
	    }
	    return result;
	}
	exports.sharedKey = sharedKey;

	}(x25519));

	var xchacha20poly1305 = {};

	var xchacha20 = {};

	var chacha = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(chacha, "__esModule", { value: true });
	/**
	 * Package chacha implements ChaCha stream cipher.
	 */
	var binary_1$1 = binary;
	var wipe_1$1 = wipe$1;
	// Number of ChaCha rounds (ChaCha20).
	var ROUNDS$1 = 20;
	// Applies the ChaCha core function to 16-byte input,
	// 32-byte key key, and puts the result into 64-byte array out.
	function core(out, input, key) {
	    var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
	    var j1 = 0x3320646E; // "nd 3"     for 32-byte keys
	    var j2 = 0x79622D32; // "2-by"
	    var j3 = 0x6B206574; // "te k"
	    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];
	    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];
	    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];
	    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];
	    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];
	    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];
	    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];
	    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];
	    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];
	    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];
	    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];
	    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];
	    var x0 = j0;
	    var x1 = j1;
	    var x2 = j2;
	    var x3 = j3;
	    var x4 = j4;
	    var x5 = j5;
	    var x6 = j6;
	    var x7 = j7;
	    var x8 = j8;
	    var x9 = j9;
	    var x10 = j10;
	    var x11 = j11;
	    var x12 = j12;
	    var x13 = j13;
	    var x14 = j14;
	    var x15 = j15;
	    for (var i = 0; i < ROUNDS$1; i += 2) {
	        x0 = x0 + x4 | 0;
	        x12 ^= x0;
	        x12 = x12 >>> (32 - 16) | x12 << 16;
	        x8 = x8 + x12 | 0;
	        x4 ^= x8;
	        x4 = x4 >>> (32 - 12) | x4 << 12;
	        x1 = x1 + x5 | 0;
	        x13 ^= x1;
	        x13 = x13 >>> (32 - 16) | x13 << 16;
	        x9 = x9 + x13 | 0;
	        x5 ^= x9;
	        x5 = x5 >>> (32 - 12) | x5 << 12;
	        x2 = x2 + x6 | 0;
	        x14 ^= x2;
	        x14 = x14 >>> (32 - 16) | x14 << 16;
	        x10 = x10 + x14 | 0;
	        x6 ^= x10;
	        x6 = x6 >>> (32 - 12) | x6 << 12;
	        x3 = x3 + x7 | 0;
	        x15 ^= x3;
	        x15 = x15 >>> (32 - 16) | x15 << 16;
	        x11 = x11 + x15 | 0;
	        x7 ^= x11;
	        x7 = x7 >>> (32 - 12) | x7 << 12;
	        x2 = x2 + x6 | 0;
	        x14 ^= x2;
	        x14 = x14 >>> (32 - 8) | x14 << 8;
	        x10 = x10 + x14 | 0;
	        x6 ^= x10;
	        x6 = x6 >>> (32 - 7) | x6 << 7;
	        x3 = x3 + x7 | 0;
	        x15 ^= x3;
	        x15 = x15 >>> (32 - 8) | x15 << 8;
	        x11 = x11 + x15 | 0;
	        x7 ^= x11;
	        x7 = x7 >>> (32 - 7) | x7 << 7;
	        x1 = x1 + x5 | 0;
	        x13 ^= x1;
	        x13 = x13 >>> (32 - 8) | x13 << 8;
	        x9 = x9 + x13 | 0;
	        x5 ^= x9;
	        x5 = x5 >>> (32 - 7) | x5 << 7;
	        x0 = x0 + x4 | 0;
	        x12 ^= x0;
	        x12 = x12 >>> (32 - 8) | x12 << 8;
	        x8 = x8 + x12 | 0;
	        x4 ^= x8;
	        x4 = x4 >>> (32 - 7) | x4 << 7;
	        x0 = x0 + x5 | 0;
	        x15 ^= x0;
	        x15 = x15 >>> (32 - 16) | x15 << 16;
	        x10 = x10 + x15 | 0;
	        x5 ^= x10;
	        x5 = x5 >>> (32 - 12) | x5 << 12;
	        x1 = x1 + x6 | 0;
	        x12 ^= x1;
	        x12 = x12 >>> (32 - 16) | x12 << 16;
	        x11 = x11 + x12 | 0;
	        x6 ^= x11;
	        x6 = x6 >>> (32 - 12) | x6 << 12;
	        x2 = x2 + x7 | 0;
	        x13 ^= x2;
	        x13 = x13 >>> (32 - 16) | x13 << 16;
	        x8 = x8 + x13 | 0;
	        x7 ^= x8;
	        x7 = x7 >>> (32 - 12) | x7 << 12;
	        x3 = x3 + x4 | 0;
	        x14 ^= x3;
	        x14 = x14 >>> (32 - 16) | x14 << 16;
	        x9 = x9 + x14 | 0;
	        x4 ^= x9;
	        x4 = x4 >>> (32 - 12) | x4 << 12;
	        x2 = x2 + x7 | 0;
	        x13 ^= x2;
	        x13 = x13 >>> (32 - 8) | x13 << 8;
	        x8 = x8 + x13 | 0;
	        x7 ^= x8;
	        x7 = x7 >>> (32 - 7) | x7 << 7;
	        x3 = x3 + x4 | 0;
	        x14 ^= x3;
	        x14 = x14 >>> (32 - 8) | x14 << 8;
	        x9 = x9 + x14 | 0;
	        x4 ^= x9;
	        x4 = x4 >>> (32 - 7) | x4 << 7;
	        x1 = x1 + x6 | 0;
	        x12 ^= x1;
	        x12 = x12 >>> (32 - 8) | x12 << 8;
	        x11 = x11 + x12 | 0;
	        x6 ^= x11;
	        x6 = x6 >>> (32 - 7) | x6 << 7;
	        x0 = x0 + x5 | 0;
	        x15 ^= x0;
	        x15 = x15 >>> (32 - 8) | x15 << 8;
	        x10 = x10 + x15 | 0;
	        x5 ^= x10;
	        x5 = x5 >>> (32 - 7) | x5 << 7;
	    }
	    binary_1$1.writeUint32LE(x0 + j0 | 0, out, 0);
	    binary_1$1.writeUint32LE(x1 + j1 | 0, out, 4);
	    binary_1$1.writeUint32LE(x2 + j2 | 0, out, 8);
	    binary_1$1.writeUint32LE(x3 + j3 | 0, out, 12);
	    binary_1$1.writeUint32LE(x4 + j4 | 0, out, 16);
	    binary_1$1.writeUint32LE(x5 + j5 | 0, out, 20);
	    binary_1$1.writeUint32LE(x6 + j6 | 0, out, 24);
	    binary_1$1.writeUint32LE(x7 + j7 | 0, out, 28);
	    binary_1$1.writeUint32LE(x8 + j8 | 0, out, 32);
	    binary_1$1.writeUint32LE(x9 + j9 | 0, out, 36);
	    binary_1$1.writeUint32LE(x10 + j10 | 0, out, 40);
	    binary_1$1.writeUint32LE(x11 + j11 | 0, out, 44);
	    binary_1$1.writeUint32LE(x12 + j12 | 0, out, 48);
	    binary_1$1.writeUint32LE(x13 + j13 | 0, out, 52);
	    binary_1$1.writeUint32LE(x14 + j14 | 0, out, 56);
	    binary_1$1.writeUint32LE(x15 + j15 | 0, out, 60);
	}
	/**
	 * Encrypt src with ChaCha20 stream generated for the given 32-byte key and
	 * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
	 * write the result into dst and return it.
	 *
	 * dst and src may be the same, but otherwise must not overlap.
	 *
	 * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the
	 * same key and nonce, otherwise the stream will repeat. The function will
	 * throw error if counter overflows to prevent this.
	 *
	 * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which
	 * is more than a million petabytes). However, it is not recommended to
	 * generate 8-byte nonces randomly, as the chance of collision is high.
	 *
	 * Never use the same key and nonce to encrypt more than one message.
	 *
	 * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte
	 * array with stream counter in first nonceInplaceCounterLength bytes and nonce
	 * in the last remaining bytes. The counter will be incremented inplace for
	 * each ChaCha block. This is useful if you need to encrypt one stream of data
	 * in chunks.
	 */
	function streamXOR$1(key, nonce, src, dst, nonceInplaceCounterLength) {
	    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
	    // We only support 256-bit keys.
	    if (key.length !== 32) {
	        throw new Error("ChaCha: key size must be 32 bytes");
	    }
	    if (dst.length < src.length) {
	        throw new Error("ChaCha: destination is shorter than source");
	    }
	    var nc;
	    var counterLength;
	    if (nonceInplaceCounterLength === 0) {
	        if (nonce.length !== 8 && nonce.length !== 12) {
	            throw new Error("ChaCha nonce must be 8 or 12 bytes");
	        }
	        nc = new Uint8Array(16);
	        // First counterLength bytes of nc are counter, starting with zero.
	        counterLength = nc.length - nonce.length;
	        // Last bytes of nc after counterLength are nonce, set them.
	        nc.set(nonce, counterLength);
	    }
	    else {
	        if (nonce.length !== 16) {
	            throw new Error("ChaCha nonce with counter must be 16 bytes");
	        }
	        // This will update passed nonce with counter inplace.
	        nc = nonce;
	        counterLength = nonceInplaceCounterLength;
	    }
	    // Allocate temporary space for ChaCha block.
	    var block = new Uint8Array(64);
	    for (var i = 0; i < src.length; i += 64) {
	        // Generate a block.
	        core(block, nc, key);
	        // XOR block bytes with src into dst.
	        for (var j = i; j < i + 64 && j < src.length; j++) {
	            dst[j] = src[j] ^ block[j - i];
	        }
	        // Increment counter.
	        incrementCounter(nc, 0, counterLength);
	    }
	    // Cleanup temporary space.
	    wipe_1$1.wipe(block);
	    if (nonceInplaceCounterLength === 0) {
	        // Cleanup counter.
	        wipe_1$1.wipe(nc);
	    }
	    return dst;
	}
	chacha.streamXOR = streamXOR$1;
	/**
	 * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte
	 * nonce and write it into dst and return it.
	 *
	 * Never use the same key and nonce to generate more than one stream.
	 *
	 * If nonceInplaceCounterLength is not 0, it behaves the same with respect to
	 * the nonce as described in the streamXOR documentation.
	 *
	 * stream is like streamXOR with all-zero src.
	 */
	function stream$1(key, nonce, dst, nonceInplaceCounterLength) {
	    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
	    wipe_1$1.wipe(dst);
	    return streamXOR$1(key, nonce, dst, dst, nonceInplaceCounterLength);
	}
	chacha.stream = stream$1;
	function incrementCounter(counter, pos, len) {
	    var carry = 1;
	    while (len--) {
	        carry = carry + (counter[pos] & 0xff) | 0;
	        counter[pos] = carry & 0xff;
	        carry >>>= 8;
	        pos++;
	    }
	    if (carry > 0) {
	        throw new Error("ChaCha: counter overflow");
	    }
	}

	// Copyright (C) 2019 Kyle Den Hartog
	// MIT License. See LICENSE file for details.
	Object.defineProperty(xchacha20, "__esModule", { value: true });
	/**
	 * Package xchacha20 implements XChaCha20 stream cipher.
	 */
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	var chacha_1 = chacha;
	// Number of ChaCha rounds (ChaCha20).
	var ROUNDS = 20;
	/**
	 * Encrypt src with XChaCha20 stream generated for the given 32-byte key and
	 * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
	 * write the result into dst and return it.
	 *
	 * dst and src may be the same, but otherwise must not overlap.
	 *
	 * Nonce length is set in such a way that given it's generated via a CSPRNG
	 * then there's little concern of collision for roughly 2^96 messages while
	 * reusing a secret key and not encountering nonce reuse vulnerabilities.
	 */
	function streamXOR(key, nonce, src, dst) {
	    if (nonce.length !== 24) {
	        throw new Error("XChaCha20 nonce must be 24 bytes");
	    }
	    // Use HChaCha one-way function to transform first 16 bytes of
	    // 24-byte extended nonce and key into a new key for Salsa
	    // stream -- "subkey".
	    var subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32));
	    // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,
	    // and a subkey derived in the previous step as key to encrypt.
	    var modifiedNonce = new Uint8Array(12);
	    modifiedNonce.set(nonce.subarray(16), 4);
	    // If nonceInplaceCounterLength > 0, we'll still pass the correct
	    // nonce || counter, as we don't limit the end of nonce subarray.
	    var result = chacha_1.streamXOR(subkey, modifiedNonce, src, dst);
	    // Clean subkey.
	    wipe_1.wipe(subkey);
	    return result;
	}
	xchacha20.streamXOR = streamXOR;
	/**
	 * Generate XChaCha20 stream for the given 32-byte key and 12-byte
	 * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)
	 * and write it into dst and return it.
	 *
	 * Nonces MUST be generated using an CSPRNG to generate a sufficiently
	 * random nonce such that a collision is highly unlikely to occur.
	 *
	 * stream is like streamXOR with all-zero src.
	 */
	function stream(key, nonce, dst) {
	    wipe_1.wipe(dst);
	    return streamXOR(key, nonce, dst, dst);
	}
	xchacha20.stream = stream;
	/**
	 * HChaCha is a one-way function used in XChaCha to extend nonce.
	 *
	 * It takes 32-byte key and 16-byte src and writes 32-byte result
	 * into dst and returns it.
	 */
	function hchacha(key, src, dst) {
	    var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
	    var j1 = 0x3320646e; // "nd 3"     for 32-byte keys
	    var j2 = 0x79622d32; // "2-by"
	    var j3 = 0x6b206574; // "te k"
	    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];
	    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];
	    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];
	    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];
	    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];
	    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];
	    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];
	    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];
	    var j12 = (src[3] << 24) | (src[2] << 16) | (src[1] << 8) | src[0];
	    var j13 = (src[7] << 24) | (src[6] << 16) | (src[5] << 8) | src[4];
	    var j14 = (src[11] << 24) | (src[10] << 16) | (src[9] << 8) | src[8];
	    var j15 = (src[15] << 24) | (src[14] << 16) | (src[13] << 8) | src[12];
	    var x0 = j0;
	    var x1 = j1;
	    var x2 = j2;
	    var x3 = j3;
	    var x4 = j4;
	    var x5 = j5;
	    var x6 = j6;
	    var x7 = j7;
	    var x8 = j8;
	    var x9 = j9;
	    var x10 = j10;
	    var x11 = j11;
	    var x12 = j12;
	    var x13 = j13;
	    var x14 = j14;
	    var x15 = j15;
	    for (var i = 0; i < ROUNDS; i += 2) {
	        x0 = (x0 + x4) | 0;
	        x12 ^= x0;
	        x12 = (x12 >>> (32 - 16)) | (x12 << 16);
	        x8 = (x8 + x12) | 0;
	        x4 ^= x8;
	        x4 = (x4 >>> (32 - 12)) | (x4 << 12);
	        x1 = (x1 + x5) | 0;
	        x13 ^= x1;
	        x13 = (x13 >>> (32 - 16)) | (x13 << 16);
	        x9 = (x9 + x13) | 0;
	        x5 ^= x9;
	        x5 = (x5 >>> (32 - 12)) | (x5 << 12);
	        x2 = (x2 + x6) | 0;
	        x14 ^= x2;
	        x14 = (x14 >>> (32 - 16)) | (x14 << 16);
	        x10 = (x10 + x14) | 0;
	        x6 ^= x10;
	        x6 = (x6 >>> (32 - 12)) | (x6 << 12);
	        x3 = (x3 + x7) | 0;
	        x15 ^= x3;
	        x15 = (x15 >>> (32 - 16)) | (x15 << 16);
	        x11 = (x11 + x15) | 0;
	        x7 ^= x11;
	        x7 = (x7 >>> (32 - 12)) | (x7 << 12);
	        x2 = (x2 + x6) | 0;
	        x14 ^= x2;
	        x14 = (x14 >>> (32 - 8)) | (x14 << 8);
	        x10 = (x10 + x14) | 0;
	        x6 ^= x10;
	        x6 = (x6 >>> (32 - 7)) | (x6 << 7);
	        x3 = (x3 + x7) | 0;
	        x15 ^= x3;
	        x15 = (x15 >>> (32 - 8)) | (x15 << 8);
	        x11 = (x11 + x15) | 0;
	        x7 ^= x11;
	        x7 = (x7 >>> (32 - 7)) | (x7 << 7);
	        x1 = (x1 + x5) | 0;
	        x13 ^= x1;
	        x13 = (x13 >>> (32 - 8)) | (x13 << 8);
	        x9 = (x9 + x13) | 0;
	        x5 ^= x9;
	        x5 = (x5 >>> (32 - 7)) | (x5 << 7);
	        x0 = (x0 + x4) | 0;
	        x12 ^= x0;
	        x12 = (x12 >>> (32 - 8)) | (x12 << 8);
	        x8 = (x8 + x12) | 0;
	        x4 ^= x8;
	        x4 = (x4 >>> (32 - 7)) | (x4 << 7);
	        x0 = (x0 + x5) | 0;
	        x15 ^= x0;
	        x15 = (x15 >>> (32 - 16)) | (x15 << 16);
	        x10 = (x10 + x15) | 0;
	        x5 ^= x10;
	        x5 = (x5 >>> (32 - 12)) | (x5 << 12);
	        x1 = (x1 + x6) | 0;
	        x12 ^= x1;
	        x12 = (x12 >>> (32 - 16)) | (x12 << 16);
	        x11 = (x11 + x12) | 0;
	        x6 ^= x11;
	        x6 = (x6 >>> (32 - 12)) | (x6 << 12);
	        x2 = (x2 + x7) | 0;
	        x13 ^= x2;
	        x13 = (x13 >>> (32 - 16)) | (x13 << 16);
	        x8 = (x8 + x13) | 0;
	        x7 ^= x8;
	        x7 = (x7 >>> (32 - 12)) | (x7 << 12);
	        x3 = (x3 + x4) | 0;
	        x14 ^= x3;
	        x14 = (x14 >>> (32 - 16)) | (x14 << 16);
	        x9 = (x9 + x14) | 0;
	        x4 ^= x9;
	        x4 = (x4 >>> (32 - 12)) | (x4 << 12);
	        x2 = (x2 + x7) | 0;
	        x13 ^= x2;
	        x13 = (x13 >>> (32 - 8)) | (x13 << 8);
	        x8 = (x8 + x13) | 0;
	        x7 ^= x8;
	        x7 = (x7 >>> (32 - 7)) | (x7 << 7);
	        x3 = (x3 + x4) | 0;
	        x14 ^= x3;
	        x14 = (x14 >>> (32 - 8)) | (x14 << 8);
	        x9 = (x9 + x14) | 0;
	        x4 ^= x9;
	        x4 = (x4 >>> (32 - 7)) | (x4 << 7);
	        x1 = (x1 + x6) | 0;
	        x12 ^= x1;
	        x12 = (x12 >>> (32 - 8)) | (x12 << 8);
	        x11 = (x11 + x12) | 0;
	        x6 ^= x11;
	        x6 = (x6 >>> (32 - 7)) | (x6 << 7);
	        x0 = (x0 + x5) | 0;
	        x15 ^= x0;
	        x15 = (x15 >>> (32 - 8)) | (x15 << 8);
	        x10 = (x10 + x15) | 0;
	        x5 ^= x10;
	        x5 = (x5 >>> (32 - 7)) | (x5 << 7);
	    }
	    binary_1.writeUint32LE(x0, dst, 0);
	    binary_1.writeUint32LE(x1, dst, 4);
	    binary_1.writeUint32LE(x2, dst, 8);
	    binary_1.writeUint32LE(x3, dst, 12);
	    binary_1.writeUint32LE(x12, dst, 16);
	    binary_1.writeUint32LE(x13, dst, 20);
	    binary_1.writeUint32LE(x14, dst, 24);
	    binary_1.writeUint32LE(x15, dst, 28);
	    return dst;
	}
	xchacha20.hchacha = hchacha;

	var chacha20poly1305 = {};

	var poly1305 = {};

	var constantTime = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(constantTime, "__esModule", { value: true });
	/**
	 * Package constant-time provides functions for performing algorithmically constant-time operations.
	 */
	/**
	 * NOTE! Due to the inability to guarantee real constant time evaluation of
	 * anything in JavaScript VM, this is module is the best effort.
	 */
	/**
	 * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
	 *
	 * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
	 * integers, they'll be converted to them with bitwise operations.
	 */
	function select(subject, resultIfOne, resultIfZero) {
	    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);
	}
	constantTime.select = select;
	/**
	 * Returns 1 if a <= b, or 0 if not.
	 * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.
	 */
	function lessOrEqual(a, b) {
	    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;
	}
	constantTime.lessOrEqual = lessOrEqual;
	/**
	 * Returns 1 if a and b are of equal length and their contents
	 * are equal, or 0 otherwise.
	 *
	 * Note that unlike in equal(), zero-length inputs are considered
	 * the same, so this function will return 1.
	 */
	function compare(a, b) {
	    if (a.length !== b.length) {
	        return 0;
	    }
	    var result = 0;
	    for (var i = 0; i < a.length; i++) {
	        result |= a[i] ^ b[i];
	    }
	    return (1 & ((result - 1) >>> 8));
	}
	constantTime.compare = compare;
	/**
	 * Returns true if a and b are of equal non-zero length,
	 * and their contents are equal, or false otherwise.
	 *
	 * Note that unlike in compare() zero-length inputs are considered
	 * _not_ equal, so this function will return false.
	 */
	function equal(a, b) {
	    if (a.length === 0 || b.length === 0) {
	        return false;
	    }
	    return compare(a, b) !== 0;
	}
	constantTime.equal = equal;

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package poly1305 implements Poly1305 one-time message authentication algorithm.
	 */
	var constant_time_1 = constantTime;
	var wipe_1 = wipe$1;
	exports.DIGEST_LENGTH = 16;
	// Port of Andrew Moon's Poly1305-donna-16. Public domain.
	// https://github.com/floodyberry/poly1305-donna
	/**
	 * Poly1305 computes 16-byte authenticator of message using
	 * a one-time 32-byte key.
	 *
	 * Important: key should be used for only one message,
	 * it should never repeat.
	 */
	var Poly1305 = /** @class */ (function () {
	    function Poly1305(key) {
	        this.digestLength = exports.DIGEST_LENGTH;
	        this._buffer = new Uint8Array(16);
	        this._r = new Uint16Array(10);
	        this._h = new Uint16Array(10);
	        this._pad = new Uint16Array(8);
	        this._leftover = 0;
	        this._fin = 0;
	        this._finished = false;
	        var t0 = key[0] | key[1] << 8;
	        this._r[0] = (t0) & 0x1fff;
	        var t1 = key[2] | key[3] << 8;
	        this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
	        var t2 = key[4] | key[5] << 8;
	        this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
	        var t3 = key[6] | key[7] << 8;
	        this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
	        var t4 = key[8] | key[9] << 8;
	        this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
	        this._r[5] = ((t4 >>> 1)) & 0x1ffe;
	        var t5 = key[10] | key[11] << 8;
	        this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
	        var t6 = key[12] | key[13] << 8;
	        this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
	        var t7 = key[14] | key[15] << 8;
	        this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
	        this._r[9] = ((t7 >>> 5)) & 0x007f;
	        this._pad[0] = key[16] | key[17] << 8;
	        this._pad[1] = key[18] | key[19] << 8;
	        this._pad[2] = key[20] | key[21] << 8;
	        this._pad[3] = key[22] | key[23] << 8;
	        this._pad[4] = key[24] | key[25] << 8;
	        this._pad[5] = key[26] | key[27] << 8;
	        this._pad[6] = key[28] | key[29] << 8;
	        this._pad[7] = key[30] | key[31] << 8;
	    }
	    Poly1305.prototype._blocks = function (m, mpos, bytes) {
	        var hibit = this._fin ? 0 : 1 << 11;
	        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
	        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
	        while (bytes >= 16) {
	            var t0 = m[mpos + 0] | m[mpos + 1] << 8;
	            h0 += (t0) & 0x1fff;
	            var t1 = m[mpos + 2] | m[mpos + 3] << 8;
	            h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
	            var t2 = m[mpos + 4] | m[mpos + 5] << 8;
	            h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
	            var t3 = m[mpos + 6] | m[mpos + 7] << 8;
	            h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
	            var t4 = m[mpos + 8] | m[mpos + 9] << 8;
	            h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
	            h5 += ((t4 >>> 1)) & 0x1fff;
	            var t5 = m[mpos + 10] | m[mpos + 11] << 8;
	            h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
	            var t6 = m[mpos + 12] | m[mpos + 13] << 8;
	            h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
	            var t7 = m[mpos + 14] | m[mpos + 15] << 8;
	            h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
	            h9 += ((t7 >>> 5)) | hibit;
	            var c = 0;
	            var d0 = c;
	            d0 += h0 * r0;
	            d0 += h1 * (5 * r9);
	            d0 += h2 * (5 * r8);
	            d0 += h3 * (5 * r7);
	            d0 += h4 * (5 * r6);
	            c = (d0 >>> 13);
	            d0 &= 0x1fff;
	            d0 += h5 * (5 * r5);
	            d0 += h6 * (5 * r4);
	            d0 += h7 * (5 * r3);
	            d0 += h8 * (5 * r2);
	            d0 += h9 * (5 * r1);
	            c += (d0 >>> 13);
	            d0 &= 0x1fff;
	            var d1 = c;
	            d1 += h0 * r1;
	            d1 += h1 * r0;
	            d1 += h2 * (5 * r9);
	            d1 += h3 * (5 * r8);
	            d1 += h4 * (5 * r7);
	            c = (d1 >>> 13);
	            d1 &= 0x1fff;
	            d1 += h5 * (5 * r6);
	            d1 += h6 * (5 * r5);
	            d1 += h7 * (5 * r4);
	            d1 += h8 * (5 * r3);
	            d1 += h9 * (5 * r2);
	            c += (d1 >>> 13);
	            d1 &= 0x1fff;
	            var d2 = c;
	            d2 += h0 * r2;
	            d2 += h1 * r1;
	            d2 += h2 * r0;
	            d2 += h3 * (5 * r9);
	            d2 += h4 * (5 * r8);
	            c = (d2 >>> 13);
	            d2 &= 0x1fff;
	            d2 += h5 * (5 * r7);
	            d2 += h6 * (5 * r6);
	            d2 += h7 * (5 * r5);
	            d2 += h8 * (5 * r4);
	            d2 += h9 * (5 * r3);
	            c += (d2 >>> 13);
	            d2 &= 0x1fff;
	            var d3 = c;
	            d3 += h0 * r3;
	            d3 += h1 * r2;
	            d3 += h2 * r1;
	            d3 += h3 * r0;
	            d3 += h4 * (5 * r9);
	            c = (d3 >>> 13);
	            d3 &= 0x1fff;
	            d3 += h5 * (5 * r8);
	            d3 += h6 * (5 * r7);
	            d3 += h7 * (5 * r6);
	            d3 += h8 * (5 * r5);
	            d3 += h9 * (5 * r4);
	            c += (d3 >>> 13);
	            d3 &= 0x1fff;
	            var d4 = c;
	            d4 += h0 * r4;
	            d4 += h1 * r3;
	            d4 += h2 * r2;
	            d4 += h3 * r1;
	            d4 += h4 * r0;
	            c = (d4 >>> 13);
	            d4 &= 0x1fff;
	            d4 += h5 * (5 * r9);
	            d4 += h6 * (5 * r8);
	            d4 += h7 * (5 * r7);
	            d4 += h8 * (5 * r6);
	            d4 += h9 * (5 * r5);
	            c += (d4 >>> 13);
	            d4 &= 0x1fff;
	            var d5 = c;
	            d5 += h0 * r5;
	            d5 += h1 * r4;
	            d5 += h2 * r3;
	            d5 += h3 * r2;
	            d5 += h4 * r1;
	            c = (d5 >>> 13);
	            d5 &= 0x1fff;
	            d5 += h5 * r0;
	            d5 += h6 * (5 * r9);
	            d5 += h7 * (5 * r8);
	            d5 += h8 * (5 * r7);
	            d5 += h9 * (5 * r6);
	            c += (d5 >>> 13);
	            d5 &= 0x1fff;
	            var d6 = c;
	            d6 += h0 * r6;
	            d6 += h1 * r5;
	            d6 += h2 * r4;
	            d6 += h3 * r3;
	            d6 += h4 * r2;
	            c = (d6 >>> 13);
	            d6 &= 0x1fff;
	            d6 += h5 * r1;
	            d6 += h6 * r0;
	            d6 += h7 * (5 * r9);
	            d6 += h8 * (5 * r8);
	            d6 += h9 * (5 * r7);
	            c += (d6 >>> 13);
	            d6 &= 0x1fff;
	            var d7 = c;
	            d7 += h0 * r7;
	            d7 += h1 * r6;
	            d7 += h2 * r5;
	            d7 += h3 * r4;
	            d7 += h4 * r3;
	            c = (d7 >>> 13);
	            d7 &= 0x1fff;
	            d7 += h5 * r2;
	            d7 += h6 * r1;
	            d7 += h7 * r0;
	            d7 += h8 * (5 * r9);
	            d7 += h9 * (5 * r8);
	            c += (d7 >>> 13);
	            d7 &= 0x1fff;
	            var d8 = c;
	            d8 += h0 * r8;
	            d8 += h1 * r7;
	            d8 += h2 * r6;
	            d8 += h3 * r5;
	            d8 += h4 * r4;
	            c = (d8 >>> 13);
	            d8 &= 0x1fff;
	            d8 += h5 * r3;
	            d8 += h6 * r2;
	            d8 += h7 * r1;
	            d8 += h8 * r0;
	            d8 += h9 * (5 * r9);
	            c += (d8 >>> 13);
	            d8 &= 0x1fff;
	            var d9 = c;
	            d9 += h0 * r9;
	            d9 += h1 * r8;
	            d9 += h2 * r7;
	            d9 += h3 * r6;
	            d9 += h4 * r5;
	            c = (d9 >>> 13);
	            d9 &= 0x1fff;
	            d9 += h5 * r4;
	            d9 += h6 * r3;
	            d9 += h7 * r2;
	            d9 += h8 * r1;
	            d9 += h9 * r0;
	            c += (d9 >>> 13);
	            d9 &= 0x1fff;
	            c = (((c << 2) + c)) | 0;
	            c = (c + d0) | 0;
	            d0 = c & 0x1fff;
	            c = (c >>> 13);
	            d1 += c;
	            h0 = d0;
	            h1 = d1;
	            h2 = d2;
	            h3 = d3;
	            h4 = d4;
	            h5 = d5;
	            h6 = d6;
	            h7 = d7;
	            h8 = d8;
	            h9 = d9;
	            mpos += 16;
	            bytes -= 16;
	        }
	        this._h[0] = h0;
	        this._h[1] = h1;
	        this._h[2] = h2;
	        this._h[3] = h3;
	        this._h[4] = h4;
	        this._h[5] = h5;
	        this._h[6] = h6;
	        this._h[7] = h7;
	        this._h[8] = h8;
	        this._h[9] = h9;
	    };
	    Poly1305.prototype.finish = function (mac, macpos) {
	        if (macpos === void 0) { macpos = 0; }
	        var g = new Uint16Array(10);
	        var c;
	        var mask;
	        var f;
	        var i;
	        if (this._leftover) {
	            i = this._leftover;
	            this._buffer[i++] = 1;
	            for (; i < 16; i++) {
	                this._buffer[i] = 0;
	            }
	            this._fin = 1;
	            this._blocks(this._buffer, 0, 16);
	        }
	        c = this._h[1] >>> 13;
	        this._h[1] &= 0x1fff;
	        for (i = 2; i < 10; i++) {
	            this._h[i] += c;
	            c = this._h[i] >>> 13;
	            this._h[i] &= 0x1fff;
	        }
	        this._h[0] += (c * 5);
	        c = this._h[0] >>> 13;
	        this._h[0] &= 0x1fff;
	        this._h[1] += c;
	        c = this._h[1] >>> 13;
	        this._h[1] &= 0x1fff;
	        this._h[2] += c;
	        g[0] = this._h[0] + 5;
	        c = g[0] >>> 13;
	        g[0] &= 0x1fff;
	        for (i = 1; i < 10; i++) {
	            g[i] = this._h[i] + c;
	            c = g[i] >>> 13;
	            g[i] &= 0x1fff;
	        }
	        g[9] -= (1 << 13);
	        mask = (c ^ 1) - 1;
	        for (i = 0; i < 10; i++) {
	            g[i] &= mask;
	        }
	        mask = ~mask;
	        for (i = 0; i < 10; i++) {
	            this._h[i] = (this._h[i] & mask) | g[i];
	        }
	        this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;
	        this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;
	        this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;
	        this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;
	        this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;
	        this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;
	        this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;
	        this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;
	        f = this._h[0] + this._pad[0];
	        this._h[0] = f & 0xffff;
	        for (i = 1; i < 8; i++) {
	            f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;
	            this._h[i] = f & 0xffff;
	        }
	        mac[macpos + 0] = this._h[0] >>> 0;
	        mac[macpos + 1] = this._h[0] >>> 8;
	        mac[macpos + 2] = this._h[1] >>> 0;
	        mac[macpos + 3] = this._h[1] >>> 8;
	        mac[macpos + 4] = this._h[2] >>> 0;
	        mac[macpos + 5] = this._h[2] >>> 8;
	        mac[macpos + 6] = this._h[3] >>> 0;
	        mac[macpos + 7] = this._h[3] >>> 8;
	        mac[macpos + 8] = this._h[4] >>> 0;
	        mac[macpos + 9] = this._h[4] >>> 8;
	        mac[macpos + 10] = this._h[5] >>> 0;
	        mac[macpos + 11] = this._h[5] >>> 8;
	        mac[macpos + 12] = this._h[6] >>> 0;
	        mac[macpos + 13] = this._h[6] >>> 8;
	        mac[macpos + 14] = this._h[7] >>> 0;
	        mac[macpos + 15] = this._h[7] >>> 8;
	        this._finished = true;
	        return this;
	    };
	    Poly1305.prototype.update = function (m) {
	        var mpos = 0;
	        var bytes = m.length;
	        var want;
	        if (this._leftover) {
	            want = (16 - this._leftover);
	            if (want > bytes) {
	                want = bytes;
	            }
	            for (var i = 0; i < want; i++) {
	                this._buffer[this._leftover + i] = m[mpos + i];
	            }
	            bytes -= want;
	            mpos += want;
	            this._leftover += want;
	            if (this._leftover < 16) {
	                return this;
	            }
	            this._blocks(this._buffer, 0, 16);
	            this._leftover = 0;
	        }
	        if (bytes >= 16) {
	            want = bytes - (bytes % 16);
	            this._blocks(m, mpos, want);
	            mpos += want;
	            bytes -= want;
	        }
	        if (bytes) {
	            for (var i = 0; i < bytes; i++) {
	                this._buffer[this._leftover + i] = m[mpos + i];
	            }
	            this._leftover += bytes;
	        }
	        return this;
	    };
	    Poly1305.prototype.digest = function () {
	        // TODO(dchest): it behaves differently than other hashes/HMAC,
	        // because it throws when finished — others just return saved result.
	        if (this._finished) {
	            throw new Error("Poly1305 was finished");
	        }
	        var mac = new Uint8Array(16);
	        this.finish(mac);
	        return mac;
	    };
	    Poly1305.prototype.clean = function () {
	        wipe_1.wipe(this._buffer);
	        wipe_1.wipe(this._r);
	        wipe_1.wipe(this._h);
	        wipe_1.wipe(this._pad);
	        this._leftover = 0;
	        this._fin = 0;
	        this._finished = true; // mark as finished even if not
	        return this;
	    };
	    return Poly1305;
	}());
	exports.Poly1305 = Poly1305;
	/**
	 * Returns 16-byte authenticator of data using a one-time 32-byte key.
	 *
	 * Important: key should be used for only one message, it should never repeat.
	 */
	function oneTimeAuth(key, data) {
	    var h = new Poly1305(key);
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.oneTimeAuth = oneTimeAuth;
	/**
	 * Returns true if two authenticators are 16-byte long and equal.
	 * Uses contant-time comparison to avoid leaking timing information.
	 */
	function equal(a, b) {
	    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {
	        return false;
	    }
	    return constant_time_1.equal(a, b);
	}
	exports.equal = equal;

	}(poly1305));

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var chacha_1 = chacha;
	var poly1305_1 = poly1305;
	var wipe_1 = wipe$1;
	var binary_1 = binary;
	var constant_time_1 = constantTime;
	exports.KEY_LENGTH = 32;
	exports.NONCE_LENGTH = 12;
	exports.TAG_LENGTH = 16;
	var ZEROS = new Uint8Array(16);
	/**
	 * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.
	 *
	 * Defined in RFC7539.
	 */
	var ChaCha20Poly1305 = /** @class */ (function () {
	    /**
	     * Creates a new instance with the given 32-byte key.
	     */
	    function ChaCha20Poly1305(key) {
	        this.nonceLength = exports.NONCE_LENGTH;
	        this.tagLength = exports.TAG_LENGTH;
	        if (key.length !== exports.KEY_LENGTH) {
	            throw new Error("ChaCha20Poly1305 needs 32-byte key");
	        }
	        // Copy key.
	        this._key = new Uint8Array(key);
	    }
	    /**
	     * Encrypts and authenticates plaintext, authenticates associated data,
	     * and returns sealed ciphertext, which includes authentication tag.
	     *
	     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
	     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
	     * and nonce.
	     *
	     * If dst is given (it must be the size of plaintext + the size of tag
	     * length) the result will be put into it. Dst and plaintext must not
	     * overlap.
	     */
	    ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {
	        if (nonce.length > 16) {
	            throw new Error("ChaCha20Poly1305: incorrect nonce length");
	        }
	        // Allocate space for counter, and set nonce as last bytes of it.
	        var counter = new Uint8Array(16);
	        counter.set(nonce, counter.length - nonce.length);
	        // Generate authentication key by taking first 32-bytes of stream.
	        // We pass full counter, which has 12-byte nonce and 4-byte block counter,
	        // and it will get incremented after generating the block, which is
	        // exactly what we need: we only use the first 32 bytes of 64-byte
	        // ChaCha block and discard the next 32 bytes.
	        var authKey = new Uint8Array(32);
	        chacha_1.stream(this._key, counter, authKey, 4);
	        // Allocate space for sealed ciphertext.
	        var resultLength = plaintext.length + this.tagLength;
	        var result;
	        if (dst) {
	            if (dst.length !== resultLength) {
	                throw new Error("ChaCha20Poly1305: incorrect destination length");
	            }
	            result = dst;
	        }
	        else {
	            result = new Uint8Array(resultLength);
	        }
	        // Encrypt plaintext.
	        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
	        // Authenticate.
	        // XXX: can "simplify" here: pass full result (which is already padded
	        // due to zeroes prepared for tag), and ciphertext length instead of
	        // subarray of result.
	        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
	        // Cleanup.
	        wipe_1.wipe(counter);
	        return result;
	    };
	    /**
	     * Authenticates sealed ciphertext (which includes authentication tag) and
	     * associated data, decrypts ciphertext and returns decrypted plaintext.
	     *
	     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
	     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
	     * and nonce.
	     *
	     * If authentication fails, it returns null.
	     *
	     * If dst is given (it must be of ciphertext length minus tag length),
	     * the result will be put into it. Dst and plaintext must not overlap.
	     */
	    ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {
	        if (nonce.length > 16) {
	            throw new Error("ChaCha20Poly1305: incorrect nonce length");
	        }
	        // Sealed ciphertext should at least contain tag.
	        if (sealed.length < this.tagLength) {
	            // TODO(dchest): should we throw here instead?
	            return null;
	        }
	        // Allocate space for counter, and set nonce as last bytes of it.
	        var counter = new Uint8Array(16);
	        counter.set(nonce, counter.length - nonce.length);
	        // Generate authentication key by taking first 32-bytes of stream.
	        var authKey = new Uint8Array(32);
	        chacha_1.stream(this._key, counter, authKey, 4);
	        // Authenticate.
	        // XXX: can simplify and avoid allocation: since authenticate()
	        // already allocates tag (from Poly1305.digest(), it can return)
	        // it instead of copying to calculatedTag. But then in seal()
	        // we'll need to copy it.
	        var calculatedTag = new Uint8Array(this.tagLength);
	        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
	        // Constant-time compare tags and return null if they differ.
	        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
	            return null;
	        }
	        // Allocate space for decrypted plaintext.
	        var resultLength = sealed.length - this.tagLength;
	        var result;
	        if (dst) {
	            if (dst.length !== resultLength) {
	                throw new Error("ChaCha20Poly1305: incorrect destination length");
	            }
	            result = dst;
	        }
	        else {
	            result = new Uint8Array(resultLength);
	        }
	        // Decrypt.
	        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
	        // Cleanup.
	        wipe_1.wipe(counter);
	        return result;
	    };
	    ChaCha20Poly1305.prototype.clean = function () {
	        wipe_1.wipe(this._key);
	        return this;
	    };
	    ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {
	        // Initialize Poly1305 with authKey.
	        var h = new poly1305_1.Poly1305(authKey);
	        // Authenticate padded associated data.
	        if (associatedData) {
	            h.update(associatedData);
	            if (associatedData.length % 16 > 0) {
	                h.update(ZEROS.subarray(associatedData.length % 16));
	            }
	        }
	        // Authenticate padded ciphertext.
	        h.update(ciphertext);
	        if (ciphertext.length % 16 > 0) {
	            h.update(ZEROS.subarray(ciphertext.length % 16));
	        }
	        // Authenticate length of associated data.
	        // XXX: can avoid allocation here?
	        var length = new Uint8Array(8);
	        if (associatedData) {
	            binary_1.writeUint64LE(associatedData.length, length);
	        }
	        h.update(length);
	        // Authenticate length of ciphertext.
	        binary_1.writeUint64LE(ciphertext.length, length);
	        h.update(length);
	        // Get tag and copy it into tagOut.
	        var tag = h.digest();
	        for (var i = 0; i < tag.length; i++) {
	            tagOut[i] = tag[i];
	        }
	        // Cleanup.
	        h.clean();
	        wipe_1.wipe(tag);
	        wipe_1.wipe(length);
	    };
	    return ChaCha20Poly1305;
	}());
	exports.ChaCha20Poly1305 = ChaCha20Poly1305;

	}(chacha20poly1305));

	(function (exports) {
	// Copyright (C) 2019 Kyle Den Hartog
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var xchacha20_1 = xchacha20;
	var chacha20poly1305_1 = chacha20poly1305;
	var wipe_1 = wipe$1;
	exports.KEY_LENGTH = 32;
	exports.NONCE_LENGTH = 24;
	exports.TAG_LENGTH = 16;
	/**
	 * XChaCha20-Poly1305 Authenticated Encryption with Associated Data.
	 *
	 * Defined in draft-irtf-cfrg-xchacha-01.
	 * See https://tools.ietf.org/html/draft-irtf-cfrg-xchacha-01
	 */
	var XChaCha20Poly1305 = /** @class */ (function () {
	    /**
	     * Creates a new instance with the given 32-byte key.
	     */
	    function XChaCha20Poly1305(key) {
	        this.nonceLength = exports.NONCE_LENGTH;
	        this.tagLength = exports.TAG_LENGTH;
	        if (key.length !== exports.KEY_LENGTH) {
	            throw new Error("ChaCha20Poly1305 needs 32-byte key");
	        }
	        // Copy key.
	        this._key = new Uint8Array(key);
	    }
	    /**
	     * Encrypts and authenticates plaintext, authenticates associated data,
	     * and returns sealed ciphertext, which includes authentication tag.
	     *
	     * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which
	     * uses the first 16 bytes of the nonce and the secret key with
	     * HChaCha to generate an initial subkey. The last 8 bytes of the nonce
	     * are then prefixed with 4 zero bytes and then provided with the subkey
	     * to the ChaCha20Poly1305 implementation.
	     *
	     * If dst is given (it must be the size of plaintext + the size of tag
	     * length) the result will be put into it. Dst and plaintext must not
	     * overlap.
	     */
	    XChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {
	        if (nonce.length !== 24) {
	            throw new Error("XChaCha20Poly1305: incorrect nonce length");
	        }
	        // Use HSalsa one-way function to transform first 16 bytes of
	        // 24-byte extended nonce and key into a new key for Salsa
	        // stream -- "subkey".
	        var subKey = xchacha20_1.hchacha(this._key, nonce.subarray(0, 16), new Uint8Array(32));
	        // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,
	        // and a subkey derived in the previous step as key to encrypt.
	        var modifiedNonce = new Uint8Array(12);
	        modifiedNonce.set(nonce.subarray(16), 4);
	        var chaChaPoly = new chacha20poly1305_1.ChaCha20Poly1305(subKey);
	        var result = chaChaPoly.seal(modifiedNonce, plaintext, associatedData, dst);
	        wipe_1.wipe(subKey);
	        wipe_1.wipe(modifiedNonce);
	        chaChaPoly.clean();
	        return result;
	    };
	    /**
	     * Authenticates sealed ciphertext (which includes authentication tag) and
	     * associated data, decrypts ciphertext and returns decrypted plaintext.
	     *
	     * draft-irtf-cfrg-xchacha-01 defines a 24 byte nonce (192 bits) which
	     * then uses the first 16 bytes of the nonce and the secret key with
	     * Hchacha to generate an initial subkey. The last 8 bytes of the nonce
	     * are then prefixed with 4 zero bytes and then provided with the subkey
	     * to the chacha20poly1305 implementation.
	     *
	     * If authentication fails, it returns null.
	     *
	     * If dst is given (it must be the size of plaintext + the size of tag
	     * length) the result will be put into it. Dst and plaintext must not
	     * overlap.
	     */
	    XChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {
	        if (nonce.length !== 24) {
	            throw new Error("XChaCha20Poly1305: incorrect nonce length");
	        }
	        // Sealed ciphertext should at least contain tag.
	        if (sealed.length < this.tagLength) {
	            // TODO(dchest): should we throw here instead?
	            return null;
	        }
	        /**
	        * Generate subKey by using HChaCha20 function as defined
	        * in section 2 step 1 of draft-irtf-cfrg-xchacha-01
	        */
	        var subKey = xchacha20_1.hchacha(this._key, nonce.subarray(0, 16), new Uint8Array(32));
	        /**
	        * Generate Nonce as defined - remaining 8 bytes of the nonce prefixed with
	        * 4 zero bytes
	        */
	        var modifiedNonce = new Uint8Array(12);
	        modifiedNonce.set(nonce.subarray(16), 4);
	        /**
	         * Authenticate and decrypt by calling into chacha20poly1305.
	         */
	        var chaChaPoly = new chacha20poly1305_1.ChaCha20Poly1305(subKey);
	        var result = chaChaPoly.open(modifiedNonce, sealed, associatedData, dst);
	        wipe_1.wipe(subKey);
	        wipe_1.wipe(modifiedNonce);
	        chaChaPoly.clean();
	        return result;
	    };
	    XChaCha20Poly1305.prototype.clean = function () {
	        wipe_1.wipe(this._key);
	        return this;
	    };
	    return XChaCha20Poly1305;
	}());
	exports.XChaCha20Poly1305 = XChaCha20Poly1305;

	}(xchacha20poly1305));

	function bytesToBase64url(b) {
	  return toString(b, 'base64url');
	}
	function base64ToBytes(s) {
	  const inputBase64Url = s.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
	  return fromString(inputBase64Url, 'base64url');
	}
	function base58ToBytes(s) {
	  return fromString(s, 'base58btc');
	}
	function bytesToBase58(b) {
	  return toString(b, 'base58btc');
	}
	function hexToBytes(s) {
	  const input = s.startsWith('0x') ? s.substring(2) : s;
	  return fromString(input.toLowerCase(), 'base16');
	}
	function encodeBase64url(s) {
	  return bytesToBase64url(fromString(s));
	}
	function decodeBase64url(s) {
	  return toString(base64ToBytes(s));
	}
	function bytesToHex(b) {
	  return toString(b, 'base16');
	}
	function stringToBytes(s) {
	  return fromString(s);
	}
	function toJose({
	  r,
	  s,
	  recoveryParam
	}, recoverable) {
	  const jose = new Uint8Array(recoverable ? 65 : 64);
	  jose.set(fromString(r, 'base16'), 0);
	  jose.set(fromString(s, 'base16'), 32);

	  if (recoverable) {
	    if (typeof recoveryParam === 'undefined') {
	      throw new Error('Signer did not return a recoveryParam');
	    }

	    jose[64] = recoveryParam;
	  }

	  return bytesToBase64url(jose);
	}
	function fromJose(signature) {
	  const signatureBytes = base64ToBytes(signature);

	  if (signatureBytes.length < 64 || signatureBytes.length > 65) {
	    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`);
	  }

	  const r = bytesToHex(signatureBytes.slice(0, 32));
	  const s = bytesToHex(signatureBytes.slice(32, 64));
	  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined;
	  return {
	    r,
	    s,
	    recoveryParam
	  };
	}
	function toSealed(ciphertext, tag) {
	  return concat$3([base64ToBytes(ciphertext), base64ToBytes(tag)]);
	}
	const hexMatcher = /^(0x)?([a-fA-F0-9]{64}|[a-fA-F0-9]{128})$/;
	const base58Matcher = /^([1-9A-HJ-NP-Za-km-z]{44}|[1-9A-HJ-NP-Za-km-z]{88})$/;
	const base64Matcher = /^([0-9a-zA-Z=\-_+/]{43}|[0-9a-zA-Z=\-_+/]{86})(={0,2})$/;
	/**
	 * Parses a private key and returns the Uint8Array representation.
	 * This method uses an heuristic to determine the key encoding to then be able to parse it into 32 or 64 bytes.
	 *
	 * @param input a 32 or 64 byte key presented either as a Uint8Array or as a hex, base64, or base58btc encoded string
	 *
	 * @throws TypeError('Invalid private key format') if the key doesn't match any of the accepted formats or length
	 */

	function parseKey(input) {
	  if (typeof input === 'string') {
	    if (hexMatcher.test(input)) {
	      return hexToBytes(input);
	    } else if (base58Matcher.test(input)) {
	      return base58ToBytes(input);
	    } else if (base64Matcher.test(input)) {
	      return base64ToBytes(input);
	    } else {
	      throw TypeError('bad_key: Invalid private key format');
	    }
	  } else if (input instanceof Uint8Array) {
	    return input;
	  } else {
	    throw TypeError('bad_key: Invalid private key format');
	  }
	}
	function leftpad(data, size = 64) {
	  if (data.length === size) return data;
	  return '0'.repeat(size - data.length) + data;
	}

	function sha256$4(payload) {
	  const data = typeof payload === 'string' ? fromString(payload) : payload;
	  return sha256$5.hash(data);
	}
	function keccak(data) {
	  return new Uint8Array(sha3$2.exports.keccak_256.arrayBuffer(data));
	}
	function toEthereumAddress(hexPublicKey) {
	  const hashInput = fromString(hexPublicKey.slice(2), 'base16');
	  return `0x${toString(keccak(hashInput).slice(-20), 'base16')}`;
	}

	function writeUint32BE(value, array = new Uint8Array(4)) {
	  const encoded = fromString(value.toString(), 'base10');
	  array.set(encoded, 4 - encoded.length);
	  return array;
	}

	const lengthAndInput = input => concat$3([writeUint32BE(input.length), input]); // This implementation of concatKDF was inspired by these two implementations:
	// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js
	// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js


	function concatKDF(secret, keyLen, alg, producerInfo, consumerInfo) {
	  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`);
	  const value = concat$3([lengthAndInput(fromString(alg)), lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), writeUint32BE(keyLen)]); // since our key lenght is 256 we only have to do one round

	  const roundNumber = 1;
	  return sha256$5.hash(concat$3([writeUint32BE(roundNumber), secret, value]));
	}

	const secp256k1$1 = new elliptic.ec('secp256k1');
	/**
	 *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.
	 *
	 *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature
	 *
	 *  @example
	 *  ```typescript
	 *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)
	 *  const signature: string = await sign(data)
	 *  ```
	 *
	 *  @param    {String}    privateKey   a private key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string
	 *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures
	 *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`
	 */

	function ES256KSigner(privateKey, recoverable = false) {
	  const privateKeyBytes = parseKey(privateKey);

	  if (privateKeyBytes.length !== 32) {
	    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`);
	  }

	  const keyPair = secp256k1$1.keyFromPrivate(privateKeyBytes);
	  return function (data) {
	    try {
	      const {
	        r,
	        s,
	        recoveryParam
	      } = keyPair.sign(sha256$4(data));
	      return Promise.resolve(toJose({
	        r: leftpad(r.toString('hex')),
	        s: leftpad(s.toString('hex')),
	        recoveryParam
	      }, recoverable));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}

	/**
	 * @deprecated Please use ES256KSigner
	 *  The SimpleSigner returns a configured function for signing data.
	 *
	 *  @example
	 *  const signer = SimpleSigner(process.env.PRIVATE_KEY)
	 *  signer(data, (err, signature) => {
	 *    ...
	 *  })
	 *
	 *  @param    {String}         hexPrivateKey    a hex encoded private key
	 *  @return   {Function}                     a configured signer function
	 */

	function SimpleSigner(hexPrivateKey) {
	  const signer = ES256KSigner(hexPrivateKey, true);
	  return function (data) {
	    try {
	      return Promise.resolve(signer(data)).then(fromJose);
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}

	/**
	 * @deprecated Please use ES256KSigner
	 *  The EllipticSigner returns a configured function for signing data.
	 *
	 *  @example
	 *  ```typescript
	 *  const signer = EllipticSigner(process.env.PRIVATE_KEY)
	 *  signer(data).then( (signature: string) => {
	 *    ...
	 *  })
	 *  ```
	 *
	 *  @param    {String}         hexPrivateKey    a hex encoded private key
	 *  @return   {Function}                        a configured signer function
	 */

	function EllipticSigner(hexPrivateKey) {
	  return ES256KSigner(hexPrivateKey);
	}

	/**
	 *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.
	 *
	 *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature
	 *
	 *  @example
	 *  ```typescript
	 *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)
	 *  const signature: string = await sign(data)
	 *  ```
	 *
	 *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array` or encoded as `base64`, `base58`, or `hex` string
	 *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`
	 */

	function EdDSASigner(secretKey) {
	  const privateKeyBytes = parseKey(secretKey);

	  if (privateKeyBytes.length !== 64) {
	    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`);
	  }

	  return function (data) {
	    try {
	      const dataBytes = typeof data === 'string' ? stringToBytes(data) : data;
	      const sig = ed25519$1.sign(privateKeyBytes, dataBytes);
	      return Promise.resolve(bytesToBase64url(sig));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}

	/**
	 * @deprecated Please use EdDSASigner
	 *
	 *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.
	 *
	 *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.
	 *
	 *  @example
	 *  const signer = NaclSigner(process.env.PRIVATE_KEY)
	 *  const data: string = '...'
	 *  signer(data).then( (signature: string) => {
	 *    ...
	 *  })
	 *
	 *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key
	 *  @return   {Function}                     a configured signer function
	 */

	function NaclSigner(base64PrivateKey) {
	  return EdDSASigner(base64PrivateKey);
	}

	function instanceOfEcdsaSignature(object) {
	  return typeof object === 'object' && 'r' in object && 's' in object;
	}

	function ES256KSignerAlg(recoverable) {
	  return function sign(payload, signer) {
	    try {
	      return Promise.resolve(signer(payload)).then(function (signature) {
	        if (instanceOfEcdsaSignature(signature)) {
	          return toJose(signature, recoverable);
	        } else {
	          if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {
	            throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`);
	          }

	          return signature;
	        }
	      });
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}
	function Ed25519SignerAlg() {
	  return function sign(payload, signer) {
	    try {
	      return Promise.resolve(signer(payload)).then(function (signature) {
	        if (!instanceOfEcdsaSignature(signature)) {
	          return signature;
	        } else {
	          throw new Error('invalid_config: expected a signer function that returns a string instead of signature object');
	        }
	      });
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}
	const algorithms$1 = {
	  ES256K: ES256KSignerAlg(),
	  // This is a non-standard algorithm but retained for backwards compatibility
	  // see https://github.com/decentralized-identity/did-jwt/issues/146
	  'ES256K-R': ES256KSignerAlg(true),
	  // This is actually incorrect but retained for backwards compatibility
	  // see https://github.com/decentralized-identity/did-jwt/issues/130
	  Ed25519: Ed25519SignerAlg(),
	  EdDSA: Ed25519SignerAlg()
	};

	function SignerAlg(alg) {
	  const impl = algorithms$1[alg];
	  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`);
	  return impl;
	}

	// https://github.com/crypto-browserify/ripemd160/blob/master/index.js
	const zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
	const zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
	const sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
	const sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
	const hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
	const hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

	function rotl(x, n) {
	  return x << n | x >>> 32 - n;
	}

	function fn1(a, b, c, d, e, m, k, s) {
	  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
	}

	function fn2(a, b, c, d, e, m, k, s) {
	  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
	}

	function fn3(a, b, c, d, e, m, k, s) {
	  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
	}

	function fn4(a, b, c, d, e, m, k, s) {
	  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
	}

	function fn5(a, b, c, d, e, m, k, s) {
	  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
	}

	class Ripemd160 {
	  // state
	  constructor(blockSize = 64) {
	    this._a = 0x67452301;
	    this._b = 0xefcdab89;
	    this._c = 0x98badcfe;
	    this._d = 0x10325476;
	    this._e = 0xc3d2e1f0;
	    this._blockOffset = 0;
	    this._block = void 0;
	    this._blockSize = void 0;
	    this._length = [0, 0, 0, 0];
	    this._finalized = void 0;

	    this.update = data => {
	      if (this._finalized) throw new Error('Digest already called'); // consume data

	      const block = this._block;
	      let offset = 0;

	      while (this._blockOffset + data.length - offset >= this._blockSize) {
	        for (let i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];

	        this._update();

	        this._blockOffset = 0;
	      }

	      while (offset < data.length) block[this._blockOffset++] = data[offset++]; // update length


	      for (let j = 0, carry = data.length * 8; carry > 0; ++j) {
	        this._length[j] += carry;
	        carry = this._length[j] / 0x0100000000 | 0;
	        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
	      }

	      return this;
	    };

	    this.digest = () => {
	      if (this._finalized) throw new Error('Digest already called');
	      this._finalized = true;

	      const digest = this._digest(); // reset state


	      this._block.fill(0);

	      this._blockOffset = 0;

	      for (let i = 0; i < 4; ++i) this._length[i] = 0;

	      return digest;
	    };

	    this._update = () => {
	      const words = new Array(16);
	      const temp = new DataView(this._block.buffer);

	      for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true);

	      let al = this._a | 0;
	      let bl = this._b | 0;
	      let cl = this._c | 0;
	      let dl = this._d | 0;
	      let el = this._e | 0;
	      let ar = this._a | 0;
	      let br = this._b | 0;
	      let cr = this._c | 0;
	      let dr = this._d | 0;
	      let er = this._e | 0; // computation

	      for (let i = 0; i < 80; i += 1) {
	        let tl;
	        let tr;

	        if (i < 16) {
	          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
	          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
	        } else if (i < 32) {
	          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
	          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
	        } else if (i < 48) {
	          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
	          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
	        } else if (i < 64) {
	          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
	          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
	        } else {
	          // if (i<80) {
	          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
	          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
	        }

	        al = el;
	        el = dl;
	        dl = rotl(cl, 10);
	        cl = bl;
	        bl = tl;
	        ar = er;
	        er = dr;
	        dr = rotl(cr, 10);
	        cr = br;
	        br = tr;
	      } // update state


	      const t = this._b + cl + dr | 0;
	      this._b = this._c + dl + er | 0;
	      this._c = this._d + el + ar | 0;
	      this._d = this._e + al + br | 0;
	      this._e = this._a + bl + cr | 0;
	      this._a = t;
	    };

	    this._digest = () => {
	      // create padding and handle blocks
	      this._block[this._blockOffset++] = 0x80;

	      if (this._blockOffset > 56) {
	        this._block.fill(0, this._blockOffset, 64);

	        this._update();

	        this._blockOffset = 0;
	      }

	      this._block.fill(0, this._blockOffset, 56);

	      const temp = new DataView(this._block.buffer);
	      temp.setUint32(56, this._length[0], true);
	      temp.setUint32(60, this._length[1], true);
	      this._block = new Uint8Array(temp.buffer);

	      this._update(); // produce result


	      const buffer = new DataView(new Uint8Array(20).buffer);
	      buffer.setInt32(0, this._a, true);
	      buffer.setInt32(4, this._b, true);
	      buffer.setInt32(8, this._c, true);
	      buffer.setInt32(12, this._d, true);
	      buffer.setInt32(16, this._e, true);
	      return new Uint8Array(buffer.buffer);
	    };

	    this._block = new Uint8Array(blockSize);
	    this._blockSize = blockSize;
	    this._blockOffset = 0;
	    this._length = [0, 0, 0, 0];
	    this._finalized = false;
	  }

	}

	const publicKeyToAddress$1 = (publicKey, otherAddress) => {
	  // Use the same version/prefix byte as the given address.
	  const version = toString(base58ToBytes(otherAddress).slice(0, 1), 'hex');
	  const publicKeyBuffer = fromString(publicKey, 'hex');
	  const publicKeyHash = new Ripemd160().update(sha256$4(publicKeyBuffer)).digest();
	  const step1 = version + toString(publicKeyHash, 'hex');
	  const step2 = sha256$4(fromString(step1, 'hex'));
	  const step3 = sha256$4(step2);
	  const checksum = toString(step3, 'hex').substring(0, 8);
	  const step4 = step1 + checksum;
	  return bytesToBase58(fromString(step4, 'hex'));
	};

	const publicKeyToAddress = (publicKey, prefix) => {
	  const ec$1 = new elliptic.ec('secp256k1');
	  const compressedPublicKey = ec$1.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true);
	  const publicKeyBuffer = fromString(compressedPublicKey, 'hex');
	  const hash = new Ripemd160().update(sha256$4(publicKeyBuffer)).digest();
	  const words = bech32.toWords(hash);
	  return bech32.encode(prefix, words).replace(prefix, '');
	};

	const verifyBlockchainAccountId = (publicKey, blockchainAccountId) => {
	  if (blockchainAccountId) {
	    const chain = blockchainAccountId.split(':');

	    switch (chain[0]) {
	      case 'bip122':
	        chain[chain.length - 1] = publicKeyToAddress$1(publicKey, chain[chain.length - 1]);
	        break;

	      case 'cosmos':
	        chain[chain.length - 1] = publicKeyToAddress(publicKey, chain[1]);
	        break;

	      case 'eip155':
	        chain[chain.length - 1] = toEthereumAddress(publicKey);
	        break;

	      default:
	        return false;
	    }

	    return chain.join(':') === blockchainAccountId;
	  }

	  return false;
	};

	const secp256k1 = new elliptic.ec('secp256k1'); // converts a JOSE signature to it's components

	function toSignatureObject(signature, recoverable = false) {
	  const rawSig = base64ToBytes(signature);

	  if (rawSig.length !== (recoverable ? 65 : 64)) {
	    throw new Error('wrong signature length');
	  }

	  const r = bytesToHex(rawSig.slice(0, 32));
	  const s = bytesToHex(rawSig.slice(32, 64));
	  const sigObj = {
	    r,
	    s
	  };

	  if (recoverable) {
	    sigObj.recoveryParam = rawSig[64];
	  }

	  return sigObj;
	}

	function extractPublicKeyBytes(pk) {
	  if (pk.publicKeyBase58) {
	    return base58ToBytes(pk.publicKeyBase58);
	  } else if (pk.publicKeyBase64) {
	    return base64ToBytes(pk.publicKeyBase64);
	  } else if (pk.publicKeyHex) {
	    return hexToBytes(pk.publicKeyHex);
	  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {
	    return hexToBytes(secp256k1.keyFromPublic({
	      x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),
	      y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y))
	    }).getPublic('hex'));
	  } else if (pk.publicKeyMultibase) {
	    const {
	      base16,
	      base58btc,
	      base64,
	      base64url
	    } = bases;
	    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)));
	    return baseDecoder.decode(pk.publicKeyMultibase);
	  }

	  return new Uint8Array();
	}

	function verifyES256K(data, signature, authenticators) {
	  const hash = sha256$4(data);
	  const sigObj = toSignatureObject(signature);
	  const fullPublicKeys = authenticators.filter(({
	    ethereumAddress,
	    blockchainAccountId
	  }) => {
	    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined';
	  });
	  const blockchainAddressKeys = authenticators.filter(({
	    ethereumAddress,
	    blockchainAccountId
	  }) => {
	    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== undefined;
	  });
	  let signer = fullPublicKeys.find(pk => {
	    try {
	      const pubBytes = extractPublicKeyBytes(pk);
	      return secp256k1.keyFromPublic(pubBytes).verify(hash, sigObj);
	    } catch (err) {
	      return false;
	    }
	  });

	  if (!signer && blockchainAddressKeys.length > 0) {
	    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys);
	  }

	  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT');
	  return signer;
	}
	function verifyRecoverableES256K(data, signature, authenticators) {
	  let signatures;

	  if (signature.length > 86) {
	    signatures = [toSignatureObject(signature, true)];
	  } else {
	    const so = toSignatureObject(signature, false);
	    signatures = [{ ...so,
	      recoveryParam: 0
	    }, { ...so,
	      recoveryParam: 1
	    }];
	  }

	  const checkSignatureAgainstSigner = sigObj => {
	    const hash = sha256$4(data); // eslint-disable-next-line @typescript-eslint/no-explicit-any

	    const recoveredKey = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam);
	    const recoveredPublicKeyHex = recoveredKey.encode('hex');
	    const recoveredCompressedPublicKeyHex = recoveredKey.encode('hex', true);
	    const recoveredAddress = toEthereumAddress(recoveredPublicKeyHex);
	    const signer = authenticators.find(pk => {
	      var _pk$ethereumAddress, _pk$blockchainAccount, _pk$blockchainAccount2;

	      const keyHex = bytesToHex(extractPublicKeyBytes(pk));
	      return keyHex === recoveredPublicKeyHex || keyHex === recoveredCompressedPublicKeyHex || ((_pk$ethereumAddress = pk.ethereumAddress) == null ? void 0 : _pk$ethereumAddress.toLowerCase()) === recoveredAddress || ((_pk$blockchainAccount = pk.blockchainAccountId) == null ? void 0 : (_pk$blockchainAccount2 = _pk$blockchainAccount.split('@eip155')) == null ? void 0 : _pk$blockchainAccount2[0].toLowerCase()) === recoveredAddress || // CAIP-2
	      verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10
	      ;
	    });
	    return signer;
	  };

	  const signer = signatures.map(checkSignatureAgainstSigner).filter(key => typeof key !== 'undefined');
	  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT');
	  return signer[0];
	}
	function verifyEd25519(data, signature, authenticators) {
	  const clear = stringToBytes(data);
	  const sig = base64ToBytes(signature);
	  const signer = authenticators.find(pk => {
	    return ed25519$1.verify(extractPublicKeyBytes(pk), clear, sig);
	  });
	  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT');
	  return signer;
	}
	const algorithms = {
	  ES256K: verifyES256K,
	  // This is a non-standard algorithm but retained for backwards compatibility
	  // see https://github.com/decentralized-identity/did-jwt/issues/146
	  'ES256K-R': verifyRecoverableES256K,
	  // This is actually incorrect but retained for backwards compatibility
	  // see https://github.com/decentralized-identity/did-jwt/issues/130
	  Ed25519: verifyEd25519,
	  EdDSA: verifyEd25519
	};

	function VerifierAlgorithm(alg) {
	  const impl = algorithms[alg];
	  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`);
	  return impl;
	}

	VerifierAlgorithm.toSignatureObject = toSignatureObject;

	/**
	 * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID
	 *
	 *  @example
	 *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {
	 *      const payload = obj.payload
	 *      const profile = obj.profile
	 *      const jwt = obj.jwt
	 *      ...
	 *  })
	 *
	 *  @param    {String}            alg                a JWT algorithm
	 *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup
	 *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document
	 *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error
	 */
	const resolveAuthenticator = function (resolver, alg, issuer, proofPurpose) {
	  try {
	    const types = SUPPORTED_PUBLIC_KEY_TYPES[alg];

	    if (!types || types.length === 0) {
	      throw new Error(`not_supported: No supported signature types for algorithm ${alg}`);
	    }

	    let didResult;
	    return Promise.resolve(resolver.resolve(issuer, {
	      accept: DID_JSON
	    })).then(function (result) {
	      var _didResult$didResolut, _didResult, _didResult$didDocumen, _didResult2, _didResult2$didDocume;

	      // support legacy resolvers that do not produce DIDResolutionResult
	      if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {
	        didResult = {
	          didDocument: result,
	          didDocumentMetadata: {},
	          didResolutionMetadata: {
	            contentType: DID_JSON
	          }
	        };
	      } else {
	        didResult = result;
	      }

	      if ((_didResult$didResolut = didResult.didResolutionMetadata) != null && _didResult$didResolut.error || didResult.didDocument == null) {
	        const {
	          error,
	          message
	        } = didResult.didResolutionMetadata;
	        throw new Error(`resolver_error: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`);
	      }

	      const getPublicKeyById = (verificationMethods, pubid) => {
	        const filtered = verificationMethods.filter(({
	          id
	        }) => pubid === id);
	        return filtered.length > 0 ? filtered[0] : null;
	      };

	      let publicKeysToCheck = [...(((_didResult = didResult) == null ? void 0 : (_didResult$didDocumen = _didResult.didDocument) == null ? void 0 : _didResult$didDocumen.verificationMethod) || []), ...(((_didResult2 = didResult) == null ? void 0 : (_didResult2$didDocume = _didResult2.didDocument) == null ? void 0 : _didResult2$didDocume.publicKey) || [])];

	      if (typeof proofPurpose === 'string') {
	        var _didResult3;

	        // support legacy DID Documents that do not list assertionMethod
	        if (proofPurpose.startsWith('assertion') && !Object.getOwnPropertyNames((_didResult3 = didResult) == null ? void 0 : _didResult3.didDocument).includes('assertionMethod')) {
	          didResult.didDocument = { ...didResult.didDocument
	          };
	          didResult.didDocument.assertionMethod = [...publicKeysToCheck.map(pk => pk.id)];
	        }

	        publicKeysToCheck = (didResult.didDocument[proofPurpose] || []).map(verificationMethod => {
	          if (typeof verificationMethod === 'string') {
	            return getPublicKeyById(publicKeysToCheck, verificationMethod);
	          } else if (typeof verificationMethod.publicKey === 'string') {
	            // this is a legacy format
	            return getPublicKeyById(publicKeysToCheck, verificationMethod.publicKey);
	          } else {
	            return verificationMethod;
	          }
	        }).filter(key => key != null);
	      }

	      const authenticators = publicKeysToCheck.filter(({
	        type
	      }) => types.find(supported => supported === type));

	      if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {
	        throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`);
	      }

	      if (!authenticators || authenticators.length === 0) {
	        throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys for ${alg}`);
	      }

	      return {
	        authenticators,
	        issuer,
	        didResolutionResult: didResult
	      };
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};

	/**
	 *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,
	 *  and the did doc of the issuer of the JWT.
	 *
	 *  @example
	 *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {
	 *      const did = obj.did // DID of signer
	 *      const payload = obj.payload
	 *      const doc = obj.doc // DID Document of signer
	 *      const jwt = obj.jwt
	 *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT
	 *      ...
	 *  })
	 *
	 *  @param    {String}            jwt                a JSON Web Token to verify
	 *  @param    {Object}            [options]           an unsigned credential object
	 *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)
	 *  @param    {String}            options.audience    DID of the recipient of the JWT
	 *  @param    {String}            options.callbackUrl callback url in JWT
	 *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error
	 */
	const verifyJWT = function (jwt, options = {
	  resolver: undefined,
	  auth: undefined,
	  audience: undefined,
	  callbackUrl: undefined,
	  skewTime: undefined,
	  proofPurpose: undefined
	}) {
	  try {
	    if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured');
	    const {
	      payload,
	      header,
	      signature,
	      data
	    } = decodeJWT(jwt);
	    const proofPurpose = Object.prototype.hasOwnProperty.call(options, 'auth') ? options.auth ? 'authentication' : undefined : options.proofPurpose;

	    if (!payload.iss) {
	      throw new Error('invalid_jwt: JWT iss is required');
	    }

	    let did = '';

	    if (payload.iss === SELF_ISSUED_V2) {
	      if (!payload.sub) {
	        throw new Error('invalid_jwt: JWT sub is required');
	      }

	      if (typeof payload.sub_jwk === 'undefined') {
	        did = payload.sub;
	      } else {
	        did = (header.kid || '').split('#')[0];
	      }
	    } else if (payload.iss === SELF_ISSUED_V0_1) {
	      if (!payload.did) {
	        throw new Error('invalid_jwt: JWT did is required');
	      }

	      did = payload.did;
	    } else {
	      did = payload.iss;
	    }

	    if (!did) {
	      throw new Error(`invalid_jwt: No DID has been found in the JWT`);
	    }

	    return Promise.resolve(resolveAuthenticator(options.resolver, header.alg, did, proofPurpose)).then(function ({
	      didResolutionResult,
	      authenticators,
	      issuer
	    }) {
	      return Promise.resolve(verifyJWSDecoded({
	        header,
	        data,
	        signature
	      }, authenticators)).then(function (signer) {
	        const now = Math.floor(Date.now() / 1000);
	        const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW;

	        if (signer) {
	          const nowSkewed = now + skewTime;

	          if (payload.nbf) {
	            if (payload.nbf > nowSkewed) {
	              throw new Error(`invalid_jwt: JWT not valid before nbf: ${payload.nbf}`);
	            }
	          } else if (payload.iat && payload.iat > nowSkewed) {
	            throw new Error(`invalid_jwt: JWT not valid yet (issued in the future) iat: ${payload.iat}`);
	          }

	          if (payload.exp && payload.exp <= now - skewTime) {
	            throw new Error(`invalid_jwt: JWT has expired: exp: ${payload.exp} < now: ${now}`);
	          }

	          if (payload.aud) {
	            if (!options.audience && !options.callbackUrl) {
	              throw new Error('invalid_config: JWT audience is required but your app address has not been configured');
	            }

	            const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
	            const matchedAudience = audArray.find(item => options.audience === item || options.callbackUrl === item);

	            if (typeof matchedAudience === 'undefined') {
	              throw new Error(`invalid_config: JWT audience does not match your DID or callback url`);
	            }
	          }

	          return {
	            payload,
	            didResolutionResult,
	            issuer,
	            signer,
	            jwt
	          };
	        }

	        throw new Error(`invalid_signature: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`);
	      });
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};

	/**
	 *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.
	 *
	 *  @example
	 *  const signer = ES256KSigner(process.env.PRIVATE_KEY)
	 *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {
	 *      ...
	 *  })
	 *
	 *  @param    {Object}            payload               payload object
	 *  @param    {Object}            [options]             an unsigned credential object
	 *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT
	 *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.
	 *                                                      Please use `header.alg` to specify the algorithm
	 *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`
	 *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing
	 *  @param    {Object}            header                optional object to specify or customize the JWT header
	 *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error
	 */
	const createJWT = function (payload, {
	  issuer,
	  signer,
	  alg,
	  expiresIn,
	  canonicalize
	}, header = {}) {
	  try {
	    if (!signer) throw new Error('missing_signer: No Signer functionality has been configured');
	    if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured');
	    if (!header.typ) header.typ = 'JWT';
	    if (!header.alg) header.alg = alg;
	    const timestamps = {
	      iat: Math.floor(Date.now() / 1000),
	      exp: undefined
	    };

	    if (expiresIn) {
	      if (typeof expiresIn === 'number') {
	        timestamps.exp = (payload.nbf || timestamps.iat) + Math.floor(expiresIn);
	      } else {
	        throw new Error('invalid_argument: JWT expiresIn is not a number');
	      }
	    }

	    const fullPayload = { ...timestamps,
	      ...payload,
	      iss: issuer
	    };
	    return createJWS(fullPayload, signer, header, {
	      canonicalize
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};

	/**
	 *  Creates a signed JWS given a payload, a signer, and an optional header.
	 *
	 *  @example
	 *  const signer = ES256KSigner(process.env.PRIVATE_KEY)
	 *  const jws = await createJWS({ my: 'payload' }, signer)
	 *
	 *  @param    {Object}            payload           payload object
	 *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`
	 *  @param    {Object}            header            optional object to specify or customize the JWS header
	 *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and
	 *                                                    payload properties
	 *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error
	 */
	const createJWS = function (payload, signer, header = {}, options = {}) {
	  try {
	    if (!header.alg) header.alg = defaultAlg;
	    const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize);
	    const signingInput = [encodeSection(header, options.canonicalize), encodedPayload].join('.');
	    const jwtSigner = SignerAlg(header.alg);
	    return Promise.resolve(jwtSigner(signingInput, signer)).then(function (signature) {
	      return [signingInput, signature].join('.');
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};
	const SUPPORTED_PUBLIC_KEY_TYPES = {
	  ES256K: ['EcdsaSecp256k1VerificationKey2019',
	  /**
	   * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress
	   */
	  'EcdsaSecp256k1RecoveryMethod2020',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'Secp256k1VerificationKey2018',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'Secp256k1SignatureVerificationKey2018',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'EcdsaPublicKeySecp256k1'],
	  'ES256K-R': ['EcdsaSecp256k1VerificationKey2019',
	  /**
	   * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress
	   */
	  'EcdsaSecp256k1RecoveryMethod2020',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'Secp256k1VerificationKey2018',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'Secp256k1SignatureVerificationKey2018',
	  /**
	   * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress
	   */
	  'EcdsaPublicKeySecp256k1'],
	  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],
	  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018']
	};
	const SELF_ISSUED_V2 = 'https://self-issued.me/v2';
	const SELF_ISSUED_V0_1 = 'https://self-issued.me';
	const defaultAlg = 'ES256K';
	const DID_JSON = 'application/did+json'; // eslint-disable-next-line @typescript-eslint/no-explicit-any

	function encodeSection(data, shouldCanonicalize = false) {
	  if (shouldCanonicalize) {
	    return encodeBase64url(canonicalize(data));
	  } else {
	    return encodeBase64url(JSON.stringify(data));
	  }
	}

	const NBF_SKEW = 300;

	function decodeJWS(jws) {
	  const parts = jws.match(/^([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)\.([a-zA-Z0-9_-]+)$/);

	  if (parts) {
	    return {
	      header: JSON.parse(decodeBase64url(parts[1])),
	      payload: parts[2],
	      signature: parts[3],
	      data: `${parts[1]}.${parts[2]}`
	    };
	  }

	  throw new Error('invalid_argument: Incorrect format JWS');
	}
	/**  @module did-jwt/JWT */

	/**
	 *  Decodes a JWT and returns an object representing the payload
	 *
	 *  @example
	 *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')
	 *
	 *  @param    {String}            jwt                a JSON Web Token to verify
	 *  @return   {Object}                               a JS object representing the decoded JWT
	 */


	function decodeJWT(jwt) {
	  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT');

	  try {
	    const jws = decodeJWS(jwt);
	    const decodedJwt = Object.assign(jws, {
	      payload: JSON.parse(decodeBase64url(jws.payload))
	    });
	    return decodedJwt;
	  } catch (e) {
	    throw new Error('invalid_argument: Incorrect format JWT');
	  }
	}

	function verifyJWSDecoded({
	  header,
	  data,
	  signature
	}, pubKeys) {
	  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys];
	  const signer = VerifierAlgorithm(header.alg)(data, signature, pubKeys);
	  return signer;
	}
	/**
	 *  Verifies given JWS. If the JWS is valid, returns the public key that was
	 *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.
	 *
	 *  @example
	 *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })
	 *
	 *  @param    {String}                          jws         A JWS string to verify
	 *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS
	 *  @return   {VerificationMethod}                       The public key used to sign the JWS
	 */


	function verifyJWS(jws, pubKeys) {
	  const jwsDecoded = decodeJWS(jws);
	  return verifyJWSDecoded(jwsDecoded, pubKeys);
	}

	function _for(test, update, body) {
	  var stage;

	  for (;;) {
	    var shouldContinue = test();

	    if (_isSettledPact(shouldContinue)) {
	      shouldContinue = shouldContinue.v;
	    }

	    if (!shouldContinue) {
	      return result;
	    }

	    if (shouldContinue.then) {
	      stage = 0;
	      break;
	    }

	    var result = body();

	    if (result && result.then) {
	      if (_isSettledPact(result)) {
	        result = result.s;
	      } else {
	        stage = 1;
	        break;
	      }
	    }

	    if (update) {
	      var updateValue = update();

	      if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {
	        stage = 2;
	        break;
	      }
	    }
	  }

	  var pact = new _Pact();

	  var reject = _settle.bind(null, pact, 2);

	  (stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);
	  return pact;

	  function _resumeAfterBody(value) {
	    result = value;

	    do {
	      if (update) {
	        updateValue = update();

	        if (updateValue && updateValue.then && !_isSettledPact(updateValue)) {
	          updateValue.then(_resumeAfterUpdate).then(void 0, reject);
	          return;
	        }
	      }

	      shouldContinue = test();

	      if (!shouldContinue || _isSettledPact(shouldContinue) && !shouldContinue.v) {
	        _settle(pact, 1, result);

	        return;
	      }

	      if (shouldContinue.then) {
	        shouldContinue.then(_resumeAfterTest).then(void 0, reject);
	        return;
	      }

	      result = body();

	      if (_isSettledPact(result)) {
	        result = result.v;
	      }
	    } while (!result || !result.then);

	    result.then(_resumeAfterBody).then(void 0, reject);
	  }

	  function _resumeAfterTest(shouldContinue) {
	    if (shouldContinue) {
	      result = body();

	      if (result && result.then) {
	        result.then(_resumeAfterBody).then(void 0, reject);
	      } else {
	        _resumeAfterBody(result);
	      }
	    } else {
	      _settle(pact, 1, result);
	    }
	  }

	  function _resumeAfterUpdate() {
	    if (shouldContinue = test()) {
	      if (shouldContinue.then) {
	        shouldContinue.then(_resumeAfterTest).then(void 0, reject);
	      } else {
	        _resumeAfterTest(shouldContinue);
	      }
	    } else {
	      _settle(pact, 1, result);
	    }
	  }
	}

	const decryptJWE = function (jwe, decrypter) {
	  try {
	    let _exit;

	    function _temp5(_result) {
	      if (_exit) ;
	      if (cleartext === null) throw new Error('failure: Failed to decrypt');
	      return cleartext;
	    }

	    validateJWE(jwe);
	    const protHeader = JSON.parse(decodeBase64url(jwe.protected));
	    if (protHeader.enc !== decrypter.enc) throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`);
	    const sealed = toSealed(jwe.ciphertext, jwe.tag);
	    const aad = new Uint8Array(Buffer.from(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected));
	    let cleartext = null;

	    const _temp4 = function () {
	      if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {
	        return Promise.resolve(decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)).then(function (_decrypter$decrypt) {
	          cleartext = _decrypter$decrypt;
	        });
	      } else return function () {
	        if (!jwe.recipients || jwe.recipients.length === 0) {
	          throw new Error('bad_jwe: missing recipients');
	        } else {
	          let i = 0;
	          return _for(function () {
	            return !cleartext && i < jwe.recipients.length;
	          }, function () {
	            return i++;
	          }, function () {
	            const recipient = jwe.recipients[i];
	            Object.assign(recipient.header, protHeader);

	            const _temp3 = function () {
	              if (recipient.header.alg === decrypter.alg) {
	                return Promise.resolve(decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)).then(function (_decrypter$decrypt2) {
	                  cleartext = _decrypter$decrypt2;
	                });
	              }
	            }();

	            if (_temp3 && _temp3.then) return _temp3.then(function () {});
	          });
	        }
	      }();
	    }();

	    return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp5) : _temp5(_temp4));
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};

	const _iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";

	function _settle(pact, state, value) {
	  if (!pact.s) {
	    if (value instanceof _Pact) {
	      if (value.s) {
	        if (state & 1) {
	          state = value.s;
	        }

	        value = value.v;
	      } else {
	        value.o = _settle.bind(null, pact, state);
	        return;
	      }
	    }

	    if (value && value.then) {
	      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));
	      return;
	    }

	    pact.s = state;
	    pact.v = value;
	    const observer = pact.o;

	    if (observer) {
	      observer(pact);
	    }
	  }
	}

	const _Pact = /*#__PURE__*/function () {
	  function _Pact() {}

	  _Pact.prototype.then = function (onFulfilled, onRejected) {
	    const result = new _Pact();
	    const state = this.s;

	    if (state) {
	      const callback = state & 1 ? onFulfilled : onRejected;

	      if (callback) {
	        try {
	          _settle(result, 1, callback(this.v));
	        } catch (e) {
	          _settle(result, 2, e);
	        }

	        return result;
	      } else {
	        return this;
	      }
	    }

	    this.o = function (_this) {
	      try {
	        const value = _this.v;

	        if (_this.s & 1) {
	          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);
	        } else if (onRejected) {
	          _settle(result, 1, onRejected(value));
	        } else {
	          _settle(result, 2, value);
	        }
	      } catch (e) {
	        _settle(result, 2, e);
	      }
	    };

	    return result;
	  };

	  return _Pact;
	}();

	function _isSettledPact(thenable) {
	  return thenable instanceof _Pact && thenable.s & 1;
	}

	function _forTo(array, body, check) {
	  var i = -1,
	      pact,
	      reject;

	  function _cycle(result) {
	    try {
	      while (++i < array.length && (!check || !check())) {
	        result = body(i);

	        if (result && result.then) {
	          if (_isSettledPact(result)) {
	            result = result.v;
	          } else {
	            result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));
	            return;
	          }
	        }
	      }

	      if (pact) {
	        _settle(pact, 1, result);
	      } else {
	        pact = result;
	      }
	    } catch (e) {
	      _settle(pact || (pact = new _Pact()), 2, e);
	    }
	  }

	  _cycle();

	  return pact;
	}

	function _forOf(target, body, check) {
	  if (typeof target[_iteratorSymbol] === "function") {
	    var iterator = target[_iteratorSymbol](),
	        step,
	        pact,
	        reject;

	    function _cycle(result) {
	      try {
	        while (!(step = iterator.next()).done && (!check || !check())) {
	          result = body(step.value);

	          if (result && result.then) {
	            if (_isSettledPact(result)) {
	              result = result.v;
	            } else {
	              result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));
	              return;
	            }
	          }
	        }

	        if (pact) {
	          _settle(pact, 1, result);
	        } else {
	          pact = result;
	        }
	      } catch (e) {
	        _settle(pact || (pact = new _Pact()), 2, e);
	      }
	    }

	    _cycle();

	    if (iterator.return) {
	      var _fixup = function (value) {
	        try {
	          if (!step.done) {
	            iterator.return();
	          }
	        } catch (e) {}

	        return value;
	      };

	      if (pact && pact.then) {
	        return pact.then(_fixup, function (e) {
	          throw _fixup(e);
	        });
	      }

	      _fixup();
	    }

	    return pact;
	  } // No support for Symbol.iterator


	  // No support for Symbol.iterator
	  if (!("length" in target)) {
	    throw new TypeError("Object is not iterable");
	  } // Handle live collections properly


	  // Handle live collections properly
	  var values = [];

	  for (var i = 0; i < target.length; i++) {
	    values.push(target[i]);
	  }

	  return _forTo(values, function (i) {
	    return body(values[i]);
	  }, check);
	}

	function validateJWE(jwe) {
	  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {
	    throw new Error('bad_jwe: missing properties');
	  }

	  if (jwe.recipients) {
	    jwe.recipients.map(rec => {
	      if (!(rec.header && rec.encrypted_key)) {
	        throw new Error('bad_jwe: malformed recipients');
	      }
	    });
	  }
	}

	function encodeJWE({
	  ciphertext,
	  tag,
	  iv,
	  protectedHeader,
	  recipient
	}, aad) {
	  const jwe = {
	    protected: protectedHeader,
	    iv: bytesToBase64url(iv),
	    ciphertext: bytesToBase64url(ciphertext),
	    tag: bytesToBase64url(tag)
	  };
	  if (aad) jwe.aad = bytesToBase64url(aad);
	  if (recipient) jwe.recipients = [recipient];
	  return jwe;
	}

	const createJWE = function (cleartext, encrypters, protectedHeader = {}, aad) {
	  try {
	    if (encrypters[0].alg === 'dir') {
	      if (encrypters.length > 1) throw new Error('not_supported: Can only do "dir" encryption to one key.');
	      return Promise.resolve(encrypters[0].encrypt(cleartext, protectedHeader, aad)).then(function (encryptionResult) {
	        return encodeJWE(encryptionResult, aad);
	      });
	    } else {
	      const tmpEnc = encrypters[0].enc;

	      if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {
	        throw new Error('invalid_argument: Incompatible encrypters passed');
	      }

	      let cek;
	      let jwe;

	      const _temp2 = _forOf(encrypters, function (encrypter) {
	        const _temp = function () {
	          if (!cek) {
	            return Promise.resolve(encrypter.encrypt(cleartext, protectedHeader, aad)).then(function (encryptionResult) {
	              cek = encryptionResult.cek;
	              jwe = encodeJWE(encryptionResult, aad);
	            });
	          } else {
	            return Promise.resolve(encrypter.encryptCek == null ? void 0 : encrypter.encryptCek(cek)).then(function (recipient) {
	              if (recipient) {
	                var _jwe, _jwe$recipients;

	                (_jwe = jwe) == null ? void 0 : (_jwe$recipients = _jwe.recipients) == null ? void 0 : _jwe$recipients.push(recipient);
	              }
	            });
	          }
	        }();

	        if (_temp && _temp.then) return _temp.then(function () {});
	      });

	      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {
	        return jwe;
	      }) : jwe);
	    }
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};

	/**
	 * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.
	 * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key
	 * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`
	 *
	 * @throws 'invalid_argument:...' if the secret key size is wrong
	 */

	function createX25519ECDH(mySecretKey) {
	  if (mySecretKey.length !== 32) {
	    throw new Error('invalid_argument: incorrect secret key length for X25519');
	  }

	  return function (theirPublicKey) {
	    try {
	      if (theirPublicKey.length !== 32) {
	        throw new Error('invalid_argument: incorrect publicKey key length for X25519');
	      }

	      return Promise.resolve(x25519.sharedKey(mySecretKey, theirPublicKey));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };
	}

	/**
	 * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires
	 * sender private key to encrypt the data).
	 * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and
	 * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.
	 *
	 * @param recipientPublicKey the byte array representing the recipient public key
	 * @param senderSecret either a Uint8Array representing the sender secret key or
	 *   an ECDH function that wraps the key and can promise a shared secret given a public key
	 * @param options {@link AuthEncryptParams} used to specify extra header parameters
	 *
	 * @returns an {@link Encrypter} instance usable with {@link createJWE}
	 *
	 * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and
	 * are subject to change as new revisions or until the official CFRG specification are released.
	 *
	 * @beta
	 */

	const resolveX25519Encrypters = function (dids, resolver) {
	  try {
	    const encryptersForDID = function (did, resolved = []) {
	      try {
	        return Promise.resolve(resolver.resolve(did)).then(function ({
	          didResolutionMetadata,
	          didDocument
	        }) {
	          function _temp4() {
	            var _didDocument$keyAgree, _didDocument$keyAgree2;

	            const agreementKeys = (_didDocument$keyAgree = didDocument.keyAgreement) == null ? void 0 : (_didDocument$keyAgree2 = _didDocument$keyAgree.map(key => {
	              if (typeof key === 'string') {
	                return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(pk => pk.id === key);
	              }

	              return key;
	            })) == null ? void 0 : _didDocument$keyAgree2.filter(key => typeof key !== 'undefined');
	            const pks = (agreementKeys == null ? void 0 : agreementKeys.filter(key => {
	              // TODO: should be able to use non base58 keys too
	              return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58);
	            })) ?? [];
	            if (!pks.length && !controllerEncrypters.length) throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`);
	            return pks.map(pk => x25519Encrypter(base58ToBytes(pk.publicKeyBase58), pk.id)).concat(...controllerEncrypters);
	          }

	          resolved.push(did);

	          if (didResolutionMetadata != null && didResolutionMetadata.error || didDocument == null) {
	            throw new Error(`resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`);
	          }

	          let controllerEncrypters = [];

	          if (!didDocument.controller && !didDocument.keyAgreement) {
	            throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`);
	          }

	          const _temp3 = function () {
	            if (didDocument.controller) {
	              let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller];
	              controllers = controllers.filter(c => !resolved.includes(c));
	              const encrypterPromises = controllers.map(did => encryptersForDID(did, resolved).catch(() => {
	                return [];
	              }));
	              return Promise.resolve(Promise.all(encrypterPromises)).then(function (encrypterArrays) {
	                controllerEncrypters = [].concat(...encrypterArrays);
	              });
	            }
	          }();

	          return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);
	        });
	      } catch (e) {
	        return Promise.reject(e);
	      }
	    };

	    const encrypterPromises = dids.map(did => encryptersForDID(did));
	    return Promise.resolve(Promise.all(encrypterPromises)).then(function (encrypterArrays) {
	      const flattenedArray = [].concat(...encrypterArrays);
	      return flattenedArray;
	    });
	  } catch (e) {
	    return Promise.reject(e);
	  }
	};
	function createAuthEncrypter(recipientPublicKey, senderSecret, options = {}) {
	  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options);
	}
	/**
	 * Recommended encrypter for anonymous encryption (i.e. no sender authentication).
	 * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.
	 *
	 * @param publicKey the byte array representing the recipient public key
	 * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)
	 *
	 * @returns an {@link Encrypter} instance usable with {@link createJWE}
	 *
	 * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and
	 * is subject to change as new revisions or until the official CFRG specification is released.
	 *
	 * @beta
	 */

	function createAnonEncrypter(publicKey, options = {}) {
	  return x25519Encrypter(publicKey, options == null ? void 0 : options.kid);
	}
	/**
	 * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires
	 * sender public key to decrypt the data).
	 * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and
	 * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.
	 *
	 * @param recipientSecret either a Uint8Array representing the recipient secret key or
	 *   an ECDH function that wraps the key and can promise a shared secret given a public key
	 * @param senderPublicKey the byte array representing the sender public key
	 *
	 * @returns a {@link Decrypter} instance usable with {@link decryptJWE}
	 *
	 * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and
	 * are subject to change as new revisions or until the official CFRG specification are released.
	 *
	 * @beta
	 */

	function createAuthDecrypter(recipientSecret, senderPublicKey) {
	  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey);
	}
	/**
	 * Recommended decrypter for anonymous encryption (i.e. no sender authentication).
	 * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.
	 *
	 * @param recipientSecret either a Uint8Array representing the recipient secret key or
	 *   an ECDH function that wraps the key and can promise a shared secret given a public key
	 *
	 * @returns a {@link Decrypter} instance usable with {@link decryptJWE}
	 *
	 * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and
	 * is subject to change as new revisions or until the official CFRG specification is released.
	 *
	 * @beta
	 */

	function createAnonDecrypter(recipientSecret) {
	  return x25519Decrypter(recipientSecret);
	}

	function xc20pEncrypter(key) {
	  const cipher = new xchacha20poly1305.XChaCha20Poly1305(key);
	  return (cleartext, aad) => {
	    const iv = random$2.randomBytes(cipher.nonceLength);
	    const sealed = cipher.seal(iv, cleartext, aad);
	    return {
	      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),
	      tag: sealed.subarray(sealed.length - cipher.tagLength),
	      iv
	    };
	  };
	}

	function xc20pDirEncrypter(key) {
	  const encrypt = function (cleartext, protectedHeader = {}, aad) {
	    try {
	      const protHeader = encodeBase64url(JSON.stringify(Object.assign({
	        alg
	      }, protectedHeader, {
	        enc
	      })));
	      const encodedAad = new Uint8Array(Buffer.from(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader));
	      return Promise.resolve({ ...xc20pEncrypt(cleartext, encodedAad),
	        protectedHeader: protHeader
	      });
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const xc20pEncrypt = xc20pEncrypter(key);
	  const enc = 'XC20P';
	  const alg = 'dir';
	  return {
	    alg,
	    enc,
	    encrypt
	  };
	}
	function xc20pDirDecrypter(key) {
	  const decrypt = function (sealed, iv, aad) {
	    try {
	      return Promise.resolve(cipher.open(iv, sealed, aad));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const cipher = new xchacha20poly1305.XChaCha20Poly1305(key);
	  return {
	    alg: 'dir',
	    enc: 'XC20P',
	    decrypt
	  };
	}
	function x25519Encrypter(publicKey, kid) {
	  const encrypt = function (cleartext, protectedHeader = {}, aad) {
	    try {
	      // we won't want alg to be set to dir from xc20pDirEncrypter
	      Object.assign(protectedHeader, {
	        alg: undefined
	      }); // Content Encryption Key

	      const cek = random$2.randomBytes(32);
	      return Promise.resolve(xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)).then(function (_xc20pDirEncrypter$en) {
	        return Promise.resolve(encryptCek(cek)).then(function (_encryptCek) {
	          return { ..._xc20pDirEncrypter$en,
	            recipient: _encryptCek,
	            cek
	          };
	        });
	      });
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const encryptCek = function (cek) {
	    try {
	      const epk = x25519.generateKeyPair();
	      const sharedSecret = x25519.sharedKey(epk.secretKey, publicKey); // Key Encryption Key

	      const kek = concatKDF(sharedSecret, keyLen, alg);
	      const res = xc20pEncrypter(kek)(cek);
	      const recipient = {
	        encrypted_key: bytesToBase64url(res.ciphertext),
	        header: {
	          alg,
	          iv: bytesToBase64url(res.iv),
	          tag: bytesToBase64url(res.tag),
	          epk: {
	            kty: 'OKP',
	            crv,
	            x: bytesToBase64url(epk.publicKey)
	          }
	        }
	      };
	      if (kid) recipient.header.kid = kid;
	      return Promise.resolve(recipient);
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const alg = 'ECDH-ES+XC20PKW';
	  const keyLen = 256;
	  const crv = 'X25519';
	  return {
	    alg,
	    enc: 'XC20P',
	    encrypt,
	    encryptCek
	  };
	}
	/**
	 * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:
	 *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}
	 *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}
	 */

	function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options = {}) {
	  const encrypt = function (cleartext, protectedHeader = {}, aad) {
	    try {
	      // we won't want alg to be set to dir from xc20pDirEncrypter
	      Object.assign(protectedHeader, {
	        alg: undefined
	      }); // Content Encryption Key

	      const cek = random$2.randomBytes(32);
	      return Promise.resolve(xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)).then(function (_xc20pDirEncrypter$en2) {
	        return Promise.resolve(encryptCek(cek)).then(function (_encryptCek2) {
	          return { ..._xc20pDirEncrypter$en2,
	            recipient: _encryptCek2,
	            cek
	          };
	        });
	      });
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const encryptCek = function (cek) {
	    try {
	      function _temp2() {
	        const sharedSecret = new Uint8Array(zE.length + zS.length);
	        sharedSecret.set(zE);
	        sharedSecret.set(zS, zE.length); // Key Encryption Key

	        const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo);
	        const res = xc20pEncrypter(kek)(cek);
	        const recipient = {
	          encrypted_key: bytesToBase64url(res.ciphertext),
	          header: {
	            alg,
	            iv: bytesToBase64url(res.iv),
	            tag: bytesToBase64url(res.tag),
	            epk: {
	              kty: 'OKP',
	              crv,
	              x: bytesToBase64url(epk.publicKey)
	            }
	          }
	        };
	        if (options.kid) recipient.header.kid = options.kid;
	        if (options.apu) recipient.header.apu = options.apu;
	        if (options.apv) recipient.header.apv = options.apv;
	        return recipient;
	      }

	      const epk = x25519.generateKeyPair();
	      const zE = x25519.sharedKey(epk.secretKey, recipientPublicKey); // ECDH-1PU requires additional shared secret between
	      // static key of sender and static key of recipient

	      let zS;

	      const _temp = function () {
	        if (senderSecret instanceof Uint8Array) {
	          zS = x25519.sharedKey(senderSecret, recipientPublicKey);
	        } else {
	          return Promise.resolve(senderSecret(recipientPublicKey)).then(function (_senderSecret) {
	            zS = _senderSecret;
	          });
	        }
	      }();

	      return Promise.resolve(_temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const alg = 'ECDH-1PU+XC20PKW';
	  const keyLen = 256;
	  const crv = 'X25519';
	  let partyUInfo;
	  let partyVInfo;
	  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu);
	  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv);
	  return {
	    alg,
	    enc: 'XC20P',
	    encrypt,
	    encryptCek
	  };
	}

	function validateHeader(header) {
	  if (!(header && header.epk && header.iv && header.tag)) {
	    throw new Error('bad_jwe: malformed header');
	  }
	}

	function x25519Decrypter(receiverSecret) {
	  const decrypt = function (sealed, iv, aad, recipient) {
	    try {
	      var _recipient, _recipient$header$epk;

	      function _temp6() {
	        // Key Encryption Key
	        const kek = concatKDF(sharedSecret, keyLen, alg); // Content Encryption Key

	        const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag);
	        return Promise.resolve(xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))).then(function (cek) {
	          return cek === null ? null : xc20pDirDecrypter(cek).decrypt(sealed, iv, aad);
	        });
	      }

	      validateHeader((_recipient = recipient) == null ? void 0 : _recipient.header);
	      recipient = recipient;
	      if (((_recipient$header$epk = recipient.header.epk) == null ? void 0 : _recipient$header$epk.crv) !== crv || typeof recipient.header.epk.x == 'undefined') return Promise.resolve(null);
	      const publicKey = base64ToBytes(recipient.header.epk.x);
	      let sharedSecret;

	      const _temp5 = function () {
	        if (receiverSecret instanceof Uint8Array) {
	          sharedSecret = x25519.sharedKey(receiverSecret, publicKey);
	        } else {
	          return Promise.resolve(receiverSecret(publicKey)).then(function (_receiverSecret) {
	            sharedSecret = _receiverSecret;
	          });
	        }
	      }();

	      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp6) : _temp6(_temp5));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const alg = 'ECDH-ES+XC20PKW';
	  const keyLen = 256;
	  const crv = 'X25519';
	  return {
	    alg,
	    enc: 'XC20P',
	    decrypt
	  };
	}
	/**
	 * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:
	 *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}
	 *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}
	 */

	function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey) {
	  const decrypt = function (sealed, iv, aad, recipient) {
	    try {
	      var _recipient$header$epk2;

	      function _temp8() {
	        const sharedSecret = new Uint8Array(zE.length + zS.length);
	        sharedSecret.set(zE);
	        sharedSecret.set(zS, zE.length); // Key Encryption Key

	        let producerInfo;
	        let consumerInfo;
	        if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu);
	        if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv);
	        const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo); // Content Encryption Key

	        const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag);
	        return Promise.resolve(xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))).then(function (cek) {
	          return cek === null ? null : xc20pDirDecrypter(cek).decrypt(sealed, iv, aad);
	        });
	      }

	      recipient = recipient;
	      validateHeader(recipient.header);
	      if (((_recipient$header$epk2 = recipient.header.epk) == null ? void 0 : _recipient$header$epk2.crv) !== crv || typeof recipient.header.epk.x == 'undefined') return Promise.resolve(null); // ECDH-1PU requires additional shared secret between
	      // static key of sender and static key of recipient

	      const publicKey = base64ToBytes(recipient.header.epk.x);
	      let zE;
	      let zS;

	      const _temp7 = function () {
	        if (recipientSecret instanceof Uint8Array) {
	          zE = x25519.sharedKey(recipientSecret, publicKey);
	          zS = x25519.sharedKey(recipientSecret, senderPublicKey);
	        } else {
	          return Promise.resolve(recipientSecret(publicKey)).then(function (_recipientSecret) {
	            zE = _recipientSecret;
	            return Promise.resolve(recipientSecret(senderPublicKey)).then(function (_recipientSecret2) {
	              zS = _recipientSecret2;
	            });
	          });
	        }
	      }();

	      return Promise.resolve(_temp7 && _temp7.then ? _temp7.then(_temp8) : _temp8(_temp7));
	    } catch (e) {
	      return Promise.reject(e);
	    }
	  };

	  const alg = 'ECDH-1PU+XC20PKW';
	  const keyLen = 256;
	  const crv = 'X25519';
	  return {
	    alg,
	    enc: 'XC20P',
	    decrypt
	  };
	}

	var index_module = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ES256KSigner: ES256KSigner,
		EdDSASigner: EdDSASigner,
		EllipticSigner: EllipticSigner,
		NaclSigner: NaclSigner,
		SimpleSigner: SimpleSigner,
		createAnonDecrypter: createAnonDecrypter,
		createAnonEncrypter: createAnonEncrypter,
		createAuthDecrypter: createAuthDecrypter,
		createAuthEncrypter: createAuthEncrypter,
		createJWE: createJWE,
		createJWS: createJWS,
		createJWT: createJWT,
		createX25519ECDH: createX25519ECDH,
		decodeJWT: decodeJWT,
		decryptJWE: decryptJWE,
		resolveX25519Encrypters: resolveX25519Encrypters,
		toEthereumAddress: toEthereumAddress,
		verifyJWS: verifyJWS,
		verifyJWT: verifyJWT,
		x25519Decrypter: x25519Decrypter,
		x25519Encrypter: x25519Encrypter,
		xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2: xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2,
		xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2: xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2,
		xc20pDirDecrypter: xc20pDirDecrypter,
		xc20pDirEncrypter: xc20pDirEncrypter
	});

	var require$$2$4 = /*@__PURE__*/getAugmentedNamespace(index_module);

	let urlAlphabet =
	  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';

	const POOL_SIZE_MULTIPLIER = 128;
	let pool, poolOffset;
	let fillPool = bytes => {
	  if (!pool || pool.length < bytes) {
	    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);
	    crypto__default$1["default"].randomFillSync(pool);
	    poolOffset = 0;
	  } else if (poolOffset + bytes > pool.length) {
	    crypto__default$1["default"].randomFillSync(pool);
	    poolOffset = 0;
	  }
	  poolOffset += bytes;
	};
	let nanoid = (size = 21) => {
	  fillPool(size);
	  let id = '';
	  for (let i = poolOffset - size; i < poolOffset; i++) {
	    id += urlAlphabet[pool[i] & 63];
	  }
	  return id
	};

	function asyncGeneratorStep$9(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$9(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$9(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$9(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _inheritsLoose$4(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf$3(o) {
	  _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$3(o);
	}

	function _setPrototypeOf$4(o, p) {
	  _setPrototypeOf$4 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$4(o, p);
	}

	function _isNativeReflectConstruct$3() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct$3(Parent, args, Class) {
	  if (_isNativeReflectConstruct$3()) {
	    _construct$3 = Reflect.construct;
	  } else {
	    _construct$3 = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$4(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct$3.apply(null, arguments);
	}

	function _isNativeFunction$3(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper$3(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper$3 = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction$3(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct$3(Class, arguments, _getPrototypeOf$3(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$4(Wrapper, Class);
	  };

	  return _wrapNativeSuper$3(Class);
	}

	function _assertThisInitialized$3(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function createCommonjsModule$a(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$9 = createCommonjsModule$a(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var _ERROR_MESSAGE$3;

	var ERROR_CODE$3;

	(function (ERROR_CODE) {
	  ERROR_CODE[ERROR_CODE["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
	  ERROR_CODE[ERROR_CODE["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
	  ERROR_CODE[ERROR_CODE["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
	  ERROR_CODE[ERROR_CODE["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
	  ERROR_CODE[ERROR_CODE["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
	})(ERROR_CODE$3 || (ERROR_CODE$3 = {}));

	var ERROR_MESSAGE$3 = (_ERROR_MESSAGE$3 = {}, _ERROR_MESSAGE$3[ERROR_CODE$3.PARSE_ERROR] = 'Parse error', _ERROR_MESSAGE$3[ERROR_CODE$3.INVALID_REQUEST] = 'Invalid request', _ERROR_MESSAGE$3[ERROR_CODE$3.METHOD_NOT_FOUND] = 'Method not found', _ERROR_MESSAGE$3[ERROR_CODE$3.INVALID_PARAMS] = 'Invalid params', _ERROR_MESSAGE$3[ERROR_CODE$3.INTERNAL_ERROR] = 'Internal error', _ERROR_MESSAGE$3);
	function isServerError$3(code) {
	  return -32000 >= code && code >= -32099;
	}
	function getErrorMessage$3(code) {
	  var _ERROR_MESSAGE$code$t;

	  return (_ERROR_MESSAGE$code$t = ERROR_MESSAGE$3[code.toString()]) != null ? _ERROR_MESSAGE$code$t : isServerError$3(code) ? 'Server error' : 'Application error';
	}
	var RPCError$3 = /*#__PURE__*/function (_Error) {
	  _inheritsLoose$4(RPCError, _Error);

	  function RPCError(code, message, data) {
	    var _this;

	    _this = _Error.call(this) || this;
	    Object.setPrototypeOf(_assertThisInitialized$3(_this), RPCError.prototype);
	    _this.code = code;
	    _this.data = data;
	    _this.message = message != null ? message : getErrorMessage$3(code);
	    return _this;
	  }

	  RPCError.fromObject = function fromObject(err) {
	    return new RPCError(err.code, err.message, err.data);
	  };

	  var _proto = RPCError.prototype;

	  _proto.toObject = function toObject() {
	    return {
	      code: this.code,
	      data: this.data,
	      message: this.message
	    };
	  };

	  return RPCError;
	}( /*#__PURE__*/_wrapNativeSuper$3(Error));

	function createErrorFactory$3(code) {
	  var message = ERROR_MESSAGE$3[code];
	  return function createError(data) {
	    return new RPCError$3(code, message, data);
	  };
	}

	var createParseError$2 = /*#__PURE__*/createErrorFactory$3(ERROR_CODE$3.PARSE_ERROR);
	var createInvalidRequest$2 = /*#__PURE__*/createErrorFactory$3(ERROR_CODE$3.INVALID_REQUEST);
	var createMethodNotFound$2 = /*#__PURE__*/createErrorFactory$3(ERROR_CODE$3.METHOD_NOT_FOUND);
	var createInvalidParams$2 = /*#__PURE__*/createErrorFactory$3(ERROR_CODE$3.INVALID_PARAMS);
	var createInternalError$2 = /*#__PURE__*/createErrorFactory$3(ERROR_CODE$3.INTERNAL_ERROR);

	var RPCClient$2 = /*#__PURE__*/function () {
	  function RPCClient(connection) {
	    this.connection = connection;
	  }

	  var _proto = RPCClient.prototype;

	  _proto.createID = function createID() {
	    return nanoid();
	  };

	  _proto.request = /*#__PURE__*/function () {
	    var _request = /*#__PURE__*/_asyncToGenerator$9( /*#__PURE__*/runtime_1$9.mark(function _callee(method, params) {
	      var res;
	      return runtime_1$9.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (params === void 0) {
	                params = undefined;
	              }

	              _context.next = 3;
	              return this.connection.send({
	                jsonrpc: '2.0',
	                id: this.createID(),
	                method: method,
	                params: params
	              });

	            case 3:
	              res = _context.sent;

	              if (!(res == null)) {
	                _context.next = 6;
	                break;
	              }

	              throw new Error('Missing response');

	            case 6:
	              if (!(res.error != null)) {
	                _context.next = 8;
	                break;
	              }

	              throw RPCError$3.fromObject(res.error);

	            case 8:
	              return _context.abrupt("return", res.result);

	            case 9:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function request(_x, _x2) {
	      return _request.apply(this, arguments);
	    }

	    return request;
	  }();

	  return RPCClient;
	}();

	function parseJSON$2(input) {
	  try {
	    return JSON.parse(input);
	  } catch (err) {
	    throw createParseError$2();
	  }
	}
	function createErrorResponse$3(id, code) {
	  return {
	    jsonrpc: '2.0',
	    id: id,
	    error: {
	      code: code,
	      message: getErrorMessage$3(code)
	    }
	  };
	}

	function fallbackOnHandlerError$3(_ctx, msg, error) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled handler error', msg, error);
	}

	function fallbackOnInvalidMessage$3(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled invalid message', msg);
	}

	function fallbackOnNotification$3(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled notification', msg);
	} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


	function createHandler$3(methods, options) {
	  var _options$onHandlerErr, _options$onInvalidMes, _options$onNotificati;

	  if (options === void 0) {
	    options = {};
	  }

	  var onHandlerError = (_options$onHandlerErr = options.onHandlerError) != null ? _options$onHandlerErr : fallbackOnHandlerError$3;
	  var onInvalidMessage = (_options$onInvalidMes = options.onInvalidMessage) != null ? _options$onInvalidMes : fallbackOnInvalidMessage$3;
	  var onNotification = (_options$onNotificati = options.onNotification) != null ? _options$onNotificati : fallbackOnNotification$3;
	  return /*#__PURE__*/function () {
	    var _handleRequest = _asyncToGenerator$9( /*#__PURE__*/runtime_1$9.mark(function _callee(ctx, msg) {
	      var id, handler, handled, result, error, _err$code, code;

	      return runtime_1$9.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              id = msg.id;

	              if (!(msg.jsonrpc !== '2.0' || msg.method == null)) {
	                _context.next = 6;
	                break;
	              }

	              if (!(id == null)) {
	                _context.next = 5;
	                break;
	              }

	              onInvalidMessage(ctx, msg);
	              return _context.abrupt("return", null);

	            case 5:
	              return _context.abrupt("return", createErrorResponse$3(id, ERROR_CODE$3.INVALID_REQUEST));

	            case 6:
	              if (!(id == null)) {
	                _context.next = 9;
	                break;
	              }

	              onNotification(ctx, msg);
	              return _context.abrupt("return", null);

	            case 9:
	              handler = methods[msg.method];

	              if (!(handler == null)) {
	                _context.next = 12;
	                break;
	              }

	              return _context.abrupt("return", createErrorResponse$3(id, ERROR_CODE$3.METHOD_NOT_FOUND));

	            case 12:
	              _context.prev = 12;
	              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	              // @ts-ignore params can be undefined
	              handled = handler(ctx, msg.params);

	              if (!(handled == null)) {
	                _context.next = 18;
	                break;
	              }

	              _context.t0 = handled;
	              _context.next = 26;
	              break;

	            case 18:
	              if (!(typeof handled.then === 'function')) {
	                _context.next = 24;
	                break;
	              }

	              _context.next = 21;
	              return handled;

	            case 21:
	              _context.t1 = _context.sent;
	              _context.next = 25;
	              break;

	            case 24:
	              _context.t1 = handled;

	            case 25:
	              _context.t0 = _context.t1;

	            case 26:
	              result = _context.t0;
	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                result: result
	              });

	            case 30:
	              _context.prev = 30;
	              _context.t2 = _context["catch"](12);

	              if (_context.t2 instanceof RPCError$3) {
	                error = _context.t2.toObject();
	              } else {
	                onHandlerError(ctx, msg, _context.t2);
	                code = (_err$code = _context.t2.code) != null ? _err$code : -32000; // Server error

	                error = {
	                  code: code,
	                  message: _context.t2.message || getErrorMessage$3(code)
	                };
	              }

	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                error: error
	              });

	            case 34:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[12, 30]]);
	    }));

	    function handleRequest(_x, _x2) {
	      return _handleRequest.apply(this, arguments);
	    }

	    return handleRequest;
	  }();
	}

	var rpcUtils_esm$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get ERROR_CODE () { return ERROR_CODE$3; },
		ERROR_MESSAGE: ERROR_MESSAGE$3,
		RPCClient: RPCClient$2,
		RPCError: RPCError$3,
		createErrorResponse: createErrorResponse$3,
		createHandler: createHandler$3,
		createInternalError: createInternalError$2,
		createInvalidParams: createInvalidParams$2,
		createInvalidRequest: createInvalidRequest$2,
		createMethodNotFound: createMethodNotFound$2,
		createParseError: createParseError$2,
		getErrorMessage: getErrorMessage$3,
		isServerError: isServerError$3,
		parseJSON: parseJSON$2
	});

	var require$$2$3 = /*@__PURE__*/getAugmentedNamespace(rpcUtils_esm$2);

	var utils$2 = {};

	var fastJsonStableStringify = function (data, opts) {
	    if (!opts) opts = {};
	    if (typeof opts === 'function') opts = { cmp: opts };
	    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

	    var cmp = opts.cmp && (function (f) {
	        return function (node) {
	            return function (a, b) {
	                var aobj = { key: a, value: node[a] };
	                var bobj = { key: b, value: node[b] };
	                return f(aobj, bobj);
	            };
	        };
	    })(opts.cmp);

	    var seen = [];
	    return (function stringify (node) {
	        if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	        }

	        if (node === undefined) return;
	        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
	        if (typeof node !== 'object') return JSON.stringify(node);

	        var i, out;
	        if (Array.isArray(node)) {
	            out = '[';
	            for (i = 0; i < node.length; i++) {
	                if (i) out += ',';
	                out += stringify(node[i]) || 'null';
	            }
	            return out + ']';
	        }

	        if (node === null) return 'null';

	        if (seen.indexOf(node) !== -1) {
	            if (cycles) return JSON.stringify('__cycle__');
	            throw new TypeError('Converting circular structure to JSON');
	        }

	        var seenIndex = seen.push(node) - 1;
	        var keys = Object.keys(node).sort(cmp && cmp(node));
	        out = '';
	        for (i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = stringify(node[key]);

	            if (!value) continue;
	            if (out) out += ',';
	            out += JSON.stringify(key) + ':' + value;
	        }
	        seen.splice(seenIndex, 1);
	        return '{' + out + '}';
	    })(data);
	};

	var __createBinding$a = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$a = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$a = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$a(result, mod, k);
	    __setModuleDefault$a(result, mod);
	    return result;
	};
	var __importDefault$g = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(utils$2, "__esModule", { value: true });
	utils$2.toStableObject = utils$2.decodeBase64 = utils$2.encodeBase64 = utils$2.u8aToHex = utils$2.hexToU8A = utils$2.parseJWEKids = utils$2.decodeKey = utils$2.encodeKey = void 0;
	const fast_json_stable_stringify_1 = __importDefault$g(fastJsonStableStringify);
	const u8a$1 = __importStar$a(uint8arrays$7);
	const B16 = 'base16';
	const B64$2 = 'base64pad';
	const multicodecPubkeyTable = {
	    secp256k1: 0xe7,
	    x25519: 0xec,
	    ed25519: 0xed,
	};
	function encodeKey(key, keyType) {
	    const bytes = new Uint8Array(key.length + 2);
	    if (!multicodecPubkeyTable[keyType]) {
	        throw new Error(`Key type "${keyType}" not supported.`);
	    }
	    bytes[0] = multicodecPubkeyTable[keyType];
	    bytes[1] = 0x01;
	    bytes.set(key, 2);
	    return `z${u8a$1.toString(bytes, 'base58btc')}`;
	}
	utils$2.encodeKey = encodeKey;
	function decodeKey(key) {
	    const bytes = u8a$1.fromString(key.slice(1), 'base58btc');
	    const supportedKey = bytes[1] === 0x01 &&
	        (multicodecPubkeyTable['secp256k1'] === bytes[0] ||
	            multicodecPubkeyTable['x25519'] === bytes[0] ||
	            multicodecPubkeyTable['ed25519'] === bytes[0]);
	    if (!supportedKey)
	        throw new Error(`Key type ${bytes[0]} not supported`);
	    return bytes.slice(2);
	}
	utils$2.decodeKey = decodeKey;
	function parseJWEKids(jwe) {
	    var _a;
	    return (((_a = jwe.recipients) === null || _a === void 0 ? void 0 : _a.reduce((kids, recipient) => {
	        var _a;
	        if ((_a = recipient.header) === null || _a === void 0 ? void 0 : _a.kid)
	            kids.push(recipient.header.kid.split('#')[1]);
	        return kids;
	    }, [])) || []);
	}
	utils$2.parseJWEKids = parseJWEKids;
	function hexToU8A(s) {
	    return u8a$1.fromString(s, B16);
	}
	utils$2.hexToU8A = hexToU8A;
	function u8aToHex(b) {
	    return u8a$1.toString(b, B16);
	}
	utils$2.u8aToHex = u8aToHex;
	function encodeBase64$1(b) {
	    return u8a$1.toString(b, B64$2);
	}
	utils$2.encodeBase64 = encodeBase64$1;
	function decodeBase64$1(s) {
	    return u8a$1.fromString(s, B64$2);
	}
	utils$2.decodeBase64 = decodeBase64$1;
	function toStableObject$1(obj) {
	    return JSON.parse(fast_json_stable_stringify_1.default(obj));
	}
	utils$2.toStableObject = toStableObject$1;

	(function (exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DidProvider = exports.didMethods = void 0;
	const dag_jose_utils_1 = lib$6;
	const did_jwt_1 = require$$2$4;
	const rpc_utils_1 = require$$2$3;
	const utils_1 = utils$2;
	function toGeneralJWS(jws) {
	    const [protectedHeader, payload, signature] = jws.split('.');
	    return {
	        payload,
	        signatures: [{ protected: protectedHeader, signature }],
	    };
	}
	function sign(payload, didWithFragment, keyring, threeIdx, protectedHeader = {}, revocable) {
	    return __awaiter(this, void 0, void 0, function* () {
	        let [did, keyFragment] = didWithFragment.split('#');
	        let kid, signer;
	        if (did.startsWith('did:key:')) {
	            const pubkey = did.split(':')[2];
	            kid = `${did}#${pubkey}`;
	            signer = keyring.getMgmtSigner(pubkey);
	        }
	        else {
	            if (did !== threeIdx.id)
	                throw new Error(`Unknown DID: ${did}`);
	            const version = threeIdx.get3idVersion();
	            if (!keyFragment)
	                keyFragment = keyring.getKeyFragment(version);
	            kid = `${did}${revocable ? '' : `?version-id=${version}`}#${keyFragment}`;
	            signer = keyring.getSigner(version);
	        }
	        const header = utils_1.toStableObject(Object.assign(protectedHeader, { kid }));
	        const jws = yield did_jwt_1.createJWS(utils_1.toStableObject(payload), signer, header);
	        return toGeneralJWS(jws);
	    });
	}
	exports.didMethods = {
	    did_authenticate: ({ permissions, keyring, threeIdx, origin, forcedDID }, params) => __awaiter(void 0, void 0, void 0, function* () {
	        const paths = yield permissions.request(origin, params.paths || []);
	        if (paths === null)
	            throw new rpc_utils_1.RPCError(4001, 'User Rejected Request');
	        return sign({
	            did: forcedDID || threeIdx.id,
	            aud: params.aud,
	            nonce: params.nonce,
	            paths,
	            exp: Math.floor(Date.now() / 1000) + 600,
	        }, forcedDID || threeIdx.id, keyring, threeIdx);
	    }),
	    did_createJWS: ({ permissions, keyring, threeIdx, origin }, params) => __awaiter(void 0, void 0, void 0, function* () {
	        if (!permissions.has(origin))
	            throw new rpc_utils_1.RPCError(4100, 'Unauthorized');
	        const jws = yield sign(params.payload, params.did, keyring, threeIdx, params.protected, params.revocable);
	        return { jws };
	    }),
	    did_decryptJWE: ({ permissions, keyring, origin }, params) => __awaiter(void 0, void 0, void 0, function* () {
	        if (!permissions.has(origin))
	            throw new rpc_utils_1.RPCError(4100, 'Unauthorized');
	        const parsedKids = utils_1.parseJWEKids(params.jwe);
	        const decrypter = keyring.getAsymDecrypter(parsedKids);
	        const bytes = yield did_jwt_1.decryptJWE(params.jwe, decrypter);
	        let obj;
	        try {
	            obj = dag_jose_utils_1.decodeCleartext(bytes);
	        }
	        catch (e) {
	        }
	        if (obj && !permissions.has(origin, obj.paths))
	            throw new rpc_utils_1.RPCError(4100, 'Unauthorized');
	        return { cleartext: utils_1.encodeBase64(bytes) };
	    }),
	};
	class DidProvider {
	    constructor({ permissions, threeIdx, keyring, forcedOrigin, forcedDID }) {
	        const handler = rpc_utils_1.createHandler(exports.didMethods);
	        this._handle = (origin, msg) => __awaiter(this, void 0, void 0, function* () {
	            return yield handler({
	                origin: forcedOrigin !== null && forcedOrigin !== void 0 ? forcedOrigin : origin,
	                permissions,
	                threeIdx,
	                keyring,
	                forcedDID,
	            }, msg);
	        });
	    }
	    get isDidProvider() {
	        return true;
	    }
	    send(msg, origin) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return yield this._handle(origin !== null && origin !== void 0 ? origin : '', msg);
	        });
	    }
	}
	exports.DidProvider = DidProvider;

	}(didProvider));

	var threeIdx = {};

	var schemas = {
	  AlsoKnownAs: 'ceramic://k3y52l7qbv1fryojt8n8cw2k04p9wp67ly59iwqs65dejso566fij5wsdrb871yio',
	  BasicProfile: 'ceramic://k3y52l7qbv1frxt706gqfzmq6cbqdkptzk8uudaryhlkf6ly9vx21hqu4r6k1jqio',
	  CryptoAccounts: 'ceramic://k3y52l7qbv1frypussjburqg4fykyyycfu0p9znc75lv2t5cg4xaslhagkd7h7mkg',
	  Definition: 'ceramic://k3y52l7qbv1fry1fp4s0nwdarh0vahusarpposgevy0pemiykymd2ord6swtharcw',
	  IdentityIndex: 'ceramic://k3y52l7qbv1fryjn62sggjh1lpn11c56qfofzmty190d62hwk1cal1c7qc5he54ow',
	  ThreeIdKeychain: 'ceramic://k3y52l7qbv1frxiodfo6f25wocb8zz60ywqw4sqcprs26qx1qx467l4ybxplybvgg'
	};
	var definitions = {
	  alsoKnownAs: 'kjzl6cwe1jw146zfmqa10a5x1vry6au3t362p44uttz4l0k4hi88o41zplhmxnf',
	  basicProfile: 'kjzl6cwe1jw145cjbeko9kil8g9bxszjhyde21ob8epxuxkaon1izyqsu8wgcic',
	  cryptoAccounts: 'kjzl6cwe1jw149z4rvwzi56mjjukafta30kojzktd9dsrgqdgz4wlnceu59f95f',
	  threeIdKeychain: 'kjzl6cwe1jw14a50gupo0d433e9ojgmj9rd9ejxkc8vq6lw0fznsoohwzmejqs8'
	};

	var idxConstants_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		definitions: definitions,
		schemas: schemas
	});

	var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(idxConstants_esm);

	var lib$5 = {};

	var types = {};

	Object.defineProperty(types, "__esModule", { value: true });

	var did = {};

	function asyncGeneratorStep$8(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$8(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$8(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$8(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _inheritsLoose$3(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf$2(o) {
	  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$2(o);
	}

	function _setPrototypeOf$3(o, p) {
	  _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$3(o, p);
	}

	function _isNativeReflectConstruct$2() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct$2(Parent, args, Class) {
	  if (_isNativeReflectConstruct$2()) {
	    _construct$2 = Reflect.construct;
	  } else {
	    _construct$2 = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$3(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct$2.apply(null, arguments);
	}

	function _isNativeFunction$2(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper$2(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper$2 = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction$2(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct$2(Class, arguments, _getPrototypeOf$2(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$3(Wrapper, Class);
	  };

	  return _wrapNativeSuper$2(Class);
	}

	function _assertThisInitialized$2(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function createCommonjsModule$9(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$8 = createCommonjsModule$9(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var _ERROR_MESSAGE$2;

	var ERROR_CODE$2;

	(function (ERROR_CODE) {
	  ERROR_CODE[ERROR_CODE["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
	  ERROR_CODE[ERROR_CODE["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
	  ERROR_CODE[ERROR_CODE["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
	  ERROR_CODE[ERROR_CODE["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
	  ERROR_CODE[ERROR_CODE["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
	})(ERROR_CODE$2 || (ERROR_CODE$2 = {}));

	var ERROR_MESSAGE$2 = (_ERROR_MESSAGE$2 = {}, _ERROR_MESSAGE$2[ERROR_CODE$2.PARSE_ERROR] = 'Parse error', _ERROR_MESSAGE$2[ERROR_CODE$2.INVALID_REQUEST] = 'Invalid request', _ERROR_MESSAGE$2[ERROR_CODE$2.METHOD_NOT_FOUND] = 'Method not found', _ERROR_MESSAGE$2[ERROR_CODE$2.INVALID_PARAMS] = 'Invalid params', _ERROR_MESSAGE$2[ERROR_CODE$2.INTERNAL_ERROR] = 'Internal error', _ERROR_MESSAGE$2);
	function isServerError$2(code) {
	  return -32000 >= code && code >= -32099;
	}
	function getErrorMessage$2(code) {
	  var _ERROR_MESSAGE$code$t;

	  return (_ERROR_MESSAGE$code$t = ERROR_MESSAGE$2[code.toString()]) != null ? _ERROR_MESSAGE$code$t : isServerError$2(code) ? 'Server error' : 'Application error';
	}
	var RPCError$2 = /*#__PURE__*/function (_Error) {
	  _inheritsLoose$3(RPCError, _Error);

	  function RPCError(code, message, data) {
	    var _this;

	    _this = _Error.call(this) || this;
	    Object.setPrototypeOf(_assertThisInitialized$2(_this), RPCError.prototype);
	    _this.code = code;
	    _this.data = data;
	    _this.message = message != null ? message : getErrorMessage$2(code);
	    return _this;
	  }

	  RPCError.fromObject = function fromObject(err) {
	    return new RPCError(err.code, err.message, err.data);
	  };

	  var _proto = RPCError.prototype;

	  _proto.toObject = function toObject() {
	    return {
	      code: this.code,
	      data: this.data,
	      message: this.message
	    };
	  };

	  return RPCError;
	}( /*#__PURE__*/_wrapNativeSuper$2(Error));

	function createErrorFactory$2(code) {
	  var message = ERROR_MESSAGE$2[code];
	  return function createError(data) {
	    return new RPCError$2(code, message, data);
	  };
	}

	var createParseError$1 = /*#__PURE__*/createErrorFactory$2(ERROR_CODE$2.PARSE_ERROR);
	var createInvalidRequest$1 = /*#__PURE__*/createErrorFactory$2(ERROR_CODE$2.INVALID_REQUEST);
	var createMethodNotFound$1 = /*#__PURE__*/createErrorFactory$2(ERROR_CODE$2.METHOD_NOT_FOUND);
	var createInvalidParams$1 = /*#__PURE__*/createErrorFactory$2(ERROR_CODE$2.INVALID_PARAMS);
	var createInternalError$1 = /*#__PURE__*/createErrorFactory$2(ERROR_CODE$2.INTERNAL_ERROR);

	var RPCClient$1 = /*#__PURE__*/function () {
	  function RPCClient(connection) {
	    this.connection = connection;
	  }

	  var _proto = RPCClient.prototype;

	  _proto.createID = function createID() {
	    return nanoid();
	  };

	  _proto.request = /*#__PURE__*/function () {
	    var _request = /*#__PURE__*/_asyncToGenerator$8( /*#__PURE__*/runtime_1$8.mark(function _callee(method, params) {
	      var res;
	      return runtime_1$8.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (params === void 0) {
	                params = undefined;
	              }

	              _context.next = 3;
	              return this.connection.send({
	                jsonrpc: '2.0',
	                id: this.createID(),
	                method: method,
	                params: params
	              });

	            case 3:
	              res = _context.sent;

	              if (!(res == null)) {
	                _context.next = 6;
	                break;
	              }

	              throw new Error('Missing response');

	            case 6:
	              if (!(res.error != null)) {
	                _context.next = 8;
	                break;
	              }

	              throw RPCError$2.fromObject(res.error);

	            case 8:
	              return _context.abrupt("return", res.result);

	            case 9:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function request(_x, _x2) {
	      return _request.apply(this, arguments);
	    }

	    return request;
	  }();

	  return RPCClient;
	}();

	function parseJSON$1(input) {
	  try {
	    return JSON.parse(input);
	  } catch (err) {
	    throw createParseError$1();
	  }
	}
	function createErrorResponse$2(id, code) {
	  return {
	    jsonrpc: '2.0',
	    id: id,
	    error: {
	      code: code,
	      message: getErrorMessage$2(code)
	    }
	  };
	}

	function fallbackOnHandlerError$2(_ctx, msg, error) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled handler error', msg, error);
	}

	function fallbackOnInvalidMessage$2(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled invalid message', msg);
	}

	function fallbackOnNotification$2(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled notification', msg);
	} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


	function createHandler$2(methods, options) {
	  var _options$onHandlerErr, _options$onInvalidMes, _options$onNotificati;

	  if (options === void 0) {
	    options = {};
	  }

	  var onHandlerError = (_options$onHandlerErr = options.onHandlerError) != null ? _options$onHandlerErr : fallbackOnHandlerError$2;
	  var onInvalidMessage = (_options$onInvalidMes = options.onInvalidMessage) != null ? _options$onInvalidMes : fallbackOnInvalidMessage$2;
	  var onNotification = (_options$onNotificati = options.onNotification) != null ? _options$onNotificati : fallbackOnNotification$2;
	  return /*#__PURE__*/function () {
	    var _handleRequest = _asyncToGenerator$8( /*#__PURE__*/runtime_1$8.mark(function _callee(ctx, msg) {
	      var id, handler, handled, result, error, _err$code, code;

	      return runtime_1$8.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              id = msg.id;

	              if (!(msg.jsonrpc !== '2.0' || msg.method == null)) {
	                _context.next = 6;
	                break;
	              }

	              if (!(id == null)) {
	                _context.next = 5;
	                break;
	              }

	              onInvalidMessage(ctx, msg);
	              return _context.abrupt("return", null);

	            case 5:
	              return _context.abrupt("return", createErrorResponse$2(id, ERROR_CODE$2.INVALID_REQUEST));

	            case 6:
	              if (!(id == null)) {
	                _context.next = 9;
	                break;
	              }

	              onNotification(ctx, msg);
	              return _context.abrupt("return", null);

	            case 9:
	              handler = methods[msg.method];

	              if (!(handler == null)) {
	                _context.next = 12;
	                break;
	              }

	              return _context.abrupt("return", createErrorResponse$2(id, ERROR_CODE$2.METHOD_NOT_FOUND));

	            case 12:
	              _context.prev = 12;
	              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	              // @ts-ignore params can be undefined
	              handled = handler(ctx, msg.params);

	              if (!(handled == null)) {
	                _context.next = 18;
	                break;
	              }

	              _context.t0 = handled;
	              _context.next = 26;
	              break;

	            case 18:
	              if (!(typeof handled.then === 'function')) {
	                _context.next = 24;
	                break;
	              }

	              _context.next = 21;
	              return handled;

	            case 21:
	              _context.t1 = _context.sent;
	              _context.next = 25;
	              break;

	            case 24:
	              _context.t1 = handled;

	            case 25:
	              _context.t0 = _context.t1;

	            case 26:
	              result = _context.t0;
	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                result: result
	              });

	            case 30:
	              _context.prev = 30;
	              _context.t2 = _context["catch"](12);

	              if (_context.t2 instanceof RPCError$2) {
	                error = _context.t2.toObject();
	              } else {
	                onHandlerError(ctx, msg, _context.t2);
	                code = (_err$code = _context.t2.code) != null ? _err$code : -32000; // Server error

	                error = {
	                  code: code,
	                  message: _context.t2.message || getErrorMessage$2(code)
	                };
	              }

	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                error: error
	              });

	            case 34:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[12, 30]]);
	    }));

	    function handleRequest(_x, _x2) {
	      return _handleRequest.apply(this, arguments);
	    }

	    return handleRequest;
	  }();
	}

	var rpcUtils_esm$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get ERROR_CODE () { return ERROR_CODE$2; },
		ERROR_MESSAGE: ERROR_MESSAGE$2,
		RPCClient: RPCClient$1,
		RPCError: RPCError$2,
		createErrorResponse: createErrorResponse$2,
		createHandler: createHandler$2,
		createInternalError: createInternalError$1,
		createInvalidParams: createInvalidParams$1,
		createInvalidRequest: createInvalidRequest$1,
		createMethodNotFound: createMethodNotFound$1,
		createParseError: createParseError$1,
		getErrorMessage: getErrorMessage$2,
		isServerError: isServerError$2,
		parseJSON: parseJSON$1
	});

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(rpcUtils_esm$1);

	var utils$1 = {};

	var __createBinding$9 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$9 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$9 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
	    __setModuleDefault$9(result, mod);
	    return result;
	};
	Object.defineProperty(utils$1, "__esModule", { value: true });
	utils$1.extractControllers = utils$1.didWithTime = utils$1.fromDagJWS = utils$1.randomString = utils$1.base64urlToJSON = utils$1.decodeBase64 = utils$1.encodeBase64Url = utils$1.encodeBase64 = void 0;
	const u8a = __importStar$9(uint8arrays$7);
	const random_1 = random$2;
	const B64$1 = 'base64pad';
	const B64_URL = 'base64url';
	function encodeBase64(bytes) {
	    return u8a.toString(bytes, B64$1);
	}
	utils$1.encodeBase64 = encodeBase64;
	function encodeBase64Url(bytes) {
	    return u8a.toString(bytes, B64_URL);
	}
	utils$1.encodeBase64Url = encodeBase64Url;
	function decodeBase64(s) {
	    return u8a.fromString(s, B64$1);
	}
	utils$1.decodeBase64 = decodeBase64;
	function base64urlToJSON(s) {
	    return JSON.parse(u8a.toString(u8a.fromString(s, B64_URL)));
	}
	utils$1.base64urlToJSON = base64urlToJSON;
	function randomString() {
	    return u8a.toString(random_1.randomBytes(16), 'base64');
	}
	utils$1.randomString = randomString;
	function fromDagJWS(jws) {
	    if (jws.signatures.length > 1)
	        throw new Error('Cant convert to compact jws');
	    return `${jws.signatures[0].protected}.${jws.payload}.${jws.signatures[0].signature}`;
	}
	utils$1.fromDagJWS = fromDagJWS;
	function didWithTime(did, atTime) {
	    if (atTime) {
	        const versionTime = new Date(atTime).toISOString().split('.')[0] + 'Z';
	        return `${did}?versionTime=${versionTime}`;
	    }
	    else {
	        return did;
	    }
	}
	utils$1.didWithTime = didWithTime;
	function extractControllers(controllerProperty) {
	    if (controllerProperty) {
	        if (Array.isArray(controllerProperty)) {
	            return controllerProperty;
	        }
	        else {
	            return [controllerProperty];
	        }
	    }
	    else {
	        return [];
	    }
	}
	utils$1.extractControllers = extractControllers;

	var __awaiter$4 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(did, "__esModule", { value: true });
	did.DID = void 0;
	const did_resolver_1$1 = require$$7;
	const did_jwt_1 = require$$2$4;
	const dag_jose_utils_1 = lib$6;
	const rpc_utils_1 = require$$3;
	const utils_1$3 = utils$1;
	function isResolver(resolver) {
	    return 'registry' in resolver && 'cache' in resolver;
	}
	class DID {
	    constructor({ provider, resolver = {}, resolverOptions } = {}) {
	        if (provider != null) {
	            this._client = new rpc_utils_1.RPCClient(provider);
	        }
	        this.setResolver(resolver, resolverOptions);
	    }
	    get authenticated() {
	        return this._id != null;
	    }
	    get id() {
	        if (this._id == null) {
	            throw new Error('DID is not authenticated');
	        }
	        return this._id;
	    }
	    setProvider(provider) {
	        if (this._client == null) {
	            this._client = new rpc_utils_1.RPCClient(provider);
	        }
	        else if (this._client.connection !== provider) {
	            throw new Error('A different provider is already set, create a new DID instance to use another provider');
	        }
	    }
	    setResolver(resolver, resolverOptions) {
	        this._resolver = isResolver(resolver) ? resolver : new did_resolver_1$1.Resolver(resolver, resolverOptions);
	    }
	    authenticate({ provider, paths = [], aud } = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            if (provider != null) {
	                this.setProvider(provider);
	            }
	            if (this._client == null) {
	                throw new Error('No provider available');
	            }
	            const nonce = utils_1$3.randomString();
	            const jws = yield this._client.request('did_authenticate', {
	                nonce,
	                aud,
	                paths,
	            });
	            const { kid } = yield this.verifyJWS(jws);
	            const payload = utils_1$3.base64urlToJSON(jws.payload);
	            if (!kid.includes(payload.did))
	                throw new Error('Invalid authencation response, kid mismatch');
	            if (payload.nonce !== nonce)
	                throw new Error('Invalid authencation response, wrong nonce');
	            if (payload.aud !== aud)
	                throw new Error('Invalid authencation response, wrong aud');
	            if (payload.exp < Date.now() / 1000)
	                throw new Error('Invalid authencation response, expired');
	            this._id = payload.did;
	            return this._id;
	        });
	    }
	    createJWS(payload, options = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            if (this._client == null)
	                throw new Error('No provider available');
	            if (this._id == null)
	                throw new Error('DID is not authenticated');
	            const { jws } = yield this._client.request('did_createJWS', Object.assign(Object.assign({ did: this._id }, options), { payload }));
	            return jws;
	        });
	    }
	    createDagJWS(payload, options = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            const { cid, linkedBlock } = yield dag_jose_utils_1.encodePayload(payload);
	            const payloadCid = utils_1$3.encodeBase64Url(cid.bytes);
	            Object.assign(options, { linkedBlock: utils_1$3.encodeBase64(linkedBlock) });
	            const jws = yield this.createJWS(payloadCid, options);
	            jws.link = cid;
	            return { jws, linkedBlock };
	        });
	    }
	    verifyJWS(jws, options = {}) {
	        var _a, _b, _c, _d, _e;
	        return __awaiter$4(this, void 0, void 0, function* () {
	            if (typeof jws !== 'string')
	                jws = utils_1$3.fromDagJWS(jws);
	            const kid = utils_1$3.base64urlToJSON(jws.split('.')[0]).kid;
	            if (!kid)
	                throw new Error('No "kid" found in jws');
	            const didResolutionResult = yield this.resolve(kid);
	            const timecheckEnabled = !options.disableTimecheck;
	            if (timecheckEnabled) {
	                const nextUpdate = (_a = didResolutionResult.didDocumentMetadata) === null || _a === void 0 ? void 0 : _a.nextUpdate;
	                if (nextUpdate) {
	                    const isEarlier = options.atTime && options.atTime < new Date(nextUpdate).valueOf();
	                    const isLater = !isEarlier;
	                    if (isLater) {
	                        throw new Error(`invalid_jws: signature authored with a revoked DID version: ${kid}`);
	                    }
	                }
	                const updated = (_b = didResolutionResult.didDocumentMetadata) === null || _b === void 0 ? void 0 : _b.updated;
	                if (updated && options.atTime && options.atTime < new Date(updated).valueOf()) {
	                    throw new Error(`invalid_jws: signature authored before creation of DID version: ${kid}`);
	                }
	            }
	            const signerDid = (_c = didResolutionResult.didDocument) === null || _c === void 0 ? void 0 : _c.id;
	            if (options.issuer && options.issuer !== signerDid) {
	                const issuerUrl = utils_1$3.didWithTime(options.issuer, options.atTime);
	                const issuerResolution = yield this.resolve(issuerUrl);
	                const controllerProperty = (_d = issuerResolution.didDocument) === null || _d === void 0 ? void 0 : _d.controller;
	                const controllers = utils_1$3.extractControllers(controllerProperty);
	                const signerIsController = signerDid ? controllers.includes(signerDid) : false;
	                if (!signerIsController) {
	                    throw new Error(`invalid_jws: not a valid verificationMethod for issuer: ${kid}`);
	                }
	            }
	            const publicKeys = ((_e = didResolutionResult.didDocument) === null || _e === void 0 ? void 0 : _e.verificationMethod) || [];
	            did_jwt_1.verifyJWS(jws, publicKeys);
	            let payload;
	            try {
	                payload = utils_1$3.base64urlToJSON(jws.split('.')[1]);
	            }
	            catch (e) {
	            }
	            return { kid, payload, didResolutionResult };
	        });
	    }
	    createJWE(cleartext, recipients, options = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            const encrypters = yield did_jwt_1.resolveX25519Encrypters(recipients, this._resolver);
	            return did_jwt_1.createJWE(cleartext, encrypters, options.protectedHeader, options.aad);
	        });
	    }
	    createDagJWE(cleartext, recipients, options = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            return this.createJWE(dag_jose_utils_1.prepareCleartext(cleartext), recipients, options);
	        });
	    }
	    decryptJWE(jwe, options = {}) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            if (this._client == null)
	                throw new Error('No provider available');
	            if (this._id == null)
	                throw new Error('DID is not authenticated');
	            const { cleartext } = yield this._client.request('did_decryptJWE', Object.assign(Object.assign({ did: this._id }, options), { jwe }));
	            return utils_1$3.decodeBase64(cleartext);
	        });
	    }
	    decryptDagJWE(jwe) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            const bytes = yield this.decryptJWE(jwe);
	            return dag_jose_utils_1.decodeCleartext(bytes);
	        });
	    }
	    resolve(didUrl) {
	        return __awaiter$4(this, void 0, void 0, function* () {
	            const result = yield this._resolver.resolve(didUrl);
	            if (result.didResolutionMetadata.error) {
	                const { error, message } = result.didResolutionMetadata;
	                const maybeMessage = message ? `, ${message}` : '';
	                throw new Error(`Failed to resolve ${didUrl}: ${error}${maybeMessage}`);
	            }
	            return result;
	        });
	    }
	}
	did.DID = DID;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(types, exports);
	__exportStar(did, exports);

	}(lib$5));

	var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(threeIdx, "__esModule", { value: true });
	threeIdx.ThreeIDX = void 0;
	const common_1 = lib$e;
	const stream_tile_1 = lib$a;
	const http_client_1$1 = __importDefault$f(ceramicHttpClient);
	const idx_constants_1 = require$$3$1;
	const cids_1 = __importDefault$f(src$5);
	const key_did_resolver_1$2 = __importDefault$f(lib$8);
	const _3id_did_resolver_1$1 = __importDefault$f(lib$7);
	const did_resolver_1 = require$$7;
	const dids_1$2 = lib$5;
	const KEYCHAIN_DEF = idx_constants_1.definitions.threeIdKeychain;
	const IDX$1 = 'IDX';
	const { IdentityIndex, ThreeIdKeychain } = idx_constants_1.schemas;
	const isLegacyDid = (didId) => {
	    try {
	        new cids_1.default(didId);
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	};
	class ThreeIDX {
	    constructor(ceramic) {
	        this.ceramic = ceramic || new http_client_1$1.default();
	        this.docs = {};
	        this._subscriptionSet = new common_1.SubscriptionSet();
	    }
	    setDIDProvider(provider) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const keyDidResolver = key_did_resolver_1$2.default.getResolver();
	            const threeIdResolver = _3id_did_resolver_1$1.default.getResolver(this.ceramic);
	            const resolver = new did_resolver_1.Resolver(Object.assign(Object.assign({}, threeIdResolver), keyDidResolver));
	            const did = new dids_1$2.DID({ provider, resolver });
	            yield did.authenticate();
	            yield this.ceramic.setDID(did);
	        });
	    }
	    setV03ID(did) {
	        this._v03ID = did;
	    }
	    get id() {
	        return this._v03ID || `did:3:${this.docs.threeId.id.baseID.toString()}`;
	    }
	    create3idDoc(docParams) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            this.docs.threeId = yield stream_tile_1.TileDocument.create(this.ceramic, docParams.content, docParams.metadata, {
	                anchor: false,
	                publish: false,
	            });
	            this._subscriptionSet.add(this.docs.threeId.subscribe());
	        });
	    }
	    get3idVersion() {
	        const anchorCommitIds = this.docs.threeId.anchorCommitIds;
	        const docId = anchorCommitIds[anchorCommitIds.length - 1];
	        return docId ? docId.commit.toString() : '0';
	    }
	    loadDoc(name, controller, family) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const stream = yield stream_tile_1.TileDocument.create(this.ceramic, null, { controllers: [controller], family: family, deterministic: true }, { anchor: false, publish: false });
	            this.docs[name] = stream;
	            this._subscriptionSet.add(stream.subscribe());
	            return stream;
	        });
	    }
	    createAuthLinkUpdate({ did }) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const didString = did.id;
	            const tile = yield this.loadDoc(didString, didString, 'authLink');
	            yield this.ceramic.pin.add(tile.id);
	            const commit = yield tile.makeCommit({ did }, { did: this.id });
	            return {
	                commit: commit,
	                docid: tile.id,
	                did: didString,
	            };
	        });
	    }
	    applyAuthLinkUpdate({ docid, commit, did }) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            if (this.docs[did].content !== this.id) {
	                yield this.ceramic.applyCommit(docid, commit);
	                yield this.docs[did].sync();
	            }
	        });
	    }
	    createIDX(newEntry) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const docUpdatePromise = newEntry ? this.createAuthLinkUpdate(newEntry) : Promise.resolve(null);
	            yield Promise.all([
	                this.loadDoc(KEYCHAIN_DEF, this.id, KEYCHAIN_DEF),
	                this.loadDoc('idx', this.id, IDX$1),
	            ]);
	            yield Promise.all([
	                this.pinAllDocs(),
	                this.updateKeychainDoc(newEntry === null || newEntry === void 0 ? void 0 : newEntry.mapEntry),
	                this.addKeychainToIDX(),
	            ]);
	            const docUpdate = yield docUpdatePromise;
	            if (docUpdate) {
	                yield this.applyAuthLinkUpdate(docUpdate);
	            }
	        });
	    }
	    loadIDX(authDid) {
	        var _a;
	        return __awaiter$3(this, void 0, void 0, function* () {
	            yield this.loadDoc(authDid, authDid, 'authLink');
	            const { did } = this.docs[authDid].content;
	            if (!did)
	                return null;
	            yield this.loadAllDocs(did);
	            const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content;
	            return {
	                seed: (_a = authMap[authDid]) === null || _a === void 0 ? void 0 : _a.data,
	                pastSeeds,
	            };
	        });
	    }
	    loadAllDocs(did) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            yield Promise.all([
	                this.load3IDDoc(did),
	                this.loadDoc(KEYCHAIN_DEF, did, KEYCHAIN_DEF),
	                this.loadDoc('idx', did, IDX$1),
	            ]);
	        });
	    }
	    load3IDDoc(did) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const id = did.split(':')[2];
	            if (isLegacyDid(id)) {
	                this._v03ID = did;
	            }
	            else {
	                this.docs.threeId = yield this.ceramic.loadStream(id);
	                this._subscriptionSet.add(this.docs.threeId.subscribe());
	            }
	        });
	    }
	    addAuthEntries(newEntries) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const linkDocUpdatesPromise = Promise.all(newEntries.map(this.createAuthLinkUpdate.bind(this)));
	            const { authMap, pastSeeds } = this.docs[KEYCHAIN_DEF].content;
	            const newAuthEntries = newEntries.reduce((acc, { mapEntry }) => Object.assign(acc, mapEntry), {});
	            Object.assign(authMap, newAuthEntries);
	            yield this.updateKeychainDoc(authMap, pastSeeds);
	            yield Promise.all((yield linkDocUpdatesPromise).map(this.applyAuthLinkUpdate.bind(this)));
	        });
	    }
	    getAuthMap() {
	        if (!this.docs[KEYCHAIN_DEF] || !this.docs[KEYCHAIN_DEF].content.authMap)
	            return {};
	        return this.docs[KEYCHAIN_DEF].content.authMap;
	    }
	    pinAllDocs() {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            yield Promise.all(Object.values(this.docs).map((doc) => __awaiter$3(this, void 0, void 0, function* () {
	                yield this.ceramic.pin.add(doc.id);
	            })));
	        });
	    }
	    addKeychainToIDX() {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            const content = this.docs.idx.content;
	            if (!content || !content[KEYCHAIN_DEF]) {
	                const nextContent = Object.assign(content || {}, {
	                    [KEYCHAIN_DEF]: this.docs[KEYCHAIN_DEF].id.toUrl(),
	                });
	                const nextMetadata = this.docs.idx.metadata.schema ? undefined : { schema: IdentityIndex };
	                yield this.docs.idx.update(nextContent, nextMetadata);
	            }
	        });
	    }
	    updateKeychainDoc(authMap = {}, pastSeeds = []) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            if (Object.keys(authMap).length !== 0) {
	                const update = { content: { authMap, pastSeeds } };
	                if (!this.docs[KEYCHAIN_DEF].metadata.schema) {
	                    update.metadata = { schema: ThreeIdKeychain };
	                }
	                yield this.docs[KEYCHAIN_DEF].update(update.content, update.metadata);
	                yield this.docs[KEYCHAIN_DEF].sync();
	            }
	        });
	    }
	    rotateKeys(threeIdState, pastSeeds, authMap) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            if (!threeIdState.content)
	                throw new Error('Content has to be defined');
	            const currentController = this.docs.threeId.controllers[0];
	            const didKey = new Proxy(this.ceramic.did, {
	                get(target, prop, receiver) {
	                    if (prop === 'createJWS') {
	                        return (payload, options = {}) => {
	                            return target.createJWS(payload, Object.assign({}, options, { did: currentController }));
	                        };
	                    }
	                    else {
	                        return Reflect.get(target, prop, receiver);
	                    }
	                },
	            });
	            const originalDid = this.ceramic.did;
	            this.ceramic.did = didKey;
	            yield this.docs.threeId.update(Object.assign(Object.assign({}, this.docs.threeId.content), { publicKeys: threeIdState.content.publicKeys }), threeIdState.metadata);
	            this.ceramic.did = originalDid;
	            yield Promise.all([this.updateKeychainDoc(authMap, pastSeeds), this.pinAllDocs()]);
	        });
	    }
	}
	threeIdx.ThreeIDX = ThreeIDX;

	var permissions = {};

	var assign = make_assign();
	var create$1 = make_create();
	var trim$1 = make_trim();
	var Global$5 = (typeof window !== 'undefined' ? window : commonjsGlobal);

	var util$7 = {
		assign: assign,
		create: create$1,
		trim: trim$1,
		bind: bind$1,
		slice: slice$1,
		each: each$7,
		map: map$1,
		pluck: pluck$2,
		isList: isList$1,
		isFunction: isFunction$2,
		isObject: isObject$4,
		Global: Global$5
	};

	function make_assign() {
		if (Object.assign) {
			return Object.assign
		} else {
			return function shimAssign(obj, props1, props2, etc) {
				for (var i = 1; i < arguments.length; i++) {
					each$7(Object(arguments[i]), function(val, key) {
						obj[key] = val;
					});
				}			
				return obj
			}
		}
	}

	function make_create() {
		if (Object.create) {
			return function create(obj, assignProps1, assignProps2, etc) {
				var assignArgsList = slice$1(arguments, 1);
				return assign.apply(this, [Object.create(obj)].concat(assignArgsList))
			}
		} else {
			function F() {} // eslint-disable-line no-inner-declarations
			return function create(obj, assignProps1, assignProps2, etc) {
				var assignArgsList = slice$1(arguments, 1);
				F.prototype = obj;
				return assign.apply(this, [new F()].concat(assignArgsList))
			}
		}
	}

	function make_trim() {
		if (String.prototype.trim) {
			return function trim(str) {
				return String.prototype.trim.call(str)
			}
		} else {
			return function trim(str) {
				return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '')
			}
		}
	}

	function bind$1(obj, fn) {
		return function() {
			return fn.apply(obj, Array.prototype.slice.call(arguments, 0))
		}
	}

	function slice$1(arr, index) {
		return Array.prototype.slice.call(arr, index || 0)
	}

	function each$7(obj, fn) {
		pluck$2(obj, function(val, key) {
			fn(val, key);
			return false
		});
	}

	function map$1(obj, fn) {
		var res = (isList$1(obj) ? [] : {});
		pluck$2(obj, function(v, k) {
			res[k] = fn(v, k);
			return false
		});
		return res
	}

	function pluck$2(obj, fn) {
		if (isList$1(obj)) {
			for (var i=0; i<obj.length; i++) {
				if (fn(obj[i], i)) {
					return obj[i]
				}
			}
		} else {
			for (var key in obj) {
				if (obj.hasOwnProperty(key)) {
					if (fn(obj[key], key)) {
						return obj[key]
					}
				}
			}
		}
	}

	function isList$1(val) {
		return (val != null && typeof val != 'function' && typeof val.length == 'number')
	}

	function isFunction$2(val) {
		return val && {}.toString.call(val) === '[object Function]'
	}

	function isObject$4(val) {
		return val && {}.toString.call(val) === '[object Object]'
	}

	var util$6 = util$7;
	var slice = util$6.slice;
	var pluck$1 = util$6.pluck;
	var each$6 = util$6.each;
	var bind = util$6.bind;
	var create = util$6.create;
	var isList = util$6.isList;
	var isFunction$1 = util$6.isFunction;
	var isObject$3 = util$6.isObject;

	var storeEngine = {
		createStore: createStore
	};

	var storeAPI = {
		version: '2.0.12',
		enabled: false,
		
		// get returns the value of the given key. If that value
		// is undefined, it returns optionalDefaultValue instead.
		get: function(key, optionalDefaultValue) {
			var data = this.storage.read(this._namespacePrefix + key);
			return this._deserialize(data, optionalDefaultValue)
		},

		// set will store the given value at key and returns value.
		// Calling set with value === undefined is equivalent to calling remove.
		set: function(key, value) {
			if (value === undefined) {
				return this.remove(key)
			}
			this.storage.write(this._namespacePrefix + key, this._serialize(value));
			return value
		},

		// remove deletes the key and value stored at the given key.
		remove: function(key) {
			this.storage.remove(this._namespacePrefix + key);
		},

		// each will call the given callback once for each key-value pair
		// in this store.
		each: function(callback) {
			var self = this;
			this.storage.each(function(val, namespacedKey) {
				callback.call(self, self._deserialize(val), (namespacedKey || '').replace(self._namespaceRegexp, ''));
			});
		},

		// clearAll will remove all the stored key-value pairs in this store.
		clearAll: function() {
			this.storage.clearAll();
		},

		// additional functionality that can't live in plugins
		// ---------------------------------------------------

		// hasNamespace returns true if this store instance has the given namespace.
		hasNamespace: function(namespace) {
			return (this._namespacePrefix == '__storejs_'+namespace+'_')
		},

		// createStore creates a store.js instance with the first
		// functioning storage in the list of storage candidates,
		// and applies the the given mixins to the instance.
		createStore: function() {
			return createStore.apply(this, arguments)
		},
		
		addPlugin: function(plugin) {
			this._addPlugin(plugin);
		},
		
		namespace: function(namespace) {
			return createStore(this.storage, this.plugins, namespace)
		}
	};

	function _warn() {
		var _console = (typeof console == 'undefined' ? null : console);
		if (!_console) { return }
		var fn = (_console.warn ? _console.warn : _console.log);
		fn.apply(_console, arguments);
	}

	function createStore(storages, plugins, namespace) {
		if (!namespace) {
			namespace = '';
		}
		if (storages && !isList(storages)) {
			storages = [storages];
		}
		if (plugins && !isList(plugins)) {
			plugins = [plugins];
		}

		var namespacePrefix = (namespace ? '__storejs_'+namespace+'_' : '');
		var namespaceRegexp = (namespace ? new RegExp('^'+namespacePrefix) : null);
		var legalNamespaces = /^[a-zA-Z0-9_\-]*$/; // alpha-numeric + underscore and dash
		if (!legalNamespaces.test(namespace)) {
			throw new Error('store.js namespaces can only have alphanumerics + underscores and dashes')
		}
		
		var _privateStoreProps = {
			_namespacePrefix: namespacePrefix,
			_namespaceRegexp: namespaceRegexp,

			_testStorage: function(storage) {
				try {
					var testStr = '__storejs__test__';
					storage.write(testStr, testStr);
					var ok = (storage.read(testStr) === testStr);
					storage.remove(testStr);
					return ok
				} catch(e) {
					return false
				}
			},

			_assignPluginFnProp: function(pluginFnProp, propName) {
				var oldFn = this[propName];
				this[propName] = function pluginFn() {
					var args = slice(arguments, 0);
					var self = this;

					// super_fn calls the old function which was overwritten by
					// this mixin.
					function super_fn() {
						if (!oldFn) { return }
						each$6(arguments, function(arg, i) {
							args[i] = arg;
						});
						return oldFn.apply(self, args)
					}

					// Give mixing function access to super_fn by prefixing all mixin function
					// arguments with super_fn.
					var newFnArgs = [super_fn].concat(args);

					return pluginFnProp.apply(self, newFnArgs)
				};
			},

			_serialize: function(obj) {
				return JSON.stringify(obj)
			},

			_deserialize: function(strVal, defaultVal) {
				if (!strVal) { return defaultVal }
				// It is possible that a raw string value has been previously stored
				// in a storage without using store.js, meaning it will be a raw
				// string value instead of a JSON serialized string. By defaulting
				// to the raw string value in case of a JSON parse error, we allow
				// for past stored values to be forwards-compatible with store.js
				var val = '';
				try { val = JSON.parse(strVal); }
				catch(e) { val = strVal; }

				return (val !== undefined ? val : defaultVal)
			},
			
			_addStorage: function(storage) {
				if (this.enabled) { return }
				if (this._testStorage(storage)) {
					this.storage = storage;
					this.enabled = true;
				}
			},

			_addPlugin: function(plugin) {
				var self = this;

				// If the plugin is an array, then add all plugins in the array.
				// This allows for a plugin to depend on other plugins.
				if (isList(plugin)) {
					each$6(plugin, function(plugin) {
						self._addPlugin(plugin);
					});
					return
				}

				// Keep track of all plugins we've seen so far, so that we
				// don't add any of them twice.
				var seenPlugin = pluck$1(this.plugins, function(seenPlugin) {
					return (plugin === seenPlugin)
				});
				if (seenPlugin) {
					return
				}
				this.plugins.push(plugin);

				// Check that the plugin is properly formed
				if (!isFunction$1(plugin)) {
					throw new Error('Plugins must be function values that return objects')
				}

				var pluginProperties = plugin.call(this);
				if (!isObject$3(pluginProperties)) {
					throw new Error('Plugins must return an object of function properties')
				}

				// Add the plugin function properties to this store instance.
				each$6(pluginProperties, function(pluginFnProp, propName) {
					if (!isFunction$1(pluginFnProp)) {
						throw new Error('Bad plugin property: '+propName+' from plugin '+plugin.name+'. Plugins should only return functions.')
					}
					self._assignPluginFnProp(pluginFnProp, propName);
				});
			},
			
			// Put deprecated properties in the private API, so as to not expose it to accidential
			// discovery through inspection of the store object.
			
			// Deprecated: addStorage
			addStorage: function(storage) {
				_warn('store.addStorage(storage) is deprecated. Use createStore([storages])');
				this._addStorage(storage);
			}
		};

		var store = create(_privateStoreProps, storeAPI, {
			plugins: []
		});
		store.raw = {};
		each$6(store, function(prop, propName) {
			if (isFunction$1(prop)) {
				store.raw[propName] = bind(store, prop);			
			}
		});
		each$6(storages, function(storage) {
			store._addStorage(storage);
		});
		each$6(plugins, function(plugin) {
			store._addPlugin(plugin);
		});
		return store
	}

	var util$5 = util$7;
	var Global$4 = util$5.Global;

	var localStorage_1 = {
		name: 'localStorage',
		read: read$5,
		write: write$5,
		each: each$5,
		remove: remove$5,
		clearAll: clearAll$5,
	};

	function localStorage() {
		return Global$4.localStorage
	}

	function read$5(key) {
		return localStorage().getItem(key)
	}

	function write$5(key, data) {
		return localStorage().setItem(key, data)
	}

	function each$5(fn) {
		for (var i = localStorage().length - 1; i >= 0; i--) {
			var key = localStorage().key(i);
			fn(read$5(key), key);
		}
	}

	function remove$5(key) {
		return localStorage().removeItem(key)
	}

	function clearAll$5() {
		return localStorage().clear()
	}

	// oldFF-globalStorage provides storage for Firefox
	// versions 6 and 7, where no localStorage, etc
	// is available.

	var util$4 = util$7;
	var Global$3 = util$4.Global;

	var oldFFGlobalStorage = {
		name: 'oldFF-globalStorage',
		read: read$4,
		write: write$4,
		each: each$4,
		remove: remove$4,
		clearAll: clearAll$4,
	};

	var globalStorage = Global$3.globalStorage;

	function read$4(key) {
		return globalStorage[key]
	}

	function write$4(key, data) {
		globalStorage[key] = data;
	}

	function each$4(fn) {
		for (var i = globalStorage.length - 1; i >= 0; i--) {
			var key = globalStorage.key(i);
			fn(globalStorage[key], key);
		}
	}

	function remove$4(key) {
		return globalStorage.removeItem(key)
	}

	function clearAll$4() {
		each$4(function(key, _) {
			delete globalStorage[key];
		});
	}

	// oldIE-userDataStorage provides storage for Internet Explorer
	// versions 6 and 7, where no localStorage, sessionStorage, etc
	// is available.

	var util$3 = util$7;
	var Global$2 = util$3.Global;

	var oldIEUserDataStorage = {
		name: 'oldIE-userDataStorage',
		write: write$3,
		read: read$3,
		each: each$3,
		remove: remove$3,
		clearAll: clearAll$3,
	};

	var storageName = 'storejs';
	var doc$1 = Global$2.document;
	var _withStorageEl = _makeIEStorageElFunction();
	var disable = (Global$2.navigator ? Global$2.navigator.userAgent : '').match(/ (MSIE 8|MSIE 9|MSIE 10)\./); // MSIE 9.x, MSIE 10.x

	function write$3(unfixedKey, data) {
		if (disable) { return }
		var fixedKey = fixKey(unfixedKey);
		_withStorageEl(function(storageEl) {
			storageEl.setAttribute(fixedKey, data);
			storageEl.save(storageName);
		});
	}

	function read$3(unfixedKey) {
		if (disable) { return }
		var fixedKey = fixKey(unfixedKey);
		var res = null;
		_withStorageEl(function(storageEl) {
			res = storageEl.getAttribute(fixedKey);
		});
		return res
	}

	function each$3(callback) {
		_withStorageEl(function(storageEl) {
			var attributes = storageEl.XMLDocument.documentElement.attributes;
			for (var i=attributes.length-1; i>=0; i--) {
				var attr = attributes[i];
				callback(storageEl.getAttribute(attr.name), attr.name);
			}
		});
	}

	function remove$3(unfixedKey) {
		var fixedKey = fixKey(unfixedKey);
		_withStorageEl(function(storageEl) {
			storageEl.removeAttribute(fixedKey);
			storageEl.save(storageName);
		});
	}

	function clearAll$3() {
		_withStorageEl(function(storageEl) {
			var attributes = storageEl.XMLDocument.documentElement.attributes;
			storageEl.load(storageName);
			for (var i=attributes.length-1; i>=0; i--) {
				storageEl.removeAttribute(attributes[i].name);
			}
			storageEl.save(storageName);
		});
	}

	// Helpers
	//////////

	// In IE7, keys cannot start with a digit or contain certain chars.
	// See https://github.com/marcuswestin/store.js/issues/40
	// See https://github.com/marcuswestin/store.js/issues/83
	var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g");
	function fixKey(key) {
		return key.replace(/^\d/, '___$&').replace(forbiddenCharsRegex, '___')
	}

	function _makeIEStorageElFunction() {
		if (!doc$1 || !doc$1.documentElement || !doc$1.documentElement.addBehavior) {
			return null
		}
		var scriptTag = 'script',
			storageOwner,
			storageContainer,
			storageEl;

		// Since #userData storage applies only to specific paths, we need to
		// somehow link our data to a specific path.  We choose /favicon.ico
		// as a pretty safe option, since all browsers already make a request to
		// this URL anyway and being a 404 will not hurt us here.  We wrap an
		// iframe pointing to the favicon in an ActiveXObject(htmlfile) object
		// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
		// since the iframe access rules appear to allow direct access and
		// manipulation of the document element, even for a 404 page.  This
		// document can be used instead of the current document (which would
		// have been limited to the current path) to perform #userData storage.
		try {
			/* global ActiveXObject */
			storageContainer = new ActiveXObject('htmlfile');
			storageContainer.open();
			storageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src="/favicon.ico"></iframe>');
			storageContainer.close();
			storageOwner = storageContainer.w.frames[0].document;
			storageEl = storageOwner.createElement('div');
		} catch(e) {
			// somehow ActiveXObject instantiation failed (perhaps some special
			// security settings or otherwse), fall back to per-path storage
			storageEl = doc$1.createElement('div');
			storageOwner = doc$1.body;
		}

		return function(storeFunction) {
			var args = [].slice.call(arguments, 0);
			args.unshift(storageEl);
			// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
			// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
			storageOwner.appendChild(storageEl);
			storageEl.addBehavior('#default#userData');
			storageEl.load(storageName);
			storeFunction.apply(this, args);
			storageOwner.removeChild(storageEl);
			return
		}
	}

	// cookieStorage is useful Safari private browser mode, where localStorage
	// doesn't work but cookies do. This implementation is adopted from
	// https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage

	var util$2 = util$7;
	var Global$1 = util$2.Global;
	var trim = util$2.trim;

	var cookieStorage = {
		name: 'cookieStorage',
		read: read$2,
		write: write$2,
		each: each$2,
		remove: remove$2,
		clearAll: clearAll$2,
	};

	var doc = Global$1.document;

	function read$2(key) {
		if (!key || !_has(key)) { return null }
		var regexpStr = "(?:^|.*;\\s*)" +
			escape(key).replace(/[\-\.\+\*]/g, "\\$&") +
			"\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*";
		return unescape(doc.cookie.replace(new RegExp(regexpStr), "$1"))
	}

	function each$2(callback) {
		var cookies = doc.cookie.split(/; ?/g);
		for (var i = cookies.length - 1; i >= 0; i--) {
			if (!trim(cookies[i])) {
				continue
			}
			var kvp = cookies[i].split('=');
			var key = unescape(kvp[0]);
			var val = unescape(kvp[1]);
			callback(val, key);
		}
	}

	function write$2(key, data) {
		if(!key) { return }
		doc.cookie = escape(key) + "=" + escape(data) + "; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=/";
	}

	function remove$2(key) {
		if (!key || !_has(key)) {
			return
		}
		doc.cookie = escape(key) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
	}

	function clearAll$2() {
		each$2(function(_, key) {
			remove$2(key);
		});
	}

	function _has(key) {
		return (new RegExp("(?:^|;\\s*)" + escape(key).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(doc.cookie)
	}

	var util$1 = util$7;
	var Global = util$1.Global;

	var sessionStorage_1 = {
		name: 'sessionStorage',
		read: read$1,
		write: write$1,
		each: each$1,
		remove: remove$1,
		clearAll: clearAll$1
	};

	function sessionStorage() {
		return Global.sessionStorage
	}

	function read$1(key) {
		return sessionStorage().getItem(key)
	}

	function write$1(key, data) {
		return sessionStorage().setItem(key, data)
	}

	function each$1(fn) {
		for (var i = sessionStorage().length - 1; i >= 0; i--) {
			var key = sessionStorage().key(i);
			fn(read$1(key), key);
		}
	}

	function remove$1(key) {
		return sessionStorage().removeItem(key)
	}

	function clearAll$1() {
		return sessionStorage().clear()
	}

	// memoryStorage is a useful last fallback to ensure that the store
	// is functions (meaning store.get(), store.set(), etc will all function).
	// However, stored values will not persist when the browser navigates to
	// a new page or reloads the current page.

	var memoryStorage_1 = {
		name: 'memoryStorage',
		read: read,
		write: write,
		each: each,
		remove: remove,
		clearAll: clearAll,
	};

	var memoryStorage = {};

	function read(key) {
		return memoryStorage[key]
	}

	function write(key, data) {
		memoryStorage[key] = data;
	}

	function each(callback) {
		for (var key in memoryStorage) {
			if (memoryStorage.hasOwnProperty(key)) {
				callback(memoryStorage[key], key);
			}
		}
	}

	function remove(key) {
		delete memoryStorage[key];
	}

	function clearAll(key) {
		memoryStorage = {};
	}

	var all = [
		// Listed in order of usage preference
		localStorage_1,
		oldFFGlobalStorage,
		oldIEUserDataStorage,
		cookieStorage,
		sessionStorage_1,
		memoryStorage_1
	];

	/* eslint-disable */

	//  json2.js
	//  2016-10-28
	//  Public Domain.
	//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	//  See http://www.JSON.org/js.html
	//  This code should be minified before deployment.
	//  See http://javascript.crockford.com/jsmin.html

	//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
	//  NOT CONTROL.

	//  This file creates a global JSON object containing two methods: stringify
	//  and parse. This file provides the ES5 JSON capability to ES3 systems.
	//  If a project might run on IE8 or earlier, then this file should be included.
	//  This file does nothing on ES5 systems.

	//      JSON.stringify(value, replacer, space)
	//          value       any JavaScript value, usually an object or array.
	//          replacer    an optional parameter that determines how object
	//                      values are stringified for objects. It can be a
	//                      function or an array of strings.
	//          space       an optional parameter that specifies the indentation
	//                      of nested structures. If it is omitted, the text will
	//                      be packed without extra whitespace. If it is a number,
	//                      it will specify the number of spaces to indent at each
	//                      level. If it is a string (such as "\t" or "&nbsp;"),
	//                      it contains the characters used to indent at each level.
	//          This method produces a JSON text from a JavaScript value.
	//          When an object value is found, if the object contains a toJSON
	//          method, its toJSON method will be called and the result will be
	//          stringified. A toJSON method does not serialize: it returns the
	//          value represented by the name/value pair that should be serialized,
	//          or undefined if nothing should be serialized. The toJSON method
	//          will be passed the key associated with the value, and this will be
	//          bound to the value.

	//          For example, this would serialize Dates as ISO strings.

	//              Date.prototype.toJSON = function (key) {
	//                  function f(n) {
	//                      // Format integers to have at least two digits.
	//                      return (n < 10)
	//                          ? "0" + n
	//                          : n;
	//                  }
	//                  return this.getUTCFullYear()   + "-" +
	//                       f(this.getUTCMonth() + 1) + "-" +
	//                       f(this.getUTCDate())      + "T" +
	//                       f(this.getUTCHours())     + ":" +
	//                       f(this.getUTCMinutes())   + ":" +
	//                       f(this.getUTCSeconds())   + "Z";
	//              };

	//          You can provide an optional replacer method. It will be passed the
	//          key and value of each member, with this bound to the containing
	//          object. The value that is returned from your method will be
	//          serialized. If your method returns undefined, then the member will
	//          be excluded from the serialization.

	//          If the replacer parameter is an array of strings, then it will be
	//          used to select the members to be serialized. It filters the results
	//          such that only members with keys listed in the replacer array are
	//          stringified.

	//          Values that do not have JSON representations, such as undefined or
	//          functions, will not be serialized. Such values in objects will be
	//          dropped; in arrays they will be replaced with null. You can use
	//          a replacer function to replace those with JSON values.

	//          JSON.stringify(undefined) returns undefined.

	//          The optional space parameter produces a stringification of the
	//          value that is filled with line breaks and indentation to make it
	//          easier to read.

	//          If the space parameter is a non-empty string, then that string will
	//          be used for indentation. If the space parameter is a number, then
	//          the indentation will be that many spaces.

	//          Example:

	//          text = JSON.stringify(["e", {pluribus: "unum"}]);
	//          // text is '["e",{"pluribus":"unum"}]'

	//          text = JSON.stringify(["e", {pluribus: "unum"}], null, "\t");
	//          // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

	//          text = JSON.stringify([new Date()], function (key, value) {
	//              return this[key] instanceof Date
	//                  ? "Date(" + this[key] + ")"
	//                  : value;
	//          });
	//          // text is '["Date(---current time---)"]'

	//      JSON.parse(text, reviver)
	//          This method parses a JSON text to produce an object or array.
	//          It can throw a SyntaxError exception.

	//          The optional reviver parameter is a function that can filter and
	//          transform the results. It receives each of the keys and values,
	//          and its return value is used instead of the original value.
	//          If it returns what it received, then the structure is not modified.
	//          If it returns undefined then the member is deleted.

	//          Example:

	//          // Parse the text. Values that look like ISO date strings will
	//          // be converted to Date objects.

	//          myData = JSON.parse(text, function (key, value) {
	//              var a;
	//              if (typeof value === "string") {
	//                  a =
	//   /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
	//                  if (a) {
	//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
	//                          +a[5], +a[6]));
	//                  }
	//              }
	//              return value;
	//          });

	//          myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
	//              var d;
	//              if (typeof value === "string" &&
	//                      value.slice(0, 5) === "Date(" &&
	//                      value.slice(-1) === ")") {
	//                  d = new Date(value.slice(5, -1));
	//                  if (d) {
	//                      return d;
	//                  }
	//              }
	//              return value;
	//          });

	//  This is a reference implementation. You are free to copy, modify, or
	//  redistribute.

	/*jslint
	    eval, for, this
	*/

	/*property
	    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
	    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
	    lastIndex, length, parse, prototype, push, replace, slice, stringify,
	    test, toJSON, toString, valueOf
	*/


	// Create a JSON object only if one does not already exist. We create the
	// methods in a closure to avoid creating global variables.

	if (typeof JSON !== "object") {
	    JSON = {};
	}

	(function () {

	    var rx_one = /^[\],:{}\s]*$/;
	    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
	    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
	    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

	    function f(n) {
	        // Format integers to have at least two digits.
	        return n < 10
	            ? "0" + n
	            : n;
	    }

	    function this_value() {
	        return this.valueOf();
	    }

	    if (typeof Date.prototype.toJSON !== "function") {

	        Date.prototype.toJSON = function () {

	            return isFinite(this.valueOf())
	                ? this.getUTCFullYear() + "-" +
	                        f(this.getUTCMonth() + 1) + "-" +
	                        f(this.getUTCDate()) + "T" +
	                        f(this.getUTCHours()) + ":" +
	                        f(this.getUTCMinutes()) + ":" +
	                        f(this.getUTCSeconds()) + "Z"
	                : null;
	        };

	        Boolean.prototype.toJSON = this_value;
	        Number.prototype.toJSON = this_value;
	        String.prototype.toJSON = this_value;
	    }

	    var gap;
	    var indent;
	    var meta;
	    var rep;


	    function quote(string) {

	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.

	        rx_escapable.lastIndex = 0;
	        return rx_escapable.test(string)
	            ? "\"" + string.replace(rx_escapable, function (a) {
	                var c = meta[a];
	                return typeof c === "string"
	                    ? c
	                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	            }) + "\""
	            : "\"" + string + "\"";
	    }


	    function str(key, holder) {

	// Produce a string from holder[key].

	        var i;          // The loop counter.
	        var k;          // The member key.
	        var v;          // The member value.
	        var length;
	        var mind = gap;
	        var partial;
	        var value = holder[key];

	// If the value has a toJSON method, call it to obtain a replacement value.

	        if (value && typeof value === "object" &&
	                typeof value.toJSON === "function") {
	            value = value.toJSON(key);
	        }

	// If we were called with a replacer function, then call the replacer to
	// obtain a replacement value.

	        if (typeof rep === "function") {
	            value = rep.call(holder, key, value);
	        }

	// What happens next depends on the value's type.

	        switch (typeof value) {
	        case "string":
	            return quote(value);

	        case "number":

	// JSON numbers must be finite. Encode non-finite numbers as null.

	            return isFinite(value)
	                ? String(value)
	                : "null";

	        case "boolean":
	        case "null":

	// If the value is a boolean or null, convert it to a string. Note:
	// typeof null does not produce "null". The case is included here in
	// the remote chance that this gets fixed someday.

	            return String(value);

	// If the type is "object", we might be dealing with an object or an array or
	// null.

	        case "object":

	// Due to a specification blunder in ECMAScript, typeof null is "object",
	// so watch out for that case.

	            if (!value) {
	                return "null";
	            }

	// Make an array to hold the partial results of stringifying this object value.

	            gap += indent;
	            partial = [];

	// Is the value an array?

	            if (Object.prototype.toString.apply(value) === "[object Array]") {

	// The value is an array. Stringify every element. Use null as a placeholder
	// for non-JSON values.

	                length = value.length;
	                for (i = 0; i < length; i += 1) {
	                    partial[i] = str(i, value) || "null";
	                }

	// Join all of the elements together, separated with commas, and wrap them in
	// brackets.

	                v = partial.length === 0
	                    ? "[]"
	                    : gap
	                        ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
	                        : "[" + partial.join(",") + "]";
	                gap = mind;
	                return v;
	            }

	// If the replacer is an array, use it to select the members to be stringified.

	            if (rep && typeof rep === "object") {
	                length = rep.length;
	                for (i = 0; i < length; i += 1) {
	                    if (typeof rep[i] === "string") {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (
	                                gap
	                                    ? ": "
	                                    : ":"
	                            ) + v);
	                        }
	                    }
	                }
	            } else {

	// Otherwise, iterate through all of the keys in the object.

	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (
	                                gap
	                                    ? ": "
	                                    : ":"
	                            ) + v);
	                        }
	                    }
	                }
	            }

	// Join all of the member texts together, separated with commas,
	// and wrap them in braces.

	            v = partial.length === 0
	                ? "{}"
	                : gap
	                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
	                    : "{" + partial.join(",") + "}";
	            gap = mind;
	            return v;
	        }
	    }

	// If the JSON object does not yet have a stringify method, give it one.

	    if (typeof JSON.stringify !== "function") {
	        meta = {    // table of character substitutions
	            "\b": "\\b",
	            "\t": "\\t",
	            "\n": "\\n",
	            "\f": "\\f",
	            "\r": "\\r",
	            "\"": "\\\"",
	            "\\": "\\\\"
	        };
	        JSON.stringify = function (value, replacer, space) {

	// The stringify method takes a value and an optional replacer, and an optional
	// space parameter, and returns a JSON text. The replacer can be a function
	// that can replace values, or an array of strings that will select the keys.
	// A default replacer method can be provided. Use of the space parameter can
	// produce text that is more easily readable.

	            var i;
	            gap = "";
	            indent = "";

	// If the space parameter is a number, make an indent string containing that
	// many spaces.

	            if (typeof space === "number") {
	                for (i = 0; i < space; i += 1) {
	                    indent += " ";
	                }

	// If the space parameter is a string, it will be used as the indent string.

	            } else if (typeof space === "string") {
	                indent = space;
	            }

	// If there is a replacer, it must be a function or an array.
	// Otherwise, throw an error.

	            rep = replacer;
	            if (replacer && typeof replacer !== "function" &&
	                    (typeof replacer !== "object" ||
	                    typeof replacer.length !== "number")) {
	                throw new Error("JSON.stringify");
	            }

	// Make a fake root object containing our value under the key of "".
	// Return the result of stringifying the value.

	            return str("", {"": value});
	        };
	    }


	// If the JSON object does not yet have a parse method, give it one.

	    if (typeof JSON.parse !== "function") {
	        JSON.parse = function (text, reviver) {

	// The parse method takes a text and an optional reviver function, and returns
	// a JavaScript value if the text is a valid JSON text.

	            var j;

	            function walk(holder, key) {

	// The walk method is used to recursively walk the resulting structure so
	// that modifications can be made.

	                var k;
	                var v;
	                var value = holder[key];
	                if (value && typeof value === "object") {
	                    for (k in value) {
	                        if (Object.prototype.hasOwnProperty.call(value, k)) {
	                            v = walk(value, k);
	                            if (v !== undefined) {
	                                value[k] = v;
	                            } else {
	                                delete value[k];
	                            }
	                        }
	                    }
	                }
	                return reviver.call(holder, key, value);
	            }


	// Parsing happens in four stages. In the first stage, we replace certain
	// Unicode characters with escape sequences. JavaScript handles many characters
	// incorrectly, either silently deleting them, or treating them as line endings.

	            text = String(text);
	            rx_dangerous.lastIndex = 0;
	            if (rx_dangerous.test(text)) {
	                text = text.replace(rx_dangerous, function (a) {
	                    return "\\u" +
	                            ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	                });
	            }

	// In the second stage, we run the text against regular expressions that look
	// for non-JSON patterns. We are especially concerned with "()" and "new"
	// because they can cause invocation, and "=" because it can cause mutation.
	// But just to be safe, we want to reject all unexpected forms.

	// We split the second stage into 4 regexp operations in order to work around
	// crippling inefficiencies in IE's and Safari's regexp engines. First we
	// replace the JSON backslash pairs with "@" (a non-JSON character). Second, we
	// replace all simple value tokens with "]" characters. Third, we delete all
	// open brackets that follow a colon or comma or that begin the text. Finally,
	// we look to see that the remaining characters are only whitespace or "]" or
	// "," or ":" or "{" or "}". If that is so, then the text is safe for eval.

	            if (
	                rx_one.test(
	                    text
	                        .replace(rx_two, "@")
	                        .replace(rx_three, "]")
	                        .replace(rx_four, "")
	                )
	            ) {

	// In the third stage we use the eval function to compile the text into a
	// JavaScript structure. The "{" operator is subject to a syntactic ambiguity
	// in JavaScript: it can begin a block or an object literal. We wrap the text
	// in parens to eliminate the ambiguity.

	                j = eval("(" + text + ")");

	// In the optional fourth stage, we recursively walk the new structure, passing
	// each name/value pair to a reviver function for possible transformation.

	                return (typeof reviver === "function")
	                    ? walk({"": j}, "")
	                    : j;
	            }

	// If the text is not JSON parseable, then a SyntaxError is thrown.

	            throw new SyntaxError("JSON.parse");
	        };
	    }
	}());

	var json2 = json2Plugin;

	function json2Plugin() {
		
		return {}
	}

	var engine = storeEngine;

	var storages = all;
	var plugins = [json2];

	var store_legacy = engine.createStore(storages, plugins);

	(function (exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SELF_ORIGIN = void 0;
	const store_1 = __importDefault(store_legacy);
	exports.SELF_ORIGIN = '__IDW_ORIGIN';
	const storageKey = (origin, did) => {
	    if (!origin)
	        origin = '__NULL_ORIGIN';
	    return `3id_permission_${did}_${origin}`;
	};
	class Permissions {
	    constructor(getPermission) {
	        this.getPermission = getPermission;
	        this.did = null;
	        if (typeof this.getPermission !== 'function') {
	            throw new Error('getPermission parameter has to be a function');
	        }
	    }
	    setDID(did) {
	        this.did = did;
	    }
	    request(origin, paths = []) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.has(origin, paths)) {
	                return paths;
	            }
	            else {
	                const given = yield this.getPermission({
	                    type: 'authenticate',
	                    origin,
	                    payload: { paths },
	                });
	                const existing = this.get(origin);
	                const union = existing
	                    ? existing.concat(given ? given.filter((e) => !existing.includes(e)) : [])
	                    : given;
	                this.set(origin, union);
	                return given;
	            }
	        });
	    }
	    has(origin, paths = []) {
	        if (origin === exports.SELF_ORIGIN)
	            return true;
	        const currentPaths = this.get(origin);
	        return paths.reduce((acc, path) => {
	            return acc && Boolean(currentPaths === null || currentPaths === void 0 ? void 0 : currentPaths.includes(path));
	        }, Boolean(currentPaths));
	    }
	    get(origin) {
	        if (!this.did)
	            throw new Error('DID not set');
	        return store_1.default.get(storageKey(origin, this.did));
	    }
	    set(origin, paths) {
	        if (!this.did)
	            throw new Error('DID not set');
	        store_1.default.set(storageKey(origin, this.did), paths);
	    }
	}
	exports.default = Permissions;

	}(permissions));

	var keychain = {};

	function asyncGeneratorStep$7(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$7(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$7(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$7(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _inheritsLoose$2(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf$1(o) {
	  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$1(o);
	}

	function _setPrototypeOf$2(o, p) {
	  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$2(o, p);
	}

	function _isNativeReflectConstruct$1() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct$1(Parent, args, Class) {
	  if (_isNativeReflectConstruct$1()) {
	    _construct$1 = Reflect.construct;
	  } else {
	    _construct$1 = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$2(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct$1.apply(null, arguments);
	}

	function _isNativeFunction$1(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper$1(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper$1 = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction$1(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct$1(Class, arguments, _getPrototypeOf$1(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$2(Wrapper, Class);
	  };

	  return _wrapNativeSuper$1(Class);
	}

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function createCommonjsModule$8(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$7 = createCommonjsModule$8(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var _ERROR_MESSAGE$1;

	var ERROR_CODE$1;

	(function (ERROR_CODE) {
	  ERROR_CODE[ERROR_CODE["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
	  ERROR_CODE[ERROR_CODE["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
	  ERROR_CODE[ERROR_CODE["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
	  ERROR_CODE[ERROR_CODE["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
	  ERROR_CODE[ERROR_CODE["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
	})(ERROR_CODE$1 || (ERROR_CODE$1 = {}));

	var ERROR_MESSAGE$1 = (_ERROR_MESSAGE$1 = {}, _ERROR_MESSAGE$1[ERROR_CODE$1.PARSE_ERROR] = 'Parse error', _ERROR_MESSAGE$1[ERROR_CODE$1.INVALID_REQUEST] = 'Invalid request', _ERROR_MESSAGE$1[ERROR_CODE$1.METHOD_NOT_FOUND] = 'Method not found', _ERROR_MESSAGE$1[ERROR_CODE$1.INVALID_PARAMS] = 'Invalid params', _ERROR_MESSAGE$1[ERROR_CODE$1.INTERNAL_ERROR] = 'Internal error', _ERROR_MESSAGE$1);
	function isServerError$1(code) {
	  return -32000 >= code && code >= -32099;
	}
	function getErrorMessage$1(code) {
	  var _ERROR_MESSAGE$code$t;

	  return (_ERROR_MESSAGE$code$t = ERROR_MESSAGE$1[code.toString()]) != null ? _ERROR_MESSAGE$code$t : isServerError$1(code) ? 'Server error' : 'Application error';
	}
	var RPCError$1 = /*#__PURE__*/function (_Error) {
	  _inheritsLoose$2(RPCError, _Error);

	  function RPCError(code, message, data) {
	    var _this;

	    _this = _Error.call(this) || this;
	    Object.setPrototypeOf(_assertThisInitialized$1(_this), RPCError.prototype);
	    _this.code = code;
	    _this.data = data;
	    _this.message = message != null ? message : getErrorMessage$1(code);
	    return _this;
	  }

	  RPCError.fromObject = function fromObject(err) {
	    return new RPCError(err.code, err.message, err.data);
	  };

	  var _proto = RPCError.prototype;

	  _proto.toObject = function toObject() {
	    return {
	      code: this.code,
	      data: this.data,
	      message: this.message
	    };
	  };

	  return RPCError;
	}( /*#__PURE__*/_wrapNativeSuper$1(Error));

	function createErrorFactory$1(code) {
	  var message = ERROR_MESSAGE$1[code];
	  return function createError(data) {
	    return new RPCError$1(code, message, data);
	  };
	}

	/*#__PURE__*/createErrorFactory$1(ERROR_CODE$1.PARSE_ERROR);
	/*#__PURE__*/createErrorFactory$1(ERROR_CODE$1.INVALID_REQUEST);
	/*#__PURE__*/createErrorFactory$1(ERROR_CODE$1.METHOD_NOT_FOUND);
	/*#__PURE__*/createErrorFactory$1(ERROR_CODE$1.INVALID_PARAMS);
	/*#__PURE__*/createErrorFactory$1(ERROR_CODE$1.INTERNAL_ERROR);
	function createErrorResponse$1(id, code) {
	  return {
	    jsonrpc: '2.0',
	    id: id,
	    error: {
	      code: code,
	      message: getErrorMessage$1(code)
	    }
	  };
	}

	function fallbackOnHandlerError$1(_ctx, msg, error) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled handler error', msg, error);
	}

	function fallbackOnInvalidMessage$1(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled invalid message', msg);
	}

	function fallbackOnNotification$1(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled notification', msg);
	} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


	function createHandler$1(methods, options) {
	  var _options$onHandlerErr, _options$onInvalidMes, _options$onNotificati;

	  if (options === void 0) {
	    options = {};
	  }

	  var onHandlerError = (_options$onHandlerErr = options.onHandlerError) != null ? _options$onHandlerErr : fallbackOnHandlerError$1;
	  var onInvalidMessage = (_options$onInvalidMes = options.onInvalidMessage) != null ? _options$onInvalidMes : fallbackOnInvalidMessage$1;
	  var onNotification = (_options$onNotificati = options.onNotification) != null ? _options$onNotificati : fallbackOnNotification$1;
	  return /*#__PURE__*/function () {
	    var _handleRequest = _asyncToGenerator$7( /*#__PURE__*/runtime_1$7.mark(function _callee(ctx, msg) {
	      var id, handler, handled, result, error, _err$code, code;

	      return runtime_1$7.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              id = msg.id;

	              if (!(msg.jsonrpc !== '2.0' || msg.method == null)) {
	                _context.next = 6;
	                break;
	              }

	              if (!(id == null)) {
	                _context.next = 5;
	                break;
	              }

	              onInvalidMessage(ctx, msg);
	              return _context.abrupt("return", null);

	            case 5:
	              return _context.abrupt("return", createErrorResponse$1(id, ERROR_CODE$1.INVALID_REQUEST));

	            case 6:
	              if (!(id == null)) {
	                _context.next = 9;
	                break;
	              }

	              onNotification(ctx, msg);
	              return _context.abrupt("return", null);

	            case 9:
	              handler = methods[msg.method];

	              if (!(handler == null)) {
	                _context.next = 12;
	                break;
	              }

	              return _context.abrupt("return", createErrorResponse$1(id, ERROR_CODE$1.METHOD_NOT_FOUND));

	            case 12:
	              _context.prev = 12;
	              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	              // @ts-ignore params can be undefined
	              handled = handler(ctx, msg.params);

	              if (!(handled == null)) {
	                _context.next = 18;
	                break;
	              }

	              _context.t0 = handled;
	              _context.next = 26;
	              break;

	            case 18:
	              if (!(typeof handled.then === 'function')) {
	                _context.next = 24;
	                break;
	              }

	              _context.next = 21;
	              return handled;

	            case 21:
	              _context.t1 = _context.sent;
	              _context.next = 25;
	              break;

	            case 24:
	              _context.t1 = handled;

	            case 25:
	              _context.t0 = _context.t1;

	            case 26:
	              result = _context.t0;
	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                result: result
	              });

	            case 30:
	              _context.prev = 30;
	              _context.t2 = _context["catch"](12);

	              if (_context.t2 instanceof RPCError$1) {
	                error = _context.t2.toObject();
	              } else {
	                onHandlerError(ctx, msg, _context.t2);
	                code = (_err$code = _context.t2.code) != null ? _err$code : -32000; // Server error

	                error = {
	                  code: code,
	                  message: _context.t2.message || getErrorMessage$1(code)
	                };
	              }

	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                error: error
	              });

	            case 34:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[12, 30]]);
	    }));

	    function handleRequest(_x, _x2) {
	      return _handleRequest.apply(this, arguments);
	    }

	    return handleRequest;
	  }();
	}

	function asyncGeneratorStep$6(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$6(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$6(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$6(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  return Constructor;
	}

	function createCommonjsModule$7(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$6 = createCommonjsModule$7(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var B64 = 'base64pad';

	function toStableObject(obj) {
	  return JSON.parse(fastJsonStableStringify(obj));
	}

	function encodeDID(publicKey) {
	  var bytes = new Uint8Array(publicKey.length + 2);
	  bytes[0] = 0xed; // ed25519 multicodec
	  // The multicodec is encoded as a varint so we need to add this.
	  // See js-multicodec for a general implementation

	  bytes[1] = 0x01;
	  bytes.set(publicKey, 2);
	  return "did:key:z" + uint8arrays$7.toString(bytes, 'base58btc');
	}

	function toGeneralJWS(jws) {
	  var _jws$split = jws.split('.'),
	      protectedHeader = _jws$split[0],
	      payload = _jws$split[1],
	      signature = _jws$split[2];

	  return {
	    payload: payload,
	    signatures: [{
	      "protected": protectedHeader,
	      signature: signature
	    }]
	  };
	}

	var sign = /*#__PURE__*/function () {
	  var _ref = /*#__PURE__*/_asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee(payload, did, secretKey, protectedHeader) {
	    var kid, signer, header;
	    return runtime_1$6.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (protectedHeader === void 0) {
	              protectedHeader = {};
	            }

	            kid = did + "#" + did.split(':')[2];
	            signer = NaclSigner(uint8arrays$7.toString(secretKey, B64));
	            header = toStableObject(Object.assign(protectedHeader, {
	              kid: kid,
	              alg: 'EdDSA'
	            }));
	            return _context.abrupt("return", createJWS(toStableObject(payload), signer, header));

	          case 5:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee);
	  }));

	  return function sign(_x, _x2, _x3, _x4) {
	    return _ref.apply(this, arguments);
	  };
	}();

	var didMethods = {
	  did_authenticate: /*#__PURE__*/function () {
	    var _did_authenticate = /*#__PURE__*/_asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee2(_ref2, params) {
	      var did, secretKey, response;
	      return runtime_1$6.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              did = _ref2.did, secretKey = _ref2.secretKey;
	              _context2.next = 3;
	              return sign({
	                did: did,
	                aud: params.aud,
	                nonce: params.nonce,
	                paths: params.paths,
	                exp: Math.floor(Date.now() / 1000) + 600
	              }, did, secretKey);

	            case 3:
	              response = _context2.sent;
	              return _context2.abrupt("return", toGeneralJWS(response));

	            case 5:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function did_authenticate(_x5, _x6) {
	      return _did_authenticate.apply(this, arguments);
	    }

	    return did_authenticate;
	  }(),
	  did_createJWS: /*#__PURE__*/function () {
	    var _did_createJWS = /*#__PURE__*/_asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee3(_ref3, params) {
	      var did, secretKey, requestDid, jws;
	      return runtime_1$6.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              did = _ref3.did, secretKey = _ref3.secretKey;
	              requestDid = params.did.split('#')[0];

	              if (!(requestDid !== did)) {
	                _context3.next = 4;
	                break;
	              }

	              throw new RPCError$1(4100, "Unknown DID: " + did);

	            case 4:
	              _context3.next = 6;
	              return sign(params.payload, did, secretKey, params["protected"]);

	            case 6:
	              jws = _context3.sent;
	              return _context3.abrupt("return", {
	                jws: toGeneralJWS(jws)
	              });

	            case 8:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3);
	    }));

	    function did_createJWS(_x7, _x8) {
	      return _did_createJWS.apply(this, arguments);
	    }

	    return did_createJWS;
	  }(),
	  did_decryptJWE: /*#__PURE__*/function () {
	    var _did_decryptJWE = /*#__PURE__*/_asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee4(_ref4, params) {
	      var secretKey, decrypter, bytes;
	      return runtime_1$6.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              secretKey = _ref4.secretKey;
	              decrypter = x25519Decrypter(ed25519$1.convertSecretKeyToX25519(secretKey));
	              _context4.prev = 2;
	              _context4.next = 5;
	              return decryptJWE(params.jwe, decrypter);

	            case 5:
	              bytes = _context4.sent;
	              return _context4.abrupt("return", {
	                cleartext: uint8arrays$7.toString(bytes, B64)
	              });

	            case 9:
	              _context4.prev = 9;
	              _context4.t0 = _context4["catch"](2);
	              throw new RPCError$1(-32000, _context4.t0.message);

	            case 12:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4, null, [[2, 9]]);
	    }));

	    function did_decryptJWE(_x9, _x10) {
	      return _did_decryptJWE.apply(this, arguments);
	    }

	    return did_decryptJWE;
	  }()
	};
	var Ed25519Provider = /*#__PURE__*/function () {
	  function Ed25519Provider(seed) {
	    var _generateKeyPairFromS = ed25519$1.generateKeyPairFromSeed(seed),
	        secretKey = _generateKeyPairFromS.secretKey,
	        publicKey = _generateKeyPairFromS.publicKey;

	    var did = encodeDID(publicKey);
	    var handler = createHandler$1(didMethods);

	    this._handle = /*#__PURE__*/function () {
	      var _ref5 = _asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee5(msg) {
	        return runtime_1$6.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                _context5.next = 2;
	                return handler({
	                  did: did,
	                  secretKey: secretKey
	                }, msg);

	              case 2:
	                return _context5.abrupt("return", _context5.sent);

	              case 3:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5);
	      }));

	      return function (_x11) {
	        return _ref5.apply(this, arguments);
	      };
	    }();
	  }

	  var _proto = Ed25519Provider.prototype;

	  _proto.send = /*#__PURE__*/function () {
	    var _send = /*#__PURE__*/_asyncToGenerator$6( /*#__PURE__*/runtime_1$6.mark(function _callee6(msg) {
	      return runtime_1$6.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              _context6.next = 2;
	              return this._handle(msg);

	            case 2:
	              return _context6.abrupt("return", _context6.sent);

	            case 3:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));

	    function send(_x12) {
	      return _send.apply(this, arguments);
	    }

	    return send;
	  }();

	  _createClass$1(Ed25519Provider, [{
	    key: "isDidProvider",
	    get: function get() {
	      return true;
	    }
	  }]);

	  return Ed25519Provider;
	}();

	var keyDidProviderEd25519_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Ed25519Provider: Ed25519Provider,
		encodeDID: encodeDID
	});

	var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(keyDidProviderEd25519_esm);

	var keyring = {};

	const version$b = "logger/5.5.0";

	let _permanentCensorErrors = false;
	let _censorErrors = false;
	const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
	let _logLevel = LogLevels["default"];
	let _globalLogger = null;
	function _checkNormalize() {
	    try {
	        const missing = [];
	        // Make sure all forms of normalization are supported
	        ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
	            try {
	                if ("test".normalize(form) !== "test") {
	                    throw new Error("bad normalize");
	                }
	                ;
	            }
	            catch (error) {
	                missing.push(form);
	            }
	        });
	        if (missing.length) {
	            throw new Error("missing " + missing.join(", "));
	        }
	        if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
	            throw new Error("broken implementation");
	        }
	    }
	    catch (error) {
	        return error.message;
	    }
	    return null;
	}
	const _normalizeError = _checkNormalize();
	var LogLevel;
	(function (LogLevel) {
	    LogLevel["DEBUG"] = "DEBUG";
	    LogLevel["INFO"] = "INFO";
	    LogLevel["WARNING"] = "WARNING";
	    LogLevel["ERROR"] = "ERROR";
	    LogLevel["OFF"] = "OFF";
	})(LogLevel || (LogLevel = {}));
	var ErrorCode;
	(function (ErrorCode) {
	    ///////////////////
	    // Generic Errors
	    // Unknown Error
	    ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
	    // Not Implemented
	    ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
	    // Unsupported Operation
	    //   - operation
	    ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
	    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
	    //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
	    ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
	    // Some sort of bad response from the server
	    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
	    // Timeout
	    ErrorCode["TIMEOUT"] = "TIMEOUT";
	    ///////////////////
	    // Operational  Errors
	    // Buffer Overrun
	    ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
	    // Numeric Fault
	    //   - operation: the operation being executed
	    //   - fault: the reason this faulted
	    ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
	    ///////////////////
	    // Argument Errors
	    // Missing new operator to an object
	    //  - name: The name of the class
	    ErrorCode["MISSING_NEW"] = "MISSING_NEW";
	    // Invalid argument (e.g. value is incompatible with type) to a function:
	    //   - argument: The argument name that was invalid
	    //   - value: The value of the argument
	    ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
	    // Missing argument to a function:
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
	    // Too many arguments
	    //   - count: The number of arguments received
	    //   - expectedCount: The number of arguments expected
	    ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
	    ///////////////////
	    // Blockchain Errors
	    // Call exception
	    //  - transaction: the transaction
	    //  - address?: the contract address
	    //  - args?: The arguments passed into the function
	    //  - method?: The Solidity method signature
	    //  - errorSignature?: The EIP848 error signature
	    //  - errorArgs?: The EIP848 error parameters
	    //  - reason: The reason (only for EIP848 "Error(string)")
	    ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
	    // Insufficient funds (< value + gasLimit * gasPrice)
	    //   - transaction: the transaction attempted
	    ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
	    // Nonce has already been used
	    //   - transaction: the transaction attempted
	    ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
	    // The replacement fee for the transaction is too low
	    //   - transaction: the transaction attempted
	    ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
	    // The gas limit could not be estimated
	    //   - transaction: the transaction passed to estimateGas
	    ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
	    // The transaction was replaced by one with a higher gas price
	    //   - reason: "cancelled", "replaced" or "repriced"
	    //   - cancelled: true if reason == "cancelled" or reason == "replaced")
	    //   - hash: original transaction hash
	    //   - replacement: the full TransactionsResponse for the replacement
	    //   - receipt: the receipt of the replacement
	    ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
	})(ErrorCode || (ErrorCode = {}));
	const HEX = "0123456789abcdef";
	class Logger {
	    constructor(version) {
	        Object.defineProperty(this, "version", {
	            enumerable: true,
	            value: version,
	            writable: false
	        });
	    }
	    _log(logLevel, args) {
	        const level = logLevel.toLowerCase();
	        if (LogLevels[level] == null) {
	            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
	        }
	        if (_logLevel > LogLevels[level]) {
	            return;
	        }
	        console.log.apply(console, args);
	    }
	    debug(...args) {
	        this._log(Logger.levels.DEBUG, args);
	    }
	    info(...args) {
	        this._log(Logger.levels.INFO, args);
	    }
	    warn(...args) {
	        this._log(Logger.levels.WARNING, args);
	    }
	    makeError(message, code, params) {
	        // Errors are being censored
	        if (_censorErrors) {
	            return this.makeError("censored error", code, {});
	        }
	        if (!code) {
	            code = Logger.errors.UNKNOWN_ERROR;
	        }
	        if (!params) {
	            params = {};
	        }
	        const messageDetails = [];
	        Object.keys(params).forEach((key) => {
	            const value = params[key];
	            try {
	                if (value instanceof Uint8Array) {
	                    let hex = "";
	                    for (let i = 0; i < value.length; i++) {
	                        hex += HEX[value[i] >> 4];
	                        hex += HEX[value[i] & 0x0f];
	                    }
	                    messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
	                }
	                else {
	                    messageDetails.push(key + "=" + JSON.stringify(value));
	                }
	            }
	            catch (error) {
	                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
	            }
	        });
	        messageDetails.push(`code=${code}`);
	        messageDetails.push(`version=${this.version}`);
	        const reason = message;
	        if (messageDetails.length) {
	            message += " (" + messageDetails.join(", ") + ")";
	        }
	        // @TODO: Any??
	        const error = new Error(message);
	        error.reason = reason;
	        error.code = code;
	        Object.keys(params).forEach(function (key) {
	            error[key] = params[key];
	        });
	        return error;
	    }
	    throwError(message, code, params) {
	        throw this.makeError(message, code, params);
	    }
	    throwArgumentError(message, name, value) {
	        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
	            argument: name,
	            value: value
	        });
	    }
	    assert(condition, message, code, params) {
	        if (!!condition) {
	            return;
	        }
	        this.throwError(message, code, params);
	    }
	    assertArgument(condition, message, name, value) {
	        if (!!condition) {
	            return;
	        }
	        this.throwArgumentError(message, name, value);
	    }
	    checkNormalize(message) {
	        if (_normalizeError) {
	            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "String.prototype.normalize", form: _normalizeError
	            });
	        }
	    }
	    checkSafeUint53(value, message) {
	        if (typeof (value) !== "number") {
	            return;
	        }
	        if (message == null) {
	            message = "value not safe";
	        }
	        if (value < 0 || value >= 0x1fffffffffffff) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "out-of-safe-range",
	                value: value
	            });
	        }
	        if (value % 1) {
	            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
	                operation: "checkSafeInteger",
	                fault: "non-integer",
	                value: value
	            });
	        }
	    }
	    checkArgumentCount(count, expectedCount, message) {
	        if (message) {
	            message = ": " + message;
	        }
	        else {
	            message = "";
	        }
	        if (count < expectedCount) {
	            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	        if (count > expectedCount) {
	            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
	                count: count,
	                expectedCount: expectedCount
	            });
	        }
	    }
	    checkNew(target, kind) {
	        if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    checkAbstract(target, kind) {
	        if (target === kind) {
	            this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
	        }
	        else if (target === Object || target == null) {
	            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
	        }
	    }
	    static globalLogger() {
	        if (!_globalLogger) {
	            _globalLogger = new Logger(version$b);
	        }
	        return _globalLogger;
	    }
	    static setCensorship(censorship, permanent) {
	        if (!censorship && permanent) {
	            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        if (_permanentCensorErrors) {
	            if (!censorship) {
	                return;
	            }
	            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "setCensorship"
	            });
	        }
	        _censorErrors = !!censorship;
	        _permanentCensorErrors = !!permanent;
	    }
	    static setLogLevel(logLevel) {
	        const level = LogLevels[logLevel.toLowerCase()];
	        if (level == null) {
	            Logger.globalLogger().warn("invalid log level - " + logLevel);
	            return;
	        }
	        _logLevel = level;
	    }
	    static from(version) {
	        return new Logger(version);
	    }
	}
	Logger.errors = ErrorCode;
	Logger.levels = LogLevel;

	const version$a = "bytes/5.5.0";

	const logger$7 = new Logger(version$a);
	///////////////////////////////
	function isHexable(value) {
	    return !!(value.toHexString);
	}
	function addSlice(array) {
	    if (array.slice) {
	        return array;
	    }
	    array.slice = function () {
	        const args = Array.prototype.slice.call(arguments);
	        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
	    };
	    return array;
	}
	function isBytesLike(value) {
	    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
	}
	function isInteger(value) {
	    return (typeof (value) === "number" && value == value && (value % 1) === 0);
	}
	function isBytes(value) {
	    if (value == null) {
	        return false;
	    }
	    if (value.constructor === Uint8Array) {
	        return true;
	    }
	    if (typeof (value) === "string") {
	        return false;
	    }
	    if (!isInteger(value.length) || value.length < 0) {
	        return false;
	    }
	    for (let i = 0; i < value.length; i++) {
	        const v = value[i];
	        if (!isInteger(v) || v < 0 || v >= 256) {
	            return false;
	        }
	    }
	    return true;
	}
	function arrayify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$7.checkSafeUint53(value, "invalid arrayify value");
	        const result = [];
	        while (value) {
	            result.unshift(value & 0xff);
	            value = parseInt(String(value / 256));
	        }
	        if (result.length === 0) {
	            result.push(0);
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        value = value.toHexString();
	    }
	    if (isHexString(value)) {
	        let hex = value.substring(2);
	        if (hex.length % 2) {
	            if (options.hexPad === "left") {
	                hex = "0x0" + hex.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                hex += "0";
	            }
	            else {
	                logger$7.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        const result = [];
	        for (let i = 0; i < hex.length; i += 2) {
	            result.push(parseInt(hex.substring(i, i + 2), 16));
	        }
	        return addSlice(new Uint8Array(result));
	    }
	    if (isBytes(value)) {
	        return addSlice(new Uint8Array(value));
	    }
	    return logger$7.throwArgumentError("invalid arrayify value", "value", value);
	}
	function concat$2(items) {
	    const objects = items.map(item => arrayify(item));
	    const length = objects.reduce((accum, item) => (accum + item.length), 0);
	    const result = new Uint8Array(length);
	    objects.reduce((offset, object) => {
	        result.set(object, offset);
	        return offset + object.length;
	    }, 0);
	    return addSlice(result);
	}
	function zeroPad(value, length) {
	    value = arrayify(value);
	    if (value.length > length) {
	        logger$7.throwArgumentError("value out of range", "value", arguments[0]);
	    }
	    const result = new Uint8Array(length);
	    result.set(value, length - value.length);
	    return addSlice(result);
	}
	function isHexString(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (length && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    return true;
	}
	const HexCharacters = "0123456789abcdef";
	function hexlify(value, options) {
	    if (!options) {
	        options = {};
	    }
	    if (typeof (value) === "number") {
	        logger$7.checkSafeUint53(value, "invalid hexlify value");
	        let hex = "";
	        while (value) {
	            hex = HexCharacters[value & 0xf] + hex;
	            value = Math.floor(value / 16);
	        }
	        if (hex.length) {
	            if (hex.length % 2) {
	                hex = "0" + hex;
	            }
	            return "0x" + hex;
	        }
	        return "0x00";
	    }
	    if (typeof (value) === "bigint") {
	        value = value.toString(16);
	        if (value.length % 2) {
	            return ("0x0" + value);
	        }
	        return "0x" + value;
	    }
	    if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    if (isHexable(value)) {
	        return value.toHexString();
	    }
	    if (isHexString(value)) {
	        if (value.length % 2) {
	            if (options.hexPad === "left") {
	                value = "0x0" + value.substring(2);
	            }
	            else if (options.hexPad === "right") {
	                value += "0";
	            }
	            else {
	                logger$7.throwArgumentError("hex data is odd-length", "value", value);
	            }
	        }
	        return value.toLowerCase();
	    }
	    if (isBytes(value)) {
	        let result = "0x";
	        for (let i = 0; i < value.length; i++) {
	            let v = value[i];
	            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	        }
	        return result;
	    }
	    return logger$7.throwArgumentError("invalid hexlify value", "value", value);
	}
	function hexDataSlice(data, offset, endOffset) {
	    if (typeof (data) !== "string") {
	        data = hexlify(data);
	    }
	    else if (!isHexString(data) || (data.length % 2)) {
	        logger$7.throwArgumentError("invalid hexData", "value", data);
	    }
	    offset = 2 + 2 * offset;
	    if (endOffset != null) {
	        return "0x" + data.substring(offset, 2 + 2 * endOffset);
	    }
	    return "0x" + data.substring(offset);
	}
	function hexZeroPad(value, length) {
	    if (typeof (value) !== "string") {
	        value = hexlify(value);
	    }
	    else if (!isHexString(value)) {
	        logger$7.throwArgumentError("invalid hex string", "value", value);
	    }
	    if (value.length > 2 * length + 2) {
	        logger$7.throwArgumentError("value out of range", "value", arguments[1]);
	    }
	    while (value.length < 2 * length + 2) {
	        value = "0x0" + value.substring(2);
	    }
	    return value;
	}
	function splitSignature(signature) {
	    const result = {
	        r: "0x",
	        s: "0x",
	        _vs: "0x",
	        recoveryParam: 0,
	        v: 0
	    };
	    if (isBytesLike(signature)) {
	        const bytes = arrayify(signature);
	        if (bytes.length !== 65) {
	            logger$7.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
	        }
	        // Get the r, s and v
	        result.r = hexlify(bytes.slice(0, 32));
	        result.s = hexlify(bytes.slice(32, 64));
	        result.v = bytes[64];
	        // Allow a recid to be used as the v
	        if (result.v < 27) {
	            if (result.v === 0 || result.v === 1) {
	                result.v += 27;
	            }
	            else {
	                logger$7.throwArgumentError("signature invalid v byte", "signature", signature);
	            }
	        }
	        // Compute recoveryParam from v
	        result.recoveryParam = 1 - (result.v % 2);
	        // Compute _vs from recoveryParam and s
	        if (result.recoveryParam) {
	            bytes[32] |= 0x80;
	        }
	        result._vs = hexlify(bytes.slice(32, 64));
	    }
	    else {
	        result.r = signature.r;
	        result.s = signature.s;
	        result.v = signature.v;
	        result.recoveryParam = signature.recoveryParam;
	        result._vs = signature._vs;
	        // If the _vs is available, use it to populate missing s, v and recoveryParam
	        // and verify non-missing s, v and recoveryParam
	        if (result._vs != null) {
	            const vs = zeroPad(arrayify(result._vs), 32);
	            result._vs = hexlify(vs);
	            // Set or check the recid
	            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
	            if (result.recoveryParam == null) {
	                result.recoveryParam = recoveryParam;
	            }
	            else if (result.recoveryParam !== recoveryParam) {
	                logger$7.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
	            }
	            // Set or check the s
	            vs[0] &= 0x7f;
	            const s = hexlify(vs);
	            if (result.s == null) {
	                result.s = s;
	            }
	            else if (result.s !== s) {
	                logger$7.throwArgumentError("signature v mismatch _vs", "signature", signature);
	            }
	        }
	        // Use recid and v to populate each other
	        if (result.recoveryParam == null) {
	            if (result.v == null) {
	                logger$7.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
	            }
	            else if (result.v === 0 || result.v === 1) {
	                result.recoveryParam = result.v;
	            }
	            else {
	                result.recoveryParam = 1 - (result.v % 2);
	            }
	        }
	        else {
	            if (result.v == null) {
	                result.v = 27 + result.recoveryParam;
	            }
	            else {
	                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
	                if (result.recoveryParam !== recId) {
	                    logger$7.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
	                }
	            }
	        }
	        if (result.r == null || !isHexString(result.r)) {
	            logger$7.throwArgumentError("signature missing or invalid r", "signature", signature);
	        }
	        else {
	            result.r = hexZeroPad(result.r, 32);
	        }
	        if (result.s == null || !isHexString(result.s)) {
	            logger$7.throwArgumentError("signature missing or invalid s", "signature", signature);
	        }
	        else {
	            result.s = hexZeroPad(result.s, 32);
	        }
	        const vs = arrayify(result.s);
	        if (vs[0] >= 128) {
	            logger$7.throwArgumentError("signature s out of range", "signature", signature);
	        }
	        if (result.recoveryParam) {
	            vs[0] |= 0x80;
	        }
	        const _vs = hexlify(vs);
	        if (result._vs) {
	            if (!isHexString(result._vs)) {
	                logger$7.throwArgumentError("signature invalid _vs", "signature", signature);
	            }
	            result._vs = hexZeroPad(result._vs, 32);
	        }
	        // Set or check the _vs
	        if (result._vs == null) {
	            result._vs = _vs;
	        }
	        else if (result._vs !== _vs) {
	            logger$7.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
	        }
	    }
	    return result;
	}

	const version$9 = "properties/5.5.0";

	(undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	new Logger(version$9);
	function defineReadOnly(object, name, value) {
	    Object.defineProperty(object, name, {
	        enumerable: true,
	        value: value,
	        writable: false,
	    });
	}

	/**
	 * var basex = require("base-x");
	 *
	 * This implementation is heavily based on base-x. The main reason to
	 * deviate was to prevent the dependency of Buffer.
	 *
	 * Contributors:
	 *
	 * base-x encoding
	 * Forked from https://github.com/cryptocoinjs/bs58
	 * Originally written by Mike Hearn for BitcoinJ
	 * Copyright (c) 2011 Google Inc
	 * Ported to JavaScript by Stefan Thomas
	 * Merged Buffer refactorings from base58-native by Stephen Pair
	 * Copyright (c) 2013 BitPay Inc
	 *
	 * The MIT License (MIT)
	 *
	 * Copyright base-x contributors (c) 2016
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.

	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 * IN THE SOFTWARE.
	 *
	 */
	class BaseX {
	    constructor(alphabet) {
	        defineReadOnly(this, "alphabet", alphabet);
	        defineReadOnly(this, "base", alphabet.length);
	        defineReadOnly(this, "_alphabetMap", {});
	        defineReadOnly(this, "_leader", alphabet.charAt(0));
	        // pre-compute lookup table
	        for (let i = 0; i < alphabet.length; i++) {
	            this._alphabetMap[alphabet.charAt(i)] = i;
	        }
	    }
	    encode(value) {
	        let source = arrayify(value);
	        if (source.length === 0) {
	            return "";
	        }
	        let digits = [0];
	        for (let i = 0; i < source.length; ++i) {
	            let carry = source[i];
	            for (let j = 0; j < digits.length; ++j) {
	                carry += digits[j] << 8;
	                digits[j] = carry % this.base;
	                carry = (carry / this.base) | 0;
	            }
	            while (carry > 0) {
	                digits.push(carry % this.base);
	                carry = (carry / this.base) | 0;
	            }
	        }
	        let string = "";
	        // deal with leading zeros
	        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
	            string += this._leader;
	        }
	        // convert digits to a string
	        for (let q = digits.length - 1; q >= 0; --q) {
	            string += this.alphabet[digits[q]];
	        }
	        return string;
	    }
	    decode(value) {
	        if (typeof (value) !== "string") {
	            throw new TypeError("Expected String");
	        }
	        let bytes = [];
	        if (value.length === 0) {
	            return new Uint8Array(bytes);
	        }
	        bytes.push(0);
	        for (let i = 0; i < value.length; i++) {
	            let byte = this._alphabetMap[value[i]];
	            if (byte === undefined) {
	                throw new Error("Non-base" + this.base + " character");
	            }
	            let carry = byte;
	            for (let j = 0; j < bytes.length; ++j) {
	                carry += bytes[j] * this.base;
	                bytes[j] = carry & 0xff;
	                carry >>= 8;
	            }
	            while (carry > 0) {
	                bytes.push(carry & 0xff);
	                carry >>= 8;
	            }
	        }
	        // deal with leading zeros
	        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
	            bytes.push(0);
	        }
	        return arrayify(new Uint8Array(bytes.reverse()));
	    }
	}
	new BaseX("abcdefghijklmnopqrstuvwxyz234567");
	const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
	//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
	//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

	const version$8 = "bignumber/5.5.0";

	var BN = BN$9.BN;
	const logger$6 = new Logger(version$8);
	const _constructorGuard$1 = {};
	const MAX_SAFE = 0x1fffffffffffff;
	// Only warn about passing 10 into radix once
	let _warnedToStringRadix = false;
	class BigNumber {
	    constructor(constructorGuard, hex) {
	        logger$6.checkNew(new.target, BigNumber);
	        if (constructorGuard !== _constructorGuard$1) {
	            logger$6.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
	                operation: "new (BigNumber)"
	            });
	        }
	        this._hex = hex;
	        this._isBigNumber = true;
	        Object.freeze(this);
	    }
	    fromTwos(value) {
	        return toBigNumber(toBN(this).fromTwos(value));
	    }
	    toTwos(value) {
	        return toBigNumber(toBN(this).toTwos(value));
	    }
	    abs() {
	        if (this._hex[0] === "-") {
	            return BigNumber.from(this._hex.substring(1));
	        }
	        return this;
	    }
	    add(other) {
	        return toBigNumber(toBN(this).add(toBN(other)));
	    }
	    sub(other) {
	        return toBigNumber(toBN(this).sub(toBN(other)));
	    }
	    div(other) {
	        const o = BigNumber.from(other);
	        if (o.isZero()) {
	            throwFault("division by zero", "div");
	        }
	        return toBigNumber(toBN(this).div(toBN(other)));
	    }
	    mul(other) {
	        return toBigNumber(toBN(this).mul(toBN(other)));
	    }
	    mod(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("cannot modulo negative values", "mod");
	        }
	        return toBigNumber(toBN(this).umod(value));
	    }
	    pow(other) {
	        const value = toBN(other);
	        if (value.isNeg()) {
	            throwFault("cannot raise to negative values", "pow");
	        }
	        return toBigNumber(toBN(this).pow(value));
	    }
	    and(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'and' negative values", "and");
	        }
	        return toBigNumber(toBN(this).and(value));
	    }
	    or(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'or' negative values", "or");
	        }
	        return toBigNumber(toBN(this).or(value));
	    }
	    xor(other) {
	        const value = toBN(other);
	        if (this.isNegative() || value.isNeg()) {
	            throwFault("cannot 'xor' negative values", "xor");
	        }
	        return toBigNumber(toBN(this).xor(value));
	    }
	    mask(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot mask negative values", "mask");
	        }
	        return toBigNumber(toBN(this).maskn(value));
	    }
	    shl(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot shift negative values", "shl");
	        }
	        return toBigNumber(toBN(this).shln(value));
	    }
	    shr(value) {
	        if (this.isNegative() || value < 0) {
	            throwFault("cannot shift negative values", "shr");
	        }
	        return toBigNumber(toBN(this).shrn(value));
	    }
	    eq(other) {
	        return toBN(this).eq(toBN(other));
	    }
	    lt(other) {
	        return toBN(this).lt(toBN(other));
	    }
	    lte(other) {
	        return toBN(this).lte(toBN(other));
	    }
	    gt(other) {
	        return toBN(this).gt(toBN(other));
	    }
	    gte(other) {
	        return toBN(this).gte(toBN(other));
	    }
	    isNegative() {
	        return (this._hex[0] === "-");
	    }
	    isZero() {
	        return toBN(this).isZero();
	    }
	    toNumber() {
	        try {
	            return toBN(this).toNumber();
	        }
	        catch (error) {
	            throwFault("overflow", "toNumber", this.toString());
	        }
	        return null;
	    }
	    toBigInt() {
	        try {
	            return BigInt(this.toString());
	        }
	        catch (e) { }
	        return logger$6.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
	            value: this.toString()
	        });
	    }
	    toString() {
	        // Lots of people expect this, which we do not support, so check (See: #889)
	        if (arguments.length > 0) {
	            if (arguments[0] === 10) {
	                if (!_warnedToStringRadix) {
	                    _warnedToStringRadix = true;
	                    logger$6.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
	                }
	            }
	            else if (arguments[0] === 16) {
	                logger$6.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	            else {
	                logger$6.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
	            }
	        }
	        return toBN(this).toString(10);
	    }
	    toHexString() {
	        return this._hex;
	    }
	    toJSON(key) {
	        return { type: "BigNumber", hex: this.toHexString() };
	    }
	    static from(value) {
	        if (value instanceof BigNumber) {
	            return value;
	        }
	        if (typeof (value) === "string") {
	            if (value.match(/^-?0x[0-9a-f]+$/i)) {
	                return new BigNumber(_constructorGuard$1, toHex(value));
	            }
	            if (value.match(/^-?[0-9]+$/)) {
	                return new BigNumber(_constructorGuard$1, toHex(new BN(value)));
	            }
	            return logger$6.throwArgumentError("invalid BigNumber string", "value", value);
	        }
	        if (typeof (value) === "number") {
	            if (value % 1) {
	                throwFault("underflow", "BigNumber.from", value);
	            }
	            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
	                throwFault("overflow", "BigNumber.from", value);
	            }
	            return BigNumber.from(String(value));
	        }
	        const anyValue = value;
	        if (typeof (anyValue) === "bigint") {
	            return BigNumber.from(anyValue.toString());
	        }
	        if (isBytes(anyValue)) {
	            return BigNumber.from(hexlify(anyValue));
	        }
	        if (anyValue) {
	            // Hexable interface (takes priority)
	            if (anyValue.toHexString) {
	                const hex = anyValue.toHexString();
	                if (typeof (hex) === "string") {
	                    return BigNumber.from(hex);
	                }
	            }
	            else {
	                // For now, handle legacy JSON-ified values (goes away in v6)
	                let hex = anyValue._hex;
	                // New-form JSON
	                if (hex == null && anyValue.type === "BigNumber") {
	                    hex = anyValue.hex;
	                }
	                if (typeof (hex) === "string") {
	                    if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
	                        return BigNumber.from(hex);
	                    }
	                }
	            }
	        }
	        return logger$6.throwArgumentError("invalid BigNumber value", "value", value);
	    }
	    static isBigNumber(value) {
	        return !!(value && value._isBigNumber);
	    }
	}
	// Normalize the hex string
	function toHex(value) {
	    // For BN, call on the hex string
	    if (typeof (value) !== "string") {
	        return toHex(value.toString(16));
	    }
	    // If negative, prepend the negative sign to the normalized positive value
	    if (value[0] === "-") {
	        // Strip off the negative sign
	        value = value.substring(1);
	        // Cannot have multiple negative signs (e.g. "--0x04")
	        if (value[0] === "-") {
	            logger$6.throwArgumentError("invalid hex", "value", value);
	        }
	        // Call toHex on the positive component
	        value = toHex(value);
	        // Do not allow "-0x00"
	        if (value === "0x00") {
	            return value;
	        }
	        // Negate the value
	        return "-" + value;
	    }
	    // Add a "0x" prefix if missing
	    if (value.substring(0, 2) !== "0x") {
	        value = "0x" + value;
	    }
	    // Normalize zero
	    if (value === "0x") {
	        return "0x00";
	    }
	    // Make the string even length
	    if (value.length % 2) {
	        value = "0x0" + value.substring(2);
	    }
	    // Trim to smallest even-length string
	    while (value.length > 4 && value.substring(0, 4) === "0x00") {
	        value = "0x" + value.substring(4);
	    }
	    return value;
	}
	function toBigNumber(value) {
	    return BigNumber.from(toHex(value));
	}
	function toBN(value) {
	    const hex = BigNumber.from(value).toHexString();
	    if (hex[0] === "-") {
	        return (new BN("-" + hex.substring(3), 16));
	    }
	    return new BN(hex.substring(2), 16);
	}
	function throwFault(fault, operation, value) {
	    const params = { fault: fault, operation: operation };
	    if (value != null) {
	        params.value = value;
	    }
	    return logger$6.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
	}
	// value should have no prefix
	function _base36To16(value) {
	    return (new BN(value, 36)).toString(16);
	}

	const version$7 = "strings/5.5.0";

	const logger$5 = new Logger(version$7);
	///////////////////////////////
	var UnicodeNormalizationForm;
	(function (UnicodeNormalizationForm) {
	    UnicodeNormalizationForm["current"] = "";
	    UnicodeNormalizationForm["NFC"] = "NFC";
	    UnicodeNormalizationForm["NFD"] = "NFD";
	    UnicodeNormalizationForm["NFKC"] = "NFKC";
	    UnicodeNormalizationForm["NFKD"] = "NFKD";
	})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
	var Utf8ErrorReason;
	(function (Utf8ErrorReason) {
	    // A continuation byte was present where there was nothing to continue
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
	    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
	    // The string is too short to process the expected codepoint
	    // - offset = the index the codepoint began in
	    Utf8ErrorReason["OVERRUN"] = "string overrun";
	    // A missing continuation byte was expected but not found
	    // - offset = the index the continuation byte was expected at
	    Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
	    // The computed code point is outside the range for UTF-8
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; outside the UTF-8 range
	    Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
	    // UTF-8 strings may not contain UTF-16 surrogate pairs
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
	    Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
	    // The string is an overlong representation
	    // - offset       = start of this codepoint
	    // - badCodepoint = the computed codepoint; already bounds checked
	    Utf8ErrorReason["OVERLONG"] = "overlong representation";
	})(Utf8ErrorReason || (Utf8ErrorReason = {}));
	function errorFunc(reason, offset, bytes, output, badCodepoint) {
	    return logger$5.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
	}
	function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
	    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
	    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
	        let i = 0;
	        for (let o = offset + 1; o < bytes.length; o++) {
	            if (bytes[o] >> 6 !== 0x02) {
	                break;
	            }
	            i++;
	        }
	        return i;
	    }
	    // This byte runs us past the end of the string, so just jump to the end
	    // (but the first byte was read already read and therefore skipped)
	    if (reason === Utf8ErrorReason.OVERRUN) {
	        return bytes.length - offset - 1;
	    }
	    // Nothing to skip
	    return 0;
	}
	function replaceFunc(reason, offset, bytes, output, badCodepoint) {
	    // Overlong representations are otherwise "valid" code points; just non-deistingtished
	    if (reason === Utf8ErrorReason.OVERLONG) {
	        output.push(badCodepoint);
	        return 0;
	    }
	    // Put the replacement character into the output
	    output.push(0xfffd);
	    // Otherwise, process as if ignoring errors
	    return ignoreFunc(reason, offset, bytes);
	}
	// Common error handing strategies
	Object.freeze({
	    error: errorFunc,
	    ignore: ignoreFunc,
	    replace: replaceFunc
	});
	// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
	function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
	    if (form != UnicodeNormalizationForm.current) {
	        logger$5.checkNormalize();
	        str = str.normalize(form);
	    }
	    let result = [];
	    for (let i = 0; i < str.length; i++) {
	        const c = str.charCodeAt(i);
	        if (c < 0x80) {
	            result.push(c);
	        }
	        else if (c < 0x800) {
	            result.push((c >> 6) | 0xc0);
	            result.push((c & 0x3f) | 0x80);
	        }
	        else if ((c & 0xfc00) == 0xd800) {
	            i++;
	            const c2 = str.charCodeAt(i);
	            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
	                throw new Error("invalid utf-8 string");
	            }
	            // Surrogate Pair
	            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
	            result.push((pair >> 18) | 0xf0);
	            result.push(((pair >> 12) & 0x3f) | 0x80);
	            result.push(((pair >> 6) & 0x3f) | 0x80);
	            result.push((pair & 0x3f) | 0x80);
	        }
	        else {
	            result.push((c >> 12) | 0xe0);
	            result.push(((c >> 6) & 0x3f) | 0x80);
	            result.push((c & 0x3f) | 0x80);
	        }
	    }
	    return arrayify(result);
	}

	var SupportedAlgorithm;
	(function (SupportedAlgorithm) {
	    SupportedAlgorithm["sha256"] = "sha256";
	    SupportedAlgorithm["sha512"] = "sha512";
	})(SupportedAlgorithm || (SupportedAlgorithm = {}));

	const version$6 = "sha2/5.5.0";

	const logger$4 = new Logger(version$6);
	function ripemd160(data) {
	    return "0x" + (hash$2.ripemd160().update(arrayify(data)).digest("hex"));
	}
	function sha256$3(data) {
	    return "0x" + (hash$2.sha256().update(arrayify(data)).digest("hex"));
	}
	function computeHmac(algorithm, key, data) {
	    if (!SupportedAlgorithm[algorithm]) {
	        logger$4.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
	            operation: "hmac",
	            algorithm: algorithm
	        });
	    }
	    return "0x" + hash$2.hmac(hash$2[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
	}

	function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
	    password = arrayify(password);
	    salt = arrayify(salt);
	    let hLen;
	    let l = 1;
	    const DK = new Uint8Array(keylen);
	    const block1 = new Uint8Array(salt.length + 4);
	    block1.set(salt);
	    //salt.copy(block1, 0, 0, salt.length)
	    let r;
	    let T;
	    for (let i = 1; i <= l; i++) {
	        //block1.writeUInt32BE(i, salt.length)
	        block1[salt.length] = (i >> 24) & 0xff;
	        block1[salt.length + 1] = (i >> 16) & 0xff;
	        block1[salt.length + 2] = (i >> 8) & 0xff;
	        block1[salt.length + 3] = i & 0xff;
	        //let U = createHmac(password).update(block1).digest();
	        let U = arrayify(computeHmac(hashAlgorithm, password, block1));
	        if (!hLen) {
	            hLen = U.length;
	            T = new Uint8Array(hLen);
	            l = Math.ceil(keylen / hLen);
	            r = keylen - (l - 1) * hLen;
	        }
	        //U.copy(T, 0, 0, hLen)
	        T.set(U);
	        for (let j = 1; j < iterations; j++) {
	            //U = createHmac(password).update(U).digest();
	            U = arrayify(computeHmac(hashAlgorithm, password, U));
	            for (let k = 0; k < hLen; k++)
	                T[k] ^= U[k];
	        }
	        const destPos = (i - 1) * hLen;
	        const len = (i === l ? r : hLen);
	        //T.copy(DK, destPos, 0, len)
	        DK.set(arrayify(T).slice(0, len), destPos);
	    }
	    return hexlify(DK);
	}

	function createCommonjsModule$6(fn, basedir, module) {
		return module = {
			path: basedir,
			exports: {},
			require: function (path, base) {
				return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
			}
		}, fn(module, module.exports), module.exports;
	}

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	var minimalisticAssert = assert;

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils_1$2 = createCommonjsModule$6(function (module, exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	});

	var utils_1$1$1 = createCommonjsModule$6(function (module, exports) {

	var utils = exports;




	utils.assert = minimalisticAssert;
	utils.toArray = utils_1$2.toArray;
	utils.zero2 = utils_1$2.zero2;
	utils.toHex = utils_1$2.toHex;
	utils.encode = utils_1$2.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);

	  var ws = 1 << (w + 1);
	  var k = num.clone();

	  for (var i = 0; i < naf.length; i++) {
	    var z;
	    var mod = k.andln(ws - 1);
	    if (k.isOdd()) {
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }

	    naf[i] = z;
	    k.iushrn(1);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    [],
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	      this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	    bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new BN$9(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	});



	var getNAF = utils_1$1$1.getNAF;
	var getJSF = utils_1$1$1.getJSF;
	var assert$1 = utils_1$1$1.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN$9(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN$9.red(conf.prime) : BN$9.mont(this.p);

	  // Useful for many curves
	  this.zero = new BN$9(0).toRed(this.red);
	  this.one = new BN$9(1).toRed(this.red);
	  this.two = new BN$9(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new BN$9(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  this._bitLength = this.n ? this.n.bitLength() : 0;

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base$1 = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$1(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
	    nafW = 0;
	    for (var l = j + doubles.step - 1; l >= j; l--)
	      nafW = (nafW << 1) + naf[l];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (j = 0; j < repr.length; j++) {
	      nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var l = 0; i >= 0 && naf[i] === 0; i--)
	      l++;
	    if (i >= 0)
	      l++;
	    acc = acc.dblp(l);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$1(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
	    p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
	      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b], /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3,  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (j = 0; j < len; j++) {
	      var z = tmp[j];
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils_1$1$1.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$1(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$1(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	      bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils_1$1$1.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles,
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res,
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browser = createCommonjsModule$6(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});






	var assert$2 = utils_1$1$1.assert;

	function ShortCurve(conf) {
	  base$1.call(this, 'short', conf);

	  this.a = new BN$9(conf.a, 16).toRed(this.red);
	  this.b = new BN$9(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits_browser(ShortCurve, base$1);
	var short_1 = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new BN$9(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new BN$9(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new BN$9(vec.a, 16),
	        b: new BN$9(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis,
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN$9.mont(num);
	  var tinv = new BN$9(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new BN$9(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN$9(1);
	  var y1 = new BN$9(0);
	  var x2 = new BN$9(0);
	  var y2 = new BN$9(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 },
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN$9(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	      var npoints = this._endoWnafT1;
	      var ncoeffs = this._endoWnafT2;
	      for (var i = 0; i < points.length; i++) {
	        var split = this._endoSplit(coeffs[i]);
	        var p = points[i];
	        var beta = p._getBeta();

	        if (split.k1.negative) {
	          split.k1.ineg();
	          p = p.neg(true);
	        }
	        if (split.k2.negative) {
	          split.k2.ineg();
	          beta = beta.neg(true);
	        }

	        npoints[i * 2] = p;
	        npoints[i * 2 + 1] = beta;
	        ncoeffs[i * 2] = split.k1;
	        ncoeffs[i * 2 + 1] = split.k2;
	      }
	      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	      // Clean-up references to points and coefficients
	      for (var j = 0; j < i * 2; j++) {
	        npoints[j] = null;
	        ncoeffs[j] = null;
	      }
	      return res;
	    };

	function Point(curve, x, y, isRed) {
	  base$1.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new BN$9(x, 16);
	    this.y = new BN$9(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits_browser(Point, base$1.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul),
	      },
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1),
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1),
	    },
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point)),
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point)),
	    },
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new BN$9(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate),
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate),
	      },
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  base$1.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new BN$9(0);
	  } else {
	    this.x = new BN$9(x, 16);
	    this.y = new BN$9(y, 16);
	    this.z = new BN$9(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits_browser(JPoint, base$1.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN$9(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	var curve_1 = createCommonjsModule$6(function (module, exports) {

	var curve = exports;

	curve.base = base$1;
	curve.short = short_1;
	curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
	curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
	});

	var curves_1 = createCommonjsModule$6(function (module, exports) {

	var curves = exports;





	var assert = utils_1$1$1.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve_1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve_1.edwards(options);
	  else
	    this.curve = new curve_1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve,
	      });
	      return curve;
	    },
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash$2.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash$2.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash$2.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash$2.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash$2.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash$2.sha256,
	  gRed: false,
	  g: [
	    '9',
	  ],
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash$2.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});

	var pre;
	try {
	  pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash$2.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3',
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15',
	    },
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre,
	  ],
	});
	});





	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils_1$2.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils_1$2.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils_1$2.toArray(options.pers, options.persEnc || 'hex');
	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash$2.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils_1$2.toArray(entropy, entropyEnc);
	  add = utils_1$2.toArray(add, addEnc);

	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils_1$2.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils_1$2.encode(res, enc);
	};



	var assert$3 = utils_1$1$1.assert;

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc,
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc,
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN$9(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$3(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$3(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
	    assert$3(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};




	var assert$4 = utils_1$1$1.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$4(options.r && options.s, 'Signature without r or s');
	  this.r = new BN$9(options.r, 16);
	  this.s = new BN$9(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature = Signature;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;

	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
	    return false;
	  }

	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	    val >>>= 0;
	  }

	  // Leading zeroes
	  if (val <= 0x7f) {
	    return false;
	  }

	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils_1$1$1.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
	    return false;
	  }
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
	    return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
	    return false;
	  }
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
	    if (r[1] & 0x80) {
	      r = r.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }
	  if (s[0] === 0) {
	    if (s[1] & 0x80) {
	      s = s.slice(1);
	    } else {
	      // Leading zeroes
	      return false;
	    }
	  }

	  this.r = new BN$9(r);
	  this.s = new BN$9(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils_1$1$1.encode(res, enc);
	};





	var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
	var assert$5 = utils_1$1$1.assert;




	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
	      'Unknown curve ' + options);

	    options = curves_1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves_1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new key(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return key.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return key.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || rand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray(),
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN$9(2));
	  for (;;) {
	    var priv = new BN$9(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  }
	};

	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN$9(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN$9(1));

	  for (var iter = 0; ; iter++) {
	    var k = options.k ?
	      options.k(iter) :
	      new BN$9(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature$1, key, enc) {
	  msg = this._truncateToN(new BN$9(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature$1 = new signature(signature$1, 'hex');

	  // Perform primitive values validation
	  var r = signature$1.r;
	  var s = signature$1.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;

	  if (!this.curve._maxwellTrick) {
	    p = this.g.mulAdd(u1, key.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
	  assert$5((3 & j) === j, 'The recovery param is more than two bits');
	  signature$1 = new signature(signature$1, enc);

	  var n = this.n;
	  var e = new BN$9(msg);
	  var r = signature$1.r;
	  var s = signature$1.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature$1.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
	  signature$1 = new signature(signature$1, enc);
	  if (signature$1.recoveryParam !== null)
	    return signature$1.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature$1, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var elliptic_1 = createCommonjsModule$6(function (module, exports) {

	var elliptic = exports;

	elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
	elliptic.utils = utils_1$1$1;
	elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
	elliptic.curve = curve_1;
	elliptic.curves = curves_1;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
	});

	var EC$1 = elliptic_1.ec;

	const version$5 = "signing-key/5.5.0";

	const logger$3 = new Logger(version$5);
	let _curve = null;
	function getCurve() {
	    if (!_curve) {
	        _curve = new EC$1("secp256k1");
	    }
	    return _curve;
	}
	class SigningKey {
	    constructor(privateKey) {
	        defineReadOnly(this, "curve", "secp256k1");
	        defineReadOnly(this, "privateKey", hexlify(privateKey));
	        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
	        defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
	        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
	        defineReadOnly(this, "_isSigningKey", true);
	    }
	    _addPoint(other) {
	        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
	        const p1 = getCurve().keyFromPublic(arrayify(other));
	        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
	    }
	    signDigest(digest) {
	        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
	        const digestBytes = arrayify(digest);
	        if (digestBytes.length !== 32) {
	            logger$3.throwArgumentError("bad digest length", "digest", digest);
	        }
	        const signature = keyPair.sign(digestBytes, { canonical: true });
	        return splitSignature({
	            recoveryParam: signature.recoveryParam,
	            r: hexZeroPad("0x" + signature.r.toString(16), 32),
	            s: hexZeroPad("0x" + signature.s.toString(16), 32),
	        });
	    }
	    computeSharedSecret(otherKey) {
	        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
	        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
	        return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
	    }
	    static isSigningKey(value) {
	        return !!(value && value._isSigningKey);
	    }
	}
	function computePublicKey(key, compressed) {
	    const bytes = arrayify(key);
	    if (bytes.length === 32) {
	        const signingKey = new SigningKey(bytes);
	        if (compressed) {
	            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
	        }
	        return signingKey.publicKey;
	    }
	    else if (bytes.length === 33) {
	        if (compressed) {
	            return hexlify(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
	    }
	    else if (bytes.length === 65) {
	        if (!compressed) {
	            return hexlify(bytes);
	        }
	        return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
	    }
	    return logger$3.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
	}

	function keccak256(data) {
	    return '0x' + sha3$1.keccak_256(arrayify(data));
	}

	const version$4 = "address/5.5.0";

	const logger$2 = new Logger(version$4);
	function getChecksumAddress(address) {
	    if (!isHexString(address, 20)) {
	        logger$2.throwArgumentError("invalid address", "address", address);
	    }
	    address = address.toLowerCase();
	    const chars = address.substring(2).split("");
	    const expanded = new Uint8Array(40);
	    for (let i = 0; i < 40; i++) {
	        expanded[i] = chars[i].charCodeAt(0);
	    }
	    const hashed = arrayify(keccak256(expanded));
	    for (let i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return "0x" + chars.join("");
	}
	// Shims for environments that are missing some required constants and functions
	const MAX_SAFE_INTEGER = 0x1fffffffffffff;
	function log10(x) {
	    if (Math.log10) {
	        return Math.log10(x);
	    }
	    return Math.log(x) / Math.LN10;
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	const ibanLookup = {};
	for (let i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (let i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + "00";
	    let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        let block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    let checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = "0" + checksum;
	    }
	    return checksum;
	}
	function getAddress(address) {
	    let result = null;
	    if (typeof (address) !== "string") {
	        logger$2.throwArgumentError("invalid address", "address", address);
	    }
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (address.substring(0, 2) !== "0x") {
	            address = "0x" + address;
	        }
	        result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
	            logger$2.throwArgumentError("bad address checksum", "address", address);
	        }
	        // Maybe ICAP? (we only support direct mode)
	    }
	    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        if (address.substring(2, 4) !== ibanChecksum(address)) {
	            logger$2.throwArgumentError("bad icap checksum", "address", address);
	        }
	        result = _base36To16(address.substring(4));
	        while (result.length < 40) {
	            result = "0" + result;
	        }
	        result = getChecksumAddress("0x" + result);
	    }
	    else {
	        logger$2.throwArgumentError("invalid address", "address", address);
	    }
	    return result;
	}

	const version$3 = "transactions/5.5.0";

	new Logger(version$3);
	var TransactionTypes;
	(function (TransactionTypes) {
	    TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
	    TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
	    TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
	})(TransactionTypes || (TransactionTypes = {}));
	function computeAddress(key) {
	    const publicKey = computePublicKey(key);
	    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
	}

	function id(text) {
	    return keccak256(toUtf8Bytes(text));
	}

	const version$2 = "wordlists/5.5.0";

	const logger$1 = new Logger(version$2);
	class Wordlist {
	    constructor(locale) {
	        logger$1.checkAbstract(new.target, Wordlist);
	        defineReadOnly(this, "locale", locale);
	    }
	    // Subclasses may override this
	    split(mnemonic) {
	        return mnemonic.toLowerCase().split(/ +/g);
	    }
	    // Subclasses may override this
	    join(words) {
	        return words.join(" ");
	    }
	    static check(wordlist) {
	        const words = [];
	        for (let i = 0; i < 2048; i++) {
	            const word = wordlist.getWord(i);
	            /* istanbul ignore if */
	            if (i !== wordlist.getWordIndex(word)) {
	                return "0x";
	            }
	            words.push(word);
	        }
	        return id(words.join("\n") + "\n");
	    }
	    static register(lang, name) {
	    }
	}

	const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
	let wordlist = null;
	function loadWords(lang) {
	    if (wordlist != null) {
	        return;
	    }
	    wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
	        wordlist = null;
	        throw new Error("BIP39 Wordlist for en (English) FAILED");
	    }
	}
	class LangEn extends Wordlist {
	    constructor() {
	        super("en");
	    }
	    getWord(index) {
	        loadWords(this);
	        return wordlist[index];
	    }
	    getWordIndex(word) {
	        loadWords(this);
	        return wordlist.indexOf(word);
	    }
	}
	const langEn = new LangEn();
	Wordlist.register(langEn);

	const wordlists = {
	    en: langEn
	};

	const version$1 = "hdnode/5.5.0";

	const logger = new Logger(version$1);
	const N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
	// "Bitcoin seed"
	const MasterSecret = toUtf8Bytes("Bitcoin seed");
	const HardenedBit = 0x80000000;
	// Returns a byte with the MSB bits set
	function getUpperMask(bits) {
	    return ((1 << bits) - 1) << (8 - bits);
	}
	// Returns a byte with the LSB bits set
	function getLowerMask(bits) {
	    return (1 << bits) - 1;
	}
	function bytes32(value) {
	    return hexZeroPad(hexlify(value), 32);
	}
	function base58check(data) {
	    return Base58.encode(concat$2([data, hexDataSlice(sha256$3(sha256$3(data)), 0, 4)]));
	}
	function getWordlist(wordlist) {
	    if (wordlist == null) {
	        return wordlists["en"];
	    }
	    if (typeof (wordlist) === "string") {
	        const words = wordlists[wordlist];
	        if (words == null) {
	            logger.throwArgumentError("unknown locale", "wordlist", wordlist);
	        }
	        return words;
	    }
	    return wordlist;
	}
	const _constructorGuard = {};
	const defaultPath = "m/44'/60'/0'/0/0";
	class HDNode {
	    /**
	     *  This constructor should not be called directly.
	     *
	     *  Please use:
	     *   - fromMnemonic
	     *   - fromSeed
	     */
	    constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
	        logger.checkNew(new.target, HDNode);
	        /* istanbul ignore if */
	        if (constructorGuard !== _constructorGuard) {
	            throw new Error("HDNode constructor cannot be called directly");
	        }
	        if (privateKey) {
	            const signingKey = new SigningKey(privateKey);
	            defineReadOnly(this, "privateKey", signingKey.privateKey);
	            defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
	        }
	        else {
	            defineReadOnly(this, "privateKey", null);
	            defineReadOnly(this, "publicKey", hexlify(publicKey));
	        }
	        defineReadOnly(this, "parentFingerprint", parentFingerprint);
	        defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$3(this.publicKey)), 0, 4));
	        defineReadOnly(this, "address", computeAddress(this.publicKey));
	        defineReadOnly(this, "chainCode", chainCode);
	        defineReadOnly(this, "index", index);
	        defineReadOnly(this, "depth", depth);
	        if (mnemonicOrPath == null) {
	            // From a source that does not preserve the path (e.g. extended keys)
	            defineReadOnly(this, "mnemonic", null);
	            defineReadOnly(this, "path", null);
	        }
	        else if (typeof (mnemonicOrPath) === "string") {
	            // From a source that does not preserve the mnemonic (e.g. neutered)
	            defineReadOnly(this, "mnemonic", null);
	            defineReadOnly(this, "path", mnemonicOrPath);
	        }
	        else {
	            // From a fully qualified source
	            defineReadOnly(this, "mnemonic", mnemonicOrPath);
	            defineReadOnly(this, "path", mnemonicOrPath.path);
	        }
	    }
	    get extendedKey() {
	        // We only support the mainnet values for now, but if anyone needs
	        // testnet values, let me know. I believe current sentiment is that
	        // we should always use mainnet, and use BIP-44 to derive the network
	        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
	        //   - Testnet: public=0x043587CF, private=0x04358394
	        if (this.depth >= 256) {
	            throw new Error("Depth too large!");
	        }
	        return base58check(concat$2([
	            ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
	            hexlify(this.depth),
	            this.parentFingerprint,
	            hexZeroPad(hexlify(this.index), 4),
	            this.chainCode,
	            ((this.privateKey != null) ? concat$2(["0x00", this.privateKey]) : this.publicKey),
	        ]));
	    }
	    neuter() {
	        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
	    }
	    _derive(index) {
	        if (index > 0xffffffff) {
	            throw new Error("invalid index - " + String(index));
	        }
	        // Base path
	        let path = this.path;
	        if (path) {
	            path += "/" + (index & ~HardenedBit);
	        }
	        const data = new Uint8Array(37);
	        if (index & HardenedBit) {
	            if (!this.privateKey) {
	                throw new Error("cannot derive child of neutered node");
	            }
	            // Data = 0x00 || ser_256(k_par)
	            data.set(arrayify(this.privateKey), 1);
	            // Hardened path
	            if (path) {
	                path += "'";
	            }
	        }
	        else {
	            // Data = ser_p(point(k_par))
	            data.set(arrayify(this.publicKey));
	        }
	        // Data += ser_32(i)
	        for (let i = 24; i >= 0; i -= 8) {
	            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
	        }
	        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
	        const IL = I.slice(0, 32);
	        const IR = I.slice(32);
	        // The private key
	        let ki = null;
	        // The public key
	        let Ki = null;
	        if (this.privateKey) {
	            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
	        }
	        else {
	            const ek = new SigningKey(hexlify(IL));
	            Ki = ek._addPoint(this.publicKey);
	        }
	        let mnemonicOrPath = path;
	        const srcMnemonic = this.mnemonic;
	        if (srcMnemonic) {
	            mnemonicOrPath = Object.freeze({
	                phrase: srcMnemonic.phrase,
	                path: path,
	                locale: (srcMnemonic.locale || "en")
	            });
	        }
	        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
	    }
	    derivePath(path) {
	        const components = path.split("/");
	        if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
	            throw new Error("invalid path - " + path);
	        }
	        if (components[0] === "m") {
	            components.shift();
	        }
	        let result = this;
	        for (let i = 0; i < components.length; i++) {
	            const component = components[i];
	            if (component.match(/^[0-9]+'$/)) {
	                const index = parseInt(component.substring(0, component.length - 1));
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(HardenedBit + index);
	            }
	            else if (component.match(/^[0-9]+$/)) {
	                const index = parseInt(component);
	                if (index >= HardenedBit) {
	                    throw new Error("invalid path index - " + component);
	                }
	                result = result._derive(index);
	            }
	            else {
	                throw new Error("invalid path component - " + component);
	            }
	        }
	        return result;
	    }
	    static _fromSeed(seed, mnemonic) {
	        const seedArray = arrayify(seed);
	        if (seedArray.length < 16 || seedArray.length > 64) {
	            throw new Error("invalid seed");
	        }
	        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
	        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
	    }
	    static fromMnemonic(mnemonic, password, wordlist) {
	        // If a locale name was passed in, find the associated wordlist
	        wordlist = getWordlist(wordlist);
	        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
	        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
	        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
	            phrase: mnemonic,
	            path: "m",
	            locale: wordlist.locale
	        });
	    }
	    static fromSeed(seed) {
	        return HDNode._fromSeed(seed, null);
	    }
	    static fromExtendedKey(extendedKey) {
	        const bytes = Base58.decode(extendedKey);
	        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
	            logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	        }
	        const depth = bytes[4];
	        const parentFingerprint = hexlify(bytes.slice(5, 9));
	        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
	        const chainCode = hexlify(bytes.slice(13, 45));
	        const key = bytes.slice(45, 78);
	        switch (hexlify(bytes.slice(0, 4))) {
	            // Public Key
	            case "0x0488b21e":
	            case "0x043587cf":
	                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
	            // Private Key
	            case "0x0488ade4":
	            case "0x04358394 ":
	                if (key[0] !== 0) {
	                    break;
	                }
	                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
	        }
	        return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
	    }
	}
	function mnemonicToSeed(mnemonic, password) {
	    if (!password) {
	        password = "";
	    }
	    const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
	    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
	}
	function mnemonicToEntropy(mnemonic, wordlist) {
	    wordlist = getWordlist(wordlist);
	    logger.checkNormalize();
	    const words = wordlist.split(mnemonic);
	    if ((words.length % 3) !== 0) {
	        throw new Error("invalid mnemonic");
	    }
	    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
	    let offset = 0;
	    for (let i = 0; i < words.length; i++) {
	        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
	        if (index === -1) {
	            throw new Error("invalid mnemonic");
	        }
	        for (let bit = 0; bit < 11; bit++) {
	            if (index & (1 << (10 - bit))) {
	                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
	            }
	            offset++;
	        }
	    }
	    const entropyBits = 32 * words.length / 3;
	    const checksumBits = words.length / 3;
	    const checksumMask = getUpperMask(checksumBits);
	    const checksum = arrayify(sha256$3(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
	    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
	        throw new Error("invalid checksum");
	    }
	    return hexlify(entropy.slice(0, entropyBits / 8));
	}
	function entropyToMnemonic(entropy, wordlist) {
	    wordlist = getWordlist(wordlist);
	    entropy = arrayify(entropy);
	    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
	        throw new Error("invalid entropy");
	    }
	    const indices = [0];
	    let remainingBits = 11;
	    for (let i = 0; i < entropy.length; i++) {
	        // Consume the whole byte (with still more to go)
	        if (remainingBits > 8) {
	            indices[indices.length - 1] <<= 8;
	            indices[indices.length - 1] |= entropy[i];
	            remainingBits -= 8;
	            // This byte will complete an 11-bit index
	        }
	        else {
	            indices[indices.length - 1] <<= remainingBits;
	            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
	            // Start the next word
	            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
	            remainingBits += 3;
	        }
	    }
	    // Compute the checksum bits
	    const checksumBits = entropy.length / 4;
	    const checksum = arrayify(sha256$3(entropy))[0] & getUpperMask(checksumBits);
	    // Shift the checksum into the word indices
	    indices[indices.length - 1] <<= checksumBits;
	    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
	    return wordlist.join(indices.map((index) => wordlist.getWord(index)));
	}
	function isValidMnemonic(mnemonic, wordlist) {
	    try {
	        mnemonicToEntropy(mnemonic, wordlist);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	function getAccountPath(index) {
	    if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
	        logger.throwArgumentError("invalid account index", "index", index);
	    }
	    return `m/44'/60'/${index}'/0/0`;
	}

	var lib_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		defaultPath: defaultPath,
		HDNode: HDNode,
		mnemonicToSeed: mnemonicToSeed,
		mnemonicToEntropy: mnemonicToEntropy,
		entropyToMnemonic: entropyToMnemonic,
		isValidMnemonic: isValidMnemonic,
		getAccountPath: getAccountPath
	});

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

	(function (exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LATEST = void 0;
	const x25519_1 = x25519;
	const hdnode_1 = require$$1$1;
	const did_jwt_1 = require$$2$4;
	const random_1 = random$2;
	const dag_jose_utils_1 = lib$6;
	const utils_1 = utils$2;
	exports.LATEST = 'latest';
	const GENESIS = 'genesis';
	const BASE_PATH = "m/51073068'";
	const LEGACY_BASE_PATH = "m/7696500'/0'/0'";
	function deriveKeySet(seed, v03ID) {
	    const seedNode = hdnode_1.HDNode.fromSeed(seed);
	    let hdNode;
	    if (v03ID) {
	        hdNode = seedNode.derivePath(LEGACY_BASE_PATH);
	    }
	    else {
	        hdNode = seedNode.derivePath(BASE_PATH);
	    }
	    const signing = hdNode.derivePath('0');
	    const management = v03ID ? signing : hdNode.derivePath('1');
	    const encryption = x25519_1.generateKeyPairFromSeed(utils_1.hexToU8A(hdNode.derivePath('2').privateKey.slice(2)));
	    return {
	        seed,
	        publicKeys: {
	            signing: utils_1.hexToU8A(signing.publicKey.slice(2)),
	            management: utils_1.hexToU8A(management.publicKey.slice(2)),
	            encryption: encryption.publicKey,
	        },
	        secretKeys: {
	            signing: utils_1.hexToU8A(signing.privateKey.slice(2)),
	            management: utils_1.hexToU8A(management.privateKey.slice(2)),
	            encryption: encryption.secretKey,
	        },
	        v03ID,
	    };
	}
	class Keyring {
	    constructor(seed, v03ID) {
	        this._keySets = {};
	        this._versionMap = {};
	        this._pastSeeds = [];
	        if (!seed) {
	            seed = random_1.randomBytes(32);
	        }
	        if (v03ID)
	            this._v03ID = v03ID;
	        this._versionMap[GENESIS] = exports.LATEST;
	        this._keySets[exports.LATEST] = deriveKeySet(seed, v03ID);
	        let encKid = utils_1.encodeKey(this._keySets[exports.LATEST].publicKeys.encryption, 'x25519').slice(-15);
	        this._versionMap[encKid] = exports.LATEST;
	        encKid = utils_1.encodeKey(this._keySets[exports.LATEST].publicKeys.management, 'secp256k1');
	        this._versionMap[encKid] = exports.LATEST;
	    }
	    get v03ID() {
	        return this._v03ID;
	    }
	    get seed() {
	        return this._keySets[exports.LATEST].seed;
	    }
	    get pastSeeds() {
	        return this._pastSeeds;
	    }
	    loadPastSeeds(pastSeeds) {
	        return __awaiter(this, void 0, void 0, function* () {
	            this._pastSeeds = [...pastSeeds];
	            let version = exports.LATEST;
	            let jwe = pastSeeds.pop();
	            while (jwe) {
	                const decrypted = yield this.asymDecryptJWE(jwe, [], version);
	                version = Object.keys(decrypted).find((k) => k !== 'v03ID');
	                if (decrypted.v03ID) {
	                    this._v03ID = decrypted.v03ID;
	                    delete decrypted.v03ID;
	                    this._versionMap[GENESIS] = version;
	                }
	                this._keySets[version] = deriveKeySet(new Uint8Array(decrypted[version]), this._v03ID);
	                this._updateVersionMap(version, this._keySets[version]);
	                jwe = pastSeeds.pop();
	            }
	        });
	    }
	    _updateVersionMap(version, keySet) {
	        let encKid = utils_1.encodeKey(keySet.publicKeys.encryption, 'x25519').slice(-15);
	        this._versionMap[encKid] = version;
	        encKid = utils_1.encodeKey(keySet.publicKeys.management, 'secp256k1');
	        this._versionMap[encKid] = version;
	    }
	    generateNewKeys(prevVersion) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this._keySets[prevVersion])
	                throw new Error('Key set version already exist');
	            this._updateVersionMap(prevVersion, this._keySets[exports.LATEST]);
	            this._keySets[prevVersion] = this._keySets[exports.LATEST];
	            this._keySets[exports.LATEST] = deriveKeySet(random_1.randomBytes(32));
	            this._updateVersionMap(exports.LATEST, this._keySets[exports.LATEST]);
	            const cleartext = { [prevVersion]: this._keySets[prevVersion].seed };
	            if (this._keySets[prevVersion].v03ID)
	                cleartext.v03ID = this._keySets[prevVersion].v03ID;
	            this._pastSeeds.push(yield this.asymEncryptJWE(cleartext));
	        });
	    }
	    getAsymDecrypter(fragments = [], version) {
	        if (!version) {
	            const fragmentWithKey = fragments.find((fragment) => this._versionMap[fragment]);
	            version = fragmentWithKey ? this._versionMap[fragmentWithKey] : exports.LATEST;
	        }
	        const key = this._keySets[version].secretKeys.encryption;
	        return did_jwt_1.x25519Decrypter(key);
	    }
	    asymDecryptJWE(jwe, kids, version) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return dag_jose_utils_1.decodeCleartext(yield did_jwt_1.decryptJWE(jwe, this.getAsymDecrypter(kids, version)));
	        });
	    }
	    asymEncryptJWE(cleartext, kid) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const encrypter = did_jwt_1.x25519Encrypter(this.getEncryptionPublicKey(), kid);
	            return did_jwt_1.createJWE(dag_jose_utils_1.prepareCleartext(cleartext), [encrypter]);
	        });
	    }
	    getSigner(version = exports.LATEST) {
	        const keyset = this._keySets[version] || this._keySets[exports.LATEST];
	        return did_jwt_1.EllipticSigner(utils_1.u8aToHex(keyset.secretKeys.signing));
	    }
	    getKeyFragment(version = exports.LATEST, encKey = false) {
	        const keyset = this._keySets[version] || this._keySets[exports.LATEST];
	        if (encKey) {
	            return utils_1.encodeKey(keyset.publicKeys.encryption, 'x25519').slice(-15);
	        }
	        return utils_1.encodeKey(keyset.publicKeys.signing, 'secp256k1').slice(-15);
	    }
	    getMgmtSigner(pubKey) {
	        const keyset = this._keySets[this._versionMap[pubKey]].secretKeys;
	        if (!keyset)
	            throw new Error(`Key not found: ${pubKey}`);
	        return did_jwt_1.EllipticSigner(utils_1.u8aToHex(keyset.management));
	    }
	    getEncryptionPublicKey() {
	        return this._keySets[exports.LATEST].publicKeys.encryption;
	    }
	    get3idState(genesis) {
	        const keyVer = genesis ? this._versionMap[GENESIS] : exports.LATEST;
	        const keys = this._keySets[keyVer].publicKeys;
	        const signing = utils_1.encodeKey(keys.signing, 'secp256k1');
	        const encryption = utils_1.encodeKey(keys.encryption, 'x25519');
	        const state = {
	            metadata: { controllers: [`did:key:${utils_1.encodeKey(keys.management, 'secp256k1')}`] },
	            content: {
	                publicKeys: {
	                    [signing.slice(-15)]: signing,
	                    [encryption.slice(-15)]: encryption,
	                },
	            },
	        };
	        if (genesis) {
	            state.metadata.family = '3id';
	        }
	        if (this._keySets[keyVer].v03ID) {
	            state.metadata.deterministic = true;
	            delete state.content;
	        }
	        return state;
	    }
	}
	exports.default = Keyring;

	}(keyring));

	var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
	    __setModuleDefault$8(result, mod);
	    return result;
	};
	var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(keychain, "__esModule", { value: true });
	keychain.Keychain = keychain.updateAuthEntry = keychain.newAuthEntry = void 0;
	const dids_1$1 = lib$5;
	const key_did_provider_ed25519_1 = require$$1$2;
	const key_did_resolver_1$1 = __importDefault$e(lib$8);
	const keyring_1 = __importStar$8(keyring);
	const utils_1$1 = utils$2;
	function decryptAuthId(encrypted, keyring) {
	    return __awaiter$2(this, void 0, void 0, function* () {
	        if (!encrypted.jwe)
	            throw new Error('Invalid encrypted block');
	        const decrypted = yield keyring.asymDecryptJWE(encrypted.jwe, utils_1$1.parseJWEKids(encrypted.jwe));
	        return decrypted.id;
	    });
	}
	const encrypter = new dids_1$1.DID({ resolver: key_did_resolver_1$1.default.getResolver() });
	function authSecretToDID(authSecret) {
	    return __awaiter$2(this, void 0, void 0, function* () {
	        const did = new dids_1$1.DID({
	            provider: new key_did_provider_ed25519_1.Ed25519Provider(authSecret),
	            resolver: key_did_resolver_1$1.default.getResolver(),
	        });
	        yield did.authenticate();
	        return did;
	    });
	}
	function newAuthEntry(keyring, threeIdDid, authId, authSecret) {
	    return __awaiter$2(this, void 0, void 0, function* () {
	        const mainKid = `${threeIdDid}#${keyring.getKeyFragment(keyring_1.LATEST, true)}`;
	        const did = yield authSecretToDID(authSecret);
	        const cleartext = { seed: keyring.seed };
	        if (keyring.v03ID)
	            cleartext.v03ID = keyring.v03ID;
	        const resolvedPromises = yield Promise.all([
	            did.createDagJWE(cleartext, [did.id]),
	            keyring.asymEncryptJWE({ id: authId }, mainKid),
	        ]);
	        return {
	            did,
	            mapEntry: {
	                [did.id]: {
	                    data: { jwe: resolvedPromises[0] },
	                    id: { jwe: resolvedPromises[1] },
	                },
	            },
	        };
	    });
	}
	keychain.newAuthEntry = newAuthEntry;
	function updateAuthEntry(keyring, authEntry, removedAuthIds, threeIdDid, authDid) {
	    return __awaiter$2(this, void 0, void 0, function* () {
	        const mainKid = `${threeIdDid}#${keyring.getKeyFragment(keyring_1.LATEST, true)}`;
	        const authId = yield decryptAuthId(authEntry.id, keyring);
	        if (removedAuthIds.find((id) => id === authId))
	            return null;
	        const jwes = yield Promise.all([
	            encrypter.createDagJWE({ seed: keyring.seed }, [authDid]),
	            keyring.asymEncryptJWE({ id: authId }, mainKid),
	        ]);
	        return {
	            data: { jwe: jwes[0] },
	            id: { jwe: jwes[1] },
	        };
	    });
	}
	keychain.updateAuthEntry = updateAuthEntry;
	function rotateKeys(threeIdx, keyring, removedAuthIds) {
	    return __awaiter$2(this, void 0, void 0, function* () {
	        const version = threeIdx.get3idVersion();
	        yield keyring.generateNewKeys(version);
	        const update3idState = keyring.get3idState();
	        const authMap = threeIdx.getAuthMap();
	        const newAuthMap = {};
	        yield Promise.all(Object.keys(authMap).map((authDid) => __awaiter$2(this, void 0, void 0, function* () {
	            const entry = yield updateAuthEntry(keyring, authMap[authDid], removedAuthIds, threeIdx.id, authDid);
	            if (entry) {
	                newAuthMap[authDid] = entry;
	            }
	        })));
	        yield threeIdx.rotateKeys(update3idState, keyring.pastSeeds, newAuthMap);
	    });
	}
	class Keychain {
	    constructor(_keyring, _threeIdx) {
	        this._keyring = _keyring;
	        this._threeIdx = _threeIdx;
	        this._pendingAdds = [];
	        this._pendingRms = [];
	    }
	    list() {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            return Promise.all(Object.values(this._threeIdx.getAuthMap()).map(({ id }) => __awaiter$2(this, void 0, void 0, function* () {
	                return decryptAuthId(id, this._keyring);
	            })));
	        });
	    }
	    add(authId, authSecret) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            this._pendingAdds.push({
	                authId,
	                entry: yield newAuthEntry(this._keyring, this._threeIdx.id, authId, authSecret),
	            });
	        });
	    }
	    remove(authId) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            this._pendingRms.push(authId);
	        });
	    }
	    status() {
	        return {
	            clean: !(this._pendingAdds.length + this._pendingRms.length),
	            adding: this._pendingAdds.map((e) => e.authId),
	            removing: this._pendingRms,
	        };
	    }
	    commit() {
	        var _a;
	        return __awaiter$2(this, void 0, void 0, function* () {
	            if (!this._pendingAdds.length && !this._pendingRms.length)
	                throw new Error('Nothing to commit');
	            if (Object.keys(this._threeIdx.getAuthMap()).length === 0) {
	                if (this._pendingRms.length)
	                    throw new Error('Can not remove non-existent auth method');
	                if (!this._pendingAdds.length)
	                    throw new Error('Can not add non-existent auth method');
	                yield this._threeIdx.createIDX((_a = this._pendingAdds.pop()) === null || _a === void 0 ? void 0 : _a.entry);
	            }
	            if (this._pendingRms.length) {
	                yield rotateKeys(this._threeIdx, this._keyring, this._pendingRms);
	                this._pendingRms = [];
	            }
	            if (this._pendingAdds.length) {
	                const entries = this._pendingAdds.map((e) => e.entry);
	                this._pendingAdds = [];
	                yield this._threeIdx.addAuthEntries(entries);
	            }
	        });
	    }
	    static load(threeIdx, authSecret, makeTmpProvider) {
	        var _a;
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const did = yield authSecretToDID(authSecret);
	            const authData = yield threeIdx.loadIDX(did.id);
	            if (authData) {
	                if (!((_a = authData.seed) === null || _a === void 0 ? void 0 : _a.jwe))
	                    throw new Error('Unable to find auth data');
	                try {
	                    const decrypted = yield did.decryptDagJWE(authData.seed.jwe);
	                    const keyring = new keyring_1.default(new Uint8Array(decrypted.seed), decrypted.v03ID);
	                    yield keyring.loadPastSeeds(authData.pastSeeds);
	                    if (keyring.v03ID)
	                        yield threeIdx.create3idDoc(keyring.get3idState(true));
	                    return new Keychain(keyring, threeIdx);
	                }
	                catch (e) {
	                    if (e.message === 'Failed to decrypt')
	                        throw new Error('Auth not allowed');
	                    throw e;
	                }
	            }
	            return Keychain.create(threeIdx, makeTmpProvider);
	        });
	    }
	    static loadFromSeed(threeIdx, seed, did, makeTmpProvider) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const keyring = new keyring_1.default(seed);
	            yield threeIdx.loadAllDocs(did);
	            yield threeIdx.setDIDProvider(makeTmpProvider(keyring, did));
	            return new Keychain(keyring, threeIdx);
	        });
	    }
	    static create(threeIdx, makeTmpProvider, seed, v03ID) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const keyring = new keyring_1.default(seed, v03ID);
	            const docParams = keyring.get3idState(true);
	            yield threeIdx.setDIDProvider(makeTmpProvider(keyring, docParams.metadata.controllers[0]));
	            yield threeIdx.create3idDoc(docParams);
	            if (v03ID)
	                threeIdx.setV03ID(v03ID);
	            return new Keychain(keyring, threeIdx);
	        });
	    }
	}
	keychain.Keychain = Keychain;

	var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
	    __setModuleDefault$7(result, mod);
	    return result;
	};
	var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(threeidProvider, "__esModule", { value: true });
	const did_provider_1 = didProvider;
	const three_idx_1 = threeIdx;
	const permissions_1 = __importStar$7(permissions);
	const keychain_1 = keychain;
	class ThreeIdProvider {
	    constructor(_threeIdx, _permissions, _keychain) {
	        this._threeIdx = _threeIdx;
	        this._permissions = _permissions;
	        this._keychain = _keychain;
	    }
	    get keychain() {
	        return this._keychain;
	    }
	    get permissions() {
	        return this._permissions;
	    }
	    get id() {
	        return this._threeIdx.id;
	    }
	    static create(config) {
	        var _a;
	        return __awaiter$1(this, void 0, void 0, function* () {
	            if (config.seed && config.authSecret)
	                throw new Error("Can't use both seed and authSecret");
	            if (!config.seed && !config.authSecret)
	                throw new Error('Either seed or authSecret is needed');
	            if (config.authSecret && !config.authId) {
	                throw new Error('AuthId must be given along with authSecret');
	            }
	            if (config.authId && config.disableIDX) {
	                throw new Error('AuthId cannot be used with disableIDX');
	            }
	            const threeIdx = new three_idx_1.ThreeIDX(config.ceramic);
	            const permissions = new permissions_1.default(config.getPermission);
	            const makeTmpProvider = (keyring, forcedDID) => {
	                return new did_provider_1.DidProvider({
	                    keyring,
	                    permissions,
	                    threeIdx,
	                    forcedOrigin: permissions_1.SELF_ORIGIN,
	                    forcedDID,
	                });
	            };
	            let keychain;
	            if (config.seed) {
	                if (typeof config.seed === 'string')
	                    throw new Error('seed needs to be Uint8Array');
	                if (config.did) {
	                    keychain = yield keychain_1.Keychain.loadFromSeed(threeIdx, config.seed, config.did, makeTmpProvider);
	                }
	                else {
	                    keychain = yield keychain_1.Keychain.create(threeIdx, makeTmpProvider, config.seed, config.v03ID);
	                }
	            }
	            else if (config.authSecret) {
	                keychain = yield keychain_1.Keychain.load(threeIdx, config.authSecret, makeTmpProvider);
	            }
	            permissions.setDID(threeIdx.id);
	            const idw = new ThreeIdProvider(threeIdx, permissions, keychain);
	            yield idw._threeIdx.setDIDProvider(idw.getDidProvider(permissions_1.SELF_ORIGIN));
	            if (config.authId && !((_a = (yield (keychain === null || keychain === void 0 ? void 0 : keychain.list()))) === null || _a === void 0 ? void 0 : _a.length)) {
	                yield idw.keychain.add(config.authId, config.authSecret);
	                yield idw.keychain.commit();
	            }
	            if (idw._threeIdx.docs.idx == null && !config.disableIDX) {
	                yield idw._threeIdx.createIDX();
	            }
	            return idw;
	        });
	    }
	    getDidProvider(forcedOrigin) {
	        return new did_provider_1.DidProvider({
	            keyring: this.keychain._keyring,
	            permissions: this.permissions,
	            threeIdx: this._threeIdx,
	            forcedOrigin,
	        });
	    }
	}
	threeidProvider.default = ThreeIdProvider;

	var dist$7 = {exports: {}};

	var connect_cjs_production_min = {};

	var lib$4 = {};

	var authProvider = {};

	Object.defineProperty(authProvider, "__esModule", { value: true });

	var ethereum = {};

	var util = {};

	Object.defineProperty(util, "__esModule", { value: true });
	util.encodeRpcMessage = util.getConsentMessage = void 0;
	function getConsentMessage(did, addTimestamp = true) {
	    const res = {
	        message: 'Link this account to your identity' + '\n\n' + did,
	    };
	    if (addTimestamp) {
	        res.timestamp = Math.floor(Date.now() / 1000);
	        res.message += ' \n' + 'Timestamp: ' + res.timestamp;
	    }
	    return res;
	}
	util.getConsentMessage = getConsentMessage;
	function encodeRpcMessage(method, params) {
	    return {
	        jsonrpc: '2.0',
	        id: 1,
	        method,
	        params,
	    };
	}
	util.encodeRpcMessage = encodeRpcMessage;

	var ocapUtil = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.w3cDate = exports.buildOcapRequestMessage = exports.OcapTypes = void 0;
	var OcapTypes;
	(function (OcapTypes) {
	    OcapTypes["EIP4361"] = "EIP-4361";
	})(OcapTypes = exports.OcapTypes || (exports.OcapTypes = {}));
	function buildOcapRequestMessage(opts) {
	    if (opts.type !== OcapTypes.EIP4361) {
	        throw new Error('Unsupported type');
	    }
	    let res = '';
	    res += `${opts.domain} wants you to sign in with your Ethereum account: \n`;
	    res += opts.address + '\n';
	    if (opts.statement) {
	        res += '\n';
	        res += opts.statement;
	        res += '\n\n';
	    }
	    res += `URI: ${opts.did} \n`;
	    res += 'Version: 1 \n';
	    res += `Chain ID: ${opts.chainId} \n`;
	    if (opts.nonce.length < 8) {
	        throw new Error(`Nonce must be at least 8 characters`);
	    }
	    res += `Nonce: ${opts.nonce} \n`;
	    res += `Issued At: ${w3cDate(opts.issuedAt)} \n`;
	    if (opts.expiresAt) {
	        res += `Expiration Time: ${w3cDate(opts.expiresAt)} \n`;
	    }
	    if (opts.notBefore) {
	        res += `Not Before: ${w3cDate(opts.notBefore)} \n`;
	    }
	    if (opts.requestId) {
	        res += `Request ID: ${opts.requestId} \n`;
	    }
	    res += 'Resources: \n';
	    for (const streamId of opts.streams) {
	        res += `- ${streamId.toUrl()} \n`;
	    }
	    return res;
	}
	exports.buildOcapRequestMessage = buildOcapRequestMessage;
	function w3cDate(date) {
	    let result = new Date();
	    if (typeof date === 'number' || typeof date === 'string') {
	        result = new Date(date);
	    }
	    const str = result.toISOString();
	    return str.substr(0, str.length - 5) + 'Z';
	}
	exports.w3cDate = w3cDate;

	}(ocapUtil));

	var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
	    __setModuleDefault$6(result, mod);
	    return result;
	};
	Object.defineProperty(ethereum, "__esModule", { value: true });
	ethereum.authenticate = ethereum.createLink = ethereum.normalizeAccountId = ethereum.isERC1271 = ethereum.isEthAddress = ethereum.EthereumAuthProvider = void 0;
	const caip_1$5 = cjs;
	const util_1$6 = util;
	const uint8arrays$5 = __importStar$6(uint8arrays$7);
	const sha256$2 = __importStar$6(sha256$5);
	const ocap_util_1 = ocapUtil;
	const ADDRESS_TYPES = {
	    ethereumEOA: 'ethereum-eoa',
	    erc1271: 'erc1271',
	};
	const CHAIN_NAMESPACE = 'eip155';
	class EthereumAuthProvider {
	    constructor(provider, address, opts = {}) {
	        this.provider = provider;
	        this.address = address;
	        this.opts = opts;
	        this.isAuthProvider = true;
	    }
	    async accountId() {
	        const chainIdHex = await safeSend(this.provider, 'eth_chainId', []);
	        const chainId = parseInt(chainIdHex, 16);
	        return new caip_1$5.AccountID({
	            address: this.address,
	            chainId: `${CHAIN_NAMESPACE}:${chainId}`,
	        });
	    }
	    async authenticate(message) {
	        const accountId = await this.accountId();
	        return authenticate(message, accountId, this.provider);
	    }
	    async createLink(did) {
	        const accountId = await this.accountId();
	        return createLink(did, accountId, this.provider, this.opts);
	    }
	    async requestCapability(params) {
	        console.warn('WARN: requestCapability os an experimental API, that is subject to change any time.');
	        const account = await this.accountId();
	        const requestMessage = ocap_util_1.buildOcapRequestMessage({
	            ...params,
	            address: this.address,
	            chainId: account.chainId.toString(),
	            type: ocap_util_1.OcapTypes.EIP4361,
	        });
	        const signature = await safeSend(this.provider, 'personal_sign', [
	            requestMessage,
	            account.address,
	        ]);
	        return {
	            message: requestMessage,
	            signature: signature,
	        };
	    }
	    withAddress(address) {
	        return new EthereumAuthProvider(this.provider, address);
	    }
	}
	ethereum.EthereumAuthProvider = EthereumAuthProvider;
	function isEthAddress(address) {
	    return /^0x[a-fA-F0-9]{40}$/.test(address);
	}
	ethereum.isEthAddress = isEthAddress;
	async function getCode(address, provider) {
	    return safeSend(provider, 'eth_getCode', [address, 'latest']);
	}
	function safeSend(provider, method, params) {
	    if (params == null) {
	        params = [];
	    }
	    if (provider.request) {
	        return provider.request({ method, params }).then((response) => response, (error) => {
	            throw error;
	        });
	    }
	    else if (provider.sendAsync || provider.send) {
	        const sendFunc = (provider.sendAsync ? provider.sendAsync : provider.send).bind(provider);
	        const request = util_1$6.encodeRpcMessage(method, params);
	        return new Promise((resolve, reject) => {
	            sendFunc(request, (error, response) => {
	                if (error)
	                    reject(error);
	                if (response.error) {
	                    const error = new Error(response.error.message);
	                    error.code = response.error.code;
	                    error.data = response.error.data;
	                    reject(error);
	                }
	                resolve(response.result);
	            });
	        });
	    }
	    else {
	        throw new Error(`Unsupported provider; provider must implement one of the following methods: send, sendAsync, request`);
	    }
	}
	async function isERC1271(account, provider) {
	    const bytecode = await getCode(account.address, provider).catch(() => null);
	    return Boolean(bytecode && bytecode !== '0x' && bytecode !== '0x0' && bytecode !== '0x00');
	}
	ethereum.isERC1271 = isERC1271;
	function normalizeAccountId(account) {
	    account.address = account.address.toLowerCase();
	    return account;
	}
	ethereum.normalizeAccountId = normalizeAccountId;
	function utf8toHex(message) {
	    const bytes = uint8arrays$5.fromString(message);
	    const hex = uint8arrays$5.toString(bytes, 'base16');
	    return '0x' + hex;
	}
	async function createEthLink(did, account, provider, opts = {}) {
	    const { message, timestamp } = util_1$6.getConsentMessage(did, !opts.skipTimestamp);
	    const hexMessage = utf8toHex(message);
	    const signature = await safeSend(provider, 'personal_sign', [hexMessage, account.address]);
	    const proof = {
	        version: 2,
	        type: ADDRESS_TYPES.ethereumEOA,
	        message,
	        signature,
	        account: account.toString(),
	    };
	    if (!opts.skipTimestamp)
	        proof.timestamp = timestamp;
	    return proof;
	}
	async function validateChainId(account, provider) {
	    const chainIdHex = await safeSend(provider, 'eth_chainId', []);
	    const chainId = parseInt(chainIdHex, 16);
	    if (chainId !== parseInt(account.chainId.reference)) {
	        throw new Error(`ChainId in provider (${chainId}) is different from AccountID (${account.chainId.reference})`);
	    }
	}
	async function createErc1271Link(did, account, provider, opts) {
	    const ethLinkAccount = (opts === null || opts === void 0 ? void 0 : opts.eoaSignAccount) || account;
	    const res = await createEthLink(did, ethLinkAccount, provider, opts);
	    await validateChainId(account, provider);
	    return Object.assign(res, {
	        type: ADDRESS_TYPES.erc1271,
	        account: account.toString(),
	    });
	}
	async function createLink(did, account, provider, opts) {
	    account = normalizeAccountId(account);
	    if (await isERC1271(account, provider)) {
	        return createErc1271Link(did, account, provider, opts);
	    }
	    else {
	        return createEthLink(did, account, provider, opts);
	    }
	}
	ethereum.createLink = createLink;
	async function authenticate(message, account, provider) {
	    if (account)
	        account = normalizeAccountId(account);
	    if (provider.isAuthereum)
	        return provider.signMessageWithSigningKey(message);
	    const hexMessage = utf8toHex(message);
	    const signature = await safeSend(provider, 'personal_sign', [hexMessage, account.address]);
	    const signatureBytes = uint8arrays$5.fromString(signature.slice(2));
	    const digest = sha256$2.hash(signatureBytes);
	    return `0x${uint8arrays$5.toString(digest, 'base16')}`;
	}
	ethereum.authenticate = authenticate;

	var filecoin = {};

	var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
	    __setModuleDefault$5(result, mod);
	    return result;
	};
	Object.defineProperty(filecoin, "__esModule", { value: true });
	filecoin.asTransaction = filecoin.FilecoinAuthProvider = void 0;
	const caip_1$4 = cjs;
	const util_1$5 = util;
	const uint8arrays$4 = __importStar$5(uint8arrays$7);
	class FilecoinAuthProvider {
	    constructor(provider, address) {
	        this.provider = provider;
	        this.address = address;
	        this.isAuthProvider = true;
	    }
	    async accountId() {
	        const prefix = this.address[0];
	        const chainId = `fil:${prefix}`;
	        return new caip_1$4.AccountID({ address: this.address, chainId });
	    }
	    async authenticate(message) {
	        const payload = asTransaction$1(this.address, JSON.stringify(message));
	        const signatureResponse = await this.provider.sign(this.address, payload);
	        return signatureResponse.Signature.Data;
	    }
	    async createLink(did) {
	        const { message, timestamp } = util_1$5.getConsentMessage(did, true);
	        const payload = asTransaction$1(this.address, message);
	        const signatureResponse = await this.provider.sign(this.address, payload);
	        const accountId = await this.accountId();
	        return {
	            version: 2,
	            type: 'eoa-tx',
	            message: message,
	            signature: signatureResponse.Signature.Data,
	            account: accountId.toString(),
	            timestamp: timestamp,
	        };
	    }
	    withAddress(address) {
	        return new FilecoinAuthProvider(this.provider, address);
	    }
	}
	filecoin.FilecoinAuthProvider = FilecoinAuthProvider;
	function asTransaction$1(address, message) {
	    const messageParams = uint8arrays$4.toString(uint8arrays$4.fromString(message), 'base64');
	    return {
	        From: address,
	        To: address,
	        Value: '0',
	        Method: 0,
	        GasPrice: '1',
	        GasLimit: 1000,
	        Nonce: 0,
	        Params: messageParams,
	        GasFeeCap: '1',
	        GasPremium: '1',
	    };
	}
	filecoin.asTransaction = asTransaction$1;

	var polkadot = {};

	var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	    __setModuleDefault$4(result, mod);
	    return result;
	};
	Object.defineProperty(polkadot, "__esModule", { value: true });
	polkadot.PolkadotAuthProvider = void 0;
	const caip_1$3 = cjs;
	const util_1$4 = util;
	const uint8arrays$3 = __importStar$4(uint8arrays$7);
	const stringHex = (str) => `0x${uint8arrays$3.toString(uint8arrays$3.fromString(str), 'base16')}`;
	const CHAIN_ID = 'polkadot:b0a8d493285c2df73290dfb7e61f870f';
	class PolkadotAuthProvider {
	    constructor(provider, address) {
	        this.provider = provider;
	        this.address = address;
	        this.isAuthProvider = true;
	    }
	    async authenticate(message) {
	        throw new Error(`Not Implemented: PolkadotAuthProvider#authenticate, ${message}`);
	    }
	    async createLink(did) {
	        const { message, timestamp } = util_1$4.getConsentMessage(did);
	        const linkMessageHex = stringHex(message);
	        const account = await this.accountId();
	        const res = await this.provider.signRaw({
	            address: this.address,
	            data: linkMessageHex,
	            type: 'bytes',
	        });
	        return {
	            version: 2,
	            type: 'eoa',
	            message: message,
	            signature: res.signature,
	            account: account.toString(),
	            timestamp: timestamp,
	        };
	    }
	    async accountId() {
	        return new caip_1$3.AccountID({ address: this.address, chainId: CHAIN_ID });
	    }
	    withAddress(address) {
	        return new PolkadotAuthProvider(this.provider, address);
	    }
	}
	polkadot.PolkadotAuthProvider = PolkadotAuthProvider;

	var eosio = {};

	var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	    __setModuleDefault$3(result, mod);
	    return result;
	};
	Object.defineProperty(eosio, "__esModule", { value: true });
	eosio.toSignedPayload = eosio.toPayload = eosio.EosioAuthProvider = void 0;
	const caip_1$2 = cjs;
	const util_1$3 = util;
	const ethereum_1 = ethereum;
	const sha256Stable = __importStar$3(sha256$5);
	const uint8arrays$2 = __importStar$3(uint8arrays$7);
	const maxWordLength = 12;
	class EosioAuthProvider {
	    constructor(provider, address) {
	        this.provider = provider;
	        this.address = address;
	        this.isAuthProvider = true;
	    }
	    async accountId() {
	        const chainId = toCAIPChainId(await this.provider.getChainId());
	        return new caip_1$2.AccountID({
	            address: this.address,
	            chainId: `eosio:${chainId}`,
	        });
	    }
	    async authenticate(message) {
	        const accountID = await this.accountId();
	        const signedPayload = await toSignedPayload(message, accountID, this.provider);
	        const signatureBytes = uint8arrays$2.fromString(signedPayload);
	        const digest = sha256Stable.hash(signatureBytes);
	        return `0x${uint8arrays$2.toString(digest, 'base16')}`;
	    }
	    async createLink(did) {
	        const consentMessage = util_1$3.getConsentMessage(did);
	        const accountID = await this.accountId();
	        const signedPayload = await toSignedPayload(consentMessage.message, accountID, this.provider);
	        return {
	            version: 2,
	            type: 'eosio',
	            message: consentMessage.message,
	            signature: signedPayload,
	            account: accountID.toString(),
	            timestamp: consentMessage.timestamp,
	        };
	    }
	    withAddress(address) {
	        return new EosioAuthProvider(this.provider, address);
	    }
	}
	eosio.EosioAuthProvider = EosioAuthProvider;
	function toCAIPChainId(chainId) {
	    return chainId.substr(0, 32);
	}
	function sanitize(str, size) {
	    return str.replace(/\s/g, ' ').replace(new RegExp(`(\\S{${size}})`, 'g'), '$1 ');
	}
	function toPayload(message, accountID) {
	    const { address, chainId } = accountID;
	    const payload = `${message} [For: ${address} on chain: ${chainId}]`;
	    return sanitize(payload, maxWordLength);
	}
	eosio.toPayload = toPayload;
	async function toSignedPayload(message, accountID, provider) {
	    accountID = ethereum_1.normalizeAccountId(accountID);
	    const { chainId: { reference: requestedChainId }, address, } = accountID;
	    const accountName = await provider.getAccountName();
	    const chainId = toCAIPChainId(await provider.getChainId());
	    if (chainId !== requestedChainId) {
	        throw new Error(`Provider returned a different chainId than requested [returned: ${chainId}, requested: ${requestedChainId}]`);
	    }
	    if (accountName !== address) {
	        throw new Error(`Provider returned a different account than requested [returned: ${accountName}, requested: ${address}]`);
	    }
	    const payload = toPayload(message, accountID);
	    const [key] = await provider.getKeys();
	    return provider.signArbitrary(key, payload);
	}
	eosio.toSignedPayload = toSignedPayload;

	var cosmos = {};

	var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	};
	Object.defineProperty(cosmos, "__esModule", { value: true });
	cosmos.CosmosAuthProvider = cosmos.getMetaData = cosmos.asTransaction = void 0;
	const caip_1$1 = cjs;
	const util_1$2 = util;
	const sha256_1$1 = sha256$5;
	const uint8arrays$1 = __importStar$2(uint8arrays$7);
	const stringEncode = (str) => uint8arrays$1.toString(uint8arrays$1.fromString(str), 'base64pad');
	function asTransaction(address, message) {
	    return {
	        fee: {
	            amount: [{ amount: '0', denom: '' }],
	            gas: '0',
	        },
	        memo: message,
	        msg: [
	            {
	                type: 'cosmos-sdk/MsgSend',
	                value: {
	                    from_address: address,
	                    to_address: address,
	                    amount: [{ amount: '0', denom: '0' }],
	                },
	            },
	        ],
	    };
	}
	cosmos.asTransaction = asTransaction;
	function getMetaData() {
	    return {
	        account_number: '1',
	        chain_id: 'cosmos',
	        sequence: '0',
	    };
	}
	cosmos.getMetaData = getMetaData;
	class CosmosAuthProvider {
	    constructor(provider, address, chainRef) {
	        this.provider = provider;
	        this.address = address;
	        this.chainRef = chainRef;
	        this.isAuthProvider = true;
	    }
	    async authenticate(message) {
	        const accountID = await this.accountId();
	        const encodedMsg = stringEncode(message);
	        const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());
	        const digest = sha256_1$1.hash(uint8arrays$1.fromString(JSON.stringify(res.signatures[0])));
	        return `0x${uint8arrays$1.toString(digest, 'base16')}`;
	    }
	    async createLink(did) {
	        const { message, timestamp } = util_1$2.getConsentMessage(did);
	        const accountID = await this.accountId();
	        const encodedMsg = stringEncode(message);
	        const res = await this.provider.sign(asTransaction(accountID.address, encodedMsg), getMetaData());
	        const signature = stringEncode(JSON.stringify(res.signatures[0]));
	        return {
	            version: 2,
	            message,
	            signature,
	            account: accountID.toString(),
	            timestamp,
	        };
	    }
	    async accountId() {
	        return new caip_1$1.AccountID({
	            address: this.address,
	            chainId: `cosmos:${this.chainRef}`,
	        });
	    }
	    withAddress(address) {
	        return new CosmosAuthProvider(this.provider, address, this.chainRef);
	    }
	}
	cosmos.CosmosAuthProvider = CosmosAuthProvider;

	var tezos = {};

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TezosAuthProvider = exports.TEZOS_CHAIN_REF = exports.TEZOS_NAMESPACE = void 0;
	const caip_1 = cjs;
	const util_1 = util;
	const sha256_1 = sha256$5;
	const uint8arrays = __importStar(uint8arrays$7);
	exports.TEZOS_NAMESPACE = 'tezos';
	exports.TEZOS_CHAIN_REF = 'NetXdQprcVkpaWU';
	function encodeMessage(text) {
	    const michelinePrefix = '05';
	    const stringPrefix = '01';
	    const len = ('0000000' + text.length.toString(16)).slice(-8);
	    text = uint8arrays.toString(uint8arrays.fromString(text, 'utf-8'), 'hex');
	    return michelinePrefix + stringPrefix + len + text;
	}
	async function sign(provider, message) {
	    message = encodeMessage(message);
	    const { prefixSig: signature } = await provider.signer.sign(message);
	    return signature;
	}
	async function getActiveAddress(provider) {
	    return provider.signer.publicKeyHash();
	}
	class TezosAuthProvider {
	    constructor(provider) {
	        this.provider = provider;
	        this.isAuthProvider = true;
	        if (provider.signer === undefined) {
	            throw new Error('a `Signer` is required to use the `TezosAuthProvider`');
	        }
	    }
	    async authenticate(message) {
	        const signature = await sign(this.provider, message);
	        const digest = sha256_1.hash(uint8arrays.fromString(signature));
	        return `0x${uint8arrays.toString(digest, 'base16')}`;
	    }
	    async createLink(did) {
	        const { message, timestamp } = util_1.getConsentMessage(did);
	        const signature = await sign(this.provider, message);
	        const address = await getActiveAddress(this.provider);
	        const caipAccount = new caip_1.AccountID({
	            address,
	            chainId: `${exports.TEZOS_NAMESPACE}:${exports.TEZOS_CHAIN_REF}`,
	        });
	        const proof = {
	            version: 2,
	            message,
	            signature,
	            account: caipAccount.toString(),
	            timestamp,
	        };
	        return proof;
	    }
	    async accountId() {
	        const address = await getActiveAddress(this.provider);
	        return new caip_1.AccountID({
	            address,
	            chainId: `${exports.TEZOS_NAMESPACE}:${exports.TEZOS_CHAIN_REF}`,
	        });
	    }
	    withAddress(_address) {
	        throw new Error('TezosAuthProvider does not support withAddress');
	    }
	}
	exports.TezosAuthProvider = TezosAuthProvider;

	}(tezos));

	var near$1 = {};

	var lib$3 = {};

	var key_stores = {};

	var keystore = {};

	Object.defineProperty(keystore, "__esModule", { value: true });
	keystore.KeyStore = void 0;
	/**
	 * KeyStores are passed to {@link Near} via {@link NearConfig}
	 * and are used by the {@link InMemorySigner} to sign transactions.
	 *
	 * @example {@link connect}
	 */
	class KeyStore {
	}
	keystore.KeyStore = KeyStore;

	var in_memory_key_store = {};

	var key_pair = {};

	var naclFast = {exports: {}};

	(function (module) {
	(function(nacl) {

	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	// Public domain.
	//
	// Implementation derived from TweetNaCl version 20140427.
	// See for details: http://tweetnacl.cr.yp.to/

	var gf = function(init) {
	  var i, r = new Float64Array(16);
	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
	  return r;
	};

	//  Pluggable, initialized in high-level API below.
	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

	var _0 = new Uint8Array(16);
	var _9 = new Uint8Array(32); _9[0] = 9;

	var gf0 = gf(),
	    gf1 = gf([1]),
	    _121665 = gf([0xdb41, 1]),
	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

	function ts64(x, i, h, l) {
	  x[i]   = (h >> 24) & 0xff;
	  x[i+1] = (h >> 16) & 0xff;
	  x[i+2] = (h >>  8) & 0xff;
	  x[i+3] = h & 0xff;
	  x[i+4] = (l >> 24)  & 0xff;
	  x[i+5] = (l >> 16)  & 0xff;
	  x[i+6] = (l >>  8)  & 0xff;
	  x[i+7] = l & 0xff;
	}

	function vn(x, xi, y, yi, n) {
	  var i,d = 0;
	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
	  return (1 & ((d - 1) >>> 8)) - 1;
	}

	function crypto_verify_16(x, xi, y, yi) {
	  return vn(x,xi,y,yi,16);
	}

	function crypto_verify_32(x, xi, y, yi) {
	  return vn(x,xi,y,yi,32);
	}

	function core_salsa20(o, p, k, c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }
	   x0 =  x0 +  j0 | 0;
	   x1 =  x1 +  j1 | 0;
	   x2 =  x2 +  j2 | 0;
	   x3 =  x3 +  j3 | 0;
	   x4 =  x4 +  j4 | 0;
	   x5 =  x5 +  j5 | 0;
	   x6 =  x6 +  j6 | 0;
	   x7 =  x7 +  j7 | 0;
	   x8 =  x8 +  j8 | 0;
	   x9 =  x9 +  j9 | 0;
	  x10 = x10 + j10 | 0;
	  x11 = x11 + j11 | 0;
	  x12 = x12 + j12 | 0;
	  x13 = x13 + j13 | 0;
	  x14 = x14 + j14 | 0;
	  x15 = x15 + j15 | 0;

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x1 >>>  0 & 0xff;
	  o[ 5] = x1 >>>  8 & 0xff;
	  o[ 6] = x1 >>> 16 & 0xff;
	  o[ 7] = x1 >>> 24 & 0xff;

	  o[ 8] = x2 >>>  0 & 0xff;
	  o[ 9] = x2 >>>  8 & 0xff;
	  o[10] = x2 >>> 16 & 0xff;
	  o[11] = x2 >>> 24 & 0xff;

	  o[12] = x3 >>>  0 & 0xff;
	  o[13] = x3 >>>  8 & 0xff;
	  o[14] = x3 >>> 16 & 0xff;
	  o[15] = x3 >>> 24 & 0xff;

	  o[16] = x4 >>>  0 & 0xff;
	  o[17] = x4 >>>  8 & 0xff;
	  o[18] = x4 >>> 16 & 0xff;
	  o[19] = x4 >>> 24 & 0xff;

	  o[20] = x5 >>>  0 & 0xff;
	  o[21] = x5 >>>  8 & 0xff;
	  o[22] = x5 >>> 16 & 0xff;
	  o[23] = x5 >>> 24 & 0xff;

	  o[24] = x6 >>>  0 & 0xff;
	  o[25] = x6 >>>  8 & 0xff;
	  o[26] = x6 >>> 16 & 0xff;
	  o[27] = x6 >>> 24 & 0xff;

	  o[28] = x7 >>>  0 & 0xff;
	  o[29] = x7 >>>  8 & 0xff;
	  o[30] = x7 >>> 16 & 0xff;
	  o[31] = x7 >>> 24 & 0xff;

	  o[32] = x8 >>>  0 & 0xff;
	  o[33] = x8 >>>  8 & 0xff;
	  o[34] = x8 >>> 16 & 0xff;
	  o[35] = x8 >>> 24 & 0xff;

	  o[36] = x9 >>>  0 & 0xff;
	  o[37] = x9 >>>  8 & 0xff;
	  o[38] = x9 >>> 16 & 0xff;
	  o[39] = x9 >>> 24 & 0xff;

	  o[40] = x10 >>>  0 & 0xff;
	  o[41] = x10 >>>  8 & 0xff;
	  o[42] = x10 >>> 16 & 0xff;
	  o[43] = x10 >>> 24 & 0xff;

	  o[44] = x11 >>>  0 & 0xff;
	  o[45] = x11 >>>  8 & 0xff;
	  o[46] = x11 >>> 16 & 0xff;
	  o[47] = x11 >>> 24 & 0xff;

	  o[48] = x12 >>>  0 & 0xff;
	  o[49] = x12 >>>  8 & 0xff;
	  o[50] = x12 >>> 16 & 0xff;
	  o[51] = x12 >>> 24 & 0xff;

	  o[52] = x13 >>>  0 & 0xff;
	  o[53] = x13 >>>  8 & 0xff;
	  o[54] = x13 >>> 16 & 0xff;
	  o[55] = x13 >>> 24 & 0xff;

	  o[56] = x14 >>>  0 & 0xff;
	  o[57] = x14 >>>  8 & 0xff;
	  o[58] = x14 >>> 16 & 0xff;
	  o[59] = x14 >>> 24 & 0xff;

	  o[60] = x15 >>>  0 & 0xff;
	  o[61] = x15 >>>  8 & 0xff;
	  o[62] = x15 >>> 16 & 0xff;
	  o[63] = x15 >>> 24 & 0xff;
	}

	function core_hsalsa20(o,p,k,c) {
	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
	      x15 = j15, u;

	  for (var i = 0; i < 20; i += 2) {
	    u = x0 + x12 | 0;
	    x4 ^= u<<7 | u>>>(32-7);
	    u = x4 + x0 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x4 | 0;
	    x12 ^= u<<13 | u>>>(32-13);
	    u = x12 + x8 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x1 | 0;
	    x9 ^= u<<7 | u>>>(32-7);
	    u = x9 + x5 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x9 | 0;
	    x1 ^= u<<13 | u>>>(32-13);
	    u = x1 + x13 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x6 | 0;
	    x14 ^= u<<7 | u>>>(32-7);
	    u = x14 + x10 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x14 | 0;
	    x6 ^= u<<13 | u>>>(32-13);
	    u = x6 + x2 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x11 | 0;
	    x3 ^= u<<7 | u>>>(32-7);
	    u = x3 + x15 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x3 | 0;
	    x11 ^= u<<13 | u>>>(32-13);
	    u = x11 + x7 | 0;
	    x15 ^= u<<18 | u>>>(32-18);

	    u = x0 + x3 | 0;
	    x1 ^= u<<7 | u>>>(32-7);
	    u = x1 + x0 | 0;
	    x2 ^= u<<9 | u>>>(32-9);
	    u = x2 + x1 | 0;
	    x3 ^= u<<13 | u>>>(32-13);
	    u = x3 + x2 | 0;
	    x0 ^= u<<18 | u>>>(32-18);

	    u = x5 + x4 | 0;
	    x6 ^= u<<7 | u>>>(32-7);
	    u = x6 + x5 | 0;
	    x7 ^= u<<9 | u>>>(32-9);
	    u = x7 + x6 | 0;
	    x4 ^= u<<13 | u>>>(32-13);
	    u = x4 + x7 | 0;
	    x5 ^= u<<18 | u>>>(32-18);

	    u = x10 + x9 | 0;
	    x11 ^= u<<7 | u>>>(32-7);
	    u = x11 + x10 | 0;
	    x8 ^= u<<9 | u>>>(32-9);
	    u = x8 + x11 | 0;
	    x9 ^= u<<13 | u>>>(32-13);
	    u = x9 + x8 | 0;
	    x10 ^= u<<18 | u>>>(32-18);

	    u = x15 + x14 | 0;
	    x12 ^= u<<7 | u>>>(32-7);
	    u = x12 + x15 | 0;
	    x13 ^= u<<9 | u>>>(32-9);
	    u = x13 + x12 | 0;
	    x14 ^= u<<13 | u>>>(32-13);
	    u = x14 + x13 | 0;
	    x15 ^= u<<18 | u>>>(32-18);
	  }

	  o[ 0] = x0 >>>  0 & 0xff;
	  o[ 1] = x0 >>>  8 & 0xff;
	  o[ 2] = x0 >>> 16 & 0xff;
	  o[ 3] = x0 >>> 24 & 0xff;

	  o[ 4] = x5 >>>  0 & 0xff;
	  o[ 5] = x5 >>>  8 & 0xff;
	  o[ 6] = x5 >>> 16 & 0xff;
	  o[ 7] = x5 >>> 24 & 0xff;

	  o[ 8] = x10 >>>  0 & 0xff;
	  o[ 9] = x10 >>>  8 & 0xff;
	  o[10] = x10 >>> 16 & 0xff;
	  o[11] = x10 >>> 24 & 0xff;

	  o[12] = x15 >>>  0 & 0xff;
	  o[13] = x15 >>>  8 & 0xff;
	  o[14] = x15 >>> 16 & 0xff;
	  o[15] = x15 >>> 24 & 0xff;

	  o[16] = x6 >>>  0 & 0xff;
	  o[17] = x6 >>>  8 & 0xff;
	  o[18] = x6 >>> 16 & 0xff;
	  o[19] = x6 >>> 24 & 0xff;

	  o[20] = x7 >>>  0 & 0xff;
	  o[21] = x7 >>>  8 & 0xff;
	  o[22] = x7 >>> 16 & 0xff;
	  o[23] = x7 >>> 24 & 0xff;

	  o[24] = x8 >>>  0 & 0xff;
	  o[25] = x8 >>>  8 & 0xff;
	  o[26] = x8 >>> 16 & 0xff;
	  o[27] = x8 >>> 24 & 0xff;

	  o[28] = x9 >>>  0 & 0xff;
	  o[29] = x9 >>>  8 & 0xff;
	  o[30] = x9 >>> 16 & 0xff;
	  o[31] = x9 >>> 24 & 0xff;
	}

	function crypto_core_salsa20(out,inp,k,c) {
	  core_salsa20(out,inp,k,c);
	}

	function crypto_core_hsalsa20(out,inp,k,c) {
	  core_hsalsa20(out,inp,k,c);
	}

	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	            // "expand 32-byte k"

	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	    mpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
	  }
	  return 0;
	}

	function crypto_stream_salsa20(c,cpos,b,n,k) {
	  var z = new Uint8Array(16), x = new Uint8Array(64);
	  var u, i;
	  for (i = 0; i < 16; i++) z[i] = 0;
	  for (i = 0; i < 8; i++) z[i] = n[i];
	  while (b >= 64) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
	    u = 1;
	    for (i = 8; i < 16; i++) {
	      u = u + (z[i] & 0xff) | 0;
	      z[i] = u & 0xff;
	      u >>>= 8;
	    }
	    b -= 64;
	    cpos += 64;
	  }
	  if (b > 0) {
	    crypto_core_salsa20(x,z,k,sigma);
	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
	  }
	  return 0;
	}

	function crypto_stream(c,cpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20(c,cpos,d,sn,s);
	}

	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
	  var s = new Uint8Array(32);
	  crypto_core_hsalsa20(s,n,k,sigma);
	  var sn = new Uint8Array(8);
	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
	}

	/*
	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
	* https://github.com/floodyberry/poly1305-donna
	*/

	var poly1305 = function(key) {
	  this.buffer = new Uint8Array(16);
	  this.r = new Uint16Array(10);
	  this.h = new Uint16Array(10);
	  this.pad = new Uint16Array(8);
	  this.leftover = 0;
	  this.fin = 0;

	  var t0, t1, t2, t3, t4, t5, t6, t7;

	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	  this.r[9] = ((t7 >>>  5)) & 0x007f;

	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	};

	poly1305.prototype.blocks = function(m, mpos, bytes) {
	  var hibit = this.fin ? 0 : (1 << 11);
	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

	  var h0 = this.h[0],
	      h1 = this.h[1],
	      h2 = this.h[2],
	      h3 = this.h[3],
	      h4 = this.h[4],
	      h5 = this.h[5],
	      h6 = this.h[6],
	      h7 = this.h[7],
	      h8 = this.h[8],
	      h9 = this.h[9];

	  var r0 = this.r[0],
	      r1 = this.r[1],
	      r2 = this.r[2],
	      r3 = this.r[3],
	      r4 = this.r[4],
	      r5 = this.r[5],
	      r6 = this.r[6],
	      r7 = this.r[7],
	      r8 = this.r[8],
	      r9 = this.r[9];

	  while (bytes >= 16) {
	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
	    h5 += ((t4 >>>  1)) & 0x1fff;
	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
	    h9 += ((t7 >>> 5)) | hibit;

	    c = 0;

	    d0 = c;
	    d0 += h0 * r0;
	    d0 += h1 * (5 * r9);
	    d0 += h2 * (5 * r8);
	    d0 += h3 * (5 * r7);
	    d0 += h4 * (5 * r6);
	    c = (d0 >>> 13); d0 &= 0x1fff;
	    d0 += h5 * (5 * r5);
	    d0 += h6 * (5 * r4);
	    d0 += h7 * (5 * r3);
	    d0 += h8 * (5 * r2);
	    d0 += h9 * (5 * r1);
	    c += (d0 >>> 13); d0 &= 0x1fff;

	    d1 = c;
	    d1 += h0 * r1;
	    d1 += h1 * r0;
	    d1 += h2 * (5 * r9);
	    d1 += h3 * (5 * r8);
	    d1 += h4 * (5 * r7);
	    c = (d1 >>> 13); d1 &= 0x1fff;
	    d1 += h5 * (5 * r6);
	    d1 += h6 * (5 * r5);
	    d1 += h7 * (5 * r4);
	    d1 += h8 * (5 * r3);
	    d1 += h9 * (5 * r2);
	    c += (d1 >>> 13); d1 &= 0x1fff;

	    d2 = c;
	    d2 += h0 * r2;
	    d2 += h1 * r1;
	    d2 += h2 * r0;
	    d2 += h3 * (5 * r9);
	    d2 += h4 * (5 * r8);
	    c = (d2 >>> 13); d2 &= 0x1fff;
	    d2 += h5 * (5 * r7);
	    d2 += h6 * (5 * r6);
	    d2 += h7 * (5 * r5);
	    d2 += h8 * (5 * r4);
	    d2 += h9 * (5 * r3);
	    c += (d2 >>> 13); d2 &= 0x1fff;

	    d3 = c;
	    d3 += h0 * r3;
	    d3 += h1 * r2;
	    d3 += h2 * r1;
	    d3 += h3 * r0;
	    d3 += h4 * (5 * r9);
	    c = (d3 >>> 13); d3 &= 0x1fff;
	    d3 += h5 * (5 * r8);
	    d3 += h6 * (5 * r7);
	    d3 += h7 * (5 * r6);
	    d3 += h8 * (5 * r5);
	    d3 += h9 * (5 * r4);
	    c += (d3 >>> 13); d3 &= 0x1fff;

	    d4 = c;
	    d4 += h0 * r4;
	    d4 += h1 * r3;
	    d4 += h2 * r2;
	    d4 += h3 * r1;
	    d4 += h4 * r0;
	    c = (d4 >>> 13); d4 &= 0x1fff;
	    d4 += h5 * (5 * r9);
	    d4 += h6 * (5 * r8);
	    d4 += h7 * (5 * r7);
	    d4 += h8 * (5 * r6);
	    d4 += h9 * (5 * r5);
	    c += (d4 >>> 13); d4 &= 0x1fff;

	    d5 = c;
	    d5 += h0 * r5;
	    d5 += h1 * r4;
	    d5 += h2 * r3;
	    d5 += h3 * r2;
	    d5 += h4 * r1;
	    c = (d5 >>> 13); d5 &= 0x1fff;
	    d5 += h5 * r0;
	    d5 += h6 * (5 * r9);
	    d5 += h7 * (5 * r8);
	    d5 += h8 * (5 * r7);
	    d5 += h9 * (5 * r6);
	    c += (d5 >>> 13); d5 &= 0x1fff;

	    d6 = c;
	    d6 += h0 * r6;
	    d6 += h1 * r5;
	    d6 += h2 * r4;
	    d6 += h3 * r3;
	    d6 += h4 * r2;
	    c = (d6 >>> 13); d6 &= 0x1fff;
	    d6 += h5 * r1;
	    d6 += h6 * r0;
	    d6 += h7 * (5 * r9);
	    d6 += h8 * (5 * r8);
	    d6 += h9 * (5 * r7);
	    c += (d6 >>> 13); d6 &= 0x1fff;

	    d7 = c;
	    d7 += h0 * r7;
	    d7 += h1 * r6;
	    d7 += h2 * r5;
	    d7 += h3 * r4;
	    d7 += h4 * r3;
	    c = (d7 >>> 13); d7 &= 0x1fff;
	    d7 += h5 * r2;
	    d7 += h6 * r1;
	    d7 += h7 * r0;
	    d7 += h8 * (5 * r9);
	    d7 += h9 * (5 * r8);
	    c += (d7 >>> 13); d7 &= 0x1fff;

	    d8 = c;
	    d8 += h0 * r8;
	    d8 += h1 * r7;
	    d8 += h2 * r6;
	    d8 += h3 * r5;
	    d8 += h4 * r4;
	    c = (d8 >>> 13); d8 &= 0x1fff;
	    d8 += h5 * r3;
	    d8 += h6 * r2;
	    d8 += h7 * r1;
	    d8 += h8 * r0;
	    d8 += h9 * (5 * r9);
	    c += (d8 >>> 13); d8 &= 0x1fff;

	    d9 = c;
	    d9 += h0 * r9;
	    d9 += h1 * r8;
	    d9 += h2 * r7;
	    d9 += h3 * r6;
	    d9 += h4 * r5;
	    c = (d9 >>> 13); d9 &= 0x1fff;
	    d9 += h5 * r4;
	    d9 += h6 * r3;
	    d9 += h7 * r2;
	    d9 += h8 * r1;
	    d9 += h9 * r0;
	    c += (d9 >>> 13); d9 &= 0x1fff;

	    c = (((c << 2) + c)) | 0;
	    c = (c + d0) | 0;
	    d0 = c & 0x1fff;
	    c = (c >>> 13);
	    d1 += c;

	    h0 = d0;
	    h1 = d1;
	    h2 = d2;
	    h3 = d3;
	    h4 = d4;
	    h5 = d5;
	    h6 = d6;
	    h7 = d7;
	    h8 = d8;
	    h9 = d9;

	    mpos += 16;
	    bytes -= 16;
	  }
	  this.h[0] = h0;
	  this.h[1] = h1;
	  this.h[2] = h2;
	  this.h[3] = h3;
	  this.h[4] = h4;
	  this.h[5] = h5;
	  this.h[6] = h6;
	  this.h[7] = h7;
	  this.h[8] = h8;
	  this.h[9] = h9;
	};

	poly1305.prototype.finish = function(mac, macpos) {
	  var g = new Uint16Array(10);
	  var c, mask, f, i;

	  if (this.leftover) {
	    i = this.leftover;
	    this.buffer[i++] = 1;
	    for (; i < 16; i++) this.buffer[i] = 0;
	    this.fin = 1;
	    this.blocks(this.buffer, 0, 16);
	  }

	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  for (i = 2; i < 10; i++) {
	    this.h[i] += c;
	    c = this.h[i] >>> 13;
	    this.h[i] &= 0x1fff;
	  }
	  this.h[0] += (c * 5);
	  c = this.h[0] >>> 13;
	  this.h[0] &= 0x1fff;
	  this.h[1] += c;
	  c = this.h[1] >>> 13;
	  this.h[1] &= 0x1fff;
	  this.h[2] += c;

	  g[0] = this.h[0] + 5;
	  c = g[0] >>> 13;
	  g[0] &= 0x1fff;
	  for (i = 1; i < 10; i++) {
	    g[i] = this.h[i] + c;
	    c = g[i] >>> 13;
	    g[i] &= 0x1fff;
	  }
	  g[9] -= (1 << 13);

	  mask = (c ^ 1) - 1;
	  for (i = 0; i < 10; i++) g[i] &= mask;
	  mask = ~mask;
	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

	  f = this.h[0] + this.pad[0];
	  this.h[0] = f & 0xffff;
	  for (i = 1; i < 8; i++) {
	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
	    this.h[i] = f & 0xffff;
	  }

	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
	};

	poly1305.prototype.update = function(m, mpos, bytes) {
	  var i, want;

	  if (this.leftover) {
	    want = (16 - this.leftover);
	    if (want > bytes)
	      want = bytes;
	    for (i = 0; i < want; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    bytes -= want;
	    mpos += want;
	    this.leftover += want;
	    if (this.leftover < 16)
	      return;
	    this.blocks(this.buffer, 0, 16);
	    this.leftover = 0;
	  }

	  if (bytes >= 16) {
	    want = bytes - (bytes % 16);
	    this.blocks(m, mpos, want);
	    mpos += want;
	    bytes -= want;
	  }

	  if (bytes) {
	    for (i = 0; i < bytes; i++)
	      this.buffer[this.leftover + i] = m[mpos+i];
	    this.leftover += bytes;
	  }
	};

	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	  var s = new poly1305(k);
	  s.update(m, mpos, n);
	  s.finish(out, outpos);
	  return 0;
	}

	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	  var x = new Uint8Array(16);
	  crypto_onetimeauth(x,0,m,mpos,n,k);
	  return crypto_verify_16(h,hpos,x,0);
	}

	function crypto_secretbox(c,m,d,n,k) {
	  var i;
	  if (d < 32) return -1;
	  crypto_stream_xor(c,0,m,0,d,n,k);
	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	  for (i = 0; i < 16; i++) c[i] = 0;
	  return 0;
	}

	function crypto_secretbox_open(m,c,d,n,k) {
	  var i;
	  var x = new Uint8Array(32);
	  if (d < 32) return -1;
	  crypto_stream(x,0,32,n,k);
	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
	  crypto_stream_xor(m,0,c,0,d,n,k);
	  for (i = 0; i < 32; i++) m[i] = 0;
	  return 0;
	}

	function set25519(r, a) {
	  var i;
	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
	}

	function car25519(o) {
	  var i, v, c = 1;
	  for (i = 0; i < 16; i++) {
	    v = o[i] + c + 65535;
	    c = Math.floor(v / 65536);
	    o[i] = v - c * 65536;
	  }
	  o[0] += c-1 + 37 * (c-1);
	}

	function sel25519(p, q, b) {
	  var t, c = ~(b-1);
	  for (var i = 0; i < 16; i++) {
	    t = c & (p[i] ^ q[i]);
	    p[i] ^= t;
	    q[i] ^= t;
	  }
	}

	function pack25519(o, n) {
	  var i, j, b;
	  var m = gf(), t = gf();
	  for (i = 0; i < 16; i++) t[i] = n[i];
	  car25519(t);
	  car25519(t);
	  car25519(t);
	  for (j = 0; j < 2; j++) {
	    m[0] = t[0] - 0xffed;
	    for (i = 1; i < 15; i++) {
	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
	      m[i-1] &= 0xffff;
	    }
	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
	    b = (m[15]>>16) & 1;
	    m[14] &= 0xffff;
	    sel25519(t, m, 1-b);
	  }
	  for (i = 0; i < 16; i++) {
	    o[2*i] = t[i] & 0xff;
	    o[2*i+1] = t[i]>>8;
	  }
	}

	function neq25519(a, b) {
	  var c = new Uint8Array(32), d = new Uint8Array(32);
	  pack25519(c, a);
	  pack25519(d, b);
	  return crypto_verify_32(c, 0, d, 0);
	}

	function par25519(a) {
	  var d = new Uint8Array(32);
	  pack25519(d, a);
	  return d[0] & 1;
	}

	function unpack25519(o, n) {
	  var i;
	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
	  o[15] &= 0x7fff;
	}

	function A(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
	}

	function Z(o, a, b) {
	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
	}

	function M(o, a, b) {
	  var v, c,
	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
	    b0 = b[0],
	    b1 = b[1],
	    b2 = b[2],
	    b3 = b[3],
	    b4 = b[4],
	    b5 = b[5],
	    b6 = b[6],
	    b7 = b[7],
	    b8 = b[8],
	    b9 = b[9],
	    b10 = b[10],
	    b11 = b[11],
	    b12 = b[12],
	    b13 = b[13],
	    b14 = b[14],
	    b15 = b[15];

	  v = a[0];
	  t0 += v * b0;
	  t1 += v * b1;
	  t2 += v * b2;
	  t3 += v * b3;
	  t4 += v * b4;
	  t5 += v * b5;
	  t6 += v * b6;
	  t7 += v * b7;
	  t8 += v * b8;
	  t9 += v * b9;
	  t10 += v * b10;
	  t11 += v * b11;
	  t12 += v * b12;
	  t13 += v * b13;
	  t14 += v * b14;
	  t15 += v * b15;
	  v = a[1];
	  t1 += v * b0;
	  t2 += v * b1;
	  t3 += v * b2;
	  t4 += v * b3;
	  t5 += v * b4;
	  t6 += v * b5;
	  t7 += v * b6;
	  t8 += v * b7;
	  t9 += v * b8;
	  t10 += v * b9;
	  t11 += v * b10;
	  t12 += v * b11;
	  t13 += v * b12;
	  t14 += v * b13;
	  t15 += v * b14;
	  t16 += v * b15;
	  v = a[2];
	  t2 += v * b0;
	  t3 += v * b1;
	  t4 += v * b2;
	  t5 += v * b3;
	  t6 += v * b4;
	  t7 += v * b5;
	  t8 += v * b6;
	  t9 += v * b7;
	  t10 += v * b8;
	  t11 += v * b9;
	  t12 += v * b10;
	  t13 += v * b11;
	  t14 += v * b12;
	  t15 += v * b13;
	  t16 += v * b14;
	  t17 += v * b15;
	  v = a[3];
	  t3 += v * b0;
	  t4 += v * b1;
	  t5 += v * b2;
	  t6 += v * b3;
	  t7 += v * b4;
	  t8 += v * b5;
	  t9 += v * b6;
	  t10 += v * b7;
	  t11 += v * b8;
	  t12 += v * b9;
	  t13 += v * b10;
	  t14 += v * b11;
	  t15 += v * b12;
	  t16 += v * b13;
	  t17 += v * b14;
	  t18 += v * b15;
	  v = a[4];
	  t4 += v * b0;
	  t5 += v * b1;
	  t6 += v * b2;
	  t7 += v * b3;
	  t8 += v * b4;
	  t9 += v * b5;
	  t10 += v * b6;
	  t11 += v * b7;
	  t12 += v * b8;
	  t13 += v * b9;
	  t14 += v * b10;
	  t15 += v * b11;
	  t16 += v * b12;
	  t17 += v * b13;
	  t18 += v * b14;
	  t19 += v * b15;
	  v = a[5];
	  t5 += v * b0;
	  t6 += v * b1;
	  t7 += v * b2;
	  t8 += v * b3;
	  t9 += v * b4;
	  t10 += v * b5;
	  t11 += v * b6;
	  t12 += v * b7;
	  t13 += v * b8;
	  t14 += v * b9;
	  t15 += v * b10;
	  t16 += v * b11;
	  t17 += v * b12;
	  t18 += v * b13;
	  t19 += v * b14;
	  t20 += v * b15;
	  v = a[6];
	  t6 += v * b0;
	  t7 += v * b1;
	  t8 += v * b2;
	  t9 += v * b3;
	  t10 += v * b4;
	  t11 += v * b5;
	  t12 += v * b6;
	  t13 += v * b7;
	  t14 += v * b8;
	  t15 += v * b9;
	  t16 += v * b10;
	  t17 += v * b11;
	  t18 += v * b12;
	  t19 += v * b13;
	  t20 += v * b14;
	  t21 += v * b15;
	  v = a[7];
	  t7 += v * b0;
	  t8 += v * b1;
	  t9 += v * b2;
	  t10 += v * b3;
	  t11 += v * b4;
	  t12 += v * b5;
	  t13 += v * b6;
	  t14 += v * b7;
	  t15 += v * b8;
	  t16 += v * b9;
	  t17 += v * b10;
	  t18 += v * b11;
	  t19 += v * b12;
	  t20 += v * b13;
	  t21 += v * b14;
	  t22 += v * b15;
	  v = a[8];
	  t8 += v * b0;
	  t9 += v * b1;
	  t10 += v * b2;
	  t11 += v * b3;
	  t12 += v * b4;
	  t13 += v * b5;
	  t14 += v * b6;
	  t15 += v * b7;
	  t16 += v * b8;
	  t17 += v * b9;
	  t18 += v * b10;
	  t19 += v * b11;
	  t20 += v * b12;
	  t21 += v * b13;
	  t22 += v * b14;
	  t23 += v * b15;
	  v = a[9];
	  t9 += v * b0;
	  t10 += v * b1;
	  t11 += v * b2;
	  t12 += v * b3;
	  t13 += v * b4;
	  t14 += v * b5;
	  t15 += v * b6;
	  t16 += v * b7;
	  t17 += v * b8;
	  t18 += v * b9;
	  t19 += v * b10;
	  t20 += v * b11;
	  t21 += v * b12;
	  t22 += v * b13;
	  t23 += v * b14;
	  t24 += v * b15;
	  v = a[10];
	  t10 += v * b0;
	  t11 += v * b1;
	  t12 += v * b2;
	  t13 += v * b3;
	  t14 += v * b4;
	  t15 += v * b5;
	  t16 += v * b6;
	  t17 += v * b7;
	  t18 += v * b8;
	  t19 += v * b9;
	  t20 += v * b10;
	  t21 += v * b11;
	  t22 += v * b12;
	  t23 += v * b13;
	  t24 += v * b14;
	  t25 += v * b15;
	  v = a[11];
	  t11 += v * b0;
	  t12 += v * b1;
	  t13 += v * b2;
	  t14 += v * b3;
	  t15 += v * b4;
	  t16 += v * b5;
	  t17 += v * b6;
	  t18 += v * b7;
	  t19 += v * b8;
	  t20 += v * b9;
	  t21 += v * b10;
	  t22 += v * b11;
	  t23 += v * b12;
	  t24 += v * b13;
	  t25 += v * b14;
	  t26 += v * b15;
	  v = a[12];
	  t12 += v * b0;
	  t13 += v * b1;
	  t14 += v * b2;
	  t15 += v * b3;
	  t16 += v * b4;
	  t17 += v * b5;
	  t18 += v * b6;
	  t19 += v * b7;
	  t20 += v * b8;
	  t21 += v * b9;
	  t22 += v * b10;
	  t23 += v * b11;
	  t24 += v * b12;
	  t25 += v * b13;
	  t26 += v * b14;
	  t27 += v * b15;
	  v = a[13];
	  t13 += v * b0;
	  t14 += v * b1;
	  t15 += v * b2;
	  t16 += v * b3;
	  t17 += v * b4;
	  t18 += v * b5;
	  t19 += v * b6;
	  t20 += v * b7;
	  t21 += v * b8;
	  t22 += v * b9;
	  t23 += v * b10;
	  t24 += v * b11;
	  t25 += v * b12;
	  t26 += v * b13;
	  t27 += v * b14;
	  t28 += v * b15;
	  v = a[14];
	  t14 += v * b0;
	  t15 += v * b1;
	  t16 += v * b2;
	  t17 += v * b3;
	  t18 += v * b4;
	  t19 += v * b5;
	  t20 += v * b6;
	  t21 += v * b7;
	  t22 += v * b8;
	  t23 += v * b9;
	  t24 += v * b10;
	  t25 += v * b11;
	  t26 += v * b12;
	  t27 += v * b13;
	  t28 += v * b14;
	  t29 += v * b15;
	  v = a[15];
	  t15 += v * b0;
	  t16 += v * b1;
	  t17 += v * b2;
	  t18 += v * b3;
	  t19 += v * b4;
	  t20 += v * b5;
	  t21 += v * b6;
	  t22 += v * b7;
	  t23 += v * b8;
	  t24 += v * b9;
	  t25 += v * b10;
	  t26 += v * b11;
	  t27 += v * b12;
	  t28 += v * b13;
	  t29 += v * b14;
	  t30 += v * b15;

	  t0  += 38 * t16;
	  t1  += 38 * t17;
	  t2  += 38 * t18;
	  t3  += 38 * t19;
	  t4  += 38 * t20;
	  t5  += 38 * t21;
	  t6  += 38 * t22;
	  t7  += 38 * t23;
	  t8  += 38 * t24;
	  t9  += 38 * t25;
	  t10 += 38 * t26;
	  t11 += 38 * t27;
	  t12 += 38 * t28;
	  t13 += 38 * t29;
	  t14 += 38 * t30;
	  // t15 left as is

	  // first car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  // second car
	  c = 1;
	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
	  t0 += c-1 + 37 * (c-1);

	  o[ 0] = t0;
	  o[ 1] = t1;
	  o[ 2] = t2;
	  o[ 3] = t3;
	  o[ 4] = t4;
	  o[ 5] = t5;
	  o[ 6] = t6;
	  o[ 7] = t7;
	  o[ 8] = t8;
	  o[ 9] = t9;
	  o[10] = t10;
	  o[11] = t11;
	  o[12] = t12;
	  o[13] = t13;
	  o[14] = t14;
	  o[15] = t15;
	}

	function S(o, a) {
	  M(o, a, a);
	}

	function inv25519(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 253; a >= 0; a--) {
	    S(c, c);
	    if(a !== 2 && a !== 4) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function pow2523(o, i) {
	  var c = gf();
	  var a;
	  for (a = 0; a < 16; a++) c[a] = i[a];
	  for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if(a !== 1) M(c, c, i);
	  }
	  for (a = 0; a < 16; a++) o[a] = c[a];
	}

	function crypto_scalarmult(q, n, p) {
	  var z = new Uint8Array(32);
	  var x = new Float64Array(80), r, i;
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf();
	  for (i = 0; i < 31; i++) z[i] = n[i];
	  z[31]=(n[31]&127)|64;
	  z[0]&=248;
	  unpack25519(x,p);
	  for (i = 0; i < 16; i++) {
	    b[i]=x[i];
	    d[i]=a[i]=c[i]=0;
	  }
	  a[0]=d[0]=1;
	  for (i=254; i>=0; --i) {
	    r=(z[i>>>3]>>>(i&7))&1;
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	    A(e,a,c);
	    Z(a,a,c);
	    A(c,b,d);
	    Z(b,b,d);
	    S(d,e);
	    S(f,a);
	    M(a,c,a);
	    M(c,b,e);
	    A(e,a,c);
	    Z(a,a,c);
	    S(b,a);
	    Z(c,d,f);
	    M(a,c,_121665);
	    A(a,a,d);
	    M(c,c,a);
	    M(a,d,f);
	    M(d,b,x);
	    S(b,e);
	    sel25519(a,b,r);
	    sel25519(c,d,r);
	  }
	  for (i = 0; i < 16; i++) {
	    x[i+16]=a[i];
	    x[i+32]=c[i];
	    x[i+48]=b[i];
	    x[i+64]=d[i];
	  }
	  var x32 = x.subarray(32);
	  var x16 = x.subarray(16);
	  inv25519(x32,x32);
	  M(x16,x16,x32);
	  pack25519(q,x16);
	  return 0;
	}

	function crypto_scalarmult_base(q, n) {
	  return crypto_scalarmult(q, n, _9);
	}

	function crypto_box_keypair(y, x) {
	  randombytes(x, 32);
	  return crypto_scalarmult_base(y, x);
	}

	function crypto_box_beforenm(k, y, x) {
	  var s = new Uint8Array(32);
	  crypto_scalarmult(s, x, y);
	  return crypto_core_hsalsa20(k, _0, s, sigma);
	}

	var crypto_box_afternm = crypto_secretbox;
	var crypto_box_open_afternm = crypto_secretbox_open;

	function crypto_box(c, m, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_afternm(c, m, d, n, k);
	}

	function crypto_box_open(m, c, d, n, y, x) {
	  var k = new Uint8Array(32);
	  crypto_box_beforenm(k, y, x);
	  return crypto_box_open_afternm(m, c, d, n, k);
	}

	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function crypto_hashblocks_hl(hh, hl, m, n) {
	  var wh = new Int32Array(16), wl = new Int32Array(16),
	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
	      th, tl, i, j, h, l, a, b, c, d;

	  var ah0 = hh[0],
	      ah1 = hh[1],
	      ah2 = hh[2],
	      ah3 = hh[3],
	      ah4 = hh[4],
	      ah5 = hh[5],
	      ah6 = hh[6],
	      ah7 = hh[7],

	      al0 = hl[0],
	      al1 = hl[1],
	      al2 = hl[2],
	      al3 = hl[3],
	      al4 = hl[4],
	      al5 = hl[5],
	      al6 = hl[6],
	      al7 = hl[7];

	  var pos = 0;
	  while (n >= 128) {
	    for (i = 0; i < 16; i++) {
	      j = 8 * i + pos;
	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
	    }
	    for (i = 0; i < 80; i++) {
	      bh0 = ah0;
	      bh1 = ah1;
	      bh2 = ah2;
	      bh3 = ah3;
	      bh4 = ah4;
	      bh5 = ah5;
	      bh6 = ah6;
	      bh7 = ah7;

	      bl0 = al0;
	      bl1 = al1;
	      bl2 = al2;
	      bl3 = al3;
	      bl4 = al4;
	      bl5 = al5;
	      bl6 = al6;
	      bl7 = al7;

	      // add
	      h = ah7;
	      l = al7;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma1
	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Ch
	      h = (ah4 & ah5) ^ (~ah4 & ah6);
	      l = (al4 & al5) ^ (~al4 & al6);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // K
	      h = K[i*2];
	      l = K[i*2+1];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // w
	      h = wh[i%16];
	      l = wl[i%16];

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      th = c & 0xffff | d << 16;
	      tl = a & 0xffff | b << 16;

	      // add
	      h = th;
	      l = tl;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      // Sigma0
	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      // Maj
	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh7 = (c & 0xffff) | (d << 16);
	      bl7 = (a & 0xffff) | (b << 16);

	      // add
	      h = bh3;
	      l = bl3;

	      a = l & 0xffff; b = l >>> 16;
	      c = h & 0xffff; d = h >>> 16;

	      h = th;
	      l = tl;

	      a += l & 0xffff; b += l >>> 16;
	      c += h & 0xffff; d += h >>> 16;

	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;

	      bh3 = (c & 0xffff) | (d << 16);
	      bl3 = (a & 0xffff) | (b << 16);

	      ah1 = bh0;
	      ah2 = bh1;
	      ah3 = bh2;
	      ah4 = bh3;
	      ah5 = bh4;
	      ah6 = bh5;
	      ah7 = bh6;
	      ah0 = bh7;

	      al1 = bl0;
	      al2 = bl1;
	      al3 = bl2;
	      al4 = bl3;
	      al5 = bl4;
	      al6 = bl5;
	      al7 = bl6;
	      al0 = bl7;

	      if (i%16 === 15) {
	        for (j = 0; j < 16; j++) {
	          // add
	          h = wh[j];
	          l = wl[j];

	          a = l & 0xffff; b = l >>> 16;
	          c = h & 0xffff; d = h >>> 16;

	          h = wh[(j+9)%16];
	          l = wl[(j+9)%16];

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma0
	          th = wh[(j+1)%16];
	          tl = wl[(j+1)%16];
	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          // sigma1
	          th = wh[(j+14)%16];
	          tl = wl[(j+14)%16];
	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

	          a += l & 0xffff; b += l >>> 16;
	          c += h & 0xffff; d += h >>> 16;

	          b += a >>> 16;
	          c += b >>> 16;
	          d += c >>> 16;

	          wh[j] = (c & 0xffff) | (d << 16);
	          wl[j] = (a & 0xffff) | (b << 16);
	        }
	      }
	    }

	    // add
	    h = ah0;
	    l = al0;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[0];
	    l = hl[0];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
	    hl[0] = al0 = (a & 0xffff) | (b << 16);

	    h = ah1;
	    l = al1;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[1];
	    l = hl[1];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
	    hl[1] = al1 = (a & 0xffff) | (b << 16);

	    h = ah2;
	    l = al2;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[2];
	    l = hl[2];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
	    hl[2] = al2 = (a & 0xffff) | (b << 16);

	    h = ah3;
	    l = al3;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[3];
	    l = hl[3];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
	    hl[3] = al3 = (a & 0xffff) | (b << 16);

	    h = ah4;
	    l = al4;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[4];
	    l = hl[4];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
	    hl[4] = al4 = (a & 0xffff) | (b << 16);

	    h = ah5;
	    l = al5;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[5];
	    l = hl[5];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
	    hl[5] = al5 = (a & 0xffff) | (b << 16);

	    h = ah6;
	    l = al6;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[6];
	    l = hl[6];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
	    hl[6] = al6 = (a & 0xffff) | (b << 16);

	    h = ah7;
	    l = al7;

	    a = l & 0xffff; b = l >>> 16;
	    c = h & 0xffff; d = h >>> 16;

	    h = hh[7];
	    l = hl[7];

	    a += l & 0xffff; b += l >>> 16;
	    c += h & 0xffff; d += h >>> 16;

	    b += a >>> 16;
	    c += b >>> 16;
	    d += c >>> 16;

	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
	    hl[7] = al7 = (a & 0xffff) | (b << 16);

	    pos += 128;
	    n -= 128;
	  }

	  return n;
	}

	function crypto_hash(out, m, n) {
	  var hh = new Int32Array(8),
	      hl = new Int32Array(8),
	      x = new Uint8Array(256),
	      i, b = n;

	  hh[0] = 0x6a09e667;
	  hh[1] = 0xbb67ae85;
	  hh[2] = 0x3c6ef372;
	  hh[3] = 0xa54ff53a;
	  hh[4] = 0x510e527f;
	  hh[5] = 0x9b05688c;
	  hh[6] = 0x1f83d9ab;
	  hh[7] = 0x5be0cd19;

	  hl[0] = 0xf3bcc908;
	  hl[1] = 0x84caa73b;
	  hl[2] = 0xfe94f82b;
	  hl[3] = 0x5f1d36f1;
	  hl[4] = 0xade682d1;
	  hl[5] = 0x2b3e6c1f;
	  hl[6] = 0xfb41bd6b;
	  hl[7] = 0x137e2179;

	  crypto_hashblocks_hl(hh, hl, m, n);
	  n %= 128;

	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
	  x[n] = 128;

	  n = 256-128*(n<112?1:0);
	  x[n-9] = 0;
	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
	  crypto_hashblocks_hl(hh, hl, x, n);

	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

	  return 0;
	}

	function add(p, q) {
	  var a = gf(), b = gf(), c = gf(),
	      d = gf(), e = gf(), f = gf(),
	      g = gf(), h = gf(), t = gf();

	  Z(a, p[1], p[0]);
	  Z(t, q[1], q[0]);
	  M(a, a, t);
	  A(b, p[0], p[1]);
	  A(t, q[0], q[1]);
	  M(b, b, t);
	  M(c, p[3], q[3]);
	  M(c, c, D2);
	  M(d, p[2], q[2]);
	  A(d, d, d);
	  Z(e, b, a);
	  Z(f, d, c);
	  A(g, d, c);
	  A(h, b, a);

	  M(p[0], e, f);
	  M(p[1], h, g);
	  M(p[2], g, f);
	  M(p[3], e, h);
	}

	function cswap(p, q, b) {
	  var i;
	  for (i = 0; i < 4; i++) {
	    sel25519(p[i], q[i], b);
	  }
	}

	function pack(r, p) {
	  var tx = gf(), ty = gf(), zi = gf();
	  inv25519(zi, p[2]);
	  M(tx, p[0], zi);
	  M(ty, p[1], zi);
	  pack25519(r, ty);
	  r[31] ^= par25519(tx) << 7;
	}

	function scalarmult(p, q, s) {
	  var b, i;
	  set25519(p[0], gf0);
	  set25519(p[1], gf1);
	  set25519(p[2], gf1);
	  set25519(p[3], gf0);
	  for (i = 255; i >= 0; --i) {
	    b = (s[(i/8)|0] >> (i&7)) & 1;
	    cswap(p, q, b);
	    add(q, p);
	    add(p, p);
	    cswap(p, q, b);
	  }
	}

	function scalarbase(p, s) {
	  var q = [gf(), gf(), gf(), gf()];
	  set25519(q[0], X);
	  set25519(q[1], Y);
	  set25519(q[2], gf1);
	  M(q[3], X, Y);
	  scalarmult(p, q, s);
	}

	function crypto_sign_keypair(pk, sk, seeded) {
	  var d = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()];
	  var i;

	  if (!seeded) randombytes(sk, 32);
	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  scalarbase(p, d);
	  pack(pk, p);

	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
	  return 0;
	}

	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

	function modL(r, x) {
	  var carry, i, j, k;
	  for (i = 63; i >= 32; --i) {
	    carry = 0;
	    for (j = i - 32, k = i - 12; j < k; ++j) {
	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	      carry = Math.floor((x[j] + 128) / 256);
	      x[j] -= carry * 256;
	    }
	    x[j] += carry;
	    x[i] = 0;
	  }
	  carry = 0;
	  for (j = 0; j < 32; j++) {
	    x[j] += carry - (x[31] >> 4) * L[j];
	    carry = x[j] >> 8;
	    x[j] &= 255;
	  }
	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
	  for (i = 0; i < 32; i++) {
	    x[i+1] += x[i] >> 8;
	    r[i] = x[i] & 255;
	  }
	}

	function reduce(r) {
	  var x = new Float64Array(64), i;
	  for (i = 0; i < 64; i++) x[i] = r[i];
	  for (i = 0; i < 64; i++) r[i] = 0;
	  modL(r, x);
	}

	// Note: difference from C - smlen returned, not passed as argument.
	function crypto_sign(sm, m, n, sk) {
	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
	  var i, j, x = new Float64Array(64);
	  var p = [gf(), gf(), gf(), gf()];

	  crypto_hash(d, sk, 32);
	  d[0] &= 248;
	  d[31] &= 127;
	  d[31] |= 64;

	  var smlen = n + 64;
	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

	  crypto_hash(r, sm.subarray(32), n+32);
	  reduce(r);
	  scalarbase(p, r);
	  pack(sm, p);

	  for (i = 32; i < 64; i++) sm[i] = sk[i];
	  crypto_hash(h, sm, n + 64);
	  reduce(h);

	  for (i = 0; i < 64; i++) x[i] = 0;
	  for (i = 0; i < 32; i++) x[i] = r[i];
	  for (i = 0; i < 32; i++) {
	    for (j = 0; j < 32; j++) {
	      x[i+j] += h[i] * d[j];
	    }
	  }

	  modL(sm.subarray(32), x);
	  return smlen;
	}

	function unpackneg(r, p) {
	  var t = gf(), chk = gf(), num = gf(),
	      den = gf(), den2 = gf(), den4 = gf(),
	      den6 = gf();

	  set25519(r[2], gf1);
	  unpack25519(r[1], p);
	  S(num, r[1]);
	  M(den, num, D);
	  Z(num, num, r[2]);
	  A(den, r[2], den);

	  S(den2, den);
	  S(den4, den2);
	  M(den6, den4, den2);
	  M(t, den6, num);
	  M(t, t, den);

	  pow2523(t, t);
	  M(t, t, num);
	  M(t, t, den);
	  M(t, t, den);
	  M(r[0], t, den);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) M(r[0], r[0], I);

	  S(chk, r[0]);
	  M(chk, chk, den);
	  if (neq25519(chk, num)) return -1;

	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

	  M(r[3], r[0], r[1]);
	  return 0;
	}

	function crypto_sign_open(m, sm, n, pk) {
	  var i;
	  var t = new Uint8Array(32), h = new Uint8Array(64);
	  var p = [gf(), gf(), gf(), gf()],
	      q = [gf(), gf(), gf(), gf()];

	  if (n < 64) return -1;

	  if (unpackneg(q, pk)) return -1;

	  for (i = 0; i < n; i++) m[i] = sm[i];
	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
	  crypto_hash(h, m, n);
	  reduce(h);
	  scalarmult(p, q, h);

	  scalarbase(q, sm.subarray(32));
	  add(p, q);
	  pack(t, p);

	  n -= 64;
	  if (crypto_verify_32(sm, 0, t, 0)) {
	    for (i = 0; i < n; i++) m[i] = 0;
	    return -1;
	  }

	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
	  return n;
	}

	var crypto_secretbox_KEYBYTES = 32,
	    crypto_secretbox_NONCEBYTES = 24,
	    crypto_secretbox_ZEROBYTES = 32,
	    crypto_secretbox_BOXZEROBYTES = 16,
	    crypto_scalarmult_BYTES = 32,
	    crypto_scalarmult_SCALARBYTES = 32,
	    crypto_box_PUBLICKEYBYTES = 32,
	    crypto_box_SECRETKEYBYTES = 32,
	    crypto_box_BEFORENMBYTES = 32,
	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	    crypto_sign_BYTES = 64,
	    crypto_sign_PUBLICKEYBYTES = 32,
	    crypto_sign_SECRETKEYBYTES = 64,
	    crypto_sign_SEEDBYTES = 32,
	    crypto_hash_BYTES = 64;

	nacl.lowlevel = {
	  crypto_core_hsalsa20: crypto_core_hsalsa20,
	  crypto_stream_xor: crypto_stream_xor,
	  crypto_stream: crypto_stream,
	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	  crypto_stream_salsa20: crypto_stream_salsa20,
	  crypto_onetimeauth: crypto_onetimeauth,
	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	  crypto_verify_16: crypto_verify_16,
	  crypto_verify_32: crypto_verify_32,
	  crypto_secretbox: crypto_secretbox,
	  crypto_secretbox_open: crypto_secretbox_open,
	  crypto_scalarmult: crypto_scalarmult,
	  crypto_scalarmult_base: crypto_scalarmult_base,
	  crypto_box_beforenm: crypto_box_beforenm,
	  crypto_box_afternm: crypto_box_afternm,
	  crypto_box: crypto_box,
	  crypto_box_open: crypto_box_open,
	  crypto_box_keypair: crypto_box_keypair,
	  crypto_hash: crypto_hash,
	  crypto_sign: crypto_sign,
	  crypto_sign_keypair: crypto_sign_keypair,
	  crypto_sign_open: crypto_sign_open,

	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	  crypto_sign_BYTES: crypto_sign_BYTES,
	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	  crypto_hash_BYTES: crypto_hash_BYTES,

	  gf: gf,
	  D: D,
	  L: L,
	  pack25519: pack25519,
	  unpack25519: unpack25519,
	  M: M,
	  A: A,
	  S: S,
	  Z: Z,
	  pow2523: pow2523,
	  add: add,
	  set25519: set25519,
	  modL: modL,
	  scalarmult: scalarmult,
	  scalarbase: scalarbase,
	};

	/* High-level API */

	function checkLengths(k, n) {
	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	}

	function checkBoxLengths(pk, sk) {
	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	}

	function checkArrayTypes() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!(arguments[i] instanceof Uint8Array))
	      throw new TypeError('unexpected type, use Uint8Array');
	  }
	}

	function cleanup(arr) {
	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
	}

	nacl.randomBytes = function(n) {
	  var b = new Uint8Array(n);
	  randombytes(b, n);
	  return b;
	};

	nacl.secretbox = function(msg, nonce, key) {
	  checkArrayTypes(msg, nonce, key);
	  checkLengths(key, nonce);
	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	  var c = new Uint8Array(m.length);
	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
	  crypto_secretbox(c, m, m.length, nonce, key);
	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
	};

	nacl.secretbox.open = function(box, nonce, key) {
	  checkArrayTypes(box, nonce, key);
	  checkLengths(key, nonce);
	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	  var m = new Uint8Array(c.length);
	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
	  if (c.length < 32) return null;
	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
	  return m.subarray(crypto_secretbox_ZEROBYTES);
	};

	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

	nacl.scalarMult = function(n, p) {
	  checkArrayTypes(n, p);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult(q, n, p);
	  return q;
	};

	nacl.scalarMult.base = function(n) {
	  checkArrayTypes(n);
	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	  var q = new Uint8Array(crypto_scalarmult_BYTES);
	  crypto_scalarmult_base(q, n);
	  return q;
	};

	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

	nacl.box = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox(msg, nonce, k);
	};

	nacl.box.before = function(publicKey, secretKey) {
	  checkArrayTypes(publicKey, secretKey);
	  checkBoxLengths(publicKey, secretKey);
	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	  crypto_box_beforenm(k, publicKey, secretKey);
	  return k;
	};

	nacl.box.after = nacl.secretbox;

	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
	  var k = nacl.box.before(publicKey, secretKey);
	  return nacl.secretbox.open(msg, nonce, k);
	};

	nacl.box.open.after = nacl.secretbox.open;

	nacl.box.keyPair = function() {
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	  crypto_box_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.box.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	  crypto_scalarmult_base(pk, secretKey);
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	nacl.box.nonceLength = crypto_box_NONCEBYTES;
	nacl.box.overheadLength = nacl.secretbox.overheadLength;

	nacl.sign = function(msg, secretKey) {
	  checkArrayTypes(msg, secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
	  crypto_sign(signedMsg, msg, msg.length, secretKey);
	  return signedMsg;
	};

	nacl.sign.open = function(signedMsg, publicKey) {
	  checkArrayTypes(signedMsg, publicKey);
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var tmp = new Uint8Array(signedMsg.length);
	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	  if (mlen < 0) return null;
	  var m = new Uint8Array(mlen);
	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
	  return m;
	};

	nacl.sign.detached = function(msg, secretKey) {
	  var signedMsg = nacl.sign(msg, secretKey);
	  var sig = new Uint8Array(crypto_sign_BYTES);
	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
	  return sig;
	};

	nacl.sign.detached.verify = function(msg, sig, publicKey) {
	  checkArrayTypes(msg, sig, publicKey);
	  if (sig.length !== crypto_sign_BYTES)
	    throw new Error('bad signature size');
	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
	    throw new Error('bad public key size');
	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	  var i;
	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
	};

	nacl.sign.keyPair = function() {
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  crypto_sign_keypair(pk, sk);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
	  checkArrayTypes(secretKey);
	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
	    throw new Error('bad secret key size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
	};

	nacl.sign.keyPair.fromSeed = function(seed) {
	  checkArrayTypes(seed);
	  if (seed.length !== crypto_sign_SEEDBYTES)
	    throw new Error('bad seed size');
	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
	  crypto_sign_keypair(pk, sk, true);
	  return {publicKey: pk, secretKey: sk};
	};

	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	nacl.sign.signatureLength = crypto_sign_BYTES;

	nacl.hash = function(msg) {
	  checkArrayTypes(msg);
	  var h = new Uint8Array(crypto_hash_BYTES);
	  crypto_hash(h, msg, msg.length);
	  return h;
	};

	nacl.hash.hashLength = crypto_hash_BYTES;

	nacl.verify = function(x, y) {
	  checkArrayTypes(x, y);
	  // Zero length arguments are considered not equal.
	  if (x.length === 0 || y.length === 0) return false;
	  if (x.length !== y.length) return false;
	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
	};

	nacl.setPRNG = function(fn) {
	  randombytes = fn;
	};

	(function() {
	  // Initialize PRNG if environment provides CSPRNG.
	  // If not, methods calling randombytes will throw.
	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
	  if (crypto && crypto.getRandomValues) {
	    // Browsers.
	    var QUOTA = 65536;
	    nacl.setPRNG(function(x, n) {
	      var i, v = new Uint8Array(n);
	      for (i = 0; i < n; i += QUOTA) {
	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	      }
	      for (i = 0; i < n; i++) x[i] = v[i];
	      cleanup(v);
	    });
	  } else if (typeof commonjsRequire$1 !== 'undefined') {
	    // Node.js.
	    crypto = crypto__default$1["default"];
	    if (crypto && crypto.randomBytes) {
	      nacl.setPRNG(function(x, n) {
	        var i, v = crypto.randomBytes(n);
	        for (i = 0; i < n; i++) x[i] = v[i];
	        cleanup(v);
	      });
	    }
	  }
	})();

	})(module.exports ? module.exports : (self.nacl = self.nacl || {}));
	}(naclFast));

	var serialize$1 = {};

	var lib$2 = {};

	var bn$1 = {exports: {}};

	(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	}(bn$1));

	var safeBuffer = {exports: {}};

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer = require$$0__default["default"];
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	};
	}(safeBuffer, safeBuffer.exports));

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	// @ts-ignore
	var _Buffer = safeBuffer.exports.Buffer;
	function base (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source); }
	    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return _Buffer.alloc(0) }
	    var psz = 0;
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
	    vch.fill(0x00, 0, zeroes);
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) { return buffer }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src = base;

	var basex = src;
	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

	var bs58 = basex(ALPHABET);

	// This is free and unencumbered software released into the public domain.
	// See LICENSE.md for more information.

	//
	// Utilities
	//

	/**
	 * @param {number} a The number to test.
	 * @param {number} min The minimum value in the range, inclusive.
	 * @param {number} max The maximum value in the range, inclusive.
	 * @return {boolean} True if a >= min and a <= max.
	 */
	function inRange(a, min, max) {
	  return min <= a && a <= max;
	}

	/**
	 * @param {*} o
	 * @return {Object}
	 */
	function ToDictionary(o) {
	  if (o === undefined) return {};
	  if (o === Object(o)) return o;
	  throw TypeError('Could not convert argument to dictionary');
	}

	/**
	 * @param {string} string Input string of UTF-16 code units.
	 * @return {!Array.<number>} Code points.
	 */
	function stringToCodePoints(string) {
	  // https://heycam.github.io/webidl/#dfn-obtain-unicode

	  // 1. Let S be the DOMString value.
	  var s = String(string);

	  // 2. Let n be the length of S.
	  var n = s.length;

	  // 3. Initialize i to 0.
	  var i = 0;

	  // 4. Initialize U to be an empty sequence of Unicode characters.
	  var u = [];

	  // 5. While i < n:
	  while (i < n) {

	    // 1. Let c be the code unit in S at index i.
	    var c = s.charCodeAt(i);

	    // 2. Depending on the value of c:

	    // c < 0xD800 or c > 0xDFFF
	    if (c < 0xD800 || c > 0xDFFF) {
	      // Append to U the Unicode character with code point c.
	      u.push(c);
	    }

	    // 0xDC00 ≤ c ≤ 0xDFFF
	    else if (0xDC00 <= c && c <= 0xDFFF) {
	      // Append to U a U+FFFD REPLACEMENT CHARACTER.
	      u.push(0xFFFD);
	    }

	    // 0xD800 ≤ c ≤ 0xDBFF
	    else if (0xD800 <= c && c <= 0xDBFF) {
	      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
	      // CHARACTER.
	      if (i === n - 1) {
	        u.push(0xFFFD);
	      }
	      // 2. Otherwise, i < n−1:
	      else {
	        // 1. Let d be the code unit in S at index i+1.
	        var d = string.charCodeAt(i + 1);

	        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
	        if (0xDC00 <= d && d <= 0xDFFF) {
	          // 1. Let a be c & 0x3FF.
	          var a = c & 0x3FF;

	          // 2. Let b be d & 0x3FF.
	          var b = d & 0x3FF;

	          // 3. Append to U the Unicode character with code point
	          // 2^16+2^10*a+b.
	          u.push(0x10000 + (a << 10) + b);

	          // 4. Set i to i+1.
	          i += 1;
	        }

	        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
	        // U+FFFD REPLACEMENT CHARACTER.
	        else  {
	          u.push(0xFFFD);
	        }
	      }
	    }

	    // 3. Set i to i+1.
	    i += 1;
	  }

	  // 6. Return U.
	  return u;
	}

	/**
	 * @param {!Array.<number>} code_points Array of code points.
	 * @return {string} string String of UTF-16 code units.
	 */
	function codePointsToString(code_points) {
	  var s = '';
	  for (var i = 0; i < code_points.length; ++i) {
	    var cp = code_points[i];
	    if (cp <= 0xFFFF) {
	      s += String.fromCharCode(cp);
	    } else {
	      cp -= 0x10000;
	      s += String.fromCharCode((cp >> 10) + 0xD800,
	                               (cp & 0x3FF) + 0xDC00);
	    }
	  }
	  return s;
	}


	//
	// Implementation of Encoding specification
	// https://encoding.spec.whatwg.org/
	//

	//
	// 3. Terminology
	//

	/**
	 * End-of-stream is a special token that signifies no more tokens
	 * are in the stream.
	 * @const
	 */ var end_of_stream = -1;

	/**
	 * A stream represents an ordered sequence of tokens.
	 *
	 * @constructor
	 * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the
	 * stream.
	 */
	function Stream(tokens) {
	  /** @type {!Array.<number>} */
	  this.tokens = [].slice.call(tokens);
	}

	Stream.prototype = {
	  /**
	   * @return {boolean} True if end-of-stream has been hit.
	   */
	  endOfStream: function() {
	    return !this.tokens.length;
	  },

	  /**
	   * When a token is read from a stream, the first token in the
	   * stream must be returned and subsequently removed, and
	   * end-of-stream must be returned otherwise.
	   *
	   * @return {number} Get the next token from the stream, or
	   * end_of_stream.
	   */
	   read: function() {
	    if (!this.tokens.length)
	      return end_of_stream;
	     return this.tokens.shift();
	   },

	  /**
	   * When one or more tokens are prepended to a stream, those tokens
	   * must be inserted, in given order, before the first token in the
	   * stream.
	   *
	   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.
	   */
	  prepend: function(token) {
	    if (Array.isArray(token)) {
	      var tokens = /**@type {!Array.<number>}*/(token);
	      while (tokens.length)
	        this.tokens.unshift(tokens.pop());
	    } else {
	      this.tokens.unshift(token);
	    }
	  },

	  /**
	   * When one or more tokens are pushed to a stream, those tokens
	   * must be inserted, in given order, after the last token in the
	   * stream.
	   *
	   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.
	   */
	  push: function(token) {
	    if (Array.isArray(token)) {
	      var tokens = /**@type {!Array.<number>}*/(token);
	      while (tokens.length)
	        this.tokens.push(tokens.shift());
	    } else {
	      this.tokens.push(token);
	    }
	  }
	};

	//
	// 4. Encodings
	//

	// 4.1 Encoders and decoders

	/** @const */
	var finished = -1;

	/**
	 * @param {boolean} fatal If true, decoding errors raise an exception.
	 * @param {number=} opt_code_point Override the standard fallback code point.
	 * @return {number} The code point to insert on a decoding error.
	 */
	function decoderError(fatal, opt_code_point) {
	  if (fatal)
	    throw TypeError('Decoder error');
	  return opt_code_point || 0xFFFD;
	}

	//
	// 7. API
	//

	/** @const */ var DEFAULT_ENCODING = 'utf-8';

	// 7.1 Interface TextDecoder

	/**
	 * @constructor
	 * @param {string=} encoding The label of the encoding;
	 *     defaults to 'utf-8'.
	 * @param {Object=} options
	 */
	function TextDecoder$2(encoding, options) {
	  if (!(this instanceof TextDecoder$2)) {
	    return new TextDecoder$2(encoding, options);
	  }
	  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
	  if (encoding !== DEFAULT_ENCODING) {
	    throw new Error('Encoding not supported. Only utf-8 is supported');
	  }
	  options = ToDictionary(options);

	  /** @private @type {boolean} */
	  this._streaming = false;
	  /** @private @type {boolean} */
	  this._BOMseen = false;
	  /** @private @type {?Decoder} */
	  this._decoder = null;
	  /** @private @type {boolean} */
	  this._fatal = Boolean(options['fatal']);
	  /** @private @type {boolean} */
	  this._ignoreBOM = Boolean(options['ignoreBOM']);

	  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
	  Object.defineProperty(this, 'fatal', {value: this._fatal});
	  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});
	}

	TextDecoder$2.prototype = {
	  /**
	   * @param {ArrayBufferView=} input The buffer of bytes to decode.
	   * @param {Object=} options
	   * @return {string} The decoded string.
	   */
	  decode: function decode(input, options) {
	    var bytes;
	    if (typeof input === 'object' && input instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input);
	    } else if (typeof input === 'object' && 'buffer' in input &&
	               input.buffer instanceof ArrayBuffer) {
	      bytes = new Uint8Array(input.buffer,
	                             input.byteOffset,
	                             input.byteLength);
	    } else {
	      bytes = new Uint8Array(0);
	    }

	    options = ToDictionary(options);

	    if (!this._streaming) {
	      this._decoder = new UTF8Decoder({fatal: this._fatal});
	      this._BOMseen = false;
	    }
	    this._streaming = Boolean(options['stream']);

	    var input_stream = new Stream(bytes);

	    var code_points = [];

	    /** @type {?(number|!Array.<number>)} */
	    var result;

	    while (!input_stream.endOfStream()) {
	      result = this._decoder.handler(input_stream, input_stream.read());
	      if (result === finished)
	        break;
	      if (result === null)
	        continue;
	      if (Array.isArray(result))
	        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
	      else
	        code_points.push(result);
	    }
	    if (!this._streaming) {
	      do {
	        result = this._decoder.handler(input_stream, input_stream.read());
	        if (result === finished)
	          break;
	        if (result === null)
	          continue;
	        if (Array.isArray(result))
	          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));
	        else
	          code_points.push(result);
	      } while (!input_stream.endOfStream());
	      this._decoder = null;
	    }

	    if (code_points.length) {
	      // If encoding is one of utf-8, utf-16be, and utf-16le, and
	      // ignore BOM flag and BOM seen flag are unset, run these
	      // subsubsteps:
	      if (['utf-8'].indexOf(this.encoding) !== -1 &&
	          !this._ignoreBOM && !this._BOMseen) {
	        // If token is U+FEFF, set BOM seen flag.
	        if (code_points[0] === 0xFEFF) {
	          this._BOMseen = true;
	          code_points.shift();
	        } else {
	          // Otherwise, if token is not end-of-stream, set BOM seen
	          // flag and append token to output.
	          this._BOMseen = true;
	        }
	      }
	    }

	    return codePointsToString(code_points);
	  }
	};

	// 7.2 Interface TextEncoder

	/**
	 * @constructor
	 * @param {string=} encoding The label of the encoding;
	 *     defaults to 'utf-8'.
	 * @param {Object=} options
	 */
	function TextEncoder$1(encoding, options) {
	  if (!(this instanceof TextEncoder$1))
	    return new TextEncoder$1(encoding, options);
	  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;
	  if (encoding !== DEFAULT_ENCODING) {
	    throw new Error('Encoding not supported. Only utf-8 is supported');
	  }
	  options = ToDictionary(options);

	  /** @private @type {boolean} */
	  this._streaming = false;
	  /** @private @type {?Encoder} */
	  this._encoder = null;
	  /** @private @type {{fatal: boolean}} */
	  this._options = {fatal: Boolean(options['fatal'])};

	  Object.defineProperty(this, 'encoding', {value: 'utf-8'});
	}

	TextEncoder$1.prototype = {
	  /**
	   * @param {string=} opt_string The string to encode.
	   * @param {Object=} options
	   * @return {Uint8Array} Encoded bytes, as a Uint8Array.
	   */
	  encode: function encode(opt_string, options) {
	    opt_string = opt_string ? String(opt_string) : '';
	    options = ToDictionary(options);

	    // NOTE: This option is nonstandard. None of the encodings
	    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,
	    // so streaming is not necessary.
	    if (!this._streaming)
	      this._encoder = new UTF8Encoder(this._options);
	    this._streaming = Boolean(options['stream']);

	    var bytes = [];
	    var input_stream = new Stream(stringToCodePoints(opt_string));
	    /** @type {?(number|!Array.<number>)} */
	    var result;
	    while (!input_stream.endOfStream()) {
	      result = this._encoder.handler(input_stream, input_stream.read());
	      if (result === finished)
	        break;
	      if (Array.isArray(result))
	        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
	      else
	        bytes.push(result);
	    }
	    if (!this._streaming) {
	      while (true) {
	        result = this._encoder.handler(input_stream, input_stream.read());
	        if (result === finished)
	          break;
	        if (Array.isArray(result))
	          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));
	        else
	          bytes.push(result);
	      }
	      this._encoder = null;
	    }
	    return new Uint8Array(bytes);
	  }
	};

	//
	// 8. The encoding
	//

	// 8.1 utf-8

	/**
	 * @constructor
	 * @implements {Decoder}
	 * @param {{fatal: boolean}} options
	 */
	function UTF8Decoder(options) {
	  var fatal = options.fatal;

	  // utf-8's decoder's has an associated utf-8 code point, utf-8
	  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
	  // lower boundary (initially 0x80), and a utf-8 upper boundary
	  // (initially 0xBF).
	  var /** @type {number} */ utf8_code_point = 0,
	      /** @type {number} */ utf8_bytes_seen = 0,
	      /** @type {number} */ utf8_bytes_needed = 0,
	      /** @type {number} */ utf8_lower_boundary = 0x80,
	      /** @type {number} */ utf8_upper_boundary = 0xBF;

	  /**
	   * @param {Stream} stream The stream of bytes being decoded.
	   * @param {number} bite The next byte read from the stream.
	   * @return {?(number|!Array.<number>)} The next code point(s)
	   *     decoded, or null if not enough data exists in the input
	   *     stream to decode a complete code point.
	   */
	  this.handler = function(stream, bite) {
	    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
	    // set utf-8 bytes needed to 0 and return error.
	    if (bite === end_of_stream && utf8_bytes_needed !== 0) {
	      utf8_bytes_needed = 0;
	      return decoderError(fatal);
	    }

	    // 2. If byte is end-of-stream, return finished.
	    if (bite === end_of_stream)
	      return finished;

	    // 3. If utf-8 bytes needed is 0, based on byte:
	    if (utf8_bytes_needed === 0) {

	      // 0x00 to 0x7F
	      if (inRange(bite, 0x00, 0x7F)) {
	        // Return a code point whose value is byte.
	        return bite;
	      }

	      // 0xC2 to 0xDF
	      if (inRange(bite, 0xC2, 0xDF)) {
	        // Set utf-8 bytes needed to 1 and utf-8 code point to byte
	        // − 0xC0.
	        utf8_bytes_needed = 1;
	        utf8_code_point = bite - 0xC0;
	      }

	      // 0xE0 to 0xEF
	      else if (inRange(bite, 0xE0, 0xEF)) {
	        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
	        if (bite === 0xE0)
	          utf8_lower_boundary = 0xA0;
	        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
	        if (bite === 0xED)
	          utf8_upper_boundary = 0x9F;
	        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to
	        // byte − 0xE0.
	        utf8_bytes_needed = 2;
	        utf8_code_point = bite - 0xE0;
	      }

	      // 0xF0 to 0xF4
	      else if (inRange(bite, 0xF0, 0xF4)) {
	        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
	        if (bite === 0xF0)
	          utf8_lower_boundary = 0x90;
	        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
	        if (bite === 0xF4)
	          utf8_upper_boundary = 0x8F;
	        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to
	        // byte − 0xF0.
	        utf8_bytes_needed = 3;
	        utf8_code_point = bite - 0xF0;
	      }

	      // Otherwise
	      else {
	        // Return error.
	        return decoderError(fatal);
	      }

	      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code
	      // point to utf-8 code point << (6 × utf-8 bytes needed) and
	      // return continue.
	      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);
	      return null;
	    }

	    // 4. If byte is not in the range utf-8 lower boundary to utf-8
	    // upper boundary, run these substeps:
	    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

	      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
	      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
	      // utf-8 upper boundary to 0xBF.
	      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
	      utf8_lower_boundary = 0x80;
	      utf8_upper_boundary = 0xBF;

	      // 2. Prepend byte to stream.
	      stream.prepend(bite);

	      // 3. Return error.
	      return decoderError(fatal);
	    }

	    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
	    // to 0xBF.
	    utf8_lower_boundary = 0x80;
	    utf8_upper_boundary = 0xBF;

	    // 6. Increase utf-8 bytes seen by one and set utf-8 code point
	    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes
	    // needed − utf-8 bytes seen)).
	    utf8_bytes_seen += 1;
	    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));

	    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,
	    // continue.
	    if (utf8_bytes_seen !== utf8_bytes_needed)
	      return null;

	    // 8. Let code point be utf-8 code point.
	    var code_point = utf8_code_point;

	    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
	    // seen to 0.
	    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

	    // 10. Return a code point whose value is code point.
	    return code_point;
	  };
	}

	/**
	 * @constructor
	 * @implements {Encoder}
	 * @param {{fatal: boolean}} options
	 */
	function UTF8Encoder(options) {
	  options.fatal;
	  /**
	   * @param {Stream} stream Input stream.
	   * @param {number} code_point Next code point read from the stream.
	   * @return {(number|!Array.<number>)} Byte(s) to emit.
	   */
	  this.handler = function(stream, code_point) {
	    // 1. If code point is end-of-stream, return finished.
	    if (code_point === end_of_stream)
	      return finished;

	    // 2. If code point is in the range U+0000 to U+007F, return a
	    // byte whose value is code point.
	    if (inRange(code_point, 0x0000, 0x007f))
	      return code_point;

	    // 3. Set count and offset based on the range code point is in:
	    var count, offset;
	    // U+0080 to U+07FF:    1 and 0xC0
	    if (inRange(code_point, 0x0080, 0x07FF)) {
	      count = 1;
	      offset = 0xC0;
	    }
	    // U+0800 to U+FFFF:    2 and 0xE0
	    else if (inRange(code_point, 0x0800, 0xFFFF)) {
	      count = 2;
	      offset = 0xE0;
	    }
	    // U+10000 to U+10FFFF: 3 and 0xF0
	    else if (inRange(code_point, 0x10000, 0x10FFFF)) {
	      count = 3;
	      offset = 0xF0;
	    }

	    // 4.Let bytes be a byte sequence whose first byte is (code
	    // point >> (6 × count)) + offset.
	    var bytes = [(code_point >> (6 * count)) + offset];

	    // 5. Run these substeps while count is greater than 0:
	    while (count > 0) {

	      // 1. Set temp to code point >> (6 × (count − 1)).
	      var temp = code_point >> (6 * (count - 1));

	      // 2. Append to bytes 0x80 | (temp & 0x3F).
	      bytes.push(0x80 | (temp & 0x3F));

	      // 3. Decrease count by one.
	      count -= 1;
	    }

	    // 6. Return bytes bytes, in order.
	    return bytes;
	  };
	}

	var encoding_lib = /*#__PURE__*/Object.freeze({
		__proto__: null,
		TextEncoder: TextEncoder$1,
		TextDecoder: TextDecoder$2
	});

	var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(encoding_lib);

	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __decorate = (commonjsGlobal && commonjsGlobal.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$2, "__esModule", { value: true });
	lib$2.deserializeUnchecked = lib$2.deserialize = lib$2.serialize = lib$2.BinaryReader = lib$2.BinaryWriter = lib$2.BorshError = lib$2.baseDecode = lib$2.baseEncode = void 0;
	const bn_js_1$5 = __importDefault$d(bn$1.exports);
	const bs58_1 = __importDefault$d(bs58);
	// TODO: Make sure this polyfill not included when not required
	const encoding = __importStar$1(require$$2$2);
	const TextDecoder$1 = (typeof commonjsGlobal.TextDecoder !== 'function') ? encoding.TextDecoder : commonjsGlobal.TextDecoder;
	const textDecoder = new TextDecoder$1('utf-8', { fatal: true });
	function baseEncode(value) {
	    if (typeof (value) === 'string') {
	        value = Buffer.from(value, 'utf8');
	    }
	    return bs58_1.default.encode(Buffer.from(value));
	}
	lib$2.baseEncode = baseEncode;
	function baseDecode(value) {
	    return Buffer.from(bs58_1.default.decode(value));
	}
	lib$2.baseDecode = baseDecode;
	const INITIAL_LENGTH = 1024;
	class BorshError extends Error {
	    constructor(message) {
	        super(message);
	        this.fieldPath = [];
	        this.originalMessage = message;
	    }
	    addToFieldPath(fieldName) {
	        this.fieldPath.splice(0, 0, fieldName);
	        // NOTE: Modifying message directly as jest doesn't use .toString()
	        this.message = this.originalMessage + ': ' + this.fieldPath.join('.');
	    }
	}
	lib$2.BorshError = BorshError;
	/// Binary encoder.
	class BinaryWriter {
	    constructor() {
	        this.buf = Buffer.alloc(INITIAL_LENGTH);
	        this.length = 0;
	    }
	    maybeResize() {
	        if (this.buf.length < 16 + this.length) {
	            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);
	        }
	    }
	    writeU8(value) {
	        this.maybeResize();
	        this.buf.writeUInt8(value, this.length);
	        this.length += 1;
	    }
	    writeU16(value) {
	        this.maybeResize();
	        this.buf.writeUInt16LE(value, this.length);
	        this.length += 2;
	    }
	    writeU32(value) {
	        this.maybeResize();
	        this.buf.writeUInt32LE(value, this.length);
	        this.length += 4;
	    }
	    writeU64(value) {
	        this.maybeResize();
	        this.writeBuffer(Buffer.from(new bn_js_1$5.default(value).toArray('le', 8)));
	    }
	    writeU128(value) {
	        this.maybeResize();
	        this.writeBuffer(Buffer.from(new bn_js_1$5.default(value).toArray('le', 16)));
	    }
	    writeU256(value) {
	        this.maybeResize();
	        this.writeBuffer(Buffer.from(new bn_js_1$5.default(value).toArray('le', 32)));
	    }
	    writeU512(value) {
	        this.maybeResize();
	        this.writeBuffer(Buffer.from(new bn_js_1$5.default(value).toArray('le', 64)));
	    }
	    writeBuffer(buffer) {
	        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser
	        this.buf = Buffer.concat([Buffer.from(this.buf.subarray(0, this.length)), buffer, Buffer.alloc(INITIAL_LENGTH)]);
	        this.length += buffer.length;
	    }
	    writeString(str) {
	        this.maybeResize();
	        const b = Buffer.from(str, 'utf8');
	        this.writeU32(b.length);
	        this.writeBuffer(b);
	    }
	    writeFixedArray(array) {
	        this.writeBuffer(Buffer.from(array));
	    }
	    writeArray(array, fn) {
	        this.maybeResize();
	        this.writeU32(array.length);
	        for (const elem of array) {
	            this.maybeResize();
	            fn(elem);
	        }
	    }
	    toArray() {
	        return this.buf.subarray(0, this.length);
	    }
	}
	lib$2.BinaryWriter = BinaryWriter;
	function handlingRangeError(target, propertyKey, propertyDescriptor) {
	    const originalMethod = propertyDescriptor.value;
	    propertyDescriptor.value = function (...args) {
	        try {
	            return originalMethod.apply(this, args);
	        }
	        catch (e) {
	            if (e instanceof RangeError) {
	                const code = e.code;
	                if (['ERR_BUFFER_OUT_OF_BOUNDS', 'ERR_OUT_OF_RANGE'].indexOf(code) >= 0) {
	                    throw new BorshError('Reached the end of buffer when deserializing');
	                }
	            }
	            throw e;
	        }
	    };
	}
	class BinaryReader {
	    constructor(buf) {
	        this.buf = buf;
	        this.offset = 0;
	    }
	    readU8() {
	        const value = this.buf.readUInt8(this.offset);
	        this.offset += 1;
	        return value;
	    }
	    readU16() {
	        const value = this.buf.readUInt16LE(this.offset);
	        this.offset += 2;
	        return value;
	    }
	    readU32() {
	        const value = this.buf.readUInt32LE(this.offset);
	        this.offset += 4;
	        return value;
	    }
	    readU64() {
	        const buf = this.readBuffer(8);
	        return new bn_js_1$5.default(buf, 'le');
	    }
	    readU128() {
	        const buf = this.readBuffer(16);
	        return new bn_js_1$5.default(buf, 'le');
	    }
	    readU256() {
	        const buf = this.readBuffer(32);
	        return new bn_js_1$5.default(buf, 'le');
	    }
	    readU512() {
	        const buf = this.readBuffer(64);
	        return new bn_js_1$5.default(buf, 'le');
	    }
	    readBuffer(len) {
	        if ((this.offset + len) > this.buf.length) {
	            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);
	        }
	        const result = this.buf.slice(this.offset, this.offset + len);
	        this.offset += len;
	        return result;
	    }
	    readString() {
	        const len = this.readU32();
	        const buf = this.readBuffer(len);
	        try {
	            // NOTE: Using TextDecoder to fail on invalid UTF-8
	            return textDecoder.decode(buf);
	        }
	        catch (e) {
	            throw new BorshError(`Error decoding UTF-8 string: ${e}`);
	        }
	    }
	    readFixedArray(len) {
	        return new Uint8Array(this.readBuffer(len));
	    }
	    readArray(fn) {
	        const len = this.readU32();
	        const result = Array();
	        for (let i = 0; i < len; ++i) {
	            result.push(fn());
	        }
	        return result;
	    }
	}
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU8", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU16", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU32", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU64", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU128", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU256", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readU512", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readString", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readFixedArray", null);
	__decorate([
	    handlingRangeError
	], BinaryReader.prototype, "readArray", null);
	lib$2.BinaryReader = BinaryReader;
	function capitalizeFirstLetter(string) {
	    return string.charAt(0).toUpperCase() + string.slice(1);
	}
	function serializeField(schema, fieldName, value, fieldType, writer) {
	    try {
	        // TODO: Handle missing values properly (make sure they never result in just skipped write)
	        if (typeof fieldType === 'string') {
	            writer[`write${capitalizeFirstLetter(fieldType)}`](value);
	        }
	        else if (fieldType instanceof Array) {
	            if (typeof fieldType[0] === 'number') {
	                if (value.length !== fieldType[0]) {
	                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);
	                }
	                writer.writeFixedArray(value);
	            }
	            else {
	                writer.writeArray(value, (item) => { serializeField(schema, fieldName, item, fieldType[0], writer); });
	            }
	        }
	        else if (fieldType.kind !== undefined) {
	            switch (fieldType.kind) {
	                case 'option': {
	                    if (value === null || value === undefined) {
	                        writer.writeU8(0);
	                    }
	                    else {
	                        writer.writeU8(1);
	                        serializeField(schema, fieldName, value, fieldType.type, writer);
	                    }
	                    break;
	                }
	                default: throw new BorshError(`FieldType ${fieldType} unrecognized`);
	            }
	        }
	        else {
	            serializeStruct(schema, value, writer);
	        }
	    }
	    catch (error) {
	        if (error instanceof BorshError) {
	            error.addToFieldPath(fieldName);
	        }
	        throw error;
	    }
	}
	function serializeStruct(schema, obj, writer) {
	    const structSchema = schema.get(obj.constructor);
	    if (!structSchema) {
	        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);
	    }
	    if (structSchema.kind === 'struct') {
	        structSchema.fields.map(([fieldName, fieldType]) => {
	            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
	        });
	    }
	    else if (structSchema.kind === 'enum') {
	        const name = obj[structSchema.field];
	        for (let idx = 0; idx < structSchema.values.length; ++idx) {
	            const [fieldName, fieldType] = structSchema.values[idx];
	            if (fieldName === name) {
	                writer.writeU8(idx);
	                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);
	                break;
	            }
	        }
	    }
	    else {
	        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);
	    }
	}
	/// Serialize given object using schema of the form:
	/// { class_name -> [ [field_name, field_type], .. ], .. }
	function serialize(schema, obj) {
	    const writer = new BinaryWriter();
	    serializeStruct(schema, obj, writer);
	    return writer.toArray();
	}
	lib$2.serialize = serialize;
	function deserializeField(schema, fieldName, fieldType, reader) {
	    try {
	        if (typeof fieldType === 'string') {
	            return reader[`read${capitalizeFirstLetter(fieldType)}`]();
	        }
	        if (fieldType instanceof Array) {
	            if (typeof fieldType[0] === 'number') {
	                return reader.readFixedArray(fieldType[0]);
	            }
	            return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));
	        }
	        if (fieldType.kind === 'option') {
	            const option = reader.readU8();
	            if (option) {
	                return deserializeField(schema, fieldName, fieldType.type, reader);
	            }
	            return undefined;
	        }
	        return deserializeStruct(schema, fieldType, reader);
	    }
	    catch (error) {
	        if (error instanceof BorshError) {
	            error.addToFieldPath(fieldName);
	        }
	        throw error;
	    }
	}
	function deserializeStruct(schema, classType, reader) {
	    const structSchema = schema.get(classType);
	    if (!structSchema) {
	        throw new BorshError(`Class ${classType.name} is missing in schema`);
	    }
	    if (structSchema.kind === 'struct') {
	        const result = {};
	        for (const [fieldName, fieldType] of schema.get(classType).fields) {
	            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);
	        }
	        return new classType(result);
	    }
	    if (structSchema.kind === 'enum') {
	        const idx = reader.readU8();
	        if (idx >= structSchema.values.length) {
	            throw new BorshError(`Enum index: ${idx} is out of range`);
	        }
	        const [fieldName, fieldType] = structSchema.values[idx];
	        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);
	        return new classType({ [fieldName]: fieldValue });
	    }
	    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);
	}
	/// Deserializes object from bytes using schema.
	function deserialize(schema, classType, buffer) {
	    const reader = new BinaryReader(buffer);
	    const result = deserializeStruct(schema, classType, reader);
	    if (reader.offset < buffer.length) {
	        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);
	    }
	    return result;
	}
	lib$2.deserialize = deserialize;
	/// Deserializes object from bytes using schema, without checking the length read
	function deserializeUnchecked(schema, classType, buffer) {
	    const reader = new BinaryReader(buffer);
	    return deserializeStruct(schema, classType, reader);
	}
	lib$2.deserializeUnchecked = deserializeUnchecked;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var borsh_1 = lib$2;
	Object.defineProperty(exports, "base_encode", { enumerable: true, get: function () { return borsh_1.baseEncode; } });
	Object.defineProperty(exports, "base_decode", { enumerable: true, get: function () { return borsh_1.baseDecode; } });
	Object.defineProperty(exports, "serialize", { enumerable: true, get: function () { return borsh_1.serialize; } });
	Object.defineProperty(exports, "deserialize", { enumerable: true, get: function () { return borsh_1.deserialize; } });
	Object.defineProperty(exports, "BorshError", { enumerable: true, get: function () { return borsh_1.BorshError; } });
	Object.defineProperty(exports, "BinaryWriter", { enumerable: true, get: function () { return borsh_1.BinaryWriter; } });
	Object.defineProperty(exports, "BinaryReader", { enumerable: true, get: function () { return borsh_1.BinaryReader; } });
	}(serialize$1));

	var enums = {};

	Object.defineProperty(enums, "__esModule", { value: true });
	enums.Assignable = enums.Enum = void 0;
	/** @hidden @module */
	class Enum {
	    constructor(properties) {
	        if (Object.keys(properties).length !== 1) {
	            throw new Error('Enum can only take single value');
	        }
	        Object.keys(properties).map((key) => {
	            this[key] = properties[key];
	            this.enum = key;
	        });
	    }
	}
	enums.Enum = Enum;
	class Assignable {
	    constructor(properties) {
	        Object.keys(properties).map((key) => {
	            this[key] = properties[key];
	        });
	    }
	}
	enums.Assignable = Assignable;

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.KeyType = void 0;
	const tweetnacl_1 = __importDefault(naclFast.exports);
	const serialize_1 = serialize$1;
	const enums_1 = enums;
	/** All supported key types */
	var KeyType;
	(function (KeyType) {
	    KeyType[KeyType["ED25519"] = 0] = "ED25519";
	})(KeyType = exports.KeyType || (exports.KeyType = {}));
	function key_type_to_str(keyType) {
	    switch (keyType) {
	        case KeyType.ED25519: return 'ed25519';
	        default: throw new Error(`Unknown key type ${keyType}`);
	    }
	}
	function str_to_key_type(keyType) {
	    switch (keyType.toLowerCase()) {
	        case 'ed25519': return KeyType.ED25519;
	        default: throw new Error(`Unknown key type ${keyType}`);
	    }
	}
	/**
	 * PublicKey representation that has type and bytes of the key.
	 */
	class PublicKey extends enums_1.Assignable {
	    static from(value) {
	        if (typeof value === 'string') {
	            return PublicKey.fromString(value);
	        }
	        return value;
	    }
	    static fromString(encodedKey) {
	        const parts = encodedKey.split(':');
	        if (parts.length === 1) {
	            return new PublicKey({ keyType: KeyType.ED25519, data: serialize_1.base_decode(parts[0]) });
	        }
	        else if (parts.length === 2) {
	            return new PublicKey({ keyType: str_to_key_type(parts[0]), data: serialize_1.base_decode(parts[1]) });
	        }
	        else {
	            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');
	        }
	    }
	    toString() {
	        return `${key_type_to_str(this.keyType)}:${serialize_1.base_encode(this.data)}`;
	    }
	}
	exports.PublicKey = PublicKey;
	class KeyPair {
	    /**
	     * @param curve Name of elliptical curve, case-insensitive
	     * @returns Random KeyPair based on the curve
	     */
	    static fromRandom(curve) {
	        switch (curve.toUpperCase()) {
	            case 'ED25519': return KeyPairEd25519.fromRandom();
	            default: throw new Error(`Unknown curve ${curve}`);
	        }
	    }
	    static fromString(encodedKey) {
	        const parts = encodedKey.split(':');
	        if (parts.length === 1) {
	            return new KeyPairEd25519(parts[0]);
	        }
	        else if (parts.length === 2) {
	            switch (parts[0].toUpperCase()) {
	                case 'ED25519': return new KeyPairEd25519(parts[1]);
	                default: throw new Error(`Unknown curve: ${parts[0]}`);
	            }
	        }
	        else {
	            throw new Error('Invalid encoded key format, must be <curve>:<encoded key>');
	        }
	    }
	}
	exports.KeyPair = KeyPair;
	/**
	 * This class provides key pair functionality for Ed25519 curve:
	 * generating key pairs, encoding key pairs, signing and verifying.
	 */
	class KeyPairEd25519 extends KeyPair {
	    /**
	     * Construct an instance of key pair given a secret key.
	     * It's generally assumed that these are encoded in base58.
	     * @param {string} secretKey
	     */
	    constructor(secretKey) {
	        super();
	        const keyPair = tweetnacl_1.default.sign.keyPair.fromSecretKey(serialize_1.base_decode(secretKey));
	        this.publicKey = new PublicKey({ keyType: KeyType.ED25519, data: keyPair.publicKey });
	        this.secretKey = secretKey;
	    }
	    /**
	     * Generate a new random keypair.
	     * @example
	     * const keyRandom = KeyPair.fromRandom();
	     * keyRandom.publicKey
	     * // returns [PUBLIC_KEY]
	     *
	     * keyRandom.secretKey
	     * // returns [SECRET_KEY]
	     */
	    static fromRandom() {
	        const newKeyPair = tweetnacl_1.default.sign.keyPair();
	        return new KeyPairEd25519(serialize_1.base_encode(newKeyPair.secretKey));
	    }
	    sign(message) {
	        const signature = tweetnacl_1.default.sign.detached(message, serialize_1.base_decode(this.secretKey));
	        return { signature, publicKey: this.publicKey };
	    }
	    verify(message, signature) {
	        return tweetnacl_1.default.sign.detached.verify(message, signature, this.publicKey.data);
	    }
	    toString() {
	        return `ed25519:${this.secretKey}`;
	    }
	    getPublicKey() {
	        return this.publicKey;
	    }
	}
	exports.KeyPairEd25519 = KeyPairEd25519;
	}(key_pair));

	Object.defineProperty(in_memory_key_store, "__esModule", { value: true });
	in_memory_key_store.InMemoryKeyStore = void 0;
	const keystore_1$3 = keystore;
	const key_pair_1$4 = key_pair;
	/**
	 * Simple in-memory keystore for mainly for testing purposes.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}
	 * @example
	 * ```js
	 * import { connect, keyStores, utils } from 'near-api-js';
	 *
	 * const privateKey = '.......';
	 * const keyPair = utils.KeyPair.fromString(privateKey);
	 *
	 * const keyStore = new keyStores.InMemoryKeyStore();
	 * keyStore.setKey('testnet', 'example-account.testnet', keyPair);
	 *
	 * const config = {
	 *   keyStore, // instance of InMemoryKeyStore
	 *   networkId: 'testnet',
	 *   nodeUrl: 'https://rpc.testnet.near.org',
	 *   walletUrl: 'https://wallet.testnet.near.org',
	 *   helperUrl: 'https://helper.testnet.near.org',
	 *   explorerUrl: 'https://explorer.testnet.near.org'
	 * };
	 *
	 * // inside an async function
	 * const near = await connect(config)
	 * ```
	 */
	class InMemoryKeyStore extends keystore_1$3.KeyStore {
	    constructor() {
	        super();
	        this.keys = {};
	    }
	    /**
	     * Stores a {@KeyPair} in in-memory storage item
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @param keyPair The key pair to store in local storage
	     */
	    async setKey(networkId, accountId, keyPair) {
	        this.keys[`${accountId}:${networkId}`] = keyPair.toString();
	    }
	    /**
	     * Gets a {@link KeyPair} from in-memory storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @returns {Promise<KeyPair>}
	     */
	    async getKey(networkId, accountId) {
	        const value = this.keys[`${accountId}:${networkId}`];
	        if (!value) {
	            return null;
	        }
	        return key_pair_1$4.KeyPair.fromString(value);
	    }
	    /**
	     * Removes a {@link KeyPair} from in-memory storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     */
	    async removeKey(networkId, accountId) {
	        delete this.keys[`${accountId}:${networkId}`];
	    }
	    /**
	     * Removes all {@link KeyPairs} from in-memory storage
	     */
	    async clear() {
	        this.keys = {};
	    }
	    /**
	     * Get the network(s) from in-memory storage
	     * @returns {Promise<string[]>}
	     */
	    async getNetworks() {
	        const result = new Set();
	        Object.keys(this.keys).forEach((key) => {
	            const parts = key.split(':');
	            result.add(parts[1]);
	        });
	        return Array.from(result.values());
	    }
	    /**
	     * Gets the account(s) from in-memory storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns{Promise<string[]>}
	     */
	    async getAccounts(networkId) {
	        const result = new Array();
	        Object.keys(this.keys).forEach((key) => {
	            const parts = key.split(':');
	            if (parts[parts.length - 1] === networkId) {
	                result.push(parts.slice(0, parts.length - 1).join(':'));
	            }
	        });
	        return result;
	    }
	    /** @hidden */
	    toString() {
	        return 'InMemoryKeyStore';
	    }
	}
	in_memory_key_store.InMemoryKeyStore = InMemoryKeyStore;

	var browser_local_storage_key_store = {};

	Object.defineProperty(browser_local_storage_key_store, "__esModule", { value: true });
	browser_local_storage_key_store.BrowserLocalStorageKeyStore = void 0;
	const keystore_1$2 = keystore;
	const key_pair_1$3 = key_pair;
	const LOCAL_STORAGE_KEY_PREFIX = 'near-api-js:keystore:';
	/**
	 * This class is used to store keys in the browsers local storage.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}
	 * @example
	 * ```js
	 * import { connect, keyStores } from 'near-api-js';
	 *
	 * const keyStore = new keyStores.BrowserLocalStorageKeyStore();
	 * const config = {
	 *   keyStore, // instance of BrowserLocalStorageKeyStore
	 *   networkId: 'testnet',
	 *   nodeUrl: 'https://rpc.testnet.near.org',
	 *   walletUrl: 'https://wallet.testnet.near.org',
	 *   helperUrl: 'https://helper.testnet.near.org',
	 *   explorerUrl: 'https://explorer.testnet.near.org'
	 * };
	 *
	 * // inside an async function
	 * const near = await connect(config)
	 * ```
	 */
	class BrowserLocalStorageKeyStore extends keystore_1$2.KeyStore {
	    /**
	     * @param localStorage defaults to window.localStorage
	     * @param prefix defaults to `near-api-js:keystore:`
	     */
	    constructor(localStorage = window.localStorage, prefix = LOCAL_STORAGE_KEY_PREFIX) {
	        super();
	        this.localStorage = localStorage;
	        this.prefix = prefix;
	    }
	    /**
	     * Stores a {@link KeyPair} in local storage.
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @param keyPair The key pair to store in local storage
	     */
	    async setKey(networkId, accountId, keyPair) {
	        this.localStorage.setItem(this.storageKeyForSecretKey(networkId, accountId), keyPair.toString());
	    }
	    /**
	     * Gets a {@link KeyPair} from local storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @returns {Promise<KeyPair>}
	     */
	    async getKey(networkId, accountId) {
	        const value = this.localStorage.getItem(this.storageKeyForSecretKey(networkId, accountId));
	        if (!value) {
	            return null;
	        }
	        return key_pair_1$3.KeyPair.fromString(value);
	    }
	    /**
	     * Removes a {@link KeyPair} from local storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     */
	    async removeKey(networkId, accountId) {
	        this.localStorage.removeItem(this.storageKeyForSecretKey(networkId, accountId));
	    }
	    /**
	     * Removes all items that start with `prefix` from local storage
	     */
	    async clear() {
	        for (const key of this.storageKeys()) {
	            if (key.startsWith(this.prefix)) {
	                this.localStorage.removeItem(key);
	            }
	        }
	    }
	    /**
	     * Get the network(s) from local storage
	     * @returns {Promise<string[]>}
	     */
	    async getNetworks() {
	        const result = new Set();
	        for (const key of this.storageKeys()) {
	            if (key.startsWith(this.prefix)) {
	                const parts = key.substring(this.prefix.length).split(':');
	                result.add(parts[1]);
	            }
	        }
	        return Array.from(result.values());
	    }
	    /**
	     * Gets the account(s) from local storage
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns{Promise<string[]>}
	     */
	    async getAccounts(networkId) {
	        const result = new Array();
	        for (const key of this.storageKeys()) {
	            if (key.startsWith(this.prefix)) {
	                const parts = key.substring(this.prefix.length).split(':');
	                if (parts[1] === networkId) {
	                    result.push(parts[0]);
	                }
	            }
	        }
	        return result;
	    }
	    /**
	     * @hidden
	     * Helper function to retrieve a local storage key
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the storage keythat's sought
	     * @returns {string} An example might be: `near-api-js:keystore:near-friend:default`
	     */
	    storageKeyForSecretKey(networkId, accountId) {
	        return `${this.prefix}${accountId}:${networkId}`;
	    }
	    /** @hidden */
	    *storageKeys() {
	        for (let i = 0; i < this.localStorage.length; i++) {
	            yield this.localStorage.key(i);
	        }
	    }
	}
	browser_local_storage_key_store.BrowserLocalStorageKeyStore = BrowserLocalStorageKeyStore;

	var unencrypted_file_system_keystore = {};

	var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(unencrypted_file_system_keystore, "__esModule", { value: true });
	unencrypted_file_system_keystore.UnencryptedFileSystemKeyStore = unencrypted_file_system_keystore.readKeyFile = unencrypted_file_system_keystore.loadJsonFile = void 0;
	const fs_1 = __importDefault$c(require$$1__default["default"]);
	const path_1 = __importDefault$c(require$$1__default$1["default"]);
	const util_1$1 = require$$2__default["default"];
	const key_pair_1$2 = key_pair;
	const keystore_1$1 = keystore;
	const promisify = (fn) => {
	    if (!fn) {
	        return () => {
	            throw new Error('Trying to use unimplemented function. `fs` module not available in web build?');
	        };
	    }
	    return util_1$1.promisify(fn);
	};
	const exists = promisify(fs_1.default.exists);
	const readFile = promisify(fs_1.default.readFile);
	const writeFile = promisify(fs_1.default.writeFile);
	const unlink = promisify(fs_1.default.unlink);
	const readdir = promisify(fs_1.default.readdir);
	const mkdir = promisify(fs_1.default.mkdir);
	/** @hidden */
	async function loadJsonFile(filename) {
	    const content = await readFile(filename);
	    return JSON.parse(content.toString());
	}
	unencrypted_file_system_keystore.loadJsonFile = loadJsonFile;
	async function ensureDir(dir) {
	    try {
	        await mkdir(dir, { recursive: true });
	    }
	    catch (err) {
	        if (err.code !== 'EEXIST') {
	            throw err;
	        }
	    }
	}
	/** @hidden */
	async function readKeyFile(filename) {
	    const accountInfo = await loadJsonFile(filename);
	    // The private key might be in private_key or secret_key field.
	    let privateKey = accountInfo.private_key;
	    if (!privateKey && accountInfo.secret_key) {
	        privateKey = accountInfo.secret_key;
	    }
	    return [accountInfo.account_id, key_pair_1$2.KeyPair.fromString(privateKey)];
	}
	unencrypted_file_system_keystore.readKeyFile = readKeyFile;
	/**
	 * This module contains the {@link UnencryptedFileSystemKeyStore} class which is used to store keys on the file system.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#key-store}
	 * @example
	 * ```js
	 * const { homedir } = require('os');
	 * const { connect, keyStores } = require('near-api-js');
	 *
	 * const keyStore = new keyStores.UnencryptedFileSystemKeyStore(`${homedir()}/.near-credentials`);
	 * const config = {
	 *   keyStore, // instance of UnencryptedFileSystemKeyStore
	 *   networkId: 'testnet',
	 *   nodeUrl: 'https://rpc.testnet.near.org',
	 *   walletUrl: 'https://wallet.testnet.near.org',
	 *   helperUrl: 'https://helper.testnet.near.org',
	 *   explorerUrl: 'https://explorer.testnet.near.org'
	 * };
	 *
	 * // inside an async function
	 * const near = await connect(config)
	 * ```
	 */
	class UnencryptedFileSystemKeyStore extends keystore_1$1.KeyStore {
	    /**
	     * @param keyDir base directory for key storage. Keys will be stored in `keyDir/networkId/accountId.json`
	     */
	    constructor(keyDir) {
	        super();
	        this.keyDir = path_1.default.resolve(keyDir);
	    }
	    /**
	     * Store a {@link KeyPair} in an unencrypted file
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @param keyPair The key pair to store in local storage
	     */
	    async setKey(networkId, accountId, keyPair) {
	        await ensureDir(`${this.keyDir}/${networkId}`);
	        const content = { account_id: accountId, public_key: keyPair.getPublicKey().toString(), private_key: keyPair.toString() };
	        await writeFile(this.getKeyFilePath(networkId, accountId), JSON.stringify(content));
	    }
	    /**
	     * Gets a {@link KeyPair} from an unencrypted file
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @returns {Promise<KeyPair>}
	     */
	    async getKey(networkId, accountId) {
	        // Find key / account id.
	        if (!await exists(this.getKeyFilePath(networkId, accountId))) {
	            return null;
	        }
	        const accountKeyPair = await readKeyFile(this.getKeyFilePath(networkId, accountId));
	        return accountKeyPair[1];
	    }
	    /**
	     * Deletes an unencrypted file holding a {@link KeyPair}
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     */
	    async removeKey(networkId, accountId) {
	        if (await exists(this.getKeyFilePath(networkId, accountId))) {
	            await unlink(this.getKeyFilePath(networkId, accountId));
	        }
	    }
	    /**
	     * Deletes all unencrypted files from the `keyDir` path.
	     */
	    async clear() {
	        for (const network of await this.getNetworks()) {
	            for (const account of await this.getAccounts(network)) {
	                await this.removeKey(network, account);
	            }
	        }
	    }
	    /** @hidden */
	    getKeyFilePath(networkId, accountId) {
	        return `${this.keyDir}/${networkId}/${accountId}.json`;
	    }
	    /**
	     * Get the network(s) from files in `keyDir`
	     * @returns {Promise<string[]>}
	     */
	    async getNetworks() {
	        const files = await readdir(this.keyDir);
	        const result = new Array();
	        files.forEach((item) => {
	            result.push(item);
	        });
	        return result;
	    }
	    /**
	     * Gets the account(s) files in `keyDir/networkId`
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns{Promise<string[]>}
	     */
	    async getAccounts(networkId) {
	        if (!await exists(`${this.keyDir}/${networkId}`)) {
	            return [];
	        }
	        const files = await readdir(`${this.keyDir}/${networkId}`);
	        return files
	            .filter(file => file.endsWith('.json'))
	            .map(file => file.replace(/.json$/, ''));
	    }
	    /** @hidden */
	    toString() {
	        return `UnencryptedFileSystemKeyStore(${this.keyDir})`;
	    }
	}
	unencrypted_file_system_keystore.UnencryptedFileSystemKeyStore = UnencryptedFileSystemKeyStore;

	var merge_key_store = {};

	Object.defineProperty(merge_key_store, "__esModule", { value: true });
	merge_key_store.MergeKeyStore = void 0;
	const keystore_1 = keystore;
	class MergeKeyStore extends keystore_1.KeyStore {
	    /**
	     * @param keyStores read calls are attempted from start to end of array
	     * @param options.writeKeyStoreIndex the keystore index that will receive all write calls
	     */
	    constructor(keyStores, options = { writeKeyStoreIndex: 0 }) {
	        super();
	        this.options = options;
	        this.keyStores = keyStores;
	    }
	    /**
	     * Store a {@link KeyPain} to the first index of a key store array
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @param keyPair The key pair to store in local storage
	     */
	    async setKey(networkId, accountId, keyPair) {
	        await this.keyStores[this.options.writeKeyStoreIndex].setKey(networkId, accountId, keyPair);
	    }
	    /**
	     * Gets a {@link KeyPair} from the array of key stores
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     * @returns {Promise<KeyPair>}
	     */
	    async getKey(networkId, accountId) {
	        for (const keyStore of this.keyStores) {
	            const keyPair = await keyStore.getKey(networkId, accountId);
	            if (keyPair) {
	                return keyPair;
	            }
	        }
	        return null;
	    }
	    /**
	     * Removes a {@link KeyPair} from the array of key stores
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account tied to the key pair
	     */
	    async removeKey(networkId, accountId) {
	        for (const keyStore of this.keyStores) {
	            await keyStore.removeKey(networkId, accountId);
	        }
	    }
	    /**
	     * Removes all items from each key store
	     */
	    async clear() {
	        for (const keyStore of this.keyStores) {
	            await keyStore.clear();
	        }
	    }
	    /**
	     * Get the network(s) from the array of key stores
	     * @returns {Promise<string[]>}
	     */
	    async getNetworks() {
	        const result = new Set();
	        for (const keyStore of this.keyStores) {
	            for (const network of await keyStore.getNetworks()) {
	                result.add(network);
	            }
	        }
	        return Array.from(result);
	    }
	    /**
	     * Gets the account(s) from the array of key stores
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns{Promise<string[]>}
	     */
	    async getAccounts(networkId) {
	        const result = new Set();
	        for (const keyStore of this.keyStores) {
	            for (const account of await keyStore.getAccounts(networkId)) {
	                result.add(account);
	            }
	        }
	        return Array.from(result);
	    }
	    /** @hidden */
	    toString() {
	        return `MergeKeyStore(${this.keyStores.join(', ')})`;
	    }
	}
	merge_key_store.MergeKeyStore = MergeKeyStore;

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MergeKeyStore = exports.UnencryptedFileSystemKeyStore = exports.BrowserLocalStorageKeyStore = exports.InMemoryKeyStore = exports.KeyStore = void 0;
	/** @ignore @module */
	const keystore_1 = keystore;
	Object.defineProperty(exports, "KeyStore", { enumerable: true, get: function () { return keystore_1.KeyStore; } });
	const in_memory_key_store_1 = in_memory_key_store;
	Object.defineProperty(exports, "InMemoryKeyStore", { enumerable: true, get: function () { return in_memory_key_store_1.InMemoryKeyStore; } });
	const browser_local_storage_key_store_1 = browser_local_storage_key_store;
	Object.defineProperty(exports, "BrowserLocalStorageKeyStore", { enumerable: true, get: function () { return browser_local_storage_key_store_1.BrowserLocalStorageKeyStore; } });
	const unencrypted_file_system_keystore_1 = unencrypted_file_system_keystore;
	Object.defineProperty(exports, "UnencryptedFileSystemKeyStore", { enumerable: true, get: function () { return unencrypted_file_system_keystore_1.UnencryptedFileSystemKeyStore; } });
	const merge_key_store_1 = merge_key_store;
	Object.defineProperty(exports, "MergeKeyStore", { enumerable: true, get: function () { return merge_key_store_1.MergeKeyStore; } });
	}(key_stores));

	var commonIndex = {};

	var providers = {};

	var provider = {};

	(function (exports) {
	/**
	 * NEAR RPC API request types and responses
	 * @module
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getTransactionLastResult = exports.Provider = exports.IdType = exports.FinalExecutionStatusBasic = exports.ExecutionStatusBasic = void 0;
	(function (ExecutionStatusBasic) {
	    ExecutionStatusBasic["Unknown"] = "Unknown";
	    ExecutionStatusBasic["Pending"] = "Pending";
	    ExecutionStatusBasic["Failure"] = "Failure";
	})(exports.ExecutionStatusBasic || (exports.ExecutionStatusBasic = {}));
	(function (FinalExecutionStatusBasic) {
	    FinalExecutionStatusBasic["NotStarted"] = "NotStarted";
	    FinalExecutionStatusBasic["Started"] = "Started";
	    FinalExecutionStatusBasic["Failure"] = "Failure";
	})(exports.FinalExecutionStatusBasic || (exports.FinalExecutionStatusBasic = {}));
	(function (IdType) {
	    IdType["Transaction"] = "transaction";
	    IdType["Receipt"] = "receipt";
	})(exports.IdType || (exports.IdType = {}));
	/** @hidden */
	class Provider {
	}
	exports.Provider = Provider;
	/** @hidden */
	function getTransactionLastResult(txResult) {
	    if (typeof txResult.status === 'object' && typeof txResult.status.SuccessValue === 'string') {
	        const value = Buffer.from(txResult.status.SuccessValue, 'base64').toString();
	        try {
	            return JSON.parse(value);
	        }
	        catch (e) {
	            return value;
	        }
	    }
	    return null;
	}
	exports.getTransactionLastResult = getTransactionLastResult;
	}(provider));

	var jsonRpcProvider = {};

	/*!
	 * depd
	 * Copyright(c) 2014-2018 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 */

	var relative$1 = require$$1__default$1["default"].relative;

	/**
	 * Module exports.
	 */

	var depd_1$4 = depd$1;

	/**
	 * Get the path to base files on.
	 */

	var basePath$1 = process.cwd();

	/**
	 * Determine if namespace is contained in the string.
	 */

	function containsNamespace$1 (str, namespace) {
	  var vals = str.split(/[ ,]+/);
	  var ns = String(namespace).toLowerCase();

	  for (var i = 0; i < vals.length; i++) {
	    var val = vals[i];

	    // namespace contained
	    if (val && (val === '*' || val.toLowerCase() === ns)) {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * Convert a data descriptor to accessor descriptor.
	 */

	function convertDataDescriptorToAccessor$1 (obj, prop, message) {
	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	  var value = descriptor.value;

	  descriptor.get = function getter () { return value };

	  if (descriptor.writable) {
	    descriptor.set = function setter (val) { return (value = val) };
	  }

	  delete descriptor.value;
	  delete descriptor.writable;

	  Object.defineProperty(obj, prop, descriptor);

	  return descriptor
	}

	/**
	 * Create arguments string to keep arity.
	 */

	function createArgumentsString$1 (arity) {
	  var str = '';

	  for (var i = 0; i < arity; i++) {
	    str += ', arg' + i;
	  }

	  return str.substr(2)
	}

	/**
	 * Create stack string from stack.
	 */

	function createStackString$1 (stack) {
	  var str = this.name + ': ' + this.namespace;

	  if (this.message) {
	    str += ' deprecated ' + this.message;
	  }

	  for (var i = 0; i < stack.length; i++) {
	    str += '\n    at ' + stack[i].toString();
	  }

	  return str
	}

	/**
	 * Create deprecate for namespace in caller.
	 */

	function depd$1 (namespace) {
	  if (!namespace) {
	    throw new TypeError('argument namespace is required')
	  }

	  var stack = getStack$1();
	  var site = callSiteLocation$1(stack[1]);
	  var file = site[0];

	  function deprecate (message) {
	    // call to self as log
	    log$1.call(deprecate, message);
	  }

	  deprecate._file = file;
	  deprecate._ignored = isignored$1(namespace);
	  deprecate._namespace = namespace;
	  deprecate._traced = istraced$1(namespace);
	  deprecate._warned = Object.create(null);

	  deprecate.function = wrapfunction$1;
	  deprecate.property = wrapproperty$1;

	  return deprecate
	}

	/**
	 * Determine if event emitter has listeners of a given type.
	 *
	 * The way to do this check is done three different ways in Node.js >= 0.8
	 * so this consolidates them into a minimal set using instance methods.
	 *
	 * @param {EventEmitter} emitter
	 * @param {string} type
	 * @returns {boolean}
	 * @private
	 */

	function eehaslisteners (emitter, type) {
	  var count = typeof emitter.listenerCount !== 'function'
	    ? emitter.listeners(type).length
	    : emitter.listenerCount(type);

	  return count > 0
	}

	/**
	 * Determine if namespace is ignored.
	 */

	function isignored$1 (namespace) {
	  if (process.noDeprecation) {
	    // --no-deprecation support
	    return true
	  }

	  var str = process.env.NO_DEPRECATION || '';

	  // namespace ignored
	  return containsNamespace$1(str, namespace)
	}

	/**
	 * Determine if namespace is traced.
	 */

	function istraced$1 (namespace) {
	  if (process.traceDeprecation) {
	    // --trace-deprecation support
	    return true
	  }

	  var str = process.env.TRACE_DEPRECATION || '';

	  // namespace traced
	  return containsNamespace$1(str, namespace)
	}

	/**
	 * Display deprecation message.
	 */

	function log$1 (message, site) {
	  var haslisteners = eehaslisteners(process, 'deprecation');

	  // abort early if no destination
	  if (!haslisteners && this._ignored) {
	    return
	  }

	  var caller;
	  var callFile;
	  var callSite;
	  var depSite;
	  var i = 0;
	  var seen = false;
	  var stack = getStack$1();
	  var file = this._file;

	  if (site) {
	    // provided site
	    depSite = site;
	    callSite = callSiteLocation$1(stack[1]);
	    callSite.name = depSite.name;
	    file = callSite[0];
	  } else {
	    // get call site
	    i = 2;
	    depSite = callSiteLocation$1(stack[i]);
	    callSite = depSite;
	  }

	  // get caller of deprecated thing in relation to file
	  for (; i < stack.length; i++) {
	    caller = callSiteLocation$1(stack[i]);
	    callFile = caller[0];

	    if (callFile === file) {
	      seen = true;
	    } else if (callFile === this._file) {
	      file = this._file;
	    } else if (seen) {
	      break
	    }
	  }

	  var key = caller
	    ? depSite.join(':') + '__' + caller.join(':')
	    : undefined;

	  if (key !== undefined && key in this._warned) {
	    // already warned
	    return
	  }

	  this._warned[key] = true;

	  // generate automatic message from call site
	  var msg = message;
	  if (!msg) {
	    msg = callSite === depSite || !callSite.name
	      ? defaultMessage$1(depSite)
	      : defaultMessage$1(callSite);
	  }

	  // emit deprecation if listeners exist
	  if (haslisteners) {
	    var err = DeprecationError$1(this._namespace, msg, stack.slice(i));
	    process.emit('deprecation', err);
	    return
	  }

	  // format and write message
	  var format = process.stderr.isTTY
	    ? formatColor$1
	    : formatPlain$1;
	  var output = format.call(this, msg, caller, stack.slice(i));
	  process.stderr.write(output + '\n', 'utf8');
	}

	/**
	 * Get call site location as array.
	 */

	function callSiteLocation$1 (callSite) {
	  var file = callSite.getFileName() || '<anonymous>';
	  var line = callSite.getLineNumber();
	  var colm = callSite.getColumnNumber();

	  if (callSite.isEval()) {
	    file = callSite.getEvalOrigin() + ', ' + file;
	  }

	  var site = [file, line, colm];

	  site.callSite = callSite;
	  site.name = callSite.getFunctionName();

	  return site
	}

	/**
	 * Generate a default message from the site.
	 */

	function defaultMessage$1 (site) {
	  var callSite = site.callSite;
	  var funcName = site.name;

	  // make useful anonymous name
	  if (!funcName) {
	    funcName = '<anonymous@' + formatLocation$1(site) + '>';
	  }

	  var context = callSite.getThis();
	  var typeName = context && callSite.getTypeName();

	  // ignore useless type name
	  if (typeName === 'Object') {
	    typeName = undefined;
	  }

	  // make useful type name
	  if (typeName === 'Function') {
	    typeName = context.name || typeName;
	  }

	  return typeName && callSite.getMethodName()
	    ? typeName + '.' + funcName
	    : funcName
	}

	/**
	 * Format deprecation message without color.
	 */

	function formatPlain$1 (msg, caller, stack) {
	  var timestamp = new Date().toUTCString();

	  var formatted = timestamp +
	    ' ' + this._namespace +
	    ' deprecated ' + msg;

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    at ' + stack[i].toString();
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' at ' + formatLocation$1(caller);
	  }

	  return formatted
	}

	/**
	 * Format deprecation message with color.
	 */

	function formatColor$1 (msg, caller, stack) {
	  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
	    ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
	    ' \x1b[0m' + msg + '\x1b[39m'; // reset

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    \x1b[36mat ' + stack[i].toString() + '\x1b[39m'; // cyan
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' \x1b[36m' + formatLocation$1(caller) + '\x1b[39m'; // cyan
	  }

	  return formatted
	}

	/**
	 * Format call site location.
	 */

	function formatLocation$1 (callSite) {
	  return relative$1(basePath$1, callSite[0]) +
	    ':' + callSite[1] +
	    ':' + callSite[2]
	}

	/**
	 * Get the stack as array of call sites.
	 */

	function getStack$1 () {
	  var limit = Error.stackTraceLimit;
	  var obj = {};
	  var prep = Error.prepareStackTrace;

	  Error.prepareStackTrace = prepareObjectStackTrace$1;
	  Error.stackTraceLimit = Math.max(10, limit);

	  // capture the stack
	  Error.captureStackTrace(obj);

	  // slice this function off the top
	  var stack = obj.stack.slice(1);

	  Error.prepareStackTrace = prep;
	  Error.stackTraceLimit = limit;

	  return stack
	}

	/**
	 * Capture call site stack from v8.
	 */

	function prepareObjectStackTrace$1 (obj, stack) {
	  return stack
	}

	/**
	 * Return a wrapped function in a deprecation message.
	 */

	function wrapfunction$1 (fn, message) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('argument fn must be a function')
	  }

	  var args = createArgumentsString$1(fn.length);
	  var stack = getStack$1();
	  var site = callSiteLocation$1(stack[1]);

	  site.name = fn.name;

	  // eslint-disable-next-line no-new-func
	  var deprecatedfn = new Function('fn', 'log', 'deprecate', 'message', 'site',
	    '"use strict"\n' +
	    'return function (' + args + ') {' +
	    'log.call(deprecate, message, site)\n' +
	    'return fn.apply(this, arguments)\n' +
	    '}')(fn, log$1, this, message, site);

	  return deprecatedfn
	}

	/**
	 * Wrap property in a deprecation message.
	 */

	function wrapproperty$1 (obj, prop, message) {
	  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
	    throw new TypeError('argument obj must be object')
	  }

	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

	  if (!descriptor) {
	    throw new TypeError('must call property on owner object')
	  }

	  if (!descriptor.configurable) {
	    throw new TypeError('property must be configurable')
	  }

	  var deprecate = this;
	  var stack = getStack$1();
	  var site = callSiteLocation$1(stack[1]);

	  // set site name
	  site.name = prop;

	  // convert data descriptor
	  if ('value' in descriptor) {
	    descriptor = convertDataDescriptorToAccessor$1(obj, prop);
	  }

	  var get = descriptor.get;
	  var set = descriptor.set;

	  // wrap getter
	  if (typeof get === 'function') {
	    descriptor.get = function getter () {
	      log$1.call(deprecate, message, site);
	      return get.apply(this, arguments)
	    };
	  }

	  // wrap setter
	  if (typeof set === 'function') {
	    descriptor.set = function setter () {
	      log$1.call(deprecate, message, site);
	      return set.apply(this, arguments)
	    };
	  }

	  Object.defineProperty(obj, prop, descriptor);
	}

	/**
	 * Create DeprecationError for deprecation
	 */

	function DeprecationError$1 (namespace, message, stack) {
	  var error = new Error();
	  var stackString;

	  Object.defineProperty(error, 'constructor', {
	    value: DeprecationError$1
	  });

	  Object.defineProperty(error, 'message', {
	    configurable: true,
	    enumerable: false,
	    value: message,
	    writable: true
	  });

	  Object.defineProperty(error, 'name', {
	    enumerable: false,
	    configurable: true,
	    value: 'DeprecationError',
	    writable: true
	  });

	  Object.defineProperty(error, 'namespace', {
	    configurable: true,
	    enumerable: false,
	    value: namespace,
	    writable: true
	  });

	  Object.defineProperty(error, 'stack', {
	    configurable: true,
	    enumerable: false,
	    get: function () {
	      if (stackString !== undefined) {
	        return stackString
	      }

	      // prepare stack trace
	      return (stackString = createStackString$1.call(this, stack))
	    },
	    set: function setter (val) {
	      stackString = val;
	    }
	  });

	  return error
	}

	var web = {};

	var httpErrors = {exports: {}};

	var compat = {exports: {}};

	/*!
	 * depd
	 * Copyright(c) 2014 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 */

	var callsiteTostring = callSiteToString$1;

	/**
	 * Format a CallSite file location to a string.
	 */

	function callSiteFileLocation (callSite) {
	  var fileName;
	  var fileLocation = '';

	  if (callSite.isNative()) {
	    fileLocation = 'native';
	  } else if (callSite.isEval()) {
	    fileName = callSite.getScriptNameOrSourceURL();
	    if (!fileName) {
	      fileLocation = callSite.getEvalOrigin();
	    }
	  } else {
	    fileName = callSite.getFileName();
	  }

	  if (fileName) {
	    fileLocation += fileName;

	    var lineNumber = callSite.getLineNumber();
	    if (lineNumber != null) {
	      fileLocation += ':' + lineNumber;

	      var columnNumber = callSite.getColumnNumber();
	      if (columnNumber) {
	        fileLocation += ':' + columnNumber;
	      }
	    }
	  }

	  return fileLocation || 'unknown source'
	}

	/**
	 * Format a CallSite to a string.
	 */

	function callSiteToString$1 (callSite) {
	  var addSuffix = true;
	  var fileLocation = callSiteFileLocation(callSite);
	  var functionName = callSite.getFunctionName();
	  var isConstructor = callSite.isConstructor();
	  var isMethodCall = !(callSite.isToplevel() || isConstructor);
	  var line = '';

	  if (isMethodCall) {
	    var methodName = callSite.getMethodName();
	    var typeName = getConstructorName(callSite);

	    if (functionName) {
	      if (typeName && functionName.indexOf(typeName) !== 0) {
	        line += typeName + '.';
	      }

	      line += functionName;

	      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {
	        line += ' [as ' + methodName + ']';
	      }
	    } else {
	      line += typeName + '.' + (methodName || '<anonymous>');
	    }
	  } else if (isConstructor) {
	    line += 'new ' + (functionName || '<anonymous>');
	  } else if (functionName) {
	    line += functionName;
	  } else {
	    addSuffix = false;
	    line += fileLocation;
	  }

	  if (addSuffix) {
	    line += ' (' + fileLocation + ')';
	  }

	  return line
	}

	/**
	 * Get constructor name of reviver.
	 */

	function getConstructorName (obj) {
	  var receiver = obj.receiver;
	  return (receiver.constructor && receiver.constructor.name) || null
	}

	/*!
	 * depd
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 * @public
	 */

	var eventListenerCount_1 = eventListenerCount$1;

	/**
	 * Get the count of listeners on an event emitter of a specific type.
	 */

	function eventListenerCount$1 (emitter, type) {
	  return emitter.listeners(type).length
	}

	/*!
	 * depd
	 * Copyright(c) 2014-2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	(function (module) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var EventEmitter = require$$0__default$2["default"].EventEmitter;

	/**
	 * Module exports.
	 * @public
	 */

	lazyProperty(module.exports, 'callSiteToString', function callSiteToString () {
	  var limit = Error.stackTraceLimit;
	  var obj = {};
	  var prep = Error.prepareStackTrace;

	  function prepareObjectStackTrace (obj, stack) {
	    return stack
	  }

	  Error.prepareStackTrace = prepareObjectStackTrace;
	  Error.stackTraceLimit = 2;

	  // capture the stack
	  Error.captureStackTrace(obj);

	  // slice the stack
	  var stack = obj.stack.slice();

	  Error.prepareStackTrace = prep;
	  Error.stackTraceLimit = limit;

	  return stack[0].toString ? toString : callsiteTostring
	});

	lazyProperty(module.exports, 'eventListenerCount', function eventListenerCount () {
	  return EventEmitter.listenerCount || eventListenerCount_1
	});

	/**
	 * Define a lazy property.
	 */

	function lazyProperty (obj, prop, getter) {
	  function get () {
	    var val = getter();

	    Object.defineProperty(obj, prop, {
	      configurable: true,
	      enumerable: true,
	      value: val
	    });

	    return val
	  }

	  Object.defineProperty(obj, prop, {
	    configurable: true,
	    enumerable: true,
	    get: get
	  });
	}

	/**
	 * Call toString() on the obj
	 */

	function toString (obj) {
	  return obj.toString()
	}
	}(compat));

	/*!
	 * depd
	 * Copyright(c) 2014-2017 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 */

	var callSiteToString = compat.exports.callSiteToString;
	var eventListenerCount = compat.exports.eventListenerCount;
	var relative = require$$1__default$1["default"].relative;

	/**
	 * Module exports.
	 */

	var depd_1$3 = depd;

	/**
	 * Get the path to base files on.
	 */

	var basePath = process.cwd();

	/**
	 * Determine if namespace is contained in the string.
	 */

	function containsNamespace (str, namespace) {
	  var vals = str.split(/[ ,]+/);
	  var ns = String(namespace).toLowerCase();

	  for (var i = 0; i < vals.length; i++) {
	    var val = vals[i];

	    // namespace contained
	    if (val && (val === '*' || val.toLowerCase() === ns)) {
	      return true
	    }
	  }

	  return false
	}

	/**
	 * Convert a data descriptor to accessor descriptor.
	 */

	function convertDataDescriptorToAccessor (obj, prop, message) {
	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	  var value = descriptor.value;

	  descriptor.get = function getter () { return value };

	  if (descriptor.writable) {
	    descriptor.set = function setter (val) { return (value = val) };
	  }

	  delete descriptor.value;
	  delete descriptor.writable;

	  Object.defineProperty(obj, prop, descriptor);

	  return descriptor
	}

	/**
	 * Create arguments string to keep arity.
	 */

	function createArgumentsString (arity) {
	  var str = '';

	  for (var i = 0; i < arity; i++) {
	    str += ', arg' + i;
	  }

	  return str.substr(2)
	}

	/**
	 * Create stack string from stack.
	 */

	function createStackString (stack) {
	  var str = this.name + ': ' + this.namespace;

	  if (this.message) {
	    str += ' deprecated ' + this.message;
	  }

	  for (var i = 0; i < stack.length; i++) {
	    str += '\n    at ' + callSiteToString(stack[i]);
	  }

	  return str
	}

	/**
	 * Create deprecate for namespace in caller.
	 */

	function depd (namespace) {
	  if (!namespace) {
	    throw new TypeError('argument namespace is required')
	  }

	  var stack = getStack();
	  var site = callSiteLocation(stack[1]);
	  var file = site[0];

	  function deprecate (message) {
	    // call to self as log
	    log.call(deprecate, message);
	  }

	  deprecate._file = file;
	  deprecate._ignored = isignored(namespace);
	  deprecate._namespace = namespace;
	  deprecate._traced = istraced(namespace);
	  deprecate._warned = Object.create(null);

	  deprecate.function = wrapfunction;
	  deprecate.property = wrapproperty;

	  return deprecate
	}

	/**
	 * Determine if namespace is ignored.
	 */

	function isignored (namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.noDeprecation) {
	    // --no-deprecation support
	    return true
	  }

	  var str = process.env.NO_DEPRECATION || '';

	  // namespace ignored
	  return containsNamespace(str, namespace)
	}

	/**
	 * Determine if namespace is traced.
	 */

	function istraced (namespace) {
	  /* istanbul ignore next: tested in a child processs */
	  if (process.traceDeprecation) {
	    // --trace-deprecation support
	    return true
	  }

	  var str = process.env.TRACE_DEPRECATION || '';

	  // namespace traced
	  return containsNamespace(str, namespace)
	}

	/**
	 * Display deprecation message.
	 */

	function log (message, site) {
	  var haslisteners = eventListenerCount(process, 'deprecation') !== 0;

	  // abort early if no destination
	  if (!haslisteners && this._ignored) {
	    return
	  }

	  var caller;
	  var callFile;
	  var callSite;
	  var depSite;
	  var i = 0;
	  var seen = false;
	  var stack = getStack();
	  var file = this._file;

	  if (site) {
	    // provided site
	    depSite = site;
	    callSite = callSiteLocation(stack[1]);
	    callSite.name = depSite.name;
	    file = callSite[0];
	  } else {
	    // get call site
	    i = 2;
	    depSite = callSiteLocation(stack[i]);
	    callSite = depSite;
	  }

	  // get caller of deprecated thing in relation to file
	  for (; i < stack.length; i++) {
	    caller = callSiteLocation(stack[i]);
	    callFile = caller[0];

	    if (callFile === file) {
	      seen = true;
	    } else if (callFile === this._file) {
	      file = this._file;
	    } else if (seen) {
	      break
	    }
	  }

	  var key = caller
	    ? depSite.join(':') + '__' + caller.join(':')
	    : undefined;

	  if (key !== undefined && key in this._warned) {
	    // already warned
	    return
	  }

	  this._warned[key] = true;

	  // generate automatic message from call site
	  var msg = message;
	  if (!msg) {
	    msg = callSite === depSite || !callSite.name
	      ? defaultMessage(depSite)
	      : defaultMessage(callSite);
	  }

	  // emit deprecation if listeners exist
	  if (haslisteners) {
	    var err = DeprecationError(this._namespace, msg, stack.slice(i));
	    process.emit('deprecation', err);
	    return
	  }

	  // format and write message
	  var format = process.stderr.isTTY
	    ? formatColor
	    : formatPlain;
	  var output = format.call(this, msg, caller, stack.slice(i));
	  process.stderr.write(output + '\n', 'utf8');
	}

	/**
	 * Get call site location as array.
	 */

	function callSiteLocation (callSite) {
	  var file = callSite.getFileName() || '<anonymous>';
	  var line = callSite.getLineNumber();
	  var colm = callSite.getColumnNumber();

	  if (callSite.isEval()) {
	    file = callSite.getEvalOrigin() + ', ' + file;
	  }

	  var site = [file, line, colm];

	  site.callSite = callSite;
	  site.name = callSite.getFunctionName();

	  return site
	}

	/**
	 * Generate a default message from the site.
	 */

	function defaultMessage (site) {
	  var callSite = site.callSite;
	  var funcName = site.name;

	  // make useful anonymous name
	  if (!funcName) {
	    funcName = '<anonymous@' + formatLocation(site) + '>';
	  }

	  var context = callSite.getThis();
	  var typeName = context && callSite.getTypeName();

	  // ignore useless type name
	  if (typeName === 'Object') {
	    typeName = undefined;
	  }

	  // make useful type name
	  if (typeName === 'Function') {
	    typeName = context.name || typeName;
	  }

	  return typeName && callSite.getMethodName()
	    ? typeName + '.' + funcName
	    : funcName
	}

	/**
	 * Format deprecation message without color.
	 */

	function formatPlain (msg, caller, stack) {
	  var timestamp = new Date().toUTCString();

	  var formatted = timestamp +
	    ' ' + this._namespace +
	    ' deprecated ' + msg;

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    at ' + callSiteToString(stack[i]);
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' at ' + formatLocation(caller);
	  }

	  return formatted
	}

	/**
	 * Format deprecation message with color.
	 */

	function formatColor (msg, caller, stack) {
	  var formatted = '\x1b[36;1m' + this._namespace + '\x1b[22;39m' + // bold cyan
	    ' \x1b[33;1mdeprecated\x1b[22;39m' + // bold yellow
	    ' \x1b[0m' + msg + '\x1b[39m'; // reset

	  // add stack trace
	  if (this._traced) {
	    for (var i = 0; i < stack.length; i++) {
	      formatted += '\n    \x1b[36mat ' + callSiteToString(stack[i]) + '\x1b[39m'; // cyan
	    }

	    return formatted
	  }

	  if (caller) {
	    formatted += ' \x1b[36m' + formatLocation(caller) + '\x1b[39m'; // cyan
	  }

	  return formatted
	}

	/**
	 * Format call site location.
	 */

	function formatLocation (callSite) {
	  return relative(basePath, callSite[0]) +
	    ':' + callSite[1] +
	    ':' + callSite[2]
	}

	/**
	 * Get the stack as array of call sites.
	 */

	function getStack () {
	  var limit = Error.stackTraceLimit;
	  var obj = {};
	  var prep = Error.prepareStackTrace;

	  Error.prepareStackTrace = prepareObjectStackTrace;
	  Error.stackTraceLimit = Math.max(10, limit);

	  // capture the stack
	  Error.captureStackTrace(obj);

	  // slice this function off the top
	  var stack = obj.stack.slice(1);

	  Error.prepareStackTrace = prep;
	  Error.stackTraceLimit = limit;

	  return stack
	}

	/**
	 * Capture call site stack from v8.
	 */

	function prepareObjectStackTrace (obj, stack) {
	  return stack
	}

	/**
	 * Return a wrapped function in a deprecation message.
	 */

	function wrapfunction (fn, message) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('argument fn must be a function')
	  }

	  var args = createArgumentsString(fn.length);
	  var stack = getStack();
	  var site = callSiteLocation(stack[1]);

	  site.name = fn.name;

	   // eslint-disable-next-line no-eval
	  var deprecatedfn = eval('(function (' + args + ') {\n' +
	    '"use strict"\n' +
	    'log.call(deprecate, message, site)\n' +
	    'return fn.apply(this, arguments)\n' +
	    '})');

	  return deprecatedfn
	}

	/**
	 * Wrap property in a deprecation message.
	 */

	function wrapproperty (obj, prop, message) {
	  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
	    throw new TypeError('argument obj must be object')
	  }

	  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);

	  if (!descriptor) {
	    throw new TypeError('must call property on owner object')
	  }

	  if (!descriptor.configurable) {
	    throw new TypeError('property must be configurable')
	  }

	  var deprecate = this;
	  var stack = getStack();
	  var site = callSiteLocation(stack[1]);

	  // set site name
	  site.name = prop;

	  // convert data descriptor
	  if ('value' in descriptor) {
	    descriptor = convertDataDescriptorToAccessor(obj, prop);
	  }

	  var get = descriptor.get;
	  var set = descriptor.set;

	  // wrap getter
	  if (typeof get === 'function') {
	    descriptor.get = function getter () {
	      log.call(deprecate, message, site);
	      return get.apply(this, arguments)
	    };
	  }

	  // wrap setter
	  if (typeof set === 'function') {
	    descriptor.set = function setter () {
	      log.call(deprecate, message, site);
	      return set.apply(this, arguments)
	    };
	  }

	  Object.defineProperty(obj, prop, descriptor);
	}

	/**
	 * Create DeprecationError for deprecation
	 */

	function DeprecationError (namespace, message, stack) {
	  var error = new Error();
	  var stackString;

	  Object.defineProperty(error, 'constructor', {
	    value: DeprecationError
	  });

	  Object.defineProperty(error, 'message', {
	    configurable: true,
	    enumerable: false,
	    value: message,
	    writable: true
	  });

	  Object.defineProperty(error, 'name', {
	    enumerable: false,
	    configurable: true,
	    value: 'DeprecationError',
	    writable: true
	  });

	  Object.defineProperty(error, 'namespace', {
	    configurable: true,
	    enumerable: false,
	    value: namespace,
	    writable: true
	  });

	  Object.defineProperty(error, 'stack', {
	    configurable: true,
	    enumerable: false,
	    get: function () {
	      if (stackString !== undefined) {
	        return stackString
	      }

	      // prepare stack trace
	      return (stackString = createStackString.call(this, stack))
	    },
	    set: function setter (val) {
	      stackString = val;
	    }
	  });

	  return error
	}

	/* eslint no-proto: 0 */
	var setprototypeof = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);

	function setProtoOf (obj, proto) {
	  obj.__proto__ = proto;
	  return obj
	}

	function mixinProperties (obj, proto) {
	  for (var prop in proto) {
	    if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
	      obj[prop] = proto[prop];
	    }
	  }
	  return obj
	}

	var require$$0 = {
		"100": "Continue",
		"101": "Switching Protocols",
		"102": "Processing",
		"103": "Early Hints",
		"200": "OK",
		"201": "Created",
		"202": "Accepted",
		"203": "Non-Authoritative Information",
		"204": "No Content",
		"205": "Reset Content",
		"206": "Partial Content",
		"207": "Multi-Status",
		"208": "Already Reported",
		"226": "IM Used",
		"300": "Multiple Choices",
		"301": "Moved Permanently",
		"302": "Found",
		"303": "See Other",
		"304": "Not Modified",
		"305": "Use Proxy",
		"306": "(Unused)",
		"307": "Temporary Redirect",
		"308": "Permanent Redirect",
		"400": "Bad Request",
		"401": "Unauthorized",
		"402": "Payment Required",
		"403": "Forbidden",
		"404": "Not Found",
		"405": "Method Not Allowed",
		"406": "Not Acceptable",
		"407": "Proxy Authentication Required",
		"408": "Request Timeout",
		"409": "Conflict",
		"410": "Gone",
		"411": "Length Required",
		"412": "Precondition Failed",
		"413": "Payload Too Large",
		"414": "URI Too Long",
		"415": "Unsupported Media Type",
		"416": "Range Not Satisfiable",
		"417": "Expectation Failed",
		"418": "I'm a teapot",
		"421": "Misdirected Request",
		"422": "Unprocessable Entity",
		"423": "Locked",
		"424": "Failed Dependency",
		"425": "Unordered Collection",
		"426": "Upgrade Required",
		"428": "Precondition Required",
		"429": "Too Many Requests",
		"431": "Request Header Fields Too Large",
		"451": "Unavailable For Legal Reasons",
		"500": "Internal Server Error",
		"501": "Not Implemented",
		"502": "Bad Gateway",
		"503": "Service Unavailable",
		"504": "Gateway Timeout",
		"505": "HTTP Version Not Supported",
		"506": "Variant Also Negotiates",
		"507": "Insufficient Storage",
		"508": "Loop Detected",
		"509": "Bandwidth Limit Exceeded",
		"510": "Not Extended",
		"511": "Network Authentication Required"
	};

	/*!
	 * statuses
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module dependencies.
	 * @private
	 */

	var codes = require$$0;

	/**
	 * Module exports.
	 * @public
	 */

	var statuses = status;

	// status code to message map
	status.STATUS_CODES = codes;

	// array of status codes
	status.codes = populateStatusesMap(status, codes);

	// status codes for redirects
	status.redirect = {
	  300: true,
	  301: true,
	  302: true,
	  303: true,
	  305: true,
	  307: true,
	  308: true
	};

	// status codes for empty bodies
	status.empty = {
	  204: true,
	  205: true,
	  304: true
	};

	// status codes for when you should retry the request
	status.retry = {
	  502: true,
	  503: true,
	  504: true
	};

	/**
	 * Populate the statuses map for given codes.
	 * @private
	 */

	function populateStatusesMap (statuses, codes) {
	  var arr = [];

	  Object.keys(codes).forEach(function forEachCode (code) {
	    var message = codes[code];
	    var status = Number(code);

	    // Populate properties
	    statuses[status] = message;
	    statuses[message] = status;
	    statuses[message.toLowerCase()] = status;

	    // Add to array
	    arr.push(status);
	  });

	  return arr
	}

	/**
	 * Get the status code.
	 *
	 * Given a number, this will throw if it is not a known status
	 * code, otherwise the code will be returned. Given a string,
	 * the string will be parsed for a number and return the code
	 * if valid, otherwise will lookup the code assuming this is
	 * the status message.
	 *
	 * @param {string|number} code
	 * @returns {number}
	 * @public
	 */

	function status (code) {
	  if (typeof code === 'number') {
	    if (!status[code]) throw new Error('invalid status code: ' + code)
	    return code
	  }

	  if (typeof code !== 'string') {
	    throw new TypeError('code must be a number or string')
	  }

	  // '403'
	  var n = parseInt(code, 10);
	  if (!isNaN(n)) {
	    if (!status[n]) throw new Error('invalid status code: ' + n)
	    return n
	  }

	  n = status[code.toLowerCase()];
	  if (!n) throw new Error('invalid status message: "' + code + '"')
	  return n
	}

	/*!
	 * toidentifier
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 * @public
	 */

	var toidentifier = toIdentifier;

	/**
	 * Trasform the given string into a JavaScript identifier
	 *
	 * @param {string} str
	 * @returns {string}
	 * @public
	 */

	function toIdentifier (str) {
	  return str
	    .split(' ')
	    .map(function (token) {
	      return token.slice(0, 1).toUpperCase() + token.slice(1)
	    })
	    .join('')
	    .replace(/[^ _0-9a-z]/gi, '')
	}

	/*!
	 * http-errors
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2016 Douglas Christopher Wilson
	 * MIT Licensed
	 */

	(function (module) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var deprecate = depd_1$3('http-errors');
	var setPrototypeOf = setprototypeof;
	var statuses$1 = statuses;
	var inherits = inherits$4.exports;
	var toIdentifier = toidentifier;

	/**
	 * Module exports.
	 * @public
	 */

	module.exports = createError;
	module.exports.HttpError = createHttpErrorConstructor();
	module.exports.isHttpError = createIsHttpErrorFunction(module.exports.HttpError);

	// Populate exports for all constructors
	populateConstructorExports(module.exports, statuses$1.codes, module.exports.HttpError);

	/**
	 * Get the code class of a status code.
	 * @private
	 */

	function codeClass (status) {
	  return Number(String(status).charAt(0) + '00')
	}

	/**
	 * Create a new HTTP Error.
	 *
	 * @returns {Error}
	 * @public
	 */

	function createError () {
	  // so much arity going on ~_~
	  var err;
	  var msg;
	  var status = 500;
	  var props = {};
	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i];
	    if (arg instanceof Error) {
	      err = arg;
	      status = err.status || err.statusCode || status;
	      continue
	    }
	    switch (typeof arg) {
	      case 'string':
	        msg = arg;
	        break
	      case 'number':
	        status = arg;
	        if (i !== 0) {
	          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)');
	        }
	        break
	      case 'object':
	        props = arg;
	        break
	    }
	  }

	  if (typeof status === 'number' && (status < 400 || status >= 600)) {
	    deprecate('non-error status code; use only 4xx or 5xx status codes');
	  }

	  if (typeof status !== 'number' ||
	    (!statuses$1[status] && (status < 400 || status >= 600))) {
	    status = 500;
	  }

	  // constructor
	  var HttpError = createError[status] || createError[codeClass(status)];

	  if (!err) {
	    // create error
	    err = HttpError
	      ? new HttpError(msg)
	      : new Error(msg || statuses$1[status]);
	    Error.captureStackTrace(err, createError);
	  }

	  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
	    // add properties to generic error
	    err.expose = status < 500;
	    err.status = err.statusCode = status;
	  }

	  for (var key in props) {
	    if (key !== 'status' && key !== 'statusCode') {
	      err[key] = props[key];
	    }
	  }

	  return err
	}

	/**
	 * Create HTTP error abstract base class.
	 * @private
	 */

	function createHttpErrorConstructor () {
	  function HttpError () {
	    throw new TypeError('cannot construct abstract class')
	  }

	  inherits(HttpError, Error);

	  return HttpError
	}

	/**
	 * Create a constructor for a client error.
	 * @private
	 */

	function createClientErrorConstructor (HttpError, name, code) {
	  var className = toClassName(name);

	  function ClientError (message) {
	    // create the error object
	    var msg = message != null ? message : statuses$1[code];
	    var err = new Error(msg);

	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ClientError);

	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ClientError.prototype);

	    // redefine the error message
	    Object.defineProperty(err, 'message', {
	      enumerable: true,
	      configurable: true,
	      value: msg,
	      writable: true
	    });

	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    });

	    return err
	  }

	  inherits(ClientError, HttpError);
	  nameFunc(ClientError, className);

	  ClientError.prototype.status = code;
	  ClientError.prototype.statusCode = code;
	  ClientError.prototype.expose = true;

	  return ClientError
	}

	/**
	 * Create function to test is a value is a HttpError.
	 * @private
	 */

	function createIsHttpErrorFunction (HttpError) {
	  return function isHttpError (val) {
	    if (!val || typeof val !== 'object') {
	      return false
	    }

	    if (val instanceof HttpError) {
	      return true
	    }

	    return val instanceof Error &&
	      typeof val.expose === 'boolean' &&
	      typeof val.statusCode === 'number' && val.status === val.statusCode
	  }
	}

	/**
	 * Create a constructor for a server error.
	 * @private
	 */

	function createServerErrorConstructor (HttpError, name, code) {
	  var className = toClassName(name);

	  function ServerError (message) {
	    // create the error object
	    var msg = message != null ? message : statuses$1[code];
	    var err = new Error(msg);

	    // capture a stack trace to the construction point
	    Error.captureStackTrace(err, ServerError);

	    // adjust the [[Prototype]]
	    setPrototypeOf(err, ServerError.prototype);

	    // redefine the error message
	    Object.defineProperty(err, 'message', {
	      enumerable: true,
	      configurable: true,
	      value: msg,
	      writable: true
	    });

	    // redefine the error name
	    Object.defineProperty(err, 'name', {
	      enumerable: false,
	      configurable: true,
	      value: className,
	      writable: true
	    });

	    return err
	  }

	  inherits(ServerError, HttpError);
	  nameFunc(ServerError, className);

	  ServerError.prototype.status = code;
	  ServerError.prototype.statusCode = code;
	  ServerError.prototype.expose = false;

	  return ServerError
	}

	/**
	 * Set the name of a function, if possible.
	 * @private
	 */

	function nameFunc (func, name) {
	  var desc = Object.getOwnPropertyDescriptor(func, 'name');

	  if (desc && desc.configurable) {
	    desc.value = name;
	    Object.defineProperty(func, 'name', desc);
	  }
	}

	/**
	 * Populate the exports object with constructors for every error class.
	 * @private
	 */

	function populateConstructorExports (exports, codes, HttpError) {
	  codes.forEach(function forEachCode (code) {
	    var CodeError;
	    var name = toIdentifier(statuses$1[code]);

	    switch (codeClass(code)) {
	      case 400:
	        CodeError = createClientErrorConstructor(HttpError, name, code);
	        break
	      case 500:
	        CodeError = createServerErrorConstructor(HttpError, name, code);
	        break
	    }

	    if (CodeError) {
	      // export the constructor
	      exports[code] = CodeError;
	      exports[name] = CodeError;
	    }
	  });

	  // backwards-compatibility
	  exports["I'mateapot"] = deprecate.function(exports.ImATeapot,
	    '"I\'mateapot"; use "ImATeapot" instead');
	}

	/**
	 * Get a class name from a name identifier.
	 * @private
	 */

	function toClassName (name) {
	  return name.substr(-5) !== 'Error'
	    ? name + 'Error'
	    : name
	}
	}(httpErrors));

	var exponentialBackoff$1 = {};

	Object.defineProperty(exponentialBackoff$1, "__esModule", { value: true });
	async function exponentialBackoff(startWaitTime, retryNumber, waitBackoff, getResult) {
	    // TODO: jitter?
	    let waitTime = startWaitTime;
	    for (let i = 0; i < retryNumber; i++) {
	        const result = await getResult();
	        if (result) {
	            return result;
	        }
	        await sleep(waitTime);
	        waitTime *= waitBackoff;
	    }
	    return null;
	}
	exponentialBackoff$1.default = exponentialBackoff;
	// Sleep given number of millis.
	function sleep(millis) {
	    return new Promise(resolve => setTimeout(resolve, millis));
	}

	var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(web, "__esModule", { value: true });
	web.fetchJson = void 0;
	const http_errors_1 = __importDefault$b(httpErrors.exports);
	const exponential_backoff_1$1 = __importDefault$b(exponentialBackoff$1);
	const providers_1$3 = providers;
	const START_WAIT_TIME_MS = 1000;
	const BACKOFF_MULTIPLIER = 1.5;
	const RETRY_NUMBER = 10;
	async function fetchJson(connection, json) {
	    let url = null;
	    if (typeof (connection) === 'string') {
	        url = connection;
	    }
	    else {
	        url = connection.url;
	    }
	    const response = await exponential_backoff_1$1.default(START_WAIT_TIME_MS, RETRY_NUMBER, BACKOFF_MULTIPLIER, async () => {
	        try {
	            const response = await fetch(url, {
	                method: json ? 'POST' : 'GET',
	                body: json ? json : undefined,
	                headers: { 'Content-Type': 'application/json; charset=utf-8' }
	            });
	            if (!response.ok) {
	                if (response.status === 503) {
	                    console.warn(`Retrying HTTP request for ${url} as it's not available now`);
	                    return null;
	                }
	                throw http_errors_1.default(response.status, await response.text());
	            }
	            return response;
	        }
	        catch (error) {
	            if (error.toString().includes('FetchError') || error.toString().includes('Failed to fetch')) {
	                console.warn(`Retrying HTTP request for ${url} because of error: ${error}`);
	                return null;
	            }
	            throw error;
	        }
	    });
	    if (!response) {
	        throw new providers_1$3.TypedError(`Exceeded ${RETRY_NUMBER} attempts for ${url}.`, 'RetriesExceeded');
	    }
	    return await response.json();
	}
	web.fetchJson = fetchJson;

	var errors = {};

	Object.defineProperty(errors, "__esModule", { value: true });
	errors.ErrorContext = errors.TypedError = errors.ArgumentTypeError = errors.PositionalArgsError = void 0;
	class PositionalArgsError extends Error {
	    constructor() {
	        super('Contract method calls expect named arguments wrapped in object, e.g. { argName1: argValue1, argName2: argValue2 }');
	    }
	}
	errors.PositionalArgsError = PositionalArgsError;
	class ArgumentTypeError extends Error {
	    constructor(argName, argType, argValue) {
	        super(`Expected ${argType} for '${argName}' argument, but got '${JSON.stringify(argValue)}'`);
	    }
	}
	errors.ArgumentTypeError = ArgumentTypeError;
	class TypedError extends Error {
	    constructor(message, type, context) {
	        super(message);
	        this.type = type || 'UntypedError';
	        this.context = context;
	    }
	}
	errors.TypedError = TypedError;
	class ErrorContext {
	    constructor(transactionHash) {
	        this.transactionHash = transactionHash;
	    }
	}
	errors.ErrorContext = ErrorContext;

	var rpc_errors = {};

	var mustache = {exports: {}};

	(function (module, exports) {
	(function (global, factory) {
	  module.exports = factory() ;
	}(commonjsGlobal, (function () {
	  /*!
	   * mustache.js - Logic-less {{mustache}} templates with JavaScript
	   * http://github.com/janl/mustache.js
	   */

	  var objectToString = Object.prototype.toString;
	  var isArray = Array.isArray || function isArrayPolyfill (object) {
	    return objectToString.call(object) === '[object Array]';
	  };

	  function isFunction (object) {
	    return typeof object === 'function';
	  }

	  /**
	   * More correct typeof string handling array
	   * which normally returns typeof 'object'
	   */
	  function typeStr (obj) {
	    return isArray(obj) ? 'array' : typeof obj;
	  }

	  function escapeRegExp (string) {
	    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
	  }

	  /**
	   * Null safe way of checking whether or not an object,
	   * including its prototype, has a given property
	   */
	  function hasProperty (obj, propName) {
	    return obj != null && typeof obj === 'object' && (propName in obj);
	  }

	  /**
	   * Safe way of detecting whether or not the given thing is a primitive and
	   * whether it has the given property
	   */
	  function primitiveHasOwnProperty (primitive, propName) {
	    return (
	      primitive != null
	      && typeof primitive !== 'object'
	      && primitive.hasOwnProperty
	      && primitive.hasOwnProperty(propName)
	    );
	  }

	  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
	  // See https://github.com/janl/mustache.js/issues/189
	  var regExpTest = RegExp.prototype.test;
	  function testRegExp (re, string) {
	    return regExpTest.call(re, string);
	  }

	  var nonSpaceRe = /\S/;
	  function isWhitespace (string) {
	    return !testRegExp(nonSpaceRe, string);
	  }

	  var entityMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '/': '&#x2F;',
	    '`': '&#x60;',
	    '=': '&#x3D;'
	  };

	  function escapeHtml (string) {
	    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
	      return entityMap[s];
	    });
	  }

	  var whiteRe = /\s*/;
	  var spaceRe = /\s+/;
	  var equalsRe = /\s*=/;
	  var curlyRe = /\s*\}/;
	  var tagRe = /#|\^|\/|>|\{|&|=|!/;

	  /**
	   * Breaks up the given `template` string into a tree of tokens. If the `tags`
	   * argument is given here it must be an array with two string values: the
	   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
	   * course, the default is to use mustaches (i.e. mustache.tags).
	   *
	   * A token is an array with at least 4 elements. The first element is the
	   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
	   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
	   * all text that appears outside a symbol this element is "text".
	   *
	   * The second element of a token is its "value". For mustache tags this is
	   * whatever else was inside the tag besides the opening symbol. For text tokens
	   * this is the text itself.
	   *
	   * The third and fourth elements of the token are the start and end indices,
	   * respectively, of the token in the original template.
	   *
	   * Tokens that are the root node of a subtree contain two more elements: 1) an
	   * array of tokens in the subtree and 2) the index in the original template at
	   * which the closing tag for that section begins.
	   *
	   * Tokens for partials also contain two more elements: 1) a string value of
	   * indendation prior to that tag and 2) the index of that tag on that line -
	   * eg a value of 2 indicates the partial is the third tag on this line.
	   */
	  function parseTemplate (template, tags) {
	    if (!template)
	      return [];
	    var lineHasNonSpace = false;
	    var sections = [];     // Stack to hold section tokens
	    var tokens = [];       // Buffer to hold the tokens
	    var spaces = [];       // Indices of whitespace tokens on the current line
	    var hasTag = false;    // Is there a {{tag}} on the current line?
	    var nonSpace = false;  // Is there a non-space char on the current line?
	    var indentation = '';  // Tracks indentation for tags that use it
	    var tagIndex = 0;      // Stores a count of number of tags encountered on a line

	    // Strips all whitespace tokens array for the current line
	    // if there was a {{#tag}} on it and otherwise only space.
	    function stripSpace () {
	      if (hasTag && !nonSpace) {
	        while (spaces.length)
	          delete tokens[spaces.pop()];
	      } else {
	        spaces = [];
	      }

	      hasTag = false;
	      nonSpace = false;
	    }

	    var openingTagRe, closingTagRe, closingCurlyRe;
	    function compileTags (tagsToCompile) {
	      if (typeof tagsToCompile === 'string')
	        tagsToCompile = tagsToCompile.split(spaceRe, 2);

	      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
	        throw new Error('Invalid tags: ' + tagsToCompile);

	      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
	      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
	      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
	    }

	    compileTags(tags || mustache.tags);

	    var scanner = new Scanner(template);

	    var start, type, value, chr, token, openSection;
	    while (!scanner.eos()) {
	      start = scanner.pos;

	      // Match any text between tags.
	      value = scanner.scanUntil(openingTagRe);

	      if (value) {
	        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
	          chr = value.charAt(i);

	          if (isWhitespace(chr)) {
	            spaces.push(tokens.length);
	            indentation += chr;
	          } else {
	            nonSpace = true;
	            lineHasNonSpace = true;
	            indentation += ' ';
	          }

	          tokens.push([ 'text', chr, start, start + 1 ]);
	          start += 1;

	          // Check for whitespace on the current line.
	          if (chr === '\n') {
	            stripSpace();
	            indentation = '';
	            tagIndex = 0;
	            lineHasNonSpace = false;
	          }
	        }
	      }

	      // Match the opening tag.
	      if (!scanner.scan(openingTagRe))
	        break;

	      hasTag = true;

	      // Get the tag type.
	      type = scanner.scan(tagRe) || 'name';
	      scanner.scan(whiteRe);

	      // Get the tag value.
	      if (type === '=') {
	        value = scanner.scanUntil(equalsRe);
	        scanner.scan(equalsRe);
	        scanner.scanUntil(closingTagRe);
	      } else if (type === '{') {
	        value = scanner.scanUntil(closingCurlyRe);
	        scanner.scan(curlyRe);
	        scanner.scanUntil(closingTagRe);
	        type = '&';
	      } else {
	        value = scanner.scanUntil(closingTagRe);
	      }

	      // Match the closing tag.
	      if (!scanner.scan(closingTagRe))
	        throw new Error('Unclosed tag at ' + scanner.pos);

	      if (type == '>') {
	        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];
	      } else {
	        token = [ type, value, start, scanner.pos ];
	      }
	      tagIndex++;
	      tokens.push(token);

	      if (type === '#' || type === '^') {
	        sections.push(token);
	      } else if (type === '/') {
	        // Check section nesting.
	        openSection = sections.pop();

	        if (!openSection)
	          throw new Error('Unopened section "' + value + '" at ' + start);

	        if (openSection[1] !== value)
	          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
	      } else if (type === 'name' || type === '{' || type === '&') {
	        nonSpace = true;
	      } else if (type === '=') {
	        // Set the tags for the next time around.
	        compileTags(value);
	      }
	    }

	    stripSpace();

	    // Make sure there are no open sections when we're done.
	    openSection = sections.pop();

	    if (openSection)
	      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

	    return nestTokens(squashTokens(tokens));
	  }

	  /**
	   * Combines the values of consecutive text tokens in the given `tokens` array
	   * to a single token.
	   */
	  function squashTokens (tokens) {
	    var squashedTokens = [];

	    var token, lastToken;
	    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
	      token = tokens[i];

	      if (token) {
	        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
	          lastToken[1] += token[1];
	          lastToken[3] = token[3];
	        } else {
	          squashedTokens.push(token);
	          lastToken = token;
	        }
	      }
	    }

	    return squashedTokens;
	  }

	  /**
	   * Forms the given array of `tokens` into a nested tree structure where
	   * tokens that represent a section have two additional items: 1) an array of
	   * all tokens that appear in that section and 2) the index in the original
	   * template that represents the end of that section.
	   */
	  function nestTokens (tokens) {
	    var nestedTokens = [];
	    var collector = nestedTokens;
	    var sections = [];

	    var token, section;
	    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
	      token = tokens[i];

	      switch (token[0]) {
	        case '#':
	        case '^':
	          collector.push(token);
	          sections.push(token);
	          collector = token[4] = [];
	          break;
	        case '/':
	          section = sections.pop();
	          section[5] = token[2];
	          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
	          break;
	        default:
	          collector.push(token);
	      }
	    }

	    return nestedTokens;
	  }

	  /**
	   * A simple string scanner that is used by the template parser to find
	   * tokens in template strings.
	   */
	  function Scanner (string) {
	    this.string = string;
	    this.tail = string;
	    this.pos = 0;
	  }

	  /**
	   * Returns `true` if the tail is empty (end of string).
	   */
	  Scanner.prototype.eos = function eos () {
	    return this.tail === '';
	  };

	  /**
	   * Tries to match the given regular expression at the current position.
	   * Returns the matched text if it can match, the empty string otherwise.
	   */
	  Scanner.prototype.scan = function scan (re) {
	    var match = this.tail.match(re);

	    if (!match || match.index !== 0)
	      return '';

	    var string = match[0];

	    this.tail = this.tail.substring(string.length);
	    this.pos += string.length;

	    return string;
	  };

	  /**
	   * Skips all text until the given regular expression can be matched. Returns
	   * the skipped string, which is the entire tail if no match can be made.
	   */
	  Scanner.prototype.scanUntil = function scanUntil (re) {
	    var index = this.tail.search(re), match;

	    switch (index) {
	      case -1:
	        match = this.tail;
	        this.tail = '';
	        break;
	      case 0:
	        match = '';
	        break;
	      default:
	        match = this.tail.substring(0, index);
	        this.tail = this.tail.substring(index);
	    }

	    this.pos += match.length;

	    return match;
	  };

	  /**
	   * Represents a rendering context by wrapping a view object and
	   * maintaining a reference to the parent context.
	   */
	  function Context (view, parentContext) {
	    this.view = view;
	    this.cache = { '.': this.view };
	    this.parent = parentContext;
	  }

	  /**
	   * Creates a new context using the given view with this context
	   * as the parent.
	   */
	  Context.prototype.push = function push (view) {
	    return new Context(view, this);
	  };

	  /**
	   * Returns the value of the given name in this context, traversing
	   * up the context hierarchy if the value is absent in this context's view.
	   */
	  Context.prototype.lookup = function lookup (name) {
	    var cache = this.cache;

	    var value;
	    if (cache.hasOwnProperty(name)) {
	      value = cache[name];
	    } else {
	      var context = this, intermediateValue, names, index, lookupHit = false;

	      while (context) {
	        if (name.indexOf('.') > 0) {
	          intermediateValue = context.view;
	          names = name.split('.');
	          index = 0;

	          /**
	           * Using the dot notion path in `name`, we descend through the
	           * nested objects.
	           *
	           * To be certain that the lookup has been successful, we have to
	           * check if the last object in the path actually has the property
	           * we are looking for. We store the result in `lookupHit`.
	           *
	           * This is specially necessary for when the value has been set to
	           * `undefined` and we want to avoid looking up parent contexts.
	           *
	           * In the case where dot notation is used, we consider the lookup
	           * to be successful even if the last "object" in the path is
	           * not actually an object but a primitive (e.g., a string, or an
	           * integer), because it is sometimes useful to access a property
	           * of an autoboxed primitive, such as the length of a string.
	           **/
	          while (intermediateValue != null && index < names.length) {
	            if (index === names.length - 1)
	              lookupHit = (
	                hasProperty(intermediateValue, names[index])
	                || primitiveHasOwnProperty(intermediateValue, names[index])
	              );

	            intermediateValue = intermediateValue[names[index++]];
	          }
	        } else {
	          intermediateValue = context.view[name];

	          /**
	           * Only checking against `hasProperty`, which always returns `false` if
	           * `context.view` is not an object. Deliberately omitting the check
	           * against `primitiveHasOwnProperty` if dot notation is not used.
	           *
	           * Consider this example:
	           * ```
	           * Mustache.render("The length of a football field is {{#length}}{{length}}{{/length}}.", {length: "100 yards"})
	           * ```
	           *
	           * If we were to check also against `primitiveHasOwnProperty`, as we do
	           * in the dot notation case, then render call would return:
	           *
	           * "The length of a football field is 9."
	           *
	           * rather than the expected:
	           *
	           * "The length of a football field is 100 yards."
	           **/
	          lookupHit = hasProperty(context.view, name);
	        }

	        if (lookupHit) {
	          value = intermediateValue;
	          break;
	        }

	        context = context.parent;
	      }

	      cache[name] = value;
	    }

	    if (isFunction(value))
	      value = value.call(this.view);

	    return value;
	  };

	  /**
	   * A Writer knows how to take a stream of tokens and render them to a
	   * string, given a context. It also maintains a cache of templates to
	   * avoid the need to parse the same template twice.
	   */
	  function Writer () {
	    this.templateCache = {
	      _cache: {},
	      set: function set (key, value) {
	        this._cache[key] = value;
	      },
	      get: function get (key) {
	        return this._cache[key];
	      },
	      clear: function clear () {
	        this._cache = {};
	      }
	    };
	  }

	  /**
	   * Clears all cached templates in this writer.
	   */
	  Writer.prototype.clearCache = function clearCache () {
	    if (typeof this.templateCache !== 'undefined') {
	      this.templateCache.clear();
	    }
	  };

	  /**
	   * Parses and caches the given `template` according to the given `tags` or
	   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens
	   * that is generated from the parse.
	   */
	  Writer.prototype.parse = function parse (template, tags) {
	    var cache = this.templateCache;
	    var cacheKey = template + ':' + (tags || mustache.tags).join(':');
	    var isCacheEnabled = typeof cache !== 'undefined';
	    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;

	    if (tokens == undefined) {
	      tokens = parseTemplate(template, tags);
	      isCacheEnabled && cache.set(cacheKey, tokens);
	    }
	    return tokens;
	  };

	  /**
	   * High-level method that is used to render the given `template` with
	   * the given `view`.
	   *
	   * The optional `partials` argument may be an object that contains the
	   * names and templates of partials that are used in the template. It may
	   * also be a function that is used to load partial templates on the fly
	   * that takes a single argument: the name of the partial.
	   *
	   * If the optional `config` argument is given here, then it should be an
	   * object with a `tags` attribute or an `escape` attribute or both.
	   * If an array is passed, then it will be interpreted the same way as
	   * a `tags` attribute on a `config` object.
	   *
	   * The `tags` attribute of a `config` object must be an array with two
	   * string values: the opening and closing tags used in the template (e.g.
	   * [ "<%", "%>" ]). The default is to mustache.tags.
	   *
	   * The `escape` attribute of a `config` object must be a function which
	   * accepts a string as input and outputs a safely escaped string.
	   * If an `escape` function is not provided, then an HTML-safe string
	   * escaping function is used as the default.
	   */
	  Writer.prototype.render = function render (template, view, partials, config) {
	    var tags = this.getConfigTags(config);
	    var tokens = this.parse(template, tags);
	    var context = (view instanceof Context) ? view : new Context(view, undefined);
	    return this.renderTokens(tokens, context, partials, template, config);
	  };

	  /**
	   * Low-level method that renders the given array of `tokens` using
	   * the given `context` and `partials`.
	   *
	   * Note: The `originalTemplate` is only ever used to extract the portion
	   * of the original template that was contained in a higher-order section.
	   * If the template doesn't use higher-order sections, this argument may
	   * be omitted.
	   */
	  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {
	    var buffer = '';

	    var token, symbol, value;
	    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
	      value = undefined;
	      token = tokens[i];
	      symbol = token[0];

	      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);
	      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);
	      else if (symbol === '>') value = this.renderPartial(token, context, partials, config);
	      else if (symbol === '&') value = this.unescapedValue(token, context);
	      else if (symbol === 'name') value = this.escapedValue(token, context, config);
	      else if (symbol === 'text') value = this.rawValue(token);

	      if (value !== undefined)
	        buffer += value;
	    }

	    return buffer;
	  };

	  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {
	    var self = this;
	    var buffer = '';
	    var value = context.lookup(token[1]);

	    // This function is used to render an arbitrary template
	    // in the current context by higher-order sections.
	    function subRender (template) {
	      return self.render(template, context, partials, config);
	    }

	    if (!value) return;

	    if (isArray(value)) {
	      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
	        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);
	      }
	    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
	      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);
	    } else if (isFunction(value)) {
	      if (typeof originalTemplate !== 'string')
	        throw new Error('Cannot use higher-order sections without the original template');

	      // Extract the portion of the original template that the section contains.
	      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

	      if (value != null)
	        buffer += value;
	    } else {
	      buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);
	    }
	    return buffer;
	  };

	  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {
	    var value = context.lookup(token[1]);

	    // Use JavaScript's definition of falsy. Include empty arrays.
	    // See https://github.com/janl/mustache.js/issues/186
	    if (!value || (isArray(value) && value.length === 0))
	      return this.renderTokens(token[4], context, partials, originalTemplate, config);
	  };

	  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {
	    var filteredIndentation = indentation.replace(/[^ \t]/g, '');
	    var partialByNl = partial.split('\n');
	    for (var i = 0; i < partialByNl.length; i++) {
	      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {
	        partialByNl[i] = filteredIndentation + partialByNl[i];
	      }
	    }
	    return partialByNl.join('\n');
	  };

	  Writer.prototype.renderPartial = function renderPartial (token, context, partials, config) {
	    if (!partials) return;
	    var tags = this.getConfigTags(config);

	    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
	    if (value != null) {
	      var lineHasNonSpace = token[6];
	      var tagIndex = token[5];
	      var indentation = token[4];
	      var indentedValue = value;
	      if (tagIndex == 0 && indentation) {
	        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
	      }
	      var tokens = this.parse(indentedValue, tags);
	      return this.renderTokens(tokens, context, partials, indentedValue, config);
	    }
	  };

	  Writer.prototype.unescapedValue = function unescapedValue (token, context) {
	    var value = context.lookup(token[1]);
	    if (value != null)
	      return value;
	  };

	  Writer.prototype.escapedValue = function escapedValue (token, context, config) {
	    var escape = this.getConfigEscape(config) || mustache.escape;
	    var value = context.lookup(token[1]);
	    if (value != null)
	      return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);
	  };

	  Writer.prototype.rawValue = function rawValue (token) {
	    return token[1];
	  };

	  Writer.prototype.getConfigTags = function getConfigTags (config) {
	    if (isArray(config)) {
	      return config;
	    }
	    else if (config && typeof config === 'object') {
	      return config.tags;
	    }
	    else {
	      return undefined;
	    }
	  };

	  Writer.prototype.getConfigEscape = function getConfigEscape (config) {
	    if (config && typeof config === 'object' && !isArray(config)) {
	      return config.escape;
	    }
	    else {
	      return undefined;
	    }
	  };

	  var mustache = {
	    name: 'mustache.js',
	    version: '4.2.0',
	    tags: [ '{{', '}}' ],
	    clearCache: undefined,
	    escape: undefined,
	    parse: undefined,
	    render: undefined,
	    Scanner: undefined,
	    Context: undefined,
	    Writer: undefined,
	    /**
	     * Allows a user to override the default caching strategy, by providing an
	     * object with set, get and clear methods. This can also be used to disable
	     * the cache by setting it to the literal `undefined`.
	     */
	    set templateCache (cache) {
	      defaultWriter.templateCache = cache;
	    },
	    /**
	     * Gets the default or overridden caching object from the default writer.
	     */
	    get templateCache () {
	      return defaultWriter.templateCache;
	    }
	  };

	  // All high-level mustache.* functions use this writer.
	  var defaultWriter = new Writer();

	  /**
	   * Clears all cached templates in the default writer.
	   */
	  mustache.clearCache = function clearCache () {
	    return defaultWriter.clearCache();
	  };

	  /**
	   * Parses and caches the given template in the default writer and returns the
	   * array of tokens it contains. Doing this ahead of time avoids the need to
	   * parse templates on the fly as they are rendered.
	   */
	  mustache.parse = function parse (template, tags) {
	    return defaultWriter.parse(template, tags);
	  };

	  /**
	   * Renders the `template` with the given `view`, `partials`, and `config`
	   * using the default writer.
	   */
	  mustache.render = function render (template, view, partials, config) {
	    if (typeof template !== 'string') {
	      throw new TypeError('Invalid template! Template should be a "string" ' +
	                          'but "' + typeStr(template) + '" was given as the first ' +
	                          'argument for mustache#render(template, view, partials)');
	    }

	    return defaultWriter.render(template, view, partials, config);
	  };

	  // Export the escaping function so that the user may override it.
	  // See https://github.com/janl/mustache.js/issues/244
	  mustache.escape = escapeHtml;

	  // Export these mainly for testing, but also for advanced usage.
	  mustache.Scanner = Scanner;
	  mustache.Context = Context;
	  mustache.Writer = Writer;

	  return mustache;

	})));
	}(mustache));

	var schema = {
		BadUTF16: {
			name: "BadUTF16",
			subtypes: [
			],
			props: {
			}
		},
		BadUTF8: {
			name: "BadUTF8",
			subtypes: [
			],
			props: {
			}
		},
		BalanceExceeded: {
			name: "BalanceExceeded",
			subtypes: [
			],
			props: {
			}
		},
		BreakpointTrap: {
			name: "BreakpointTrap",
			subtypes: [
			],
			props: {
			}
		},
		CacheError: {
			name: "CacheError",
			subtypes: [
				"ReadError",
				"WriteError",
				"DeserializationError",
				"SerializationError"
			],
			props: {
			}
		},
		CallIndirectOOB: {
			name: "CallIndirectOOB",
			subtypes: [
			],
			props: {
			}
		},
		CannotAppendActionToJointPromise: {
			name: "CannotAppendActionToJointPromise",
			subtypes: [
			],
			props: {
			}
		},
		CannotReturnJointPromise: {
			name: "CannotReturnJointPromise",
			subtypes: [
			],
			props: {
			}
		},
		CodeDoesNotExist: {
			name: "CodeDoesNotExist",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		CompilationError: {
			name: "CompilationError",
			subtypes: [
				"CodeDoesNotExist",
				"PrepareError",
				"WasmerCompileError"
			],
			props: {
			}
		},
		ContractSizeExceeded: {
			name: "ContractSizeExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				size: ""
			}
		},
		Deprecated: {
			name: "Deprecated",
			subtypes: [
			],
			props: {
				method_name: ""
			}
		},
		Deserialization: {
			name: "Deserialization",
			subtypes: [
			],
			props: {
			}
		},
		DeserializationError: {
			name: "DeserializationError",
			subtypes: [
			],
			props: {
			}
		},
		EmptyMethodName: {
			name: "EmptyMethodName",
			subtypes: [
			],
			props: {
			}
		},
		FunctionCallError: {
			name: "FunctionCallError",
			subtypes: [
				"CompilationError",
				"LinkError",
				"MethodResolveError",
				"WasmTrap",
				"WasmUnknownError",
				"HostError",
				"EvmError"
			],
			props: {
			}
		},
		GasExceeded: {
			name: "GasExceeded",
			subtypes: [
			],
			props: {
			}
		},
		GasInstrumentation: {
			name: "GasInstrumentation",
			subtypes: [
			],
			props: {
			}
		},
		GasLimitExceeded: {
			name: "GasLimitExceeded",
			subtypes: [
			],
			props: {
			}
		},
		GenericTrap: {
			name: "GenericTrap",
			subtypes: [
			],
			props: {
			}
		},
		GuestPanic: {
			name: "GuestPanic",
			subtypes: [
			],
			props: {
				panic_msg: ""
			}
		},
		HostError: {
			name: "HostError",
			subtypes: [
				"BadUTF16",
				"BadUTF8",
				"GasExceeded",
				"GasLimitExceeded",
				"BalanceExceeded",
				"EmptyMethodName",
				"GuestPanic",
				"IntegerOverflow",
				"InvalidPromiseIndex",
				"CannotAppendActionToJointPromise",
				"CannotReturnJointPromise",
				"InvalidPromiseResultIndex",
				"InvalidRegisterId",
				"IteratorWasInvalidated",
				"MemoryAccessViolation",
				"InvalidReceiptIndex",
				"InvalidIteratorIndex",
				"InvalidAccountId",
				"InvalidMethodName",
				"InvalidPublicKey",
				"ProhibitedInView",
				"NumberOfLogsExceeded",
				"KeyLengthExceeded",
				"ValueLengthExceeded",
				"TotalLogLengthExceeded",
				"NumberPromisesExceeded",
				"NumberInputDataDependenciesExceeded",
				"ReturnedValueLengthExceeded",
				"ContractSizeExceeded",
				"Deprecated"
			],
			props: {
			}
		},
		IllegalArithmetic: {
			name: "IllegalArithmetic",
			subtypes: [
			],
			props: {
			}
		},
		IncorrectCallIndirectSignature: {
			name: "IncorrectCallIndirectSignature",
			subtypes: [
			],
			props: {
			}
		},
		Instantiate: {
			name: "Instantiate",
			subtypes: [
			],
			props: {
			}
		},
		IntegerOverflow: {
			name: "IntegerOverflow",
			subtypes: [
			],
			props: {
			}
		},
		InternalMemoryDeclared: {
			name: "InternalMemoryDeclared",
			subtypes: [
			],
			props: {
			}
		},
		InvalidAccountId: {
			name: "InvalidAccountId",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		InvalidIteratorIndex: {
			name: "InvalidIteratorIndex",
			subtypes: [
			],
			props: {
				iterator_index: ""
			}
		},
		InvalidMethodName: {
			name: "InvalidMethodName",
			subtypes: [
			],
			props: {
			}
		},
		InvalidPromiseIndex: {
			name: "InvalidPromiseIndex",
			subtypes: [
			],
			props: {
				promise_idx: ""
			}
		},
		InvalidPromiseResultIndex: {
			name: "InvalidPromiseResultIndex",
			subtypes: [
			],
			props: {
				result_idx: ""
			}
		},
		InvalidPublicKey: {
			name: "InvalidPublicKey",
			subtypes: [
			],
			props: {
			}
		},
		InvalidReceiptIndex: {
			name: "InvalidReceiptIndex",
			subtypes: [
			],
			props: {
				receipt_index: ""
			}
		},
		InvalidRegisterId: {
			name: "InvalidRegisterId",
			subtypes: [
			],
			props: {
				register_id: ""
			}
		},
		IteratorWasInvalidated: {
			name: "IteratorWasInvalidated",
			subtypes: [
			],
			props: {
				iterator_index: ""
			}
		},
		KeyLengthExceeded: {
			name: "KeyLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		LinkError: {
			name: "LinkError",
			subtypes: [
			],
			props: {
				msg: ""
			}
		},
		Memory: {
			name: "Memory",
			subtypes: [
			],
			props: {
			}
		},
		MemoryAccessViolation: {
			name: "MemoryAccessViolation",
			subtypes: [
			],
			props: {
			}
		},
		MemoryOutOfBounds: {
			name: "MemoryOutOfBounds",
			subtypes: [
			],
			props: {
			}
		},
		MethodEmptyName: {
			name: "MethodEmptyName",
			subtypes: [
			],
			props: {
			}
		},
		MethodInvalidSignature: {
			name: "MethodInvalidSignature",
			subtypes: [
			],
			props: {
			}
		},
		MethodNotFound: {
			name: "MethodNotFound",
			subtypes: [
			],
			props: {
			}
		},
		MethodResolveError: {
			name: "MethodResolveError",
			subtypes: [
				"MethodEmptyName",
				"MethodUTF8Error",
				"MethodNotFound",
				"MethodInvalidSignature"
			],
			props: {
			}
		},
		MethodUTF8Error: {
			name: "MethodUTF8Error",
			subtypes: [
			],
			props: {
			}
		},
		MisalignedAtomicAccess: {
			name: "MisalignedAtomicAccess",
			subtypes: [
			],
			props: {
			}
		},
		NumberInputDataDependenciesExceeded: {
			name: "NumberInputDataDependenciesExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				number_of_input_data_dependencies: ""
			}
		},
		NumberOfLogsExceeded: {
			name: "NumberOfLogsExceeded",
			subtypes: [
			],
			props: {
				limit: ""
			}
		},
		NumberPromisesExceeded: {
			name: "NumberPromisesExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				number_of_promises: ""
			}
		},
		PrepareError: {
			name: "PrepareError",
			subtypes: [
				"Serialization",
				"Deserialization",
				"InternalMemoryDeclared",
				"GasInstrumentation",
				"StackHeightInstrumentation",
				"Instantiate",
				"Memory"
			],
			props: {
			}
		},
		ProhibitedInView: {
			name: "ProhibitedInView",
			subtypes: [
			],
			props: {
				method_name: ""
			}
		},
		ReadError: {
			name: "ReadError",
			subtypes: [
			],
			props: {
			}
		},
		ReturnedValueLengthExceeded: {
			name: "ReturnedValueLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		Serialization: {
			name: "Serialization",
			subtypes: [
			],
			props: {
			}
		},
		SerializationError: {
			name: "SerializationError",
			subtypes: [
			],
			props: {
				hash: ""
			}
		},
		StackHeightInstrumentation: {
			name: "StackHeightInstrumentation",
			subtypes: [
			],
			props: {
			}
		},
		StackOverflow: {
			name: "StackOverflow",
			subtypes: [
			],
			props: {
			}
		},
		TotalLogLengthExceeded: {
			name: "TotalLogLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		Unreachable: {
			name: "Unreachable",
			subtypes: [
			],
			props: {
			}
		},
		ValueLengthExceeded: {
			name: "ValueLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		WasmTrap: {
			name: "WasmTrap",
			subtypes: [
				"Unreachable",
				"IncorrectCallIndirectSignature",
				"MemoryOutOfBounds",
				"CallIndirectOOB",
				"IllegalArithmetic",
				"MisalignedAtomicAccess",
				"BreakpointTrap",
				"StackOverflow",
				"GenericTrap"
			],
			props: {
			}
		},
		WasmUnknownError: {
			name: "WasmUnknownError",
			subtypes: [
			],
			props: {
			}
		},
		WasmerCompileError: {
			name: "WasmerCompileError",
			subtypes: [
			],
			props: {
				msg: ""
			}
		},
		WriteError: {
			name: "WriteError",
			subtypes: [
			],
			props: {
			}
		},
		AccessKeyNotFound: {
			name: "AccessKeyNotFound",
			subtypes: [
			],
			props: {
				account_id: "",
				public_key: ""
			}
		},
		AccountAlreadyExists: {
			name: "AccountAlreadyExists",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		AccountDoesNotExist: {
			name: "AccountDoesNotExist",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		ActionError: {
			name: "ActionError",
			subtypes: [
				"AccountAlreadyExists",
				"AccountDoesNotExist",
				"CreateAccountOnlyByRegistrar",
				"CreateAccountNotAllowed",
				"ActorNoPermission",
				"DeleteKeyDoesNotExist",
				"AddKeyAlreadyExists",
				"DeleteAccountStaking",
				"LackBalanceForState",
				"TriesToUnstake",
				"TriesToStake",
				"InsufficientStake",
				"FunctionCallError",
				"NewReceiptValidationError",
				"OnlyImplicitAccountCreationAllowed"
			],
			props: {
				index: ""
			}
		},
		ActionsValidationError: {
			name: "ActionsValidationError",
			subtypes: [
				"DeleteActionMustBeFinal",
				"TotalPrepaidGasExceeded",
				"TotalNumberOfActionsExceeded",
				"AddKeyMethodNamesNumberOfBytesExceeded",
				"AddKeyMethodNameLengthExceeded",
				"IntegerOverflow",
				"InvalidAccountId",
				"ContractSizeExceeded",
				"FunctionCallMethodNameLengthExceeded",
				"FunctionCallArgumentsLengthExceeded",
				"UnsuitableStakingKey",
				"FunctionCallZeroAttachedGas"
			],
			props: {
			}
		},
		ActorNoPermission: {
			name: "ActorNoPermission",
			subtypes: [
			],
			props: {
				account_id: "",
				actor_id: ""
			}
		},
		AddKeyAlreadyExists: {
			name: "AddKeyAlreadyExists",
			subtypes: [
			],
			props: {
				account_id: "",
				public_key: ""
			}
		},
		AddKeyMethodNameLengthExceeded: {
			name: "AddKeyMethodNameLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		AddKeyMethodNamesNumberOfBytesExceeded: {
			name: "AddKeyMethodNamesNumberOfBytesExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				total_number_of_bytes: ""
			}
		},
		BalanceMismatchError: {
			name: "BalanceMismatchError",
			subtypes: [
			],
			props: {
				final_accounts_balance: "",
				final_postponed_receipts_balance: "",
				incoming_receipts_balance: "",
				incoming_validator_rewards: "",
				initial_accounts_balance: "",
				initial_postponed_receipts_balance: "",
				new_delayed_receipts_balance: "",
				other_burnt_amount: "",
				outgoing_receipts_balance: "",
				processed_delayed_receipts_balance: "",
				slashed_burnt_amount: "",
				tx_burnt_amount: ""
			}
		},
		CostOverflow: {
			name: "CostOverflow",
			subtypes: [
			],
			props: {
			}
		},
		CreateAccountNotAllowed: {
			name: "CreateAccountNotAllowed",
			subtypes: [
			],
			props: {
				account_id: "",
				predecessor_id: ""
			}
		},
		CreateAccountOnlyByRegistrar: {
			name: "CreateAccountOnlyByRegistrar",
			subtypes: [
			],
			props: {
				account_id: "",
				predecessor_id: "",
				registrar_account_id: ""
			}
		},
		DeleteAccountStaking: {
			name: "DeleteAccountStaking",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		DeleteActionMustBeFinal: {
			name: "DeleteActionMustBeFinal",
			subtypes: [
			],
			props: {
			}
		},
		DeleteKeyDoesNotExist: {
			name: "DeleteKeyDoesNotExist",
			subtypes: [
			],
			props: {
				account_id: "",
				public_key: ""
			}
		},
		DepositWithFunctionCall: {
			name: "DepositWithFunctionCall",
			subtypes: [
			],
			props: {
			}
		},
		Expired: {
			name: "Expired",
			subtypes: [
			],
			props: {
			}
		},
		FunctionCallArgumentsLengthExceeded: {
			name: "FunctionCallArgumentsLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		FunctionCallMethodNameLengthExceeded: {
			name: "FunctionCallMethodNameLengthExceeded",
			subtypes: [
			],
			props: {
				length: "",
				limit: ""
			}
		},
		FunctionCallZeroAttachedGas: {
			name: "FunctionCallZeroAttachedGas",
			subtypes: [
			],
			props: {
			}
		},
		InsufficientStake: {
			name: "InsufficientStake",
			subtypes: [
			],
			props: {
				account_id: "",
				minimum_stake: "",
				stake: ""
			}
		},
		InvalidAccessKeyError: {
			name: "InvalidAccessKeyError",
			subtypes: [
				"AccessKeyNotFound",
				"ReceiverMismatch",
				"MethodNameMismatch",
				"RequiresFullAccess",
				"NotEnoughAllowance",
				"DepositWithFunctionCall"
			],
			props: {
			}
		},
		InvalidChain: {
			name: "InvalidChain",
			subtypes: [
			],
			props: {
			}
		},
		InvalidDataReceiverId: {
			name: "InvalidDataReceiverId",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		InvalidNonce: {
			name: "InvalidNonce",
			subtypes: [
			],
			props: {
				ak_nonce: "",
				tx_nonce: ""
			}
		},
		InvalidPredecessorId: {
			name: "InvalidPredecessorId",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		InvalidReceiverId: {
			name: "InvalidReceiverId",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		InvalidSignature: {
			name: "InvalidSignature",
			subtypes: [
			],
			props: {
			}
		},
		InvalidSignerId: {
			name: "InvalidSignerId",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		InvalidTxError: {
			name: "InvalidTxError",
			subtypes: [
				"InvalidAccessKeyError",
				"InvalidSignerId",
				"SignerDoesNotExist",
				"InvalidNonce",
				"InvalidReceiverId",
				"InvalidSignature",
				"NotEnoughBalance",
				"LackBalanceForState",
				"CostOverflow",
				"InvalidChain",
				"Expired",
				"ActionsValidation"
			],
			props: {
			}
		},
		LackBalanceForState: {
			name: "LackBalanceForState",
			subtypes: [
			],
			props: {
				account_id: "",
				amount: ""
			}
		},
		MethodNameMismatch: {
			name: "MethodNameMismatch",
			subtypes: [
			],
			props: {
				method_name: ""
			}
		},
		NotEnoughAllowance: {
			name: "NotEnoughAllowance",
			subtypes: [
			],
			props: {
				account_id: "",
				allowance: "",
				cost: "",
				public_key: ""
			}
		},
		NotEnoughBalance: {
			name: "NotEnoughBalance",
			subtypes: [
			],
			props: {
				balance: "",
				cost: "",
				signer_id: ""
			}
		},
		OnlyImplicitAccountCreationAllowed: {
			name: "OnlyImplicitAccountCreationAllowed",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		ReceiptValidationError: {
			name: "ReceiptValidationError",
			subtypes: [
				"InvalidPredecessorId",
				"InvalidReceiverId",
				"InvalidSignerId",
				"InvalidDataReceiverId",
				"ReturnedValueLengthExceeded",
				"NumberInputDataDependenciesExceeded",
				"ActionsValidation"
			],
			props: {
			}
		},
		ReceiverMismatch: {
			name: "ReceiverMismatch",
			subtypes: [
			],
			props: {
				ak_receiver: "",
				tx_receiver: ""
			}
		},
		RequiresFullAccess: {
			name: "RequiresFullAccess",
			subtypes: [
			],
			props: {
			}
		},
		SignerDoesNotExist: {
			name: "SignerDoesNotExist",
			subtypes: [
			],
			props: {
				signer_id: ""
			}
		},
		TotalNumberOfActionsExceeded: {
			name: "TotalNumberOfActionsExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				total_number_of_actions: ""
			}
		},
		TotalPrepaidGasExceeded: {
			name: "TotalPrepaidGasExceeded",
			subtypes: [
			],
			props: {
				limit: "",
				total_prepaid_gas: ""
			}
		},
		TriesToStake: {
			name: "TriesToStake",
			subtypes: [
			],
			props: {
				account_id: "",
				balance: "",
				locked: "",
				stake: ""
			}
		},
		TriesToUnstake: {
			name: "TriesToUnstake",
			subtypes: [
			],
			props: {
				account_id: ""
			}
		},
		TxExecutionError: {
			name: "TxExecutionError",
			subtypes: [
				"ActionError",
				"InvalidTxError"
			],
			props: {
			}
		},
		UnsuitableStakingKey: {
			name: "UnsuitableStakingKey",
			subtypes: [
			],
			props: {
				public_key: ""
			}
		},
		Closed: {
			name: "Closed",
			subtypes: [
			],
			props: {
			}
		},
		"InternalError": {
			name: "InternalError",
			subtypes: [
			],
			props: {
			}
		},
		ServerError: {
			name: "ServerError",
			subtypes: [
				"TxExecutionError",
				"Timeout",
				"Closed",
				"InternalError"
			],
			props: {
			}
		},
		Timeout: {
			name: "Timeout",
			subtypes: [
			],
			props: {
			}
		}
	};
	var require$$1 = {
		schema: schema
	};

	var GasLimitExceeded = "Exceeded the maximum amount of gas allowed to burn per contract";
	var MethodEmptyName = "Method name is empty";
	var WasmerCompileError = "Wasmer compilation error: {{msg}}";
	var GuestPanic = "Smart contract panicked: {{panic_msg}}";
	var Memory = "Error creating Wasm memory";
	var GasExceeded = "Exceeded the prepaid gas";
	var MethodUTF8Error = "Method name is not valid UTF8 string";
	var BadUTF16 = "String encoding is bad UTF-16 sequence";
	var WasmTrap = "WebAssembly trap: {{msg}}";
	var GasInstrumentation = "Gas instrumentation failed or contract has denied instructions.";
	var InvalidPromiseIndex = "{{promise_idx}} does not correspond to existing promises";
	var InvalidPromiseResultIndex = "Accessed invalid promise result index: {{result_idx}}";
	var Deserialization = "Error happened while deserializing the module";
	var MethodNotFound = "Contract method is not found";
	var InvalidRegisterId = "Accessed invalid register id: {{register_id}}";
	var InvalidReceiptIndex = "VM Logic returned an invalid receipt index: {{receipt_index}}";
	var EmptyMethodName = "Method name is empty in contract call";
	var CannotReturnJointPromise = "Returning joint promise is currently prohibited";
	var StackHeightInstrumentation = "Stack instrumentation failed";
	var CodeDoesNotExist = "Cannot find contract code for account {{account_id}}";
	var MethodInvalidSignature = "Invalid method signature";
	var IntegerOverflow = "Integer overflow happened during contract execution";
	var MemoryAccessViolation = "MemoryAccessViolation";
	var InvalidIteratorIndex = "Iterator index {{iterator_index}} does not exist";
	var IteratorWasInvalidated = "Iterator {{iterator_index}} was invalidated after its creation by performing a mutable operation on trie";
	var InvalidAccountId = "VM Logic returned an invalid account id";
	var Serialization = "Error happened while serializing the module";
	var CannotAppendActionToJointPromise = "Actions can only be appended to non-joint promise.";
	var InternalMemoryDeclared = "Internal memory declaration has been found in the module";
	var Instantiate = "Error happened during instantiation";
	var ProhibitedInView = "{{method_name}} is not allowed in view calls";
	var InvalidMethodName = "VM Logic returned an invalid method name";
	var BadUTF8 = "String encoding is bad UTF-8 sequence";
	var BalanceExceeded = "Exceeded the account balance";
	var LinkError = "Wasm contract link error: {{msg}}";
	var InvalidPublicKey = "VM Logic provided an invalid public key";
	var ActorNoPermission = "Actor {{actor_id}} doesn't have permission to account {{account_id}} to complete the action";
	var LackBalanceForState = "The account {{account_id}} wouldn't have enough balance to cover storage, required to have {{amount}} yoctoNEAR more";
	var ReceiverMismatch = "Wrong AccessKey used for transaction: transaction is sent to receiver_id={{tx_receiver}}, but is signed with function call access key that restricted to only use with receiver_id={{ak_receiver}}. Either change receiver_id in your transaction or switch to use a FullAccessKey.";
	var CostOverflow = "Transaction gas or balance cost is too high";
	var InvalidSignature = "Transaction is not signed with the given public key";
	var AccessKeyNotFound = "Signer \"{{account_id}}\" doesn't have access key with the given public_key {{public_key}}";
	var NotEnoughBalance = "Sender {{signer_id}} does not have enough balance {{#formatNear}}{{balance}}{{/formatNear}} for operation costing {{#formatNear}}{{cost}}{{/formatNear}}";
	var NotEnoughAllowance = "Access Key {account_id}:{public_key} does not have enough balance {{#formatNear}}{{allowance}}{{/formatNear}} for transaction costing {{#formatNear}}{{cost}}{{/formatNear}}";
	var Expired = "Transaction has expired";
	var DeleteAccountStaking = "Account {{account_id}} is staking and can not be deleted";
	var SignerDoesNotExist = "Signer {{signer_id}} does not exist";
	var TriesToStake = "Account {{account_id}} tried to stake {{#formatNear}}{{stake}}{{/formatNear}}, but has staked {{#formatNear}}{{locked}}{{/formatNear}} and only has {{#formatNear}}{{balance}}{{/formatNear}}";
	var AddKeyAlreadyExists = "The public key {{public_key}} is already used for an existing access key";
	var InvalidSigner = "Invalid signer account ID {{signer_id}} according to requirements";
	var CreateAccountNotAllowed = "The new account_id {{account_id}} can't be created by {{predecessor_id}}";
	var RequiresFullAccess = "The transaction contains more then one action, but it was signed with an access key which allows transaction to apply only one specific action. To apply more then one actions TX must be signed with a full access key";
	var TriesToUnstake = "Account {{account_id}} is not yet staked, but tried to unstake";
	var InvalidNonce = "Transaction nonce {{tx_nonce}} must be larger than nonce of the used access key {{ak_nonce}}";
	var AccountAlreadyExists = "Can't create a new account {{account_id}}, because it already exists";
	var InvalidChain = "Transaction parent block hash doesn't belong to the current chain";
	var AccountDoesNotExist = "Can't complete the action because account {{account_id}} doesn't exist";
	var MethodNameMismatch = "Transaction method name {{method_name}} isn't allowed by the access key";
	var DeleteAccountHasRent = "Account {{account_id}} can't be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover the rent";
	var DeleteAccountHasEnoughBalance = "Account {{account_id}} can't be deleted. It has {{#formatNear}}{{balance}}{{/formatNear}}, which is enough to cover it's storage";
	var InvalidReceiver = "Invalid receiver account ID {{receiver_id}} according to requirements";
	var DeleteKeyDoesNotExist = "Account {{account_id}} tries to remove an access key that doesn't exist";
	var Timeout = "Timeout exceeded";
	var Closed = "Connection closed";
	var require$$2$1 = {
		GasLimitExceeded: GasLimitExceeded,
		MethodEmptyName: MethodEmptyName,
		WasmerCompileError: WasmerCompileError,
		GuestPanic: GuestPanic,
		Memory: Memory,
		GasExceeded: GasExceeded,
		MethodUTF8Error: MethodUTF8Error,
		BadUTF16: BadUTF16,
		WasmTrap: WasmTrap,
		GasInstrumentation: GasInstrumentation,
		InvalidPromiseIndex: InvalidPromiseIndex,
		InvalidPromiseResultIndex: InvalidPromiseResultIndex,
		Deserialization: Deserialization,
		MethodNotFound: MethodNotFound,
		InvalidRegisterId: InvalidRegisterId,
		InvalidReceiptIndex: InvalidReceiptIndex,
		EmptyMethodName: EmptyMethodName,
		CannotReturnJointPromise: CannotReturnJointPromise,
		StackHeightInstrumentation: StackHeightInstrumentation,
		CodeDoesNotExist: CodeDoesNotExist,
		MethodInvalidSignature: MethodInvalidSignature,
		IntegerOverflow: IntegerOverflow,
		MemoryAccessViolation: MemoryAccessViolation,
		InvalidIteratorIndex: InvalidIteratorIndex,
		IteratorWasInvalidated: IteratorWasInvalidated,
		InvalidAccountId: InvalidAccountId,
		Serialization: Serialization,
		CannotAppendActionToJointPromise: CannotAppendActionToJointPromise,
		InternalMemoryDeclared: InternalMemoryDeclared,
		Instantiate: Instantiate,
		ProhibitedInView: ProhibitedInView,
		InvalidMethodName: InvalidMethodName,
		BadUTF8: BadUTF8,
		BalanceExceeded: BalanceExceeded,
		LinkError: LinkError,
		InvalidPublicKey: InvalidPublicKey,
		ActorNoPermission: ActorNoPermission,
		LackBalanceForState: LackBalanceForState,
		ReceiverMismatch: ReceiverMismatch,
		CostOverflow: CostOverflow,
		InvalidSignature: InvalidSignature,
		AccessKeyNotFound: AccessKeyNotFound,
		NotEnoughBalance: NotEnoughBalance,
		NotEnoughAllowance: NotEnoughAllowance,
		Expired: Expired,
		DeleteAccountStaking: DeleteAccountStaking,
		SignerDoesNotExist: SignerDoesNotExist,
		TriesToStake: TriesToStake,
		AddKeyAlreadyExists: AddKeyAlreadyExists,
		InvalidSigner: InvalidSigner,
		CreateAccountNotAllowed: CreateAccountNotAllowed,
		RequiresFullAccess: RequiresFullAccess,
		TriesToUnstake: TriesToUnstake,
		InvalidNonce: InvalidNonce,
		AccountAlreadyExists: AccountAlreadyExists,
		InvalidChain: InvalidChain,
		AccountDoesNotExist: AccountDoesNotExist,
		MethodNameMismatch: MethodNameMismatch,
		DeleteAccountHasRent: DeleteAccountHasRent,
		DeleteAccountHasEnoughBalance: DeleteAccountHasEnoughBalance,
		InvalidReceiver: InvalidReceiver,
		DeleteKeyDoesNotExist: DeleteKeyDoesNotExist,
		Timeout: Timeout,
		Closed: Closed
	};

	var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(rpc_errors, "__esModule", { value: true });
	rpc_errors.getErrorTypeFromErrorMessage = rpc_errors.formatError = rpc_errors.parseResultError = rpc_errors.parseRpcError = rpc_errors.ServerError = void 0;
	const mustache_1 = __importDefault$a(mustache.exports);
	const rpc_error_schema_json_1 = __importDefault$a(require$$1);
	const error_messages_json_1 = __importDefault$a(require$$2$1);
	const common_index_1 = commonIndex;
	const errors_1$2 = errors;
	const mustacheHelpers = {
	    formatNear: () => (n, render) => common_index_1.utils.format.formatNearAmount(render(n))
	};
	class ServerError extends errors_1$2.TypedError {
	}
	rpc_errors.ServerError = ServerError;
	class ServerTransactionError extends ServerError {
	}
	function parseRpcError(errorObj) {
	    const result = {};
	    const errorClassName = walkSubtype(errorObj, rpc_error_schema_json_1.default.schema, result, '');
	    // NOTE: This assumes that all errors extend TypedError
	    const error = new ServerError(formatError(errorClassName, result), errorClassName);
	    Object.assign(error, result);
	    return error;
	}
	rpc_errors.parseRpcError = parseRpcError;
	function parseResultError(result) {
	    const server_error = parseRpcError(result.status.Failure);
	    const server_tx_error = new ServerTransactionError();
	    Object.assign(server_tx_error, server_error);
	    server_tx_error.type = server_error.type;
	    server_tx_error.message = server_error.message;
	    server_tx_error.transaction_outcome = result.transaction_outcome;
	    return server_tx_error;
	}
	rpc_errors.parseResultError = parseResultError;
	function formatError(errorClassName, errorData) {
	    if (typeof error_messages_json_1.default[errorClassName] === 'string') {
	        return mustache_1.default.render(error_messages_json_1.default[errorClassName], {
	            ...errorData,
	            ...mustacheHelpers
	        });
	    }
	    return JSON.stringify(errorData);
	}
	rpc_errors.formatError = formatError;
	/**
	 * Walks through defined schema returning error(s) recursively
	 * @param errorObj The error to be parsed
	 * @param schema A defined schema in JSON mapping to the RPC errors
	 * @param result An object used in recursion or called directly
	 * @param typeName The human-readable error type name as defined in the JSON mapping
	 */
	function walkSubtype(errorObj, schema, result, typeName) {
	    let error;
	    let type;
	    let errorTypeName;
	    for (const errorName in schema) {
	        if (isString(errorObj[errorName])) {
	            // Return early if error type is in a schema
	            return errorObj[errorName];
	        }
	        if (isObject$2(errorObj[errorName])) {
	            error = errorObj[errorName];
	            type = schema[errorName];
	            errorTypeName = errorName;
	        }
	        else if (isObject$2(errorObj.kind) && isObject$2(errorObj.kind[errorName])) {
	            error = errorObj.kind[errorName];
	            type = schema[errorName];
	            errorTypeName = errorName;
	        }
	        else {
	            continue;
	        }
	    }
	    if (error && type) {
	        for (const prop of Object.keys(type.props)) {
	            result[prop] = error[prop];
	        }
	        return walkSubtype(error, schema, result, errorTypeName);
	    }
	    else {
	        // TODO: is this the right thing to do?
	        result.kind = errorObj;
	        return typeName;
	    }
	}
	function getErrorTypeFromErrorMessage(errorMessage) {
	    // This function should be removed when JSON RPC starts returning typed errors.
	    switch (true) {
	        case /^account .*? does not exist while viewing$/.test(errorMessage):
	            return 'AccountDoesNotExist';
	        case /^Account .*? doesn't exist$/.test(errorMessage):
	            return 'AccountDoesNotExist';
	        case /^access key .*? does not exist while viewing$/.test(errorMessage):
	            return 'AccessKeyDoesNotExist';
	        case /wasm execution failed with error: FunctionCallError\(CompilationError\(CodeDoesNotExist/.test(errorMessage):
	            return 'CodeDoesNotExist';
	        case /Transaction nonce \d+ must be larger than nonce of the used access key \d+/.test(errorMessage):
	            return 'InvalidNonce';
	        default:
	            return 'UntypedError';
	    }
	}
	rpc_errors.getErrorTypeFromErrorMessage = getErrorTypeFromErrorMessage;
	/**
	 * Helper function determining if the argument is an object
	 * @param n Value to check
	 */
	function isObject$2(n) {
	    return Object.prototype.toString.call(n) === '[object Object]';
	}
	/**
	 * Helper function determining if the argument is a string
	 * @param n Value to check
	 */
	function isString(n) {
	    return Object.prototype.toString.call(n) === '[object String]';
	}

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;
	/**
	 * This module contains the {@link JsonRpcProvider} client class
	 * which can be used to interact with the NEAR RPC API.
	 * @see {@link providers/provider} for a list of request and response types
	 */
	const depd_1 = __importDefault(depd_1$4);
	const provider_1 = provider;
	const web_1 = web;
	const errors_1 = errors;
	Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return errors_1.TypedError; } });
	Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return errors_1.ErrorContext; } });
	const borsh_1 = lib$2;
	const exponential_backoff_1 = __importDefault(exponentialBackoff$1);
	const rpc_errors_1 = rpc_errors;
	// Default number of retries before giving up on a request.
	const REQUEST_RETRY_NUMBER = 12;
	// Default wait until next retry in millis.
	const REQUEST_RETRY_WAIT = 500;
	// Exponential back off for waiting to retry.
	const REQUEST_RETRY_WAIT_BACKOFF = 1.5;
	/// Keep ids unique across all connections.
	let _nextId = 123;
	/**
	 * Client class to interact with the NEAR RPC API.
	 * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}
	 */
	class JsonRpcProvider extends provider_1.Provider {
	    /**
	     * @param url RPC API endpoint URL
	     */
	    constructor(url) {
	        super();
	        this.connection = { url };
	    }
	    /**
	     * Gets the RPC's status
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}
	     */
	    async status() {
	        return this.sendJsonRpc('status', []);
	    }
	    /**
	     * Sends a signed transaction to the RPC and waits until transaction is fully complete
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}
	     *
	     * @param signedTransaction The signed transaction being sent
	     */
	    async sendTransaction(signedTransaction) {
	        const bytes = signedTransaction.encode();
	        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);
	    }
	    /**
	     * Sends a signed transaction to the RPC and immediately returns transaction hash
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)
	     * @param signedTransaction The signed transaction being sent
	     * @returns {Promise<FinalExecutionOutcome>}
	     */
	    async sendTransactionAsync(signedTransaction) {
	        const bytes = signedTransaction.encode();
	        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);
	    }
	    /**
	     * Gets a transaction's status from the RPC
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}
	     *
	     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string
	     * @param accountId The NEAR account that signed the transaction
	     */
	    async txStatus(txHash, accountId) {
	        if (typeof txHash === 'string') {
	            return this.txStatusString(txHash, accountId);
	        }
	        else {
	            return this.txStatusUint8Array(txHash, accountId);
	        }
	    }
	    async txStatusUint8Array(txHash, accountId) {
	        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);
	    }
	    async txStatusString(txHash, accountId) {
	        return this.sendJsonRpc('tx', [txHash, accountId]);
	    }
	    /**
	     * Gets a transaction's status from the RPC with receipts
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)
	     * @param txHash The hash of the transaction
	     * @param accountId The NEAR account that signed the transaction
	     * @returns {Promise<FinalExecutionOutcome>}
	     */
	    async txStatusReceipts(txHash, accountId) {
	        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);
	    }
	    /**
	     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)
	     * Query the RPC by passing an {@link RpcQueryRequest}
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}
	     *
	     * @typeParam T the shape of the returned query response
	     */
	    async query(...args) {
	        let result;
	        if (args.length === 1) {
	            result = await this.sendJsonRpc('query', args[0]);
	        }
	        else {
	            const [path, data] = args;
	            result = await this.sendJsonRpc('query', [path, data]);
	        }
	        if (result && result.error) {
	            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));
	        }
	        return result;
	    }
	    /**
	     * Query for block info from the RPC
	     * pass block_id OR finality as blockQuery, not both
	     * @see {@link https://docs.near.org/docs/interaction/rpc#block}
	     *
	     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)
	     */
	    async block(blockQuery) {
	        const { finality } = blockQuery;
	        let { blockId } = blockQuery;
	        if (typeof blockQuery !== 'object') {
	            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');
	            deprecate('use `block({ blockId })` or `block({ finality })` instead');
	            blockId = blockQuery;
	        }
	        return this.sendJsonRpc('block', { block_id: blockId, finality });
	    }
	    /**
	     * Query changes in block from the RPC
	     * pass block_id OR finality as blockQuery, not both
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)
	     */
	    async blockChanges(blockQuery) {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });
	    }
	    /**
	     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block
	     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}
	     *
	     * @param chunkId Hash of a chunk ID or shard ID
	     */
	    async chunk(chunkId) {
	        return this.sendJsonRpc('chunk', [chunkId]);
	    }
	    /**
	     * Query validators of the epoch defined by the given block id.
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}
	     *
	     * @param blockId Block hash or height, or null for latest.
	     */
	    async validators(blockId) {
	        return this.sendJsonRpc('validators', [blockId]);
	    }
	    /**
	     * @deprecated
	     * Gets the genesis config from RPC
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}
	     */
	    async experimental_genesisConfig() {
	        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');
	        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \'genesis\' })` to fetch the up-to-date or genesis protocol config explicitly');
	        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });
	    }
	    /**
	     * Gets the protocol config at a block from RPC
	     * @see {@link }
	     *
	     * @param blockReference specifies the block to get the protocol config for
	     */
	    async experimental_protocolConfig(blockReference) {
	        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);
	    }
	    /**
	     * @deprecated Use {@link lightClientProof} instead
	     */
	    async experimental_lightClientProof(request) {
	        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');
	        deprecate('use `lightClientProof` instead');
	        return await this.lightClientProof(request);
	    }
	    /**
	     * Gets a light client execution proof for verifying execution outcomes
	     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}
	     */
	    async lightClientProof(request) {
	        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);
	    }
	    /**
	     * Gets access key changes for a given array of accountIds
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)
	     * @returns {Promise<ChangeResult>}
	     */
	    async accessKeyChanges(accountIdArray, blockQuery) {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes', {
	            changes_type: 'all_access_key_changes',
	            account_ids: accountIdArray,
	            block_id: blockId,
	            finality
	        });
	    }
	    /**
	     * Gets single access key changes for a given array of access keys
	     * pass block_id OR finality as blockQuery, not both
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)
	     * @returns {Promise<ChangeResult>}
	     */
	    async singleAccessKeyChanges(accessKeyArray, blockQuery) {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes', {
	            changes_type: 'single_access_key_changes',
	            keys: accessKeyArray,
	            block_id: blockId,
	            finality
	        });
	    }
	    /**
	     * Gets account changes for a given array of accountIds
	     * pass block_id OR finality as blockQuery, not both
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)
	     * @returns {Promise<ChangeResult>}
	     */
	    async accountChanges(accountIdArray, blockQuery) {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes', {
	            changes_type: 'account_changes',
	            account_ids: accountIdArray,
	            block_id: blockId,
	            finality
	        });
	    }
	    /**
	     * Gets contract state changes for a given array of accountIds
	     * pass block_id OR finality as blockQuery, not both
	     * Note: If you pass a keyPrefix it must be base64 encoded
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)
	     * @returns {Promise<ChangeResult>}
	     */
	    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes', {
	            changes_type: 'data_changes',
	            account_ids: accountIdArray,
	            key_prefix_base64: keyPrefix,
	            block_id: blockId,
	            finality
	        });
	    }
	    /**
	     * Gets contract code changes for a given array of accountIds
	     * pass block_id OR finality as blockQuery, not both
	     * Note: Change is returned in a base64 encoded WASM file
	     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)
	     * @returns {Promise<ChangeResult>}
	     */
	    async contractCodeChanges(accountIdArray, blockQuery) {
	        const { finality } = blockQuery;
	        const { blockId } = blockQuery;
	        return this.sendJsonRpc('EXPERIMENTAL_changes', {
	            changes_type: 'contract_code_changes',
	            account_ids: accountIdArray,
	            block_id: blockId,
	            finality
	        });
	    }
	    /**
	     * Returns gas price for a specific block_height or block_hash.
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}
	     *
	     * @param blockId Block hash or height, or null for latest.
	     */
	    async gasPrice(blockId) {
	        return await this.sendJsonRpc('gas_price', [blockId]);
	    }
	    /**
	     * Directly call the RPC specifying the method and params
	     *
	     * @param method RPC method
	     * @param params Parameters to the method
	     */
	    async sendJsonRpc(method, params) {
	        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {
	            try {
	                const request = {
	                    method,
	                    params,
	                    id: (_nextId++),
	                    jsonrpc: '2.0'
	                };
	                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));
	                if (response.error) {
	                    if (typeof response.error.data === 'object') {
	                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {
	                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format
	                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);
	                        }
	                        throw rpc_errors_1.parseRpcError(response.error.data);
	                    }
	                    else {
	                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;
	                        // NOTE: All this hackery is happening because structured errors not implemented
	                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved
	                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')
	                            || errorMessage.includes('query has timed out')) {
	                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');
	                        }
	                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));
	                    }
	                }
	                // Success when response.error is not exist
	                return response;
	            }
	            catch (error) {
	                if (error.type === 'TimeoutError') {
	                    console.warn(`Retrying request to ${method} as it has timed out`, params);
	                    return null;
	                }
	                throw error;
	            }
	        });
	        const { result } = response;
	        // From jsonrpc spec:
	        // result
	        //   This member is REQUIRED on success.
	        //   This member MUST NOT exist if there was an error invoking the method.
	        if (typeof result === 'undefined') {
	            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');
	        }
	        return result;
	    }
	}
	exports.JsonRpcProvider = JsonRpcProvider;
	}(jsonRpcProvider));

	(function (exports) {
	/** @hidden @module */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ErrorContext = exports.TypedError = exports.getTransactionLastResult = exports.FinalExecutionStatusBasic = exports.JsonRpcProvider = exports.Provider = void 0;
	const provider_1 = provider;
	Object.defineProperty(exports, "Provider", { enumerable: true, get: function () { return provider_1.Provider; } });
	Object.defineProperty(exports, "getTransactionLastResult", { enumerable: true, get: function () { return provider_1.getTransactionLastResult; } });
	Object.defineProperty(exports, "FinalExecutionStatusBasic", { enumerable: true, get: function () { return provider_1.FinalExecutionStatusBasic; } });
	const json_rpc_provider_1 = jsonRpcProvider;
	Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return json_rpc_provider_1.JsonRpcProvider; } });
	Object.defineProperty(exports, "TypedError", { enumerable: true, get: function () { return json_rpc_provider_1.TypedError; } });
	Object.defineProperty(exports, "ErrorContext", { enumerable: true, get: function () { return json_rpc_provider_1.ErrorContext; } });
	}(providers));

	var utils = {};

	var format$2 = {};

	var bn = {exports: {}};

	(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
	      Buffer = window.Buffer;
	    } else {
	      Buffer = require('buffer').Buffer;
	    }
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	      this.negative = 1;
	    }

	    if (start < number.length) {
	      if (base === 16) {
	        this._parseHex(number, start, endian);
	      } else {
	        this._parseBase(number, base, start);
	        if (endian === 'le') {
	          this._initArray(this.toArray(), base, endian);
	        }
	      }
	    }
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [number & 0x3ffffff];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [0];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this._strip();
	  };

	  function parseHex4Bits (string, index) {
	    var c = string.charCodeAt(index);
	    // '0' - '9'
	    if (c >= 48 && c <= 57) {
	      return c - 48;
	    // 'A' - 'F'
	    } else if (c >= 65 && c <= 70) {
	      return c - 55;
	    // 'a' - 'f'
	    } else if (c >= 97 && c <= 102) {
	      return c - 87;
	    } else {
	      assert(false, 'Invalid character in ' + string);
	    }
	  }

	  function parseHexByte (string, lowerBound, index) {
	    var r = parseHex4Bits(string, index);
	    if (index - 1 >= lowerBound) {
	      r |= parseHex4Bits(string, index - 1) << 4;
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    // 24-bits chunks
	    var off = 0;
	    var j = 0;

	    var w;
	    if (endian === 'be') {
	      for (i = number.length - 1; i >= start; i -= 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    } else {
	      var parseLength = number.length - start;
	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
	        w = parseHexByte(number, start, i) << off;
	        this.words[j] |= w & 0x3ffffff;
	        if (off >= 18) {
	          off -= 18;
	          j += 1;
	          this.words[j] |= w >>> 26;
	        } else {
	          off += 8;
	        }
	      }
	    }

	    this._strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var b = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        b = c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        b = c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        b = c;
	      }
	      assert(c >= 0 && b < mul, 'Invalid character');
	      r += b;
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [0];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    this._strip();
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  function move (dest, src) {
	    dest.words = src.words;
	    dest.length = src.length;
	    dest.negative = src.negative;
	    dest.red = src.red;
	  }

	  BN.prototype._move = function _move (dest) {
	    move(dest, this);
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
	    try {
	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
	    } catch (e) {
	      BN.prototype.inspect = inspect;
	    }
	  } else {
	    BN.prototype.inspect = inspect;
	  }

	  function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modrn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16, 2);
	  };

	  if (Buffer) {
	    BN.prototype.toBuffer = function toBuffer (endian, length) {
	      return this.toArrayLike(Buffer, endian, length);
	    };
	  }

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  var allocate = function allocate (ArrayType, size) {
	    if (ArrayType.allocUnsafe) {
	      return ArrayType.allocUnsafe(size);
	    }
	    return new ArrayType(size);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    this._strip();

	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert(byteLength <= reqLength, 'byte array longer than desired length');
	    assert(reqLength > 0, 'Requested array length <= 0');

	    var res = allocate(ArrayType, reqLength);
	    var postfix = endian === 'le' ? 'LE' : 'BE';
	    this['_toArrayLike' + postfix](res, byteLength);
	    return res;
	  };

	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
	    var position = 0;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position++] = word & 0xff;
	      if (position < res.length) {
	        res[position++] = (word >> 8) & 0xff;
	      }
	      if (position < res.length) {
	        res[position++] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position < res.length) {
	          res[position++] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position < res.length) {
	      res[position++] = carry;

	      while (position < res.length) {
	        res[position++] = 0;
	      }
	    }
	  };

	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
	    var position = res.length - 1;
	    var carry = 0;

	    for (var i = 0, shift = 0; i < this.length; i++) {
	      var word = (this.words[i] << shift) | carry;

	      res[position--] = word & 0xff;
	      if (position >= 0) {
	        res[position--] = (word >> 8) & 0xff;
	      }
	      if (position >= 0) {
	        res[position--] = (word >> 16) & 0xff;
	      }

	      if (shift === 6) {
	        if (position >= 0) {
	          res[position--] = (word >> 24) & 0xff;
	        }
	        carry = 0;
	        shift = 0;
	      } else {
	        carry = word >>> 24;
	        shift += 2;
	      }
	    }

	    if (position >= 0) {
	      res[position--] = carry;

	      while (position >= 0) {
	        res[position--] = 0;
	      }
	    }
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] >>> wbit) & 0x01;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this._strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this._strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this._strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this._strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this._strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this._strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out._strip();
	  }

	  function jumboMulTo (self, num, out) {
	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
	    // var fftm = new FFTM();
	    // return fftm.mulp(self, num, out);
	    return bigMulTo(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(typeof num === 'number');
	    assert(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this._strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this._strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) <= num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert(typeof num === 'number');
	    assert(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this._strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this._strip();

	    // Subtraction overflow
	    assert(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this._strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q._strip();
	    }
	    a._strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modrn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modrn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modrn = function modrn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return isNegNum ? -acc : acc;
	  };

	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
	    return this.modrn(num);
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    var isNegNum = num < 0;
	    if (isNegNum) num = -num;

	    assert(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    this._strip();
	    return isNegNum ? this.ineg() : this;
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert(p.negative === 0);
	    assert(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this._strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    assert(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      if (r.strip !== undefined) {
	        // r is a BN v4 instance
	        r.strip();
	      } else {
	        // r is a BN v5 instance
	        r._strip();
	      }
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert(a.negative === 0, 'red works only with positives');
	    assert(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert((a.negative | b.negative) === 0, 'red works only with positives');
	    assert(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

	    move(a, a.umod(this.m)._forceRed(this));
	    return a;
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	}(bn));

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parseNearAmount = exports.formatNearAmount = exports.NEAR_NOMINATION = exports.NEAR_NOMINATION_EXP = void 0;
	const bn_js_1 = __importDefault(bn.exports);
	/**
	 * Exponent for calculating how many indivisible units are there in one NEAR. See {@link NEAR_NOMINATION}.
	 */
	exports.NEAR_NOMINATION_EXP = 24;
	/**
	 * Number of indivisible units in one NEAR. Derived from {@link NEAR_NOMINATION_EXP}.
	 */
	exports.NEAR_NOMINATION = new bn_js_1.default('10', 10).pow(new bn_js_1.default(exports.NEAR_NOMINATION_EXP, 10));
	// Pre-calculate offests used for rounding to different number of digits
	const ROUNDING_OFFSETS = [];
	const BN10 = new bn_js_1.default(10);
	for (let i = 0, offset = new bn_js_1.default(5); i < exports.NEAR_NOMINATION_EXP; i++, offset = offset.mul(BN10)) {
	    ROUNDING_OFFSETS[i] = offset;
	}
	/**
	 * Convert account balance value from internal indivisible units to NEAR. 1 NEAR is defined by {@link NEAR_NOMINATION}.
	 * Effectively this divides given amount by {@link NEAR_NOMINATION}.
	 *
	 * @param balance decimal string representing balance in smallest non-divisible NEAR units (as specified by {@link NEAR_NOMINATION})
	 * @param fracDigits number of fractional digits to preserve in formatted string. Balance is rounded to match given number of digits.
	 * @returns Value in Ⓝ
	 */
	function formatNearAmount(balance, fracDigits = exports.NEAR_NOMINATION_EXP) {
	    const balanceBN = new bn_js_1.default(balance, 10);
	    if (fracDigits !== exports.NEAR_NOMINATION_EXP) {
	        // Adjust balance for rounding at given number of digits
	        const roundingExp = exports.NEAR_NOMINATION_EXP - fracDigits - 1;
	        if (roundingExp > 0) {
	            balanceBN.iadd(ROUNDING_OFFSETS[roundingExp]);
	        }
	    }
	    balance = balanceBN.toString();
	    const wholeStr = balance.substring(0, balance.length - exports.NEAR_NOMINATION_EXP) || '0';
	    const fractionStr = balance.substring(balance.length - exports.NEAR_NOMINATION_EXP)
	        .padStart(exports.NEAR_NOMINATION_EXP, '0').substring(0, fracDigits);
	    return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);
	}
	exports.formatNearAmount = formatNearAmount;
	/**
	 * Convert human readable NEAR amount to internal indivisible units.
	 * Effectively this multiplies given amount by {@link NEAR_NOMINATION}.
	 *
	 * @param amt decimal string (potentially fractional) denominated in NEAR.
	 * @returns The parsed yoctoⓃ amount or null if no amount was passed in
	 */
	function parseNearAmount(amt) {
	    if (!amt) {
	        return null;
	    }
	    amt = cleanupAmount(amt);
	    const split = amt.split('.');
	    const wholePart = split[0];
	    const fracPart = split[1] || '';
	    if (split.length > 2 || fracPart.length > exports.NEAR_NOMINATION_EXP) {
	        throw new Error(`Cannot parse '${amt}' as NEAR amount`);
	    }
	    return trimLeadingZeroes(wholePart + fracPart.padEnd(exports.NEAR_NOMINATION_EXP, '0'));
	}
	exports.parseNearAmount = parseNearAmount;
	/**
	 * Removes commas from the input
	 * @param amount A value or amount that may contain commas
	 * @returns string The cleaned value
	 */
	function cleanupAmount(amount) {
	    return amount.replace(/,/g, '').trim();
	}
	/**
	 * Removes .000… from an input
	 * @param value A value that may contain trailing zeroes in the decimals place
	 * @returns string The value without the trailing zeros
	 */
	function trimTrailingZeroes(value) {
	    return value.replace(/\.?0*$/, '');
	}
	/**
	 * Removes leading zeroes from an input
	 * @param value A value that may contain leading zeroes
	 * @returns string The value without the leading zeroes
	 */
	function trimLeadingZeroes(value) {
	    value = value.replace(/^0+/, '');
	    if (value === '') {
	        return '0';
	    }
	    return value;
	}
	/**
	 * Returns a human-readable value with commas
	 * @param value A value that may not contain commas
	 * @returns string A value with commas
	 */
	function formatWithCommas(value) {
	    const pattern = /(-?\d+)(\d{3})/;
	    while (pattern.test(value)) {
	        value = value.replace(pattern, '$1,$2');
	    }
	    return value;
	}
	}(format$2));

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.rpc_errors = exports.KeyPairEd25519 = exports.KeyPair = exports.PublicKey = exports.format = exports.enums = exports.web = exports.serialize = exports.key_pair = void 0;
	const key_pair$1 = __importStar(key_pair);
	exports.key_pair = key_pair$1;
	const serialize = __importStar(serialize$1);
	exports.serialize = serialize;
	const web$1 = __importStar(web);
	exports.web = web$1;
	const enums$1 = __importStar(enums);
	exports.enums = enums$1;
	const format = __importStar(format$2);
	exports.format = format;
	const rpc_errors$1 = __importStar(rpc_errors);
	exports.rpc_errors = rpc_errors$1;
	const key_pair_1 = key_pair;
	Object.defineProperty(exports, "PublicKey", { enumerable: true, get: function () { return key_pair_1.PublicKey; } });
	Object.defineProperty(exports, "KeyPair", { enumerable: true, get: function () { return key_pair_1.KeyPair; } });
	Object.defineProperty(exports, "KeyPairEd25519", { enumerable: true, get: function () { return key_pair_1.KeyPairEd25519; } });
	}(utils));

	var transaction = {};

	var sha256$1 = {exports: {}};

	/**
	 * [js-sha256]{@link https://github.com/emn178/js-sha256}
	 *
	 * @version 0.9.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2014-2017
	 * @license MIT
	 */

	(function (module) {
	/*jslint bitwise: true */
	(function () {

	  var ERROR = 'input is invalid type';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA256_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var EXTRA = [-2147483648, 8388608, 32768, 128];
	  var SHIFT = [24, 16, 8, 0];
	  var K = [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	  ];
	  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

	  var blocks = [];

	  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (outputType, is224) {
	    return function (message) {
	      return new Sha256(is224, true).update(message)[outputType]();
	    };
	  };

	  var createMethod = function (is224) {
	    var method = createOutputMethod('hex', is224);
	    if (NODE_JS) {
	      method = nodeWrap(method, is224);
	    }
	    method.create = function () {
	      return new Sha256(is224);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createOutputMethod(type, is224);
	    }
	    return method;
	  };

	  var nodeWrap = function (method, is224) {
	    var crypto = eval("require('crypto')");
	    var Buffer = eval("require('buffer').Buffer");
	    var algorithm = is224 ? 'sha224' : 'sha256';
	    var nodeMethod = function (message) {
	      if (typeof message === 'string') {
	        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
	      } else {
	        if (message === null || message === undefined) {
	          throw new Error(ERROR);
	        } else if (message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        }
	      }
	      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
	        message.constructor === Buffer) {
	        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
	      } else {
	        return method(message);
	      }
	    };
	    return nodeMethod;
	  };

	  var createHmacOutputMethod = function (outputType, is224) {
	    return function (key, message) {
	      return new HmacSha256(key, is224, true).update(message)[outputType]();
	    };
	  };

	  var createHmacMethod = function (is224) {
	    var method = createHmacOutputMethod('hex', is224);
	    method.create = function (key) {
	      return new HmacSha256(key, is224);
	    };
	    method.update = function (key, message) {
	      return method.create(key).update(message);
	    };
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createHmacOutputMethod(type, is224);
	    }
	    return method;
	  };

	  function Sha256(is224, sharedMemory) {
	    if (sharedMemory) {
	      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
	        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
	        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
	        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	      this.blocks = blocks;
	    } else {
	      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	    }

	    if (is224) {
	      this.h0 = 0xc1059ed8;
	      this.h1 = 0x367cd507;
	      this.h2 = 0x3070dd17;
	      this.h3 = 0xf70e5939;
	      this.h4 = 0xffc00b31;
	      this.h5 = 0x68581511;
	      this.h6 = 0x64f98fa7;
	      this.h7 = 0xbefa4fa4;
	    } else { // 256
	      this.h0 = 0x6a09e667;
	      this.h1 = 0xbb67ae85;
	      this.h2 = 0x3c6ef372;
	      this.h3 = 0xa54ff53a;
	      this.h4 = 0x510e527f;
	      this.h5 = 0x9b05688c;
	      this.h6 = 0x1f83d9ab;
	      this.h7 = 0x5be0cd19;
	    }

	    this.block = this.start = this.bytes = this.hBytes = 0;
	    this.finalized = this.hashed = false;
	    this.first = true;
	    this.is224 = is224;
	  }

	  Sha256.prototype.update = function (message) {
	    if (this.finalized) {
	      return;
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw new Error(ERROR);
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw new Error(ERROR);
	          }
	        }
	      } else {
	        throw new Error(ERROR);
	      }
	      notString = true;
	    }
	    var code, index = 0, i, length = message.length, blocks = this.blocks;

	    while (index < length) {
	      if (this.hashed) {
	        this.hashed = false;
	        blocks[0] = this.block;
	        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
	          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
	          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
	          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	      }

	      if (notString) {
	        for (i = this.start; index < length && i < 64; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < 64; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }

	      this.lastByteIndex = i;
	      this.bytes += i - this.start;
	      if (i >= 64) {
	        this.block = blocks[16];
	        this.start = i - 64;
	        this.hash();
	        this.hashed = true;
	      } else {
	        this.start = i;
	      }
	    }
	    if (this.bytes > 4294967295) {
	      this.hBytes += this.bytes / 4294967296 << 0;
	      this.bytes = this.bytes % 4294967296;
	    }
	    return this;
	  };

	  Sha256.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex;
	    blocks[16] = this.block;
	    blocks[i >> 2] |= EXTRA[i & 3];
	    this.block = blocks[16];
	    if (i >= 56) {
	      if (!this.hashed) {
	        this.hash();
	      }
	      blocks[0] = this.block;
	      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
	        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
	        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
	        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
	    }
	    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
	    blocks[15] = this.bytes << 3;
	    this.hash();
	  };

	  Sha256.prototype.hash = function () {
	    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
	      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

	    for (j = 16; j < 64; ++j) {
	      // rightrotate
	      t1 = blocks[j - 15];
	      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
	      t1 = blocks[j - 2];
	      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
	      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
	    }

	    bc = b & c;
	    for (j = 0; j < 64; j += 4) {
	      if (this.first) {
	        if (this.is224) {
	          ab = 300032;
	          t1 = blocks[0] - 1413257819;
	          h = t1 - 150054599 << 0;
	          d = t1 + 24177077 << 0;
	        } else {
	          ab = 704751109;
	          t1 = blocks[0] - 210244248;
	          h = t1 - 1521486534 << 0;
	          d = t1 + 143694565 << 0;
	        }
	        this.first = false;
	      } else {
	        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
	        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
	        ab = a & b;
	        maj = ab ^ (a & c) ^ bc;
	        ch = (e & f) ^ (~e & g);
	        t1 = h + s1 + ch + K[j] + blocks[j];
	        t2 = s0 + maj;
	        h = d + t1 << 0;
	        d = t1 + t2 << 0;
	      }
	      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
	      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
	      da = d & a;
	      maj = da ^ (d & b) ^ ab;
	      ch = (h & e) ^ (~h & f);
	      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
	      t2 = s0 + maj;
	      g = c + t1 << 0;
	      c = t1 + t2 << 0;
	      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
	      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
	      cd = c & d;
	      maj = cd ^ (c & a) ^ da;
	      ch = (g & h) ^ (~g & e);
	      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
	      t2 = s0 + maj;
	      f = b + t1 << 0;
	      b = t1 + t2 << 0;
	      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
	      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
	      bc = b & c;
	      maj = bc ^ (b & d) ^ cd;
	      ch = (f & g) ^ (~f & h);
	      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
	      t2 = s0 + maj;
	      e = a + t1 << 0;
	      a = t1 + t2 << 0;
	    }

	    this.h0 = this.h0 + a << 0;
	    this.h1 = this.h1 + b << 0;
	    this.h2 = this.h2 + c << 0;
	    this.h3 = this.h3 + d << 0;
	    this.h4 = this.h4 + e << 0;
	    this.h5 = this.h5 + f << 0;
	    this.h6 = this.h6 + g << 0;
	    this.h7 = this.h7 + h << 0;
	  };

	  Sha256.prototype.hex = function () {
	    this.finalize();

	    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
	      h6 = this.h6, h7 = this.h7;

	    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
	      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
	      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
	      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
	      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
	      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
	      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
	      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
	      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
	      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
	      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
	      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
	      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
	      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
	      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
	      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
	      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
	      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
	      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
	      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
	      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
	      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
	      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
	      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
	      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
	      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
	      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
	      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
	    if (!this.is224) {
	      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
	        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
	        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
	        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
	    }
	    return hex;
	  };

	  Sha256.prototype.toString = Sha256.prototype.hex;

	  Sha256.prototype.digest = function () {
	    this.finalize();

	    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
	      h6 = this.h6, h7 = this.h7;

	    var arr = [
	      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
	      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
	      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
	      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
	      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
	      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
	      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
	    ];
	    if (!this.is224) {
	      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
	    }
	    return arr;
	  };

	  Sha256.prototype.array = Sha256.prototype.digest;

	  Sha256.prototype.arrayBuffer = function () {
	    this.finalize();

	    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
	    var dataView = new DataView(buffer);
	    dataView.setUint32(0, this.h0);
	    dataView.setUint32(4, this.h1);
	    dataView.setUint32(8, this.h2);
	    dataView.setUint32(12, this.h3);
	    dataView.setUint32(16, this.h4);
	    dataView.setUint32(20, this.h5);
	    dataView.setUint32(24, this.h6);
	    if (!this.is224) {
	      dataView.setUint32(28, this.h7);
	    }
	    return buffer;
	  };

	  function HmacSha256(key, is224, sharedMemory) {
	    var i, type = typeof key;
	    if (type === 'string') {
	      var bytes = [], length = key.length, index = 0, code;
	      for (i = 0; i < length; ++i) {
	        code = key.charCodeAt(i);
	        if (code < 0x80) {
	          bytes[index++] = code;
	        } else if (code < 0x800) {
	          bytes[index++] = (0xc0 | (code >> 6));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes[index++] = (0xe0 | (code >> 12));
	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
	          bytes[index++] = (0xf0 | (code >> 18));
	          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
	          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
	          bytes[index++] = (0x80 | (code & 0x3f));
	        }
	      }
	      key = bytes;
	    } else {
	      if (type === 'object') {
	        if (key === null) {
	          throw new Error(ERROR);
	        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
	          key = new Uint8Array(key);
	        } else if (!Array.isArray(key)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
	            throw new Error(ERROR);
	          }
	        }
	      } else {
	        throw new Error(ERROR);
	      }
	    }

	    if (key.length > 64) {
	      key = (new Sha256(is224, true)).update(key).array();
	    }

	    var oKeyPad = [], iKeyPad = [];
	    for (i = 0; i < 64; ++i) {
	      var b = key[i] || 0;
	      oKeyPad[i] = 0x5c ^ b;
	      iKeyPad[i] = 0x36 ^ b;
	    }

	    Sha256.call(this, is224, sharedMemory);

	    this.update(iKeyPad);
	    this.oKeyPad = oKeyPad;
	    this.inner = true;
	    this.sharedMemory = sharedMemory;
	  }
	  HmacSha256.prototype = new Sha256();

	  HmacSha256.prototype.finalize = function () {
	    Sha256.prototype.finalize.call(this);
	    if (this.inner) {
	      this.inner = false;
	      var innerHash = this.array();
	      Sha256.call(this, this.is224, this.sharedMemory);
	      this.update(this.oKeyPad);
	      this.update(innerHash);
	      Sha256.prototype.finalize.call(this);
	    }
	  };

	  var exports = createMethod();
	  exports.sha256 = exports;
	  exports.sha224 = createMethod(true);
	  exports.sha256.hmac = createHmacMethod();
	  exports.sha224.hmac = createHmacMethod(true);

	  if (COMMON_JS) {
	    module.exports = exports;
	  } else {
	    root.sha256 = exports.sha256;
	    root.sha224 = exports.sha224;
	  }
	})();
	}(sha256$1));

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.signTransaction = exports.createTransaction = exports.SCHEMA = exports.Action = exports.SignedTransaction = exports.Transaction = exports.Signature = exports.deleteAccount = exports.deleteKey = exports.addKey = exports.stake = exports.transfer = exports.functionCall = exports.deployContract = exports.createAccount = exports.DeleteAccount = exports.DeleteKey = exports.AddKey = exports.Stake = exports.Transfer = exports.FunctionCall = exports.DeployContract = exports.CreateAccount = exports.IAction = exports.functionCallAccessKey = exports.fullAccessKey = exports.AccessKey = exports.AccessKeyPermission = exports.FullAccessPermission = exports.FunctionCallPermission = void 0;
	const js_sha256_1 = __importDefault(sha256$1.exports);
	const enums_1 = enums;
	const borsh_1 = lib$2;
	const key_pair_1 = key_pair;
	class FunctionCallPermission extends enums_1.Assignable {
	}
	exports.FunctionCallPermission = FunctionCallPermission;
	class FullAccessPermission extends enums_1.Assignable {
	}
	exports.FullAccessPermission = FullAccessPermission;
	class AccessKeyPermission extends enums_1.Enum {
	}
	exports.AccessKeyPermission = AccessKeyPermission;
	class AccessKey extends enums_1.Assignable {
	}
	exports.AccessKey = AccessKey;
	function fullAccessKey() {
	    return new AccessKey({ nonce: 0, permission: new AccessKeyPermission({ fullAccess: new FullAccessPermission({}) }) });
	}
	exports.fullAccessKey = fullAccessKey;
	function functionCallAccessKey(receiverId, methodNames, allowance) {
	    return new AccessKey({ nonce: 0, permission: new AccessKeyPermission({ functionCall: new FunctionCallPermission({ receiverId, allowance, methodNames }) }) });
	}
	exports.functionCallAccessKey = functionCallAccessKey;
	class IAction extends enums_1.Assignable {
	}
	exports.IAction = IAction;
	class CreateAccount extends IAction {
	}
	exports.CreateAccount = CreateAccount;
	class DeployContract extends IAction {
	}
	exports.DeployContract = DeployContract;
	class FunctionCall extends IAction {
	}
	exports.FunctionCall = FunctionCall;
	class Transfer extends IAction {
	}
	exports.Transfer = Transfer;
	class Stake extends IAction {
	}
	exports.Stake = Stake;
	class AddKey extends IAction {
	}
	exports.AddKey = AddKey;
	class DeleteKey extends IAction {
	}
	exports.DeleteKey = DeleteKey;
	class DeleteAccount extends IAction {
	}
	exports.DeleteAccount = DeleteAccount;
	function createAccount() {
	    return new Action({ createAccount: new CreateAccount({}) });
	}
	exports.createAccount = createAccount;
	function deployContract(code) {
	    return new Action({ deployContract: new DeployContract({ code }) });
	}
	exports.deployContract = deployContract;
	/**
	 * Constructs {@link Action} instance representing contract method call.
	 *
	 * @param methodName the name of the method to call
	 * @param args arguments to pass to method. Can be either plain JS object which gets serialized as JSON automatically
	 *  or `Uint8Array` instance which represents bytes passed as is.
	 * @param gas max amount of gas that method call can use
	 * @param deposit amount of NEAR (in yoctoNEAR) to send together with the call
	 */
	function functionCall(methodName, args, gas, deposit) {
	    const anyArgs = args;
	    const isUint8Array = anyArgs.byteLength !== undefined && anyArgs.byteLength === anyArgs.length;
	    const serializedArgs = isUint8Array ? args : Buffer.from(JSON.stringify(args));
	    return new Action({ functionCall: new FunctionCall({ methodName, args: serializedArgs, gas, deposit }) });
	}
	exports.functionCall = functionCall;
	function transfer(deposit) {
	    return new Action({ transfer: new Transfer({ deposit }) });
	}
	exports.transfer = transfer;
	function stake(stake, publicKey) {
	    return new Action({ stake: new Stake({ stake, publicKey }) });
	}
	exports.stake = stake;
	function addKey(publicKey, accessKey) {
	    return new Action({ addKey: new AddKey({ publicKey, accessKey }) });
	}
	exports.addKey = addKey;
	function deleteKey(publicKey) {
	    return new Action({ deleteKey: new DeleteKey({ publicKey }) });
	}
	exports.deleteKey = deleteKey;
	function deleteAccount(beneficiaryId) {
	    return new Action({ deleteAccount: new DeleteAccount({ beneficiaryId }) });
	}
	exports.deleteAccount = deleteAccount;
	class Signature extends enums_1.Assignable {
	}
	exports.Signature = Signature;
	class Transaction extends enums_1.Assignable {
	    encode() {
	        return borsh_1.serialize(exports.SCHEMA, this);
	    }
	    static decode(bytes) {
	        return borsh_1.deserialize(exports.SCHEMA, Transaction, bytes);
	    }
	}
	exports.Transaction = Transaction;
	class SignedTransaction extends enums_1.Assignable {
	    encode() {
	        return borsh_1.serialize(exports.SCHEMA, this);
	    }
	    static decode(bytes) {
	        return borsh_1.deserialize(exports.SCHEMA, SignedTransaction, bytes);
	    }
	}
	exports.SignedTransaction = SignedTransaction;
	/**
	 * Contains a list of the valid transaction Actions available with this API
	 * @see {@link https://nomicon.io/RuntimeSpec/Actions.html | Actions Spec}
	 */
	class Action extends enums_1.Enum {
	}
	exports.Action = Action;
	exports.SCHEMA = new Map([
	    [Signature, { kind: 'struct', fields: [
	                ['keyType', 'u8'],
	                ['data', [64]]
	            ] }],
	    [SignedTransaction, { kind: 'struct', fields: [
	                ['transaction', Transaction],
	                ['signature', Signature]
	            ] }],
	    [Transaction, { kind: 'struct', fields: [
	                ['signerId', 'string'],
	                ['publicKey', key_pair_1.PublicKey],
	                ['nonce', 'u64'],
	                ['receiverId', 'string'],
	                ['blockHash', [32]],
	                ['actions', [Action]]
	            ] }],
	    [key_pair_1.PublicKey, { kind: 'struct', fields: [
	                ['keyType', 'u8'],
	                ['data', [32]]
	            ] }],
	    [AccessKey, { kind: 'struct', fields: [
	                ['nonce', 'u64'],
	                ['permission', AccessKeyPermission],
	            ] }],
	    [AccessKeyPermission, { kind: 'enum', field: 'enum', values: [
	                ['functionCall', FunctionCallPermission],
	                ['fullAccess', FullAccessPermission],
	            ] }],
	    [FunctionCallPermission, { kind: 'struct', fields: [
	                ['allowance', { kind: 'option', type: 'u128' }],
	                ['receiverId', 'string'],
	                ['methodNames', ['string']],
	            ] }],
	    [FullAccessPermission, { kind: 'struct', fields: [] }],
	    [Action, { kind: 'enum', field: 'enum', values: [
	                ['createAccount', CreateAccount],
	                ['deployContract', DeployContract],
	                ['functionCall', FunctionCall],
	                ['transfer', Transfer],
	                ['stake', Stake],
	                ['addKey', AddKey],
	                ['deleteKey', DeleteKey],
	                ['deleteAccount', DeleteAccount],
	            ] }],
	    [CreateAccount, { kind: 'struct', fields: [] }],
	    [DeployContract, { kind: 'struct', fields: [
	                ['code', ['u8']]
	            ] }],
	    [FunctionCall, { kind: 'struct', fields: [
	                ['methodName', 'string'],
	                ['args', ['u8']],
	                ['gas', 'u64'],
	                ['deposit', 'u128']
	            ] }],
	    [Transfer, { kind: 'struct', fields: [
	                ['deposit', 'u128']
	            ] }],
	    [Stake, { kind: 'struct', fields: [
	                ['stake', 'u128'],
	                ['publicKey', key_pair_1.PublicKey]
	            ] }],
	    [AddKey, { kind: 'struct', fields: [
	                ['publicKey', key_pair_1.PublicKey],
	                ['accessKey', AccessKey]
	            ] }],
	    [DeleteKey, { kind: 'struct', fields: [
	                ['publicKey', key_pair_1.PublicKey]
	            ] }],
	    [DeleteAccount, { kind: 'struct', fields: [
	                ['beneficiaryId', 'string']
	            ] }],
	]);
	function createTransaction(signerId, publicKey, receiverId, nonce, actions, blockHash) {
	    return new Transaction({ signerId, publicKey, nonce, receiverId, actions, blockHash });
	}
	exports.createTransaction = createTransaction;
	/**
	 * Signs a given transaction from an account with given keys, applied to the given network
	 * @param transaction The Transaction object to sign
	 * @param signer The {Signer} object that assists with signing keys
	 * @param accountId The human-readable NEAR account name
	 * @param networkId The targeted network. (ex. default, betanet, etc…)
	 */
	async function signTransactionObject(transaction, signer, accountId, networkId) {
	    const message = borsh_1.serialize(exports.SCHEMA, transaction);
	    const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
	    const signature = await signer.signMessage(message, accountId, networkId);
	    const signedTx = new SignedTransaction({
	        transaction,
	        signature: new Signature({ keyType: transaction.publicKey.keyType, data: signature.signature })
	    });
	    return [hash, signedTx];
	}
	async function signTransaction(...args) {
	    if (args[0].constructor === Transaction) {
	        const [transaction, signer, accountId, networkId] = args;
	        return signTransactionObject(transaction, signer, accountId, networkId);
	    }
	    else {
	        const [receiverId, nonce, actions, blockHash, signer, accountId, networkId] = args;
	        const publicKey = await signer.getPublicKey(accountId, networkId);
	        const transaction = createTransaction(accountId, publicKey, receiverId, nonce, actions, blockHash);
	        return signTransactionObject(transaction, signer, accountId, networkId);
	    }
	}
	exports.signTransaction = signTransaction;
	}(transaction));

	var validators = {};

	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(validators, "__esModule", { value: true });
	validators.diffEpochValidators = validators.findSeatPrice = void 0;
	const bn_js_1$4 = __importDefault$9(bn.exports);
	/** Finds seat price given validators stakes and number of seats.
	 *  Calculation follow the spec: https://nomicon.io/Economics/README.html#validator-selection
	 * @params validators: current or next epoch validators.
	 * @params numSeats: number of seats.
	 */
	function findSeatPrice(validators, numSeats) {
	    const stakes = validators.map(v => new bn_js_1$4.default(v.stake, 10)).sort((a, b) => a.cmp(b));
	    const num = new bn_js_1$4.default(numSeats);
	    const stakesSum = stakes.reduce((a, b) => a.add(b));
	    if (stakesSum.lt(num)) {
	        throw new Error('Stakes are below seats');
	    }
	    // assert stakesSum >= numSeats
	    let left = new bn_js_1$4.default(1), right = stakesSum.add(new bn_js_1$4.default(1));
	    while (!left.eq(right.sub(new bn_js_1$4.default(1)))) {
	        const mid = left.add(right).div(new bn_js_1$4.default(2));
	        let found = false;
	        let currentSum = new bn_js_1$4.default(0);
	        for (let i = 0; i < stakes.length; ++i) {
	            currentSum = currentSum.add(stakes[i].div(mid));
	            if (currentSum.gte(num)) {
	                left = mid;
	                found = true;
	                break;
	            }
	        }
	        if (!found) {
	            right = mid;
	        }
	    }
	    return left;
	}
	validators.findSeatPrice = findSeatPrice;
	/** Diff validators between current and next epoch.
	 * Returns additions, subtractions and changes to validator set.
	 * @params currentValidators: list of current validators.
	 * @params nextValidators: list of next validators.
	 */
	function diffEpochValidators(currentValidators, nextValidators) {
	    const validatorsMap = new Map();
	    currentValidators.forEach(v => validatorsMap.set(v.account_id, v));
	    const nextValidatorsSet = new Set(nextValidators.map(v => v.account_id));
	    return {
	        newValidators: nextValidators.filter(v => !validatorsMap.has(v.account_id)),
	        removedValidators: currentValidators.filter(v => !nextValidatorsSet.has(v.account_id)),
	        changedValidators: nextValidators.filter(v => (validatorsMap.has(v.account_id) && validatorsMap.get(v.account_id).stake != v.stake))
	            .map(v => ({ current: validatorsMap.get(v.account_id), next: v }))
	    };
	}
	validators.diffEpochValidators = diffEpochValidators;

	var account = {};

	var constants = {};

	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(constants, "__esModule", { value: true });
	constants.DEFAULT_FUNCTION_CALL_GAS = void 0;
	const bn_js_1$3 = __importDefault$8(bn.exports);
	// Default amount of gas to be sent with the function calls. Used to pay for the fees
	// incurred while running the contract execution. The unused amount will be refunded back to
	// the originator.
	// Due to protocol changes that charge upfront for the maximum possible gas price inflation due to
	// full blocks, the price of max_prepaid_gas is decreased to `300 * 10**12`.
	// For discussion see https://github.com/nearprotocol/NEPs/issues/67
	constants.DEFAULT_FUNCTION_CALL_GAS = new bn_js_1$3.default('30000000000000');

	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(account, "__esModule", { value: true });
	account.Account = void 0;
	const bn_js_1$2 = __importDefault$7(bn.exports);
	const depd_1$2 = __importDefault$7(depd_1$4);
	const transaction_1$1 = transaction;
	const providers_1$2 = providers;
	const borsh_1$1 = lib$2;
	const key_pair_1$1 = key_pair;
	const errors_1$1 = errors;
	const rpc_errors_1 = rpc_errors;
	const constants_1 = constants;
	const exponential_backoff_1 = __importDefault$7(exponentialBackoff$1);
	// Default number of retries with different nonce before giving up on a transaction.
	const TX_NONCE_RETRY_NUMBER = 12;
	// Default wait until next retry in millis.
	const TX_NONCE_RETRY_WAIT = 500;
	// Exponential back off for waiting to retry.
	const TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;
	function parseJsonFromRawResponse(response) {
	    return JSON.parse(Buffer.from(response).toString());
	}
	/**
	 * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}
	 * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.
	 * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}
	 */
	class Account {
	    constructor(connection, accountId) {
	        /** @hidden */
	        this.accessKeyByPublicKeyCache = {};
	        this.connection = connection;
	        this.accountId = accountId;
	    }
	    /** @hidden */
	    get ready() {
	        const deprecate = depd_1$2.default('Account.ready()');
	        deprecate('not needed anymore, always ready');
	        return Promise.resolve();
	    }
	    async fetchState() {
	        const deprecate = depd_1$2.default('Account.fetchState()');
	        deprecate('use `Account.state()` instead');
	    }
	    /**
	     * Returns basic NEAR account information via the `view_account` RPC query method
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}
	     */
	    async state() {
	        return this.connection.provider.query({
	            request_type: 'view_account',
	            account_id: this.accountId,
	            finality: 'optimistic'
	        });
	    }
	    /** @hidden */
	    printLogsAndFailures(contractId, results) {
	        for (const result of results) {
	            console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);
	            this.printLogs(contractId, result.logs, '\t');
	            if (result.failure) {
	                console.warn(`\tFailure [${contractId}]: ${result.failure}`);
	            }
	        }
	    }
	    /** @hidden */
	    printLogs(contractId, logs, prefix = '') {
	        for (const log of logs) {
	            console.log(`${prefix}Log [${contractId}]: ${log}`);
	        }
	    }
	    /**
	     * Create a signed transaction which can be broadcast to the network
	     * @param receiverId NEAR account receiving the transaction
	     * @param actions list of actions to perform as part of the transaction
	     * @see {@link JsonRpcProvider.sendTransaction}
	     */
	    async signTransaction(receiverId, actions) {
	        const accessKeyInfo = await this.findAccessKey(receiverId, actions);
	        if (!accessKeyInfo) {
	            throw new providers_1$2.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');
	        }
	        const { accessKey } = accessKeyInfo;
	        const block = await this.connection.provider.block({ finality: 'final' });
	        const blockHash = block.header.hash;
	        const nonce = ++accessKey.nonce;
	        return await transaction_1$1.signTransaction(receiverId, nonce, actions, borsh_1$1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);
	    }
	    signAndSendTransaction(...args) {
	        if (typeof args[0] === 'string') {
	            return this.signAndSendTransactionV1(args[0], args[1]);
	        }
	        else {
	            return this.signAndSendTransactionV2(args[0]);
	        }
	    }
	    signAndSendTransactionV1(receiverId, actions) {
	        const deprecate = depd_1$2.default('Account.signAndSendTransaction(receiverId, actions');
	        deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');
	        return this.signAndSendTransactionV2({ receiverId, actions });
	    }
	    async signAndSendTransactionV2({ receiverId, actions }) {
	        let txHash, signedTx;
	        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)
	        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {
	            [txHash, signedTx] = await this.signTransaction(receiverId, actions);
	            const publicKey = signedTx.transaction.publicKey;
	            try {
	                return await this.connection.provider.sendTransaction(signedTx);
	            }
	            catch (error) {
	                if (error.type === 'InvalidNonce') {
	                    console.warn(`Retrying transaction ${receiverId}:${borsh_1$1.baseEncode(txHash)} with new nonce.`);
	                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];
	                    return null;
	                }
	                error.context = new providers_1$2.ErrorContext(borsh_1$1.baseEncode(txHash));
	                throw error;
	            }
	        });
	        if (!result) {
	            // TODO: This should have different code actually, as means "transaction not submitted for sure"
	            throw new providers_1$2.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');
	        }
	        const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {
	            if (it.outcome.logs.length ||
	                (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {
	                return acc.concat({
	                    'receiptIds': it.outcome.receipt_ids,
	                    'logs': it.outcome.logs,
	                    'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null
	                });
	            }
	            else
	                return acc;
	        }, []);
	        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);
	        if (typeof result.status === 'object' && typeof result.status.Failure === 'object') {
	            // if error data has error_message and error_type properties, we consider that node returned an error in the old format
	            if (result.status.Failure.error_message && result.status.Failure.error_type) {
	                throw new providers_1$2.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);
	            }
	            else {
	                throw rpc_errors_1.parseResultError(result);
	            }
	        }
	        // TODO: if Tx is Unknown or Started.
	        return result;
	    }
	    /**
	     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.
	     *
	     * @todo Find matching access key based on transaction (i.e. receiverId and actions)
	     *
	     * @param receiverId currently unused (see todo)
	     * @param actions currently unused (see todo)
	     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`
	     */
	    async findAccessKey(receiverId, actions) {
	        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)
	        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
	        if (!publicKey) {
	            return null;
	        }
	        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];
	        if (cachedAccessKey !== undefined) {
	            return { publicKey, accessKey: cachedAccessKey };
	        }
	        try {
	            const accessKey = await this.connection.provider.query({
	                request_type: 'view_access_key',
	                account_id: this.accountId,
	                public_key: publicKey.toString(),
	                finality: 'optimistic'
	            });
	            // this function can be called multiple times and retrieve the same access key
	            // this checks to see if the access key was already retrieved and cached while
	            // the above network call was in flight. To keep nonce values in line, we return
	            // the cached access key.
	            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {
	                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };
	            }
	            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;
	            return { publicKey, accessKey };
	        }
	        catch (e) {
	            if (e.type == 'AccessKeyDoesNotExist') {
	                return null;
	            }
	            throw e;
	        }
	    }
	    /**
	     * Create a new account and deploy a contract to it
	     *
	     * @param contractId NEAR account where the contract is deployed
	     * @param publicKey The public key to add to the created contract account
	     * @param data The compiled contract code
	     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking
	     */
	    async createAndDeployContract(contractId, publicKey, data, amount) {
	        const accessKey = transaction_1$1.fullAccessKey();
	        await this.signAndSendTransaction({
	            receiverId: contractId,
	            actions: [transaction_1$1.createAccount(), transaction_1$1.transfer(amount), transaction_1$1.addKey(key_pair_1$1.PublicKey.from(publicKey), accessKey), transaction_1$1.deployContract(data)]
	        });
	        const contractAccount = new Account(this.connection, contractId);
	        return contractAccount;
	    }
	    /**
	     * @param receiverId NEAR account receiving Ⓝ
	     * @param amount Amount to send in yoctoⓃ
	     */
	    async sendMoney(receiverId, amount) {
	        return this.signAndSendTransaction({
	            receiverId,
	            actions: [transaction_1$1.transfer(amount)]
	        });
	    }
	    /**
	     * @param newAccountId NEAR account name to be created
	     * @param publicKey A public key created from the masterAccount
	     */
	    async createAccount(newAccountId, publicKey, amount) {
	        const accessKey = transaction_1$1.fullAccessKey();
	        return this.signAndSendTransaction({
	            receiverId: newAccountId,
	            actions: [transaction_1$1.createAccount(), transaction_1$1.transfer(amount), transaction_1$1.addKey(key_pair_1$1.PublicKey.from(publicKey), accessKey)]
	        });
	    }
	    /**
	     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted
	     */
	    async deleteAccount(beneficiaryId) {
	        return this.signAndSendTransaction({
	            receiverId: this.accountId,
	            actions: [transaction_1$1.deleteAccount(beneficiaryId)]
	        });
	    }
	    /**
	     * @param data The compiled contract code
	     */
	    async deployContract(data) {
	        return this.signAndSendTransaction({
	            receiverId: this.accountId,
	            actions: [transaction_1$1.deployContract(data)]
	        });
	    }
	    async functionCall(...args) {
	        if (typeof args[0] === 'string') {
	            return this.functionCallV1(args[0], args[1], args[2], args[3], args[4]);
	        }
	        else {
	            return this.functionCallV2(args[0]);
	        }
	    }
	    functionCallV1(contractId, methodName, args, gas, amount) {
	        const deprecate = depd_1$2.default('Account.functionCall(contractId, methodName, args, gas, amount)');
	        deprecate('use `Account.functionCall(FunctionCallOptions)` instead');
	        args = args || {};
	        this.validateArgs(args);
	        return this.signAndSendTransaction({
	            receiverId: contractId,
	            actions: [transaction_1$1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]
	        });
	    }
	    functionCallV2({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl }) {
	        this.validateArgs(args);
	        return this.signAndSendTransaction({
	            receiverId: contractId,
	            actions: [transaction_1$1.functionCall(methodName, args, gas, attachedDeposit)],
	            walletMeta,
	            walletCallbackUrl
	        });
	    }
	    /**
	     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}
	     * @todo expand this API to support more options.
	     * @param publicKey A public key to be associated with the contract
	     * @param contractId NEAR account where the contract is deployed
	     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.
	     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call
	     */
	    async addKey(publicKey, contractId, methodNames, amount) {
	        if (!methodNames) {
	            methodNames = [];
	        }
	        if (!Array.isArray(methodNames)) {
	            methodNames = [methodNames];
	        }
	        let accessKey;
	        if (!contractId) {
	            accessKey = transaction_1$1.fullAccessKey();
	        }
	        else {
	            accessKey = transaction_1$1.functionCallAccessKey(contractId, methodNames, amount);
	        }
	        return this.signAndSendTransaction({
	            receiverId: this.accountId,
	            actions: [transaction_1$1.addKey(key_pair_1$1.PublicKey.from(publicKey), accessKey)]
	        });
	    }
	    /**
	     * @param publicKey The public key to be deleted
	     * @returns {Promise<FinalExecutionOutcome>}
	     */
	    async deleteKey(publicKey) {
	        return this.signAndSendTransaction({
	            receiverId: this.accountId,
	            actions: [transaction_1$1.deleteKey(key_pair_1$1.PublicKey.from(publicKey))]
	        });
	    }
	    /**
	     * @see {@link https://docs.near.org/docs/validator/staking-overview}
	     *
	     * @param publicKey The public key for the account that's staking
	     * @param amount The account to stake in yoctoⓃ
	     */
	    async stake(publicKey, amount) {
	        return this.signAndSendTransaction({
	            receiverId: this.accountId,
	            actions: [transaction_1$1.stake(amount, key_pair_1$1.PublicKey.from(publicKey))]
	        });
	    }
	    /** @hidden */
	    validateArgs(args) {
	        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;
	        if (isUint8Array) {
	            return;
	        }
	        if (Array.isArray(args) || typeof args !== 'object') {
	            throw new errors_1$1.PositionalArgsError();
	        }
	    }
	    /**
	     * Invoke a contract view function using the RPC API.
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}
	     *
	     * @param contractId NEAR account where the contract is deployed
	     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code
	     * @param args Any arguments to the view contract method, wrapped in JSON
	     * @returns {Promise<any>}
	     */
	    async viewFunction(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse } = {}) {
	        this.validateArgs(args);
	        const result = await this.connection.provider.query({
	            request_type: 'call_function',
	            account_id: contractId,
	            method_name: methodName,
	            args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
	            finality: 'optimistic'
	        });
	        if (result.logs) {
	            this.printLogs(contractId, result.logs);
	        }
	        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));
	    }
	    /**
	     * Returns the state (key value pairs) of this account's contract based on the key prefix.
	     * Pass an empty string for prefix if you would like to return the entire state.
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}
	     *
	     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.
	     * @param blockQuery specifies which block to query state at. By default returns last "optimistic" block (i.e. not necessarily finalized).
	     */
	    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {
	        const { values } = await this.connection.provider.query({
	            request_type: 'view_state',
	            ...blockQuery,
	            account_id: this.accountId,
	            prefix_base64: Buffer.from(prefix).toString('base64')
	        });
	        return values.map(({ key, value }) => ({
	            key: Buffer.from(key, 'base64'),
	            value: Buffer.from(value, 'base64')
	        }));
	    }
	    /**
	     * Get all access keys for the account
	     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}
	     */
	    async getAccessKeys() {
	        const response = await this.connection.provider.query({
	            request_type: 'view_access_key_list',
	            account_id: this.accountId,
	            finality: 'optimistic'
	        });
	        // A breaking API change introduced extra information into the
	        // response, so it now returns an object with a `keys` field instead
	        // of an array: https://github.com/nearprotocol/nearcore/pull/1789
	        if (Array.isArray(response)) {
	            return response;
	        }
	        return response.keys;
	    }
	    /**
	     * Returns a list of authorized apps
	     * @todo update the response value to return all the different keys, not just app keys.
	     */
	    async getAccountDetails() {
	        // TODO: update the response value to return all the different keys, not just app keys.
	        // Also if we need this function, or getAccessKeys is good enough.
	        const accessKeys = await this.getAccessKeys();
	        const authorizedApps = accessKeys
	            .filter(item => item.access_key.permission !== 'FullAccess')
	            .map(item => {
	            const perm = item.access_key.permission;
	            return {
	                contractId: perm.FunctionCall.receiver_id,
	                amount: perm.FunctionCall.allowance,
	                publicKey: item.public_key,
	            };
	        });
	        return { authorizedApps };
	    }
	    /**
	     * Returns calculated account balance
	     */
	    async getAccountBalance() {
	        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });
	        const state = await this.state();
	        const costPerByte = new bn_js_1$2.default(protocolConfig.runtime_config.storage_amount_per_byte);
	        const stateStaked = new bn_js_1$2.default(state.storage_usage).mul(costPerByte);
	        const staked = new bn_js_1$2.default(state.locked);
	        const totalBalance = new bn_js_1$2.default(state.amount).add(staked);
	        const availableBalance = totalBalance.sub(bn_js_1$2.default.max(staked, stateStaked));
	        return {
	            total: totalBalance.toString(),
	            stateStaked: stateStaked.toString(),
	            staked: staked.toString(),
	            available: availableBalance.toString()
	        };
	    }
	}
	account.Account = Account;

	var account_multisig = {};

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;
	const bn_js_1 = __importDefault(bn.exports);
	const depd_1 = __importDefault(depd_1$4);
	const account_1 = account;
	const format_1 = format$2;
	const key_pair_1 = key_pair;
	const transaction_1 = transaction;
	const web_1 = web;
	exports.MULTISIG_STORAGE_KEY = '__multisigRequest';
	exports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));
	// TODO: Different gas value for different requests (can reduce gas usage dramatically)
	exports.MULTISIG_GAS = new bn_js_1.default('100000000000000');
	exports.MULTISIG_DEPOSIT = new bn_js_1.default('0');
	exports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];
	exports.MULTISIG_CONFIRM_METHODS = ['confirm'];
	// in memory request cache for node w/o localStorage
	const storageFallback = {
	    [exports.MULTISIG_STORAGE_KEY]: null
	};
	class AccountMultisig extends account_1.Account {
	    constructor(connection, accountId, options) {
	        super(connection, accountId);
	        this.storage = options.storage;
	        this.onAddRequestResult = options.onAddRequestResult;
	    }
	    async signAndSendTransactionWithAccount(receiverId, actions) {
	        return super.signAndSendTransaction({ receiverId, actions });
	    }
	    signAndSendTransaction(...args) {
	        if (typeof args[0] === 'string') {
	            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });
	        }
	        return this._signAndSendTransaction(args[0]);
	    }
	    async _signAndSendTransaction({ receiverId, actions }) {
	        const { accountId } = this;
	        const args = Buffer.from(JSON.stringify({
	            request: {
	                receiver_id: receiverId,
	                actions: convertActions(actions, accountId, receiverId)
	            }
	        }));
	        let result;
	        try {
	            result = await super.signAndSendTransaction({
	                receiverId: accountId,
	                actions: [
	                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)
	                ]
	            });
	        }
	        catch (e) {
	            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {
	                await this.deleteUnconfirmedRequests();
	                return await this.signAndSendTransaction(receiverId, actions);
	            }
	            throw e;
	        }
	        // TODO: Are following even needed? Seems like it throws on error already
	        if (!result.status) {
	            throw new Error('Request failed');
	        }
	        const status = { ...result.status };
	        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {
	            throw new Error('Request failed');
	        }
	        this.setRequest({
	            accountId,
	            actions,
	            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)
	        });
	        if (this.onAddRequestResult) {
	            await this.onAddRequestResult(result);
	        }
	        // NOTE there is no await on purpose to avoid blocking for 2fa
	        this.deleteUnconfirmedRequests();
	        return result;
	    }
	    async deleteUnconfirmedRequests() {
	        // TODO: Delete in batch, don't delete unexpired
	        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)
	        const request_ids = await this.getRequestIds();
	        const { requestId } = this.getRequest();
	        for (const requestIdToDelete of request_ids) {
	            if (requestIdToDelete == requestId) {
	                continue;
	            }
	            try {
	                await super.signAndSendTransaction({
	                    receiverId: this.accountId,
	                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]
	                });
	            }
	            catch (e) {
	                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');
	            }
	        }
	    }
	    // helpers
	    async getRequestIds() {
	        // TODO: Read requests from state to allow filtering by expiration time
	        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84
	        return this.viewFunction(this.accountId, 'list_request_ids');
	    }
	    getRequest() {
	        if (this.storage) {
	            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');
	        }
	        return storageFallback[exports.MULTISIG_STORAGE_KEY];
	    }
	    setRequest(data) {
	        if (this.storage) {
	            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));
	        }
	        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;
	    }
	}
	exports.AccountMultisig = AccountMultisig;
	class Account2FA extends AccountMultisig {
	    constructor(connection, accountId, options) {
	        super(connection, accountId, options);
	        this.helperUrl = 'https://helper.testnet.near.org';
	        this.helperUrl = options.helperUrl || this.helperUrl;
	        this.storage = options.storage;
	        this.sendCode = options.sendCode || this.sendCodeDefault;
	        this.getCode = options.getCode || this.getCodeDefault;
	        this.verifyCode = options.verifyCode || this.verifyCodeDefault;
	        this.onConfirmResult = options.onConfirmResult;
	    }
	    async signAndSendTransaction(...args) {
	        if (typeof args[0] === 'string') {
	            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');
	            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');
	            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });
	        }
	        else {
	            return this.__signAndSendTransaction(args[0]);
	        }
	    }
	    async __signAndSendTransaction({ receiverId, actions }) {
	        await super.signAndSendTransaction({ receiverId, actions });
	        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?
	        await this.sendCode();
	        const result = await this.promptAndVerify();
	        if (this.onConfirmResult) {
	            await this.onConfirmResult(result);
	        }
	        return result;
	    }
	    // default helpers for CH deployments of multisig
	    async deployMultisig(contractBytes) {
	        const { accountId } = this;
	        const seedOrLedgerKey = (await this.getRecoveryMethods()).data
	            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)
	            .map((rm) => rm.publicKey);
	        const fak2lak = (await this.getAccessKeys())
	            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))
	            .map((ak) => ak.public_key)
	            .map(toPK);
	        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);
	        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));
	        const actions = [
	            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),
	            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),
	            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),
	            transaction_1.deployContract(contractBytes),
	        ];
	        if ((await this.state()).code_hash === '11111111111111111111111111111111') {
	            actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));
	        }
	        console.log('deploying multisig contract for', accountId);
	        return await super.signAndSendTransactionWithAccount(accountId, actions);
	    }
	    async disable(contractBytes) {
	        const { accountId } = this;
	        const accessKeys = await this.getAccessKeys();
	        const lak2fak = accessKeys
	            .filter(({ access_key }) => access_key.permission !== 'FullAccess')
	            .filter(({ access_key }) => {
	            const perm = access_key.permission.FunctionCall;
	            return perm.receiver_id === accountId &&
	                perm.method_names.length === 4 &&
	                perm.method_names.includes('add_request_and_confirm');
	        });
	        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);
	        const actions = [
	            transaction_1.deleteKey(confirmOnlyKey),
	            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),
	            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)),
	            transaction_1.deployContract(contractBytes),
	        ];
	        console.log('disabling 2fa for', accountId);
	        return await this.signAndSendTransaction({
	            receiverId: accountId,
	            actions
	        });
	    }
	    async sendCodeDefault() {
	        const { accountId } = this;
	        const { requestId } = this.getRequest();
	        const method = await this.get2faMethod();
	        await this.postSignedJson('/2fa/send', {
	            accountId,
	            method,
	            requestId,
	        });
	        return requestId;
	    }
	    async getCodeDefault(method) {
	        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is "email" or "phone".');
	    }
	    async promptAndVerify() {
	        const method = await this.get2faMethod();
	        const securityCode = await this.getCode(method);
	        try {
	            const result = await this.verifyCode(securityCode);
	            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)
	            return result;
	        }
	        catch (e) {
	            console.warn('Error validating security code:', e);
	            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {
	                return await this.promptAndVerify();
	            }
	            throw e;
	        }
	    }
	    async verifyCodeDefault(securityCode) {
	        const { accountId } = this;
	        const request = this.getRequest();
	        if (!request) {
	            throw new Error('no request pending');
	        }
	        const { requestId } = request;
	        return await this.postSignedJson('/2fa/verify', {
	            accountId,
	            securityCode,
	            requestId
	        });
	    }
	    async getRecoveryMethods() {
	        const { accountId } = this;
	        return {
	            accountId,
	            data: await this.postSignedJson('/account/recoveryMethods', { accountId })
	        };
	    }
	    async get2faMethod() {
	        let { data } = await this.getRecoveryMethods();
	        if (data && data.length) {
	            data = data.find((m) => m.kind.indexOf('2fa-') === 0);
	        }
	        if (!data)
	            return null;
	        const { kind, detail } = data;
	        return { kind, detail };
	    }
	    async signatureFor() {
	        const { accountId } = this;
	        const block = await this.connection.provider.block({ finality: 'final' });
	        const blockNumber = block.header.height.toString();
	        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);
	        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');
	        return { blockNumber, blockNumberSignature };
	    }
	    async postSignedJson(path, body) {
	        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({
	            ...body,
	            ...(await this.signatureFor())
	        }));
	    }
	}
	exports.Account2FA = Account2FA;
	// helpers
	const toPK = (pk) => key_pair_1.PublicKey.from(pk);
	const convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');
	const convertActions = (actions, accountId, receiverId) => actions.map((a) => {
	    const type = a.enum;
	    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];
	    const action = {
	        type: type[0].toUpperCase() + type.substr(1),
	        gas: (gas && gas.toString()) || undefined,
	        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,
	        method_name: methodName,
	        args: (args && Buffer.from(args).toString('base64')) || undefined,
	        code: (code && Buffer.from(code).toString('base64')) || undefined,
	        amount: (deposit && deposit.toString()) || undefined,
	        deposit: (deposit && deposit.toString()) || '0',
	        permission: undefined,
	    };
	    if (accessKey) {
	        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {
	            action.permission = {
	                receiver_id: accountId,
	                allowance: exports.MULTISIG_ALLOWANCE.toString(),
	                method_names: exports.MULTISIG_CHANGE_METHODS,
	            };
	        }
	        if (accessKey.permission.enum === 'functionCall') {
	            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;
	            action.permission = {
	                receiver_id,
	                allowance: (allowance && allowance.toString()) || undefined,
	                method_names
	            };
	        }
	    }
	    return action;
	});
	}(account_multisig));

	var account_creator = {};

	Object.defineProperty(account_creator, "__esModule", { value: true });
	account_creator.UrlAccountCreator = account_creator.LocalAccountCreator = account_creator.AccountCreator = void 0;
	const web_1 = web;
	/**
	 * Account creator provides an interface for implementations to actually create accounts
	 */
	class AccountCreator {
	}
	account_creator.AccountCreator = AccountCreator;
	class LocalAccountCreator extends AccountCreator {
	    constructor(masterAccount, initialBalance) {
	        super();
	        this.masterAccount = masterAccount;
	        this.initialBalance = initialBalance;
	    }
	    /**
	     * Creates an account using a masterAccount, meaning the new account is created from an existing account
	     * @param newAccountId The name of the NEAR account to be created
	     * @param publicKey The public key from the masterAccount used to create this account
	     * @returns {Promise<void>}
	     */
	    async createAccount(newAccountId, publicKey) {
	        await this.masterAccount.createAccount(newAccountId, publicKey, this.initialBalance);
	    }
	}
	account_creator.LocalAccountCreator = LocalAccountCreator;
	class UrlAccountCreator extends AccountCreator {
	    constructor(connection, helperUrl) {
	        super();
	        this.connection = connection;
	        this.helperUrl = helperUrl;
	    }
	    /**
	     * Creates an account using a helperUrl
	     * This is [hosted here](https://helper.nearprotocol.com) or set up locally with the [near-contract-helper](https://github.com/nearprotocol/near-contract-helper) repository
	     * @param newAccountId The name of the NEAR account to be created
	     * @param publicKey The public key from the masterAccount used to create this account
	     * @returns {Promise<void>}
	     */
	    async createAccount(newAccountId, publicKey) {
	        await web_1.fetchJson(`${this.helperUrl}/account`, JSON.stringify({ newAccountId, newAccountPublicKey: publicKey.toString() }));
	    }
	}
	account_creator.UrlAccountCreator = UrlAccountCreator;

	var connection = {};

	var signer = {};

	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(signer, "__esModule", { value: true });
	signer.InMemorySigner = signer.Signer = void 0;
	const js_sha256_1 = __importDefault$6(sha256$1.exports);
	const key_pair_1 = key_pair;
	const in_memory_key_store_1 = in_memory_key_store;
	/**
	 * General signing interface, can be used for in memory signing, RPC singing, external wallet, HSM, etc.
	 */
	class Signer {
	}
	signer.Signer = Signer;
	/**
	 * Signs using in memory key store.
	 */
	class InMemorySigner extends Signer {
	    constructor(keyStore) {
	        super();
	        this.keyStore = keyStore;
	    }
	    /**
	     * Creates a single account Signer instance with account, network and keyPair provided.
	     *
	     * Intended to be useful for temporary keys (e.g. claiming a Linkdrop).
	     *
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @param accountId The NEAR account to assign the key pair to
	     * @param keyPair The keyPair to use for signing
	     */
	    static async fromKeyPair(networkId, accountId, keyPair) {
	        const keyStore = new in_memory_key_store_1.InMemoryKeyStore();
	        await keyStore.setKey(networkId, accountId, keyPair);
	        return new InMemorySigner(keyStore);
	    }
	    /**
	     * Creates a public key for the account given
	     * @param accountId The NEAR account to assign a public key to
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns {Promise<PublicKey>}
	     */
	    async createKey(accountId, networkId) {
	        const keyPair = key_pair_1.KeyPair.fromRandom('ed25519');
	        await this.keyStore.setKey(networkId, accountId, keyPair);
	        return keyPair.getPublicKey();
	    }
	    /**
	     * Gets the existing public key for a given account
	     * @param accountId The NEAR account to assign a public key to
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns {Promise<PublicKey>} Returns the public key or null if not found
	     */
	    async getPublicKey(accountId, networkId) {
	        const keyPair = await this.keyStore.getKey(networkId, accountId);
	        if (keyPair === null) {
	            return null;
	        }
	        return keyPair.getPublicKey();
	    }
	    /**
	     * @param message A message to be signed, typically a serialized transaction
	     * @param accountId the NEAR account signing the message
	     * @param networkId The targeted network. (ex. default, betanet, etc…)
	     * @returns {Promise<Signature>}
	     */
	    async signMessage(message, accountId, networkId) {
	        const hash = new Uint8Array(js_sha256_1.default.sha256.array(message));
	        if (!accountId) {
	            throw new Error('InMemorySigner requires provided account id');
	        }
	        const keyPair = await this.keyStore.getKey(networkId, accountId);
	        if (keyPair === null) {
	            throw new Error(`Key for ${accountId} not found in ${networkId}`);
	        }
	        return keyPair.sign(hash);
	    }
	    toString() {
	        return `InMemorySigner(${this.keyStore})`;
	    }
	}
	signer.InMemorySigner = InMemorySigner;

	Object.defineProperty(connection, "__esModule", { value: true });
	connection.Connection = void 0;
	const providers_1$1 = providers;
	const signer_1 = signer;
	/**
	 * @param config Contains connection info details
	 * @returns {Provider}
	 */
	function getProvider(config) {
	    switch (config.type) {
	        case undefined:
	            return config;
	        case 'JsonRpcProvider': return new providers_1$1.JsonRpcProvider(config.args.url);
	        default: throw new Error(`Unknown provider type ${config.type}`);
	    }
	}
	/**
	 * @param config Contains connection info details
	 * @returns {Signer}
	 */
	function getSigner(config) {
	    switch (config.type) {
	        case undefined:
	            return config;
	        case 'InMemorySigner': {
	            return new signer_1.InMemorySigner(config.keyStore);
	        }
	        default: throw new Error(`Unknown signer type ${config.type}`);
	    }
	}
	/**
	 * Connects an account to a given network via a given provider
	 */
	class Connection {
	    constructor(networkId, provider, signer) {
	        this.networkId = networkId;
	        this.provider = provider;
	        this.signer = signer;
	    }
	    /**
	     * @param config Contains connection info details
	     */
	    static fromConfig(config) {
	        const provider = getProvider(config.provider);
	        const signer = getSigner(config.signer);
	        return new Connection(config.networkId, provider, signer);
	    }
	}
	connection.Connection = Connection;

	var contract = {};

	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(contract, "__esModule", { value: true });
	contract.Contract = void 0;
	const bn_js_1$1 = __importDefault$5(bn.exports);
	const depd_1$1 = __importDefault$5(depd_1$4);
	const providers_1 = providers;
	const errors_1 = errors;
	// Makes `function.name` return given name
	function nameFunction(name, body) {
	    return {
	        [name](...args) {
	            return body(...args);
	        }
	    }[name];
	}
	const isUint8Array = (x) => x && x.byteLength !== undefined && x.byteLength === x.length;
	const isObject$1 = (x) => Object.prototype.toString.call(x) === '[object Object]';
	/**
	 * Defines a smart contract on NEAR including the change (mutable) and view (non-mutable) methods
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#contract}
	 * @example
	 * ```js
	 * import { Contract } from 'near-api-js';
	 *
	 * async function contractExample() {
	 *   const methodOptions = {
	 *     viewMethods: ['getMessageByAccountId'],
	 *     changeMethods: ['addMessage']
	 *   };
	 *   const contract = new Contract(
	 *     wallet.account(),
	 *     'contract-id.testnet',
	 *     methodOptions
	 *   );
	 *
	 *   // use a contract view method
	 *   const messages = await contract.getMessages({
	 *     accountId: 'example-account.testnet'
	 *   });
	 *
	 *   // use a contract change method
	 *   await contract.addMessage({
	 *      meta: 'some info',
	 *      callbackUrl: 'https://example.com/callback',
	 *      args: { text: 'my message' },
	 *      amount: 1
	 *   })
	 * }
	 * ```
	 */
	class Contract {
	    /**
	     * @param account NEAR account to sign change method transactions
	     * @param contractId NEAR account id where the contract is deployed
	     * @param options NEAR smart contract methods that your application will use. These will be available as `contract.methodName`
	     */
	    constructor(account, contractId, options) {
	        this.account = account;
	        this.contractId = contractId;
	        const { viewMethods = [], changeMethods = [] } = options;
	        viewMethods.forEach((methodName) => {
	            Object.defineProperty(this, methodName, {
	                writable: false,
	                enumerable: true,
	                value: nameFunction(methodName, async (args = {}, options = {}, ...ignored) => {
	                    if (ignored.length || !(isObject$1(args) || isUint8Array(args)) || !isObject$1(options)) {
	                        throw new errors_1.PositionalArgsError();
	                    }
	                    return this.account.viewFunction(this.contractId, methodName, args, options);
	                })
	            });
	        });
	        changeMethods.forEach((methodName) => {
	            Object.defineProperty(this, methodName, {
	                writable: false,
	                enumerable: true,
	                value: nameFunction(methodName, async (...args) => {
	                    if (args.length && (args.length > 3 || !(isObject$1(args[0]) || isUint8Array(args[0])))) {
	                        throw new errors_1.PositionalArgsError();
	                    }
	                    if (args.length > 1 || !(args[0] && args[0].args)) {
	                        const deprecate = depd_1$1.default('contract.methodName(args, gas, amount)');
	                        deprecate('use `contract.methodName({ args, gas?, amount?, callbackUrl?, meta? })` instead');
	                        return this._changeMethod({
	                            methodName,
	                            args: args[0],
	                            gas: args[1],
	                            amount: args[2]
	                        });
	                    }
	                    return this._changeMethod({ methodName, ...args[0] });
	                })
	            });
	        });
	    }
	    async _changeMethod({ args, methodName, gas, amount, meta, callbackUrl }) {
	        validateBNLike({ gas, amount });
	        const rawResult = await this.account.functionCall({
	            contractId: this.contractId,
	            methodName,
	            args,
	            gas,
	            attachedDeposit: amount,
	            walletMeta: meta,
	            walletCallbackUrl: callbackUrl
	        });
	        return providers_1.getTransactionLastResult(rawResult);
	    }
	}
	contract.Contract = Contract;
	/**
	 * Validation on arguments being a big number from bn.js
	 * Throws if an argument is not in BN format or otherwise invalid
	 * @param argMap
	 */
	function validateBNLike(argMap) {
	    const bnLike = 'number, decimal string or BN';
	    for (const argName of Object.keys(argMap)) {
	        const argValue = argMap[argName];
	        if (argValue && !bn_js_1$1.default.isBN(argValue) && isNaN(argValue)) {
	            throw new errors_1.ArgumentTypeError(argName, bnLike, argValue);
	        }
	    }
	}

	var near = {};

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(near, "__esModule", { value: true });
	near.Near = void 0;
	/**
	 * This module contains the main class developers will use to interact with NEAR.
	 * The {@link Near} class is used to interact with {@link Account | Accounts} through the {@link JsonRpcProvider.JsonRpcProvider | JsonRpcProvider}.
	 * It is configured via the {@link NearConfig}.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}
	 *
	 * @module near
	 */
	const bn_js_1 = __importDefault$4(bn.exports);
	const account_1$1 = account;
	const connection_1 = connection;
	const contract_1 = contract;
	const account_creator_1 = account_creator;
	/**
	 * This is the main class developers should use to interact with NEAR.
	 * @example
	 * ```js
	 * const near = new Near(config);
	 * ```
	 */
	class Near {
	    constructor(config) {
	        this.config = config;
	        this.connection = connection_1.Connection.fromConfig({
	            networkId: config.networkId,
	            provider: { type: 'JsonRpcProvider', args: { url: config.nodeUrl } },
	            signer: config.signer || { type: 'InMemorySigner', keyStore: config.keyStore || config.deps.keyStore }
	        });
	        if (config.masterAccount) {
	            // TODO: figure out better way of specifiying initial balance.
	            // Hardcoded number below must be enough to pay the gas cost to dev-deploy with near-shell for multiple times
	            const initialBalance = config.initialBalance ? new bn_js_1.default(config.initialBalance) : new bn_js_1.default('500000000000000000000000000');
	            this.accountCreator = new account_creator_1.LocalAccountCreator(new account_1$1.Account(this.connection, config.masterAccount), initialBalance);
	        }
	        else if (config.helperUrl) {
	            this.accountCreator = new account_creator_1.UrlAccountCreator(this.connection, config.helperUrl);
	        }
	        else {
	            this.accountCreator = null;
	        }
	    }
	    /**
	     * @param accountId near accountId used to interact with the network.
	     */
	    async account(accountId) {
	        const account = new account_1$1.Account(this.connection, accountId);
	        return account;
	    }
	    /**
	     * Create an account using the {@link AccountCreator}. Either:
	     * * using a masterAccount with {@link LocalAccountCreator}
	     * * using the helperUrl with {@link UrlAccountCreator}
	     * @see {@link NearConfig.masterAccount} and {@link NearConfig.helperUrl}-
	     *
	     * @param accountId
	     * @param publicKey
	     */
	    async createAccount(accountId, publicKey) {
	        if (!this.accountCreator) {
	            throw new Error('Must specify account creator, either via masterAccount or helperUrl configuration settings.');
	        }
	        await this.accountCreator.createAccount(accountId, publicKey);
	        return new account_1$1.Account(this.connection, accountId);
	    }
	    /**
	     * @deprecated Use {@link Contract} instead.
	     * @param contractId
	     * @param options
	     */
	    async loadContract(contractId, options) {
	        const account = new account_1$1.Account(this.connection, options.sender);
	        return new contract_1.Contract(account, contractId, options);
	    }
	    /**
	     * @deprecated Use {@link Account.sendMoney} instead.
	     * @param amount
	     * @param originator
	     * @param receiver
	     */
	    async sendTokens(amount, originator, receiver) {
	        console.warn('near.sendTokens is deprecated. Use `yourAccount.sendMoney` instead.');
	        const account = new account_1$1.Account(this.connection, originator);
	        const result = await account.sendMoney(receiver, amount);
	        return result.transaction_outcome.id;
	    }
	}
	near.Near = Near;

	var walletAccount = {};

	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(walletAccount, "__esModule", { value: true });
	walletAccount.ConnectedWalletAccount = walletAccount.WalletAccount = walletAccount.WalletConnection = void 0;
	/**
	 * The classes in this module are used in conjunction with the {@link BrowserLocalStorageKeyStore}. This module exposes two classes:
	 * * {@link WalletConnection} which redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.
	 * * {@link ConnectedWalletAccount} is an {@link Account} implementation that uses {@link WalletConnection} to get keys
	 *
	 * @module walletAccount
	 */
	const depd_1 = __importDefault$3(depd_1$4);
	const account_1 = account;
	const transaction_1 = transaction;
	const utils_1 = utils;
	const borsh_1 = lib$2;
	const borsh_2 = lib$2;
	const LOGIN_WALLET_URL_SUFFIX = '/login/';
	const MULTISIG_HAS_METHOD = 'add_request_and_confirm';
	const LOCAL_STORAGE_KEY_SUFFIX = '_wallet_auth_key';
	const PENDING_ACCESS_KEY_PREFIX = 'pending_key'; // browser storage key for a pending access key (i.e. key has been generated but we are not sure it was added yet)
	/**
	 * This class is used in conjunction with the {@link BrowserLocalStorageKeyStore}.
	 * It redirects users to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for key management.
	 *
	 * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#wallet}
	 * @example
	 * ```js
	 * // create new WalletConnection instance
	 * const wallet = new WalletConnection(near, 'my-app');
	 *
	 * // If not signed in redirect to the NEAR wallet to sign in
	 * // keys will be stored in the BrowserLocalStorageKeyStore
	 * if(!wallet.isSingnedIn()) return wallet.requestSignIn()
	 * ```
	 */
	class WalletConnection {
	    constructor(near, appKeyPrefix) {
	        this._near = near;
	        const authDataKey = appKeyPrefix + LOCAL_STORAGE_KEY_SUFFIX;
	        const authData = JSON.parse(window.localStorage.getItem(authDataKey));
	        this._networkId = near.config.networkId;
	        this._walletBaseUrl = near.config.walletUrl;
	        appKeyPrefix = appKeyPrefix || near.config.contractName || 'default';
	        this._keyStore = near.connection.signer.keyStore;
	        this._authData = authData || { allKeys: [] };
	        this._authDataKey = authDataKey;
	        if (!this.isSignedIn()) {
	            this._completeSignInWithAccessKey();
	        }
	    }
	    /**
	     * Returns true, if this WalletAccount is authorized with the wallet.
	     * @example
	     * ```js
	     * const wallet = new WalletConnection(near, 'my-app');
	     * wallet.isSignedIn();
	     * ```
	     */
	    isSignedIn() {
	        return !!this._authData.accountId;
	    }
	    /**
	     * Returns authorized Account ID.
	     * @example
	     * ```js
	     * const wallet = new WalletConnection(near, 'my-app');
	     * wallet.getAccountId();
	     * ```
	     */
	    getAccountId() {
	        return this._authData.accountId || '';
	    }
	    /**
	     * Redirects current page to the wallet authentication page.
	     * @param options An optional options object
	     * @param options.contractId The NEAR account where the contract is deployed
	     * @param options.successUrl URL to redirect upon success. Default: current url
	     * @param options.failureUrl URL to redirect upon failure. Default: current url
	     *
	     * @example
	     * ```js
	     * const wallet = new WalletConnection(near, 'my-app');
	     * // redirects to the NEAR Wallet
	     * wallet.requestSignIn('account-with-deploy-contract.near');
	     * ```
	     */
	    async requestSignIn(contractIdOrOptions = {}, title, successUrl, failureUrl) {
	        let options;
	        if (typeof contractIdOrOptions === 'string') {
	            const deprecate = depd_1.default('requestSignIn(contractId, title)');
	            deprecate('`title` ignored; use `requestSignIn({ contractId, successUrl, failureUrl })` instead');
	            options = { contractId: contractIdOrOptions, successUrl, failureUrl };
	        }
	        else {
	            options = contractIdOrOptions;
	        }
	        const currentUrl = new URL(window.location.href);
	        const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);
	        newUrl.searchParams.set('success_url', options.successUrl || currentUrl.href);
	        newUrl.searchParams.set('failure_url', options.failureUrl || currentUrl.href);
	        if (options.contractId) {
	            /* Throws exception if contract account does not exist */
	            const contractAccount = await this._near.account(options.contractId);
	            await contractAccount.state();
	            newUrl.searchParams.set('contract_id', options.contractId);
	            const accessKey = utils_1.KeyPair.fromRandom('ed25519');
	            newUrl.searchParams.set('public_key', accessKey.getPublicKey().toString());
	            await this._keyStore.setKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + accessKey.getPublicKey(), accessKey);
	        }
	        if (options.methodNames) {
	            options.methodNames.forEach(methodName => {
	                newUrl.searchParams.append('methodNames', methodName);
	            });
	        }
	        window.location.assign(newUrl.toString());
	    }
	    async requestSignTransactions(...args) {
	        if (Array.isArray(args[0])) {
	            const deprecate = depd_1.default('WalletConnection.requestSignTransactions(transactions, callbackUrl, meta)');
	            deprecate('use `WalletConnection.requestSignTransactions(RequestSignTransactionsOptions)` instead');
	            return this._requestSignTransactions({
	                transactions: args[0],
	                callbackUrl: args[1],
	                meta: args[2]
	            });
	        }
	        return this._requestSignTransactions(args[0]);
	    }
	    async _requestSignTransactions({ transactions, meta, callbackUrl }) {
	        const currentUrl = new URL(window.location.href);
	        const newUrl = new URL('sign', this._walletBaseUrl);
	        newUrl.searchParams.set('transactions', transactions
	            .map(transaction => borsh_2.serialize(transaction_1.SCHEMA, transaction))
	            .map(serialized => Buffer.from(serialized).toString('base64'))
	            .join(','));
	        newUrl.searchParams.set('callbackUrl', callbackUrl || currentUrl.href);
	        if (meta)
	            newUrl.searchParams.set('meta', meta);
	        window.location.assign(newUrl.toString());
	    }
	    /**
	     * @hidden
	     * Complete sign in for a given account id and public key. To be invoked by the app when getting a callback from the wallet.
	     */
	    async _completeSignInWithAccessKey() {
	        const currentUrl = new URL(window.location.href);
	        const publicKey = currentUrl.searchParams.get('public_key') || '';
	        const allKeys = (currentUrl.searchParams.get('all_keys') || '').split(',');
	        const accountId = currentUrl.searchParams.get('account_id') || '';
	        // TODO: Handle errors during login
	        if (accountId) {
	            this._authData = {
	                accountId,
	                allKeys
	            };
	            window.localStorage.setItem(this._authDataKey, JSON.stringify(this._authData));
	            if (publicKey) {
	                await this._moveKeyFromTempToPermanent(accountId, publicKey);
	            }
	        }
	        currentUrl.searchParams.delete('public_key');
	        currentUrl.searchParams.delete('all_keys');
	        currentUrl.searchParams.delete('account_id');
	        window.history.replaceState({}, document.title, currentUrl.toString());
	    }
	    /**
	     * @hidden
	     * @param accountId The NEAR account owning the given public key
	     * @param publicKey The public key being set to the key store
	     */
	    async _moveKeyFromTempToPermanent(accountId, publicKey) {
	        const keyPair = await this._keyStore.getKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
	        await this._keyStore.setKey(this._networkId, accountId, keyPair);
	        await this._keyStore.removeKey(this._networkId, PENDING_ACCESS_KEY_PREFIX + publicKey);
	    }
	    /**
	     * Sign out from the current account
	     * @example
	     * walletAccount.signOut();
	     */
	    signOut() {
	        this._authData = {};
	        window.localStorage.removeItem(this._authDataKey);
	    }
	    /**
	     * Returns the current connected wallet account
	     */
	    account() {
	        if (!this._connectedAccount) {
	            this._connectedAccount = new ConnectedWalletAccount(this, this._near.connection, this._authData.accountId);
	        }
	        return this._connectedAccount;
	    }
	}
	walletAccount.WalletConnection = WalletConnection;
	walletAccount.WalletAccount = WalletConnection;
	/**
	 * {@link Account} implementation which redirects to wallet using {@link WalletConnection} when no local key is available.
	 */
	class ConnectedWalletAccount extends account_1.Account {
	    constructor(walletConnection, connection, accountId) {
	        super(connection, accountId);
	        this.walletConnection = walletConnection;
	    }
	    // Overriding Account methods
	    /**
	     * Sign a transaction by redirecting to the NEAR Wallet
	     * @see {@link WalletConnection.requestSignTransactions}
	     */
	    signAndSendTransaction(...args) {
	        if (typeof args[0] === 'string') {
	            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });
	        }
	        return this._signAndSendTransaction(args[0]);
	    }
	    async _signAndSendTransaction({ receiverId, actions, walletMeta, walletCallbackUrl = window.location.href }) {
	        const localKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);
	        let accessKey = await this.accessKeyForTransaction(receiverId, actions, localKey);
	        if (!accessKey) {
	            throw new Error(`Cannot find matching key for transaction sent to ${receiverId}`);
	        }
	        if (localKey && localKey.toString() === accessKey.public_key) {
	            try {
	                return await super.signAndSendTransaction({ receiverId, actions });
	            }
	            catch (e) {
	                if (e.type === 'NotEnoughAllowance') {
	                    accessKey = await this.accessKeyForTransaction(receiverId, actions);
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        const block = await this.connection.provider.block({ finality: 'final' });
	        const blockHash = borsh_1.baseDecode(block.header.hash);
	        const publicKey = utils_1.PublicKey.from(accessKey.public_key);
	        // TODO: Cache & listen for nonce updates for given access key
	        const nonce = accessKey.access_key.nonce + 1;
	        const transaction = transaction_1.createTransaction(this.accountId, publicKey, receiverId, nonce, actions, blockHash);
	        await this.walletConnection.requestSignTransactions({
	            transactions: [transaction],
	            meta: walletMeta,
	            callbackUrl: walletCallbackUrl
	        });
	        return new Promise((resolve, reject) => {
	            setTimeout(() => {
	                reject(new Error('Failed to redirect to sign transaction'));
	            }, 1000);
	        });
	        // TODO: Aggregate multiple transaction request with "debounce".
	        // TODO: Introduce TrasactionQueue which also can be used to watch for status?
	    }
	    /**
	     * Check if given access key allows the function call or method attempted in transaction
	     * @param accessKey Array of {access_key: AccessKey, public_key: PublicKey} items
	     * @param receiverId The NEAR account attempting to have access
	     * @param actions The action(s) needed to be checked for access
	     */
	    async accessKeyMatchesTransaction(accessKey, receiverId, actions) {
	        const { access_key: { permission } } = accessKey;
	        if (permission === 'FullAccess') {
	            return true;
	        }
	        if (permission.FunctionCall) {
	            const { receiver_id: allowedReceiverId, method_names: allowedMethods } = permission.FunctionCall;
	            /********************************
	            Accept multisig access keys and let wallets attempt to signAndSendTransaction
	            If an access key has itself as receiverId and method permission add_request_and_confirm, then it is being used in a wallet with multisig contract: https://github.com/near/core-contracts/blob/671c05f09abecabe7a7e58efe942550a35fc3292/multisig/src/lib.rs#L149-L153
	            ********************************/
	            if (allowedReceiverId === this.accountId && allowedMethods.includes(MULTISIG_HAS_METHOD)) {
	                return true;
	            }
	            if (allowedReceiverId === receiverId) {
	                if (actions.length !== 1) {
	                    return false;
	                }
	                const [{ functionCall }] = actions;
	                return functionCall &&
	                    (!functionCall.deposit || functionCall.deposit.toString() === '0') && // TODO: Should support charging amount smaller than allowance?
	                    (allowedMethods.length === 0 || allowedMethods.includes(functionCall.methodName));
	                // TODO: Handle cases when allowance doesn't have enough to pay for gas
	            }
	        }
	        // TODO: Support other permissions than FunctionCall
	        return false;
	    }
	    /**
	     * Helper function returning the access key (if it exists) to the receiver that grants the designated permission
	     * @param receiverId The NEAR account seeking the access key for a transaction
	     * @param actions The action(s) sought to gain access to
	     * @param localKey A local public key provided to check for access
	     * @returns Promise<any>
	     */
	    async accessKeyForTransaction(receiverId, actions, localKey) {
	        const accessKeys = await this.getAccessKeys();
	        if (localKey) {
	            const accessKey = accessKeys.find(key => key.public_key.toString() === localKey.toString());
	            if (accessKey && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {
	                return accessKey;
	            }
	        }
	        const walletKeys = this.walletConnection._authData.allKeys;
	        for (const accessKey of accessKeys) {
	            if (walletKeys.indexOf(accessKey.public_key) !== -1 && await this.accessKeyMatchesTransaction(accessKey, receiverId, actions)) {
	                return accessKey;
	            }
	        }
	        return null;
	    }
	}
	walletAccount.ConnectedWalletAccount = ConnectedWalletAccount;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.WalletConnection = exports.WalletAccount = exports.ConnectedWalletAccount = exports.Near = exports.KeyPair = exports.Signer = exports.InMemorySigner = exports.Contract = exports.Connection = exports.Account = exports.multisig = exports.validators = exports.transactions = exports.utils = exports.providers = exports.accountCreator = void 0;
	/** @hidden @module */
	const providers$1 = __importStar(providers);
	exports.providers = providers$1;
	const utils$1 = __importStar(utils);
	exports.utils = utils$1;
	const transactions = __importStar(transaction);
	exports.transactions = transactions;
	const validators$1 = __importStar(validators);
	exports.validators = validators$1;
	const account_1 = account;
	Object.defineProperty(exports, "Account", { enumerable: true, get: function () { return account_1.Account; } });
	const multisig = __importStar(account_multisig);
	exports.multisig = multisig;
	const accountCreator = __importStar(account_creator);
	exports.accountCreator = accountCreator;
	const connection_1 = connection;
	Object.defineProperty(exports, "Connection", { enumerable: true, get: function () { return connection_1.Connection; } });
	const signer_1 = signer;
	Object.defineProperty(exports, "Signer", { enumerable: true, get: function () { return signer_1.Signer; } });
	Object.defineProperty(exports, "InMemorySigner", { enumerable: true, get: function () { return signer_1.InMemorySigner; } });
	const contract_1 = contract;
	Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contract_1.Contract; } });
	const key_pair_1 = key_pair;
	Object.defineProperty(exports, "KeyPair", { enumerable: true, get: function () { return key_pair_1.KeyPair; } });
	const near_1 = near;
	Object.defineProperty(exports, "Near", { enumerable: true, get: function () { return near_1.Near; } });
	// TODO: Deprecate and remove WalletAccount
	const wallet_account_1 = walletAccount;
	Object.defineProperty(exports, "ConnectedWalletAccount", { enumerable: true, get: function () { return wallet_account_1.ConnectedWalletAccount; } });
	Object.defineProperty(exports, "WalletAccount", { enumerable: true, get: function () { return wallet_account_1.WalletAccount; } });
	Object.defineProperty(exports, "WalletConnection", { enumerable: true, get: function () { return wallet_account_1.WalletConnection; } });
	}(commonIndex));

	var connect$1 = {};

	var setupNodeFetch = {};

	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(setupNodeFetch, "__esModule", { value: true });
	const node_fetch_1 = __importDefault$2(require$$0$4);
	const http_1 = __importDefault$2(http__default["default"]);
	const https_1 = __importDefault$2(https__default["default"]);
	const httpAgent = new http_1.default.Agent({ keepAlive: true });
	const httpsAgent = new https_1.default.Agent({ keepAlive: true });
	function agent(_parsedURL) {
	    if (_parsedURL.protocol === 'http:') {
	        return httpAgent;
	    }
	    else {
	        return httpsAgent;
	    }
	}
	function default_1(resource, init) {
	    return node_fetch_1.default(resource, {
	        agent: agent(new URL(resource.toString())),
	        ...init,
	    });
	}
	setupNodeFetch.default = default_1;

	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(connect$1, "__esModule", { value: true });
	connect$1.connect = void 0;
	/**
	 * Connect to NEAR using the provided configuration.
	 *
	 * {@link ConnectConfig.networkId} and {@link ConnectConfig.nodeUrl} are required.
	 *
	 * To sign transactions you can also pass:
	 * 1. {@link ConnectConfig.keyStore}
	 * 2. {@link ConnectConfig.keyPath}
	 *
	 * If all three are passed they are prioritize in that order.
	 *
	 * @see {@link ConnectConfig}
	 * @example
	 * ```js
	 * async function initNear() {
	 *   const near = await connect({
	 *      networkId: 'testnet',
	 *      nodeUrl: 'https://rpc.testnet.near.org'
	 *   })
	 * }
	 * ```
	 * @module connect
	 */
	const unencrypted_file_system_keystore_1 = unencrypted_file_system_keystore;
	const key_stores_1 = key_stores;
	const near_1 = near;
	const setup_node_fetch_1 = __importDefault$1(setupNodeFetch);
	commonjsGlobal.fetch = setup_node_fetch_1.default;
	/**
	 * Initialize connection to Near network.
	 */
	async function connect(config) {
	    // Try to find extra key in `KeyPath` if provided.
	    if (config.keyPath && (config.keyStore || config.deps && config.deps.keyStore)) {
	        try {
	            const accountKeyFile = await unencrypted_file_system_keystore_1.readKeyFile(config.keyPath);
	            if (accountKeyFile[0]) {
	                // TODO: Only load key if network ID matches
	                const keyPair = accountKeyFile[1];
	                const keyPathStore = new key_stores_1.InMemoryKeyStore();
	                await keyPathStore.setKey(config.networkId, accountKeyFile[0], keyPair);
	                if (!config.masterAccount) {
	                    config.masterAccount = accountKeyFile[0];
	                }
	                config.keyStore = new key_stores_1.MergeKeyStore([
	                    keyPathStore,
	                    (config.keyStore || config.deps.keyStore)
	                ], { writeKeyStoreIndex: 1 });
	                console.log(`Loaded master account ${accountKeyFile[0]} key from ${config.keyPath} with public key = ${keyPair.getPublicKey()}`);
	            }
	        }
	        catch (error) {
	            console.warn(`Failed to load master account key from ${config.keyPath}: ${error}`);
	        }
	    }
	    return new near_1.Near(config);
	}
	connect$1.connect = connect;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	/** @ignore @module */
	exports.keyStores = __importStar(key_stores);
	__exportStar(commonIndex, exports);
	__exportStar(connect$1, exports);
	__exportStar(constants, exports);
	}(lib$3));

	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(near$1, "__esModule", { value: true });
	near$1.NearAuthProvider = void 0;
	const caip_1 = cjs;
	const util_1 = util;
	const uint8arrays = __importStar(uint8arrays$7);
	const nearApiJs = __importStar(lib$3);
	const sha256 = __importStar(sha256$5);
	const getSignature = async (signer, accountId, message, networkId) => {
	    const signed = await signer.signMessage(message, accountId, networkId);
	    return uint8arrays.toString(signed.signature, 'base64');
	};
	class NearAuthProvider {
	    constructor(near, accountName, chainRef) {
	        this.near = near;
	        this.accountName = accountName;
	        this.chainRef = chainRef;
	        this.isAuthProvider = true;
	    }
	    async authenticate(message) {
	        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
	        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
	        const digest = sha256.hash(uint8arrays.fromString(message));
	        const { signature } = await signer.signMessage(digest, this.accountName, this.chainRef);
	        return uint8arrays.toString(signature, 'base16');
	    }
	    async createLink(did) {
	        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
	        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
	        const { message, timestamp } = util_1.getConsentMessage(did, true);
	        const signature = await getSignature(signer, this.accountName, message, this.chainRef);
	        const account = await this.accountId();
	        return {
	            version: 2,
	            type: 'near',
	            message,
	            signature,
	            account: account.toString(),
	            timestamp,
	        };
	    }
	    async accountId() {
	        const key = await this.near.connection.signer.keyStore.getKey(this.chainRef, this.accountName);
	        const signer = await nearApiJs.InMemorySigner.fromKeyPair(this.chainRef, this.accountName, key);
	        const publicKey = await signer.getPublicKey(this.accountName, this.chainRef);
	        const address = uint8arrays.toString(publicKey.data, 'base58btc');
	        return new caip_1.AccountID({
	            address: address,
	            chainId: `near:${this.chainRef}`,
	        });
	    }
	    withAddress(address) {
	        return new NearAuthProvider(this.near, address, this.chainRef);
	    }
	}
	near$1.NearAuthProvider = NearAuthProvider;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TezosAuthProvider = exports.NearAuthProvider = exports.CosmosAuthProvider = exports.PolkadotAuthProvider = exports.EosioAuthProvider = exports.FilecoinAuthProvider = exports.AvalancheAuthProvider = exports.EthereumAuthProvider = exports.tezos = exports.cosmos = exports.eosio = exports.polkadot = exports.filecoin = exports.ethereum = void 0;
	__exportStar(authProvider, exports);
	exports.ethereum = __importStar(ethereum);
	__exportStar(util, exports);
	exports.filecoin = __importStar(filecoin);
	exports.polkadot = __importStar(polkadot);
	exports.eosio = __importStar(eosio);
	exports.cosmos = __importStar(cosmos);
	exports.tezos = __importStar(tezos);
	var ethereum_1 = ethereum;
	Object.defineProperty(exports, "EthereumAuthProvider", { enumerable: true, get: function () { return ethereum_1.EthereumAuthProvider; } });
	var ethereum_2 = ethereum;
	Object.defineProperty(exports, "AvalancheAuthProvider", { enumerable: true, get: function () { return ethereum_2.EthereumAuthProvider; } });
	var filecoin_1 = filecoin;
	Object.defineProperty(exports, "FilecoinAuthProvider", { enumerable: true, get: function () { return filecoin_1.FilecoinAuthProvider; } });
	var eosio_1 = eosio;
	Object.defineProperty(exports, "EosioAuthProvider", { enumerable: true, get: function () { return eosio_1.EosioAuthProvider; } });
	var polkadot_1 = polkadot;
	Object.defineProperty(exports, "PolkadotAuthProvider", { enumerable: true, get: function () { return polkadot_1.PolkadotAuthProvider; } });
	var cosmos_1 = cosmos;
	Object.defineProperty(exports, "CosmosAuthProvider", { enumerable: true, get: function () { return cosmos_1.CosmosAuthProvider; } });
	var near_1 = near$1;
	Object.defineProperty(exports, "NearAuthProvider", { enumerable: true, get: function () { return near_1.NearAuthProvider; } });
	var tezos_1 = tezos;
	Object.defineProperty(exports, "TezosAuthProvider", { enumerable: true, get: function () { return tezos_1.TezosAuthProvider; } });

	}(lib$4));

	var dist$6 = {exports: {}};

	var connectDisplay_cjs_production_min = {};

	var dist$5 = {exports: {}};

	var rpcWindow_cjs_production_min = {};

	var dist$4 = {exports: {}};

	var rpcPostmessage_cjs_production_min = {};

	var dist$3 = {exports: {}};

	var rpcTransport_cjs_production_min = {};

	function asyncGeneratorStep$5(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$5(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$5(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$5(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1(o, p);
	}

	function _isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (_isNativeReflectConstruct()) {
	    _construct = Reflect.construct;
	  } else {
	    _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) _setPrototypeOf$1(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !_isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return _setPrototypeOf$1(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function createCommonjsModule$5(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$5 = createCommonjsModule$5(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var _ERROR_MESSAGE;

	var ERROR_CODE;

	(function (ERROR_CODE) {
	  ERROR_CODE[ERROR_CODE["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
	  ERROR_CODE[ERROR_CODE["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
	  ERROR_CODE[ERROR_CODE["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
	  ERROR_CODE[ERROR_CODE["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
	  ERROR_CODE[ERROR_CODE["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
	})(ERROR_CODE || (ERROR_CODE = {}));

	var ERROR_MESSAGE = (_ERROR_MESSAGE = {}, _ERROR_MESSAGE[ERROR_CODE.PARSE_ERROR] = 'Parse error', _ERROR_MESSAGE[ERROR_CODE.INVALID_REQUEST] = 'Invalid request', _ERROR_MESSAGE[ERROR_CODE.METHOD_NOT_FOUND] = 'Method not found', _ERROR_MESSAGE[ERROR_CODE.INVALID_PARAMS] = 'Invalid params', _ERROR_MESSAGE[ERROR_CODE.INTERNAL_ERROR] = 'Internal error', _ERROR_MESSAGE);
	function isServerError(code) {
	  return -32000 >= code && code >= -32099;
	}
	function getErrorMessage(code) {
	  var _ERROR_MESSAGE$code$t;

	  return (_ERROR_MESSAGE$code$t = ERROR_MESSAGE[code.toString()]) != null ? _ERROR_MESSAGE$code$t : isServerError(code) ? 'Server error' : 'Application error';
	}
	var RPCError = /*#__PURE__*/function (_Error) {
	  _inheritsLoose$1(RPCError, _Error);

	  function RPCError(code, message, data) {
	    var _this;

	    _this = _Error.call(this) || this;
	    Object.setPrototypeOf(_assertThisInitialized(_this), RPCError.prototype);
	    _this.code = code;
	    _this.data = data;
	    _this.message = message != null ? message : getErrorMessage(code);
	    return _this;
	  }

	  RPCError.fromObject = function fromObject(err) {
	    return new RPCError(err.code, err.message, err.data);
	  };

	  var _proto = RPCError.prototype;

	  _proto.toObject = function toObject() {
	    return {
	      code: this.code,
	      data: this.data,
	      message: this.message
	    };
	  };

	  return RPCError;
	}( /*#__PURE__*/_wrapNativeSuper(Error));

	function createErrorFactory(code) {
	  var message = ERROR_MESSAGE[code];
	  return function createError(data) {
	    return new RPCError(code, message, data);
	  };
	}

	var createParseError = /*#__PURE__*/createErrorFactory(ERROR_CODE.PARSE_ERROR);
	var createInvalidRequest = /*#__PURE__*/createErrorFactory(ERROR_CODE.INVALID_REQUEST);
	var createMethodNotFound = /*#__PURE__*/createErrorFactory(ERROR_CODE.METHOD_NOT_FOUND);
	var createInvalidParams = /*#__PURE__*/createErrorFactory(ERROR_CODE.INVALID_PARAMS);
	var createInternalError = /*#__PURE__*/createErrorFactory(ERROR_CODE.INTERNAL_ERROR);

	var RPCClient = /*#__PURE__*/function () {
	  function RPCClient(connection) {
	    this.connection = connection;
	  }

	  var _proto = RPCClient.prototype;

	  _proto.createID = function createID() {
	    return nanoid();
	  };

	  _proto.request = /*#__PURE__*/function () {
	    var _request = /*#__PURE__*/_asyncToGenerator$5( /*#__PURE__*/runtime_1$5.mark(function _callee(method, params) {
	      var res;
	      return runtime_1$5.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              if (params === void 0) {
	                params = undefined;
	              }

	              _context.next = 3;
	              return this.connection.send({
	                jsonrpc: '2.0',
	                id: this.createID(),
	                method: method,
	                params: params
	              });

	            case 3:
	              res = _context.sent;

	              if (!(res == null)) {
	                _context.next = 6;
	                break;
	              }

	              throw new Error('Missing response');

	            case 6:
	              if (!(res.error != null)) {
	                _context.next = 8;
	                break;
	              }

	              throw RPCError.fromObject(res.error);

	            case 8:
	              return _context.abrupt("return", res.result);

	            case 9:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function request(_x, _x2) {
	      return _request.apply(this, arguments);
	    }

	    return request;
	  }();

	  _proto.notify = /*#__PURE__*/function () {
	    var _notify = /*#__PURE__*/_asyncToGenerator$5( /*#__PURE__*/runtime_1$5.mark(function _callee2(method, params) {
	      return runtime_1$5.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (params === void 0) {
	                params = undefined;
	              }

	              _context2.next = 3;
	              return this.connection.send({
	                jsonrpc: '2.0',
	                method: method,
	                params: params
	              });

	            case 3:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function notify(_x3, _x4) {
	      return _notify.apply(this, arguments);
	    }

	    return notify;
	  }();

	  return RPCClient;
	}();

	function parseJSON(input) {
	  try {
	    return JSON.parse(input);
	  } catch (err) {
	    throw createParseError();
	  }
	}
	function createErrorResponse(id, code) {
	  return {
	    jsonrpc: '2.0',
	    id: id,
	    error: {
	      code: code,
	      message: getErrorMessage(code)
	    }
	  };
	}

	function fallbackOnHandlerError(_ctx, msg, error) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled handler error', msg, error);
	}

	function fallbackOnInvalidMessage(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled invalid message', msg);
	}

	function fallbackOnNotification(_ctx, msg) {
	  // eslint-disable-next-line no-console
	  console.warn('Unhandled notification', msg);
	} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


	function createHandler(methods, options) {
	  var _options$onHandlerErr, _options$onInvalidMes, _options$onNotificati;

	  if (options === void 0) {
	    options = {};
	  }

	  var onHandlerError = (_options$onHandlerErr = options.onHandlerError) != null ? _options$onHandlerErr : fallbackOnHandlerError;
	  var onInvalidMessage = (_options$onInvalidMes = options.onInvalidMessage) != null ? _options$onInvalidMes : fallbackOnInvalidMessage;
	  var onNotification = (_options$onNotificati = options.onNotification) != null ? _options$onNotificati : fallbackOnNotification;
	  return /*#__PURE__*/function () {
	    var _handleRequest = _asyncToGenerator$5( /*#__PURE__*/runtime_1$5.mark(function _callee(ctx, msg) {
	      var id, handler, handled, result, error, _err$code, code;

	      return runtime_1$5.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              id = msg.id;

	              if (!(msg.jsonrpc !== '2.0' || msg.method == null)) {
	                _context.next = 6;
	                break;
	              }

	              if (!(id == null)) {
	                _context.next = 5;
	                break;
	              }

	              onInvalidMessage(ctx, msg);
	              return _context.abrupt("return", null);

	            case 5:
	              return _context.abrupt("return", createErrorResponse(id, ERROR_CODE.INVALID_REQUEST));

	            case 6:
	              handler = methods[msg.method];

	              if (!(handler == null)) {
	                _context.next = 12;
	                break;
	              }

	              if (!(id == null)) {
	                _context.next = 11;
	                break;
	              }

	              onNotification(ctx, msg);
	              return _context.abrupt("return", null);

	            case 11:
	              return _context.abrupt("return", createErrorResponse(id, ERROR_CODE.METHOD_NOT_FOUND));

	            case 12:
	              _context.prev = 12;
	              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	              // @ts-ignore params can be undefined
	              handled = handler(ctx, msg.params);

	              if (!(handled == null)) {
	                _context.next = 18;
	                break;
	              }

	              _context.t0 = handled;
	              _context.next = 26;
	              break;

	            case 18:
	              if (!(typeof handled.then === 'function')) {
	                _context.next = 24;
	                break;
	              }

	              _context.next = 21;
	              return handled;

	            case 21:
	              _context.t1 = _context.sent;
	              _context.next = 25;
	              break;

	            case 24:
	              _context.t1 = handled;

	            case 25:
	              _context.t0 = _context.t1;

	            case 26:
	              result = _context.t0;
	              return _context.abrupt("return", id == null ? null : {
	                jsonrpc: '2.0',
	                id: id,
	                result: result
	              });

	            case 30:
	              _context.prev = 30;
	              _context.t2 = _context["catch"](12);

	              if (!(id == null)) {
	                _context.next = 35;
	                break;
	              }

	              onHandlerError(ctx, msg, _context.t2);
	              return _context.abrupt("return", null);

	            case 35:
	              if (_context.t2 instanceof RPCError) {
	                error = _context.t2.toObject();
	              } else {
	                onHandlerError(ctx, msg, _context.t2);
	                code = (_err$code = _context.t2.code) != null ? _err$code : -32000; // Server error

	                error = {
	                  code: code,
	                  message: _context.t2.message || getErrorMessage(code)
	                };
	              }

	              return _context.abrupt("return", {
	                jsonrpc: '2.0',
	                id: id,
	                error: error
	              });

	            case 37:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, null, [[12, 30]]);
	    }));

	    function handleRequest(_x, _x2) {
	      return _handleRequest.apply(this, arguments);
	    }

	    return handleRequest;
	  }();
	}

	var rpcUtils_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		get ERROR_CODE () { return ERROR_CODE; },
		ERROR_MESSAGE: ERROR_MESSAGE,
		RPCClient: RPCClient,
		RPCError: RPCError,
		createErrorResponse: createErrorResponse,
		createHandler: createHandler,
		createInternalError: createInternalError,
		createInvalidParams: createInvalidParams,
		createInvalidRequest: createInvalidRequest,
		createMethodNotFound: createMethodNotFound,
		createParseError: createParseError,
		getErrorMessage: getErrorMessage,
		isServerError: isServerError,
		parseJSON: parseJSON
	});

	var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(rpcUtils_esm);

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isFunction(x) {
	    return typeof x === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var _enable_super_gross_mode_that_will_cause_bad_things = false;
	var config = {
	    Promise: undefined,
	    set useDeprecatedSynchronousErrorHandling(value) {
	        if (value) {
	            var error = /*@__PURE__*/ new Error();
	            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
	        }
	        _enable_super_gross_mode_that_will_cause_bad_things = value;
	    },
	    get useDeprecatedSynchronousErrorHandling() {
	        return _enable_super_gross_mode_that_will_cause_bad_things;
	    },
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function hostReportError(err) {
	    setTimeout(function () { throw err; }, 0);
	}

	/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
	var empty$1 = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) {
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            throw err;
	        }
	        else {
	            hostReportError(err);
	        }
	    },
	    complete: function () { }
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isObject(x) {
	    return x !== null && typeof x === 'object';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
	    function UnsubscriptionErrorImpl(errors) {
	        Error.call(this);
	        this.message = errors ?
	            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	        return this;
	    }
	    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return UnsubscriptionErrorImpl;
	})();
	var UnsubscriptionError = UnsubscriptionErrorImpl;

	/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
	var Subscription = /*@__PURE__*/ (function () {
	    function Subscription(unsubscribe) {
	        this.closed = false;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._ctorUnsubscribe = true;
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (_parentOrParents instanceof Subscription) {
	            _parentOrParents.remove(this);
	        }
	        else if (_parentOrParents !== null) {
	            for (var index = 0; index < _parentOrParents.length; ++index) {
	                var parent_1 = _parentOrParents[index];
	                parent_1.remove(this);
	            }
	        }
	        if (isFunction(_unsubscribe)) {
	            if (_ctorUnsubscribe) {
	                this._unsubscribe = undefined;
	            }
	            try {
	                _unsubscribe.call(this);
	            }
	            catch (e) {
	                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
	            }
	        }
	        if (isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject(sub)) {
	                    try {
	                        sub.unsubscribe();
	                    }
	                    catch (e) {
	                        errors = errors || [];
	                        if (e instanceof UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
	                        }
	                        else {
	                            errors.push(e);
	                        }
	                    }
	                }
	            }
	        }
	        if (errors) {
	            throw new UnsubscriptionError(errors);
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var subscription = teardown;
	        if (!teardown) {
	            return Subscription.EMPTY;
	        }
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (!(subscription instanceof Subscription)) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default: {
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	            }
	        }
	        var _parentOrParents = subscription._parentOrParents;
	        if (_parentOrParents === null) {
	            subscription._parentOrParents = this;
	        }
	        else if (_parentOrParents instanceof Subscription) {
	            if (_parentOrParents === this) {
	                return subscription;
	            }
	            subscription._parentOrParents = [_parentOrParents, this];
	        }
	        else if (_parentOrParents.indexOf(this) === -1) {
	            _parentOrParents.push(this);
	        }
	        else {
	            return subscription;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions === null) {
	            this._subscriptions = [subscription];
	        }
	        else {
	            subscriptions.push(subscription);
	        }
	        return subscription;
	    };
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var rxSubscriber = /*@__PURE__*/ (function () {
	    return typeof Symbol === 'function'
	        ? /*@__PURE__*/ Symbol('rxSubscriber')
	        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
	})();

	/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
	var Subscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(Subscriber, _super);
	    function Subscriber(destinationOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this.syncErrorValue = null;
	        _this.syncErrorThrown = false;
	        _this.syncErrorThrowable = false;
	        _this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                _this.destination = empty$1;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    _this.destination = empty$1;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
	                        _this.destination = destinationOrNext;
	                        destinationOrNext.add(_this);
	                    }
	                    else {
	                        _this.syncErrorThrowable = true;
	                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                _this.syncErrorThrowable = true;
	                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
	                break;
	        }
	        return _this;
	    }
	    Subscriber.prototype[rxSubscriber] = function () { return this; };
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _parentOrParents = this._parentOrParents;
	        this._parentOrParents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parentOrParents = _parentOrParents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = _this;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== empty$1) {
	                context = Object.create(observerOrNext);
	                if (isFunction(context.unsubscribe)) {
	                    _this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = _this.unsubscribe.bind(_this);
	            }
	        }
	        _this._context = context;
	        _this._next = next;
	        _this._error = error;
	        _this._complete = complete;
	        return _this;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
	            if (this._error) {
	                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                if (useDeprecatedSynchronousErrorHandling) {
	                    throw err;
	                }
	                hostReportError(err);
	            }
	            else {
	                if (useDeprecatedSynchronousErrorHandling) {
	                    _parentSubscriber.syncErrorValue = err;
	                    _parentSubscriber.syncErrorThrown = true;
	                }
	                else {
	                    hostReportError(err);
	                }
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                throw err;
	            }
	            else {
	                hostReportError(err);
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        if (!config.useDeprecatedSynchronousErrorHandling) {
	            throw new Error('bad call');
	        }
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                parent.syncErrorValue = err;
	                parent.syncErrorThrown = true;
	                return true;
	            }
	            else {
	                hostReportError(err);
	                return true;
	            }
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
	function canReportError(observer) {
	    while (observer) {
	        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
	        if (closed_1 || isStopped) {
	            return false;
	        }
	        else if (destination && destination instanceof Subscriber) {
	            observer = destination;
	        }
	        else {
	            observer = null;
	        }
	    }
	    return true;
	}

	/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber]) {
	            return nextOrObserver[rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber(empty$1);
	    }
	    return new Subscriber(nextOrObserver, error, complete);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function identity(x) {
	    return x;
	}

	/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
	function pipe() {
	    var fns = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        fns[_i] = arguments[_i];
	    }
	    return pipeFromArray(fns);
	}
	function pipeFromArray(fns) {
	    if (fns.length === 0) {
	        return identity;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
	var Observable = /*@__PURE__*/ (function () {
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            sink.add(operator.call(sink, this.source));
	        }
	        else {
	            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
	                this._subscribe(sink) :
	                this._trySubscribe(sink));
	        }
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            if (sink.syncErrorThrowable) {
	                sink.syncErrorThrowable = false;
	                if (sink.syncErrorThrown) {
	                    throw sink.syncErrorValue;
	                }
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                sink.syncErrorThrown = true;
	                sink.syncErrorValue = err;
	            }
	            if (canReportError(sink)) {
	                sink.error(err);
	            }
	            else {
	                console.warn(err);
	            }
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    if (subscription) {
	                        subscription.unsubscribe();
	                    }
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        return source && source.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        if (operations.length === 0) {
	            return this;
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    if (!promiseCtor) {
	        promiseCtor = config.Promise || Promise;
	    }
	    if (!promiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return promiseCtor;
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
	    function ObjectUnsubscribedErrorImpl() {
	        Error.call(this);
	        this.message = 'object unsubscribed';
	        this.name = 'ObjectUnsubscribedError';
	        return this;
	    }
	    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ObjectUnsubscribedErrorImpl;
	})();
	var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var SubjectSubscription = /*@__PURE__*/ (function (_super) {
	    __extends$1(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        var _this = _super.call(this) || this;
	        _this.subject = subject;
	        _this.subscriber = subscriber;
	        _this.closed = false;
	        return _this;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
	var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        return _this;
	    }
	    return SubjectSubscriber;
	}(Subscriber));
	var Subject = /*@__PURE__*/ (function (_super) {
	    __extends$1(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.observers = [];
	        _this.closed = false;
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype[rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable));
	var AnonymousSubject = /*@__PURE__*/ (function (_super) {
	    __extends$1(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function refCount() {
	    return function refCountOperatorFunction(source) {
	        return source.lift(new RefCountOperator(source));
	    };
	}
	var RefCountOperator = /*@__PURE__*/ (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
	var ConnectableObservable = /*@__PURE__*/ (function (_super) {
	    __extends$1(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._refCount = 0;
	        _this._isComplete = false;
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            this._isComplete = false;
	            connection = this._connection = new Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount()(this);
	    };
	    return ConnectableObservable;
	}(Observable));
	var connectableObservableDescriptor = /*@__PURE__*/ (function () {
	    var connectableProto = ConnectableObservable.prototype;
	    return {
	        operator: { value: null },
	        _refCount: { value: 0, writable: true },
	        _subject: { value: null, writable: true },
	        _connection: { value: null, writable: true },
	        _subscribe: { value: connectableProto._subscribe },
	        _isComplete: { value: connectableProto._isComplete, writable: true },
	        getSubject: { value: connectableProto.getSubject },
	        connect: { value: connectableProto.connect },
	        refCount: { value: connectableProto.refCount }
	    };
	})();
	var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this.connectable._isComplete = true;
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(SubjectSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
	function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
	    return function (source) {
	        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
	    };
	}
	var GroupByOperator = /*@__PURE__*/ (function () {
	    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.subjectSelector = subjectSelector;
	    }
	    GroupByOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
	    };
	    return GroupByOperator;
	}());
	var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(GroupBySubscriber, _super);
	    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.elementSelector = elementSelector;
	        _this.durationSelector = durationSelector;
	        _this.subjectSelector = subjectSelector;
	        _this.groups = null;
	        _this.attemptedToUnsubscribe = false;
	        _this.count = 0;
	        return _this;
	    }
	    GroupBySubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            this.error(err);
	            return;
	        }
	        this._group(value, key);
	    };
	    GroupBySubscriber.prototype._group = function (value, key) {
	        var groups = this.groups;
	        if (!groups) {
	            groups = this.groups = new Map();
	        }
	        var group = groups.get(key);
	        var element;
	        if (this.elementSelector) {
	            try {
	                element = this.elementSelector(value);
	            }
	            catch (err) {
	                this.error(err);
	            }
	        }
	        else {
	            element = value;
	        }
	        if (!group) {
	            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
	            groups.set(key, group);
	            var groupedObservable = new GroupedObservable(key, group, this);
	            this.destination.next(groupedObservable);
	            if (this.durationSelector) {
	                var duration = void 0;
	                try {
	                    duration = this.durationSelector(new GroupedObservable(key, group));
	                }
	                catch (err) {
	                    this.error(err);
	                    return;
	                }
	                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
	            }
	        }
	        if (!group.closed) {
	            group.next(element);
	        }
	    };
	    GroupBySubscriber.prototype._error = function (err) {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	            });
	            groups.clear();
	        }
	        this.destination.error(err);
	    };
	    GroupBySubscriber.prototype._complete = function () {
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	            });
	            groups.clear();
	        }
	        this.destination.complete();
	    };
	    GroupBySubscriber.prototype.removeGroup = function (key) {
	        this.groups.delete(key);
	    };
	    GroupBySubscriber.prototype.unsubscribe = function () {
	        if (!this.closed) {
	            this.attemptedToUnsubscribe = true;
	            if (this.count === 0) {
	                _super.prototype.unsubscribe.call(this);
	            }
	        }
	    };
	    return GroupBySubscriber;
	}(Subscriber));
	var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(GroupDurationSubscriber, _super);
	    function GroupDurationSubscriber(key, group, parent) {
	        var _this = _super.call(this, group) || this;
	        _this.key = key;
	        _this.group = group;
	        _this.parent = parent;
	        return _this;
	    }
	    GroupDurationSubscriber.prototype._next = function (value) {
	        this.complete();
	    };
	    GroupDurationSubscriber.prototype._unsubscribe = function () {
	        var _a = this, parent = _a.parent, key = _a.key;
	        this.key = this.parent = null;
	        if (parent) {
	            parent.removeGroup(key);
	        }
	    };
	    return GroupDurationSubscriber;
	}(Subscriber));
	var GroupedObservable = /*@__PURE__*/ (function (_super) {
	    __extends$1(GroupedObservable, _super);
	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        var _this = _super.call(this) || this;
	        _this.key = key;
	        _this.groupSubject = groupSubject;
	        _this.refCountSubscription = refCountSubscription;
	        return _this;
	    }
	    GroupedObservable.prototype._subscribe = function (subscriber) {
	        var subscription = new Subscription();
	        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
	        if (refCountSubscription && !refCountSubscription.closed) {
	            subscription.add(new InnerRefCountSubscription(refCountSubscription));
	        }
	        subscription.add(groupSubject.subscribe(subscriber));
	        return subscription;
	    };
	    return GroupedObservable;
	}(Observable));
	var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
	    __extends$1(InnerRefCountSubscription, _super);
	    function InnerRefCountSubscription(parent) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        parent.count++;
	        return _this;
	    }
	    InnerRefCountSubscription.prototype.unsubscribe = function () {
	        var parent = this.parent;
	        if (!parent.closed && !this.closed) {
	            _super.prototype.unsubscribe.call(this);
	            parent.count -= 1;
	            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
	                parent.unsubscribe();
	            }
	        }
	    };
	    return InnerRefCountSubscription;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
	var BehaviorSubject = /*@__PURE__*/ (function (_super) {
	    __extends$1(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        var _this = _super.call(this) || this;
	        _this._value = _value;
	        return _this;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.closed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasError) {
	            throw this.thrownError;
	        }
	        else if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return this._value;
	        }
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, this._value = value);
	    };
	    return BehaviorSubject;
	}(Subject));

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var Action = /*@__PURE__*/ (function (_super) {
	    __extends$1(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
	var AsyncAction = /*@__PURE__*/ (function (_super) {
	    __extends$1(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	        this.delay = null;
	    };
	    return AsyncAction;
	}(Action));

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var QueueAction = /*@__PURE__*/ (function (_super) {
	    __extends$1(QueueAction, _super);
	    function QueueAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    QueueAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay > 0) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.delay = delay;
	        this.state = state;
	        this.scheduler.flush(this);
	        return this;
	    };
	    QueueAction.prototype.execute = function (state, delay) {
	        return (delay > 0 || this.closed) ?
	            _super.prototype.execute.call(this, state, delay) :
	            this._execute(state, delay);
	    };
	    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        return scheduler.flush(this);
	    };
	    return QueueAction;
	}(AsyncAction));

	var Scheduler = /*@__PURE__*/ (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = function () { return Date.now(); };
	    return Scheduler;
	}());

	/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
	var AsyncScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        var _this = _super.call(this, SchedulerAction, function () {
	            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
	                return AsyncScheduler.delegate.now();
	            }
	            else {
	                return now();
	            }
	        }) || this;
	        _this.actions = [];
	        _this.active = false;
	        _this.scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
	            return AsyncScheduler.delegate.schedule(work, delay, state);
	        }
	        else {
	            return _super.prototype.schedule.call(this, work, delay, state);
	        }
	    };
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift());
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var QueueScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1(QueueScheduler, _super);
	    function QueueScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return QueueScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
	var queueScheduler = /*@__PURE__*/ new QueueScheduler(QueueAction);
	var queue = queueScheduler;

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
	function empty(scheduler) {
	    return scheduler ? emptyScheduled(scheduler) : EMPTY;
	}
	function emptyScheduled(scheduler) {
	    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var subscribeToArray = function (array) {
	    return function (subscriber) {
	        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    };
	};

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function scheduleArray(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var i = 0;
	        sub.add(scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	                return;
	            }
	            subscriber.next(input[i++]);
	            if (!subscriber.closed) {
	                sub.add(this.schedule());
	            }
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function fromArray(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToArray(input));
	    }
	    else {
	        return scheduleArray(input, scheduler);
	    }
	}

	/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function of() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = args[args.length - 1];
	    if (isScheduler(scheduler)) {
	        args.pop();
	        return scheduleArray(args, scheduler);
	    }
	    else {
	        return fromArray(args);
	    }
	}

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function throwError(error, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) { return subscriber.error(error); });
	    }
	    else {
	        return new Observable(function (subscriber) { return scheduler.schedule(dispatch$7, 0, { error: error, subscriber: subscriber }); });
	    }
	}
	function dispatch$7(_a) {
	    var error = _a.error, subscriber = _a.subscriber;
	    subscriber.error(error);
	}

	/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
	var NotificationKind;
	/*@__PURE__*/ (function (NotificationKind) {
	    NotificationKind["NEXT"] = "N";
	    NotificationKind["ERROR"] = "E";
	    NotificationKind["COMPLETE"] = "C";
	})(NotificationKind || (NotificationKind = {}));
	var Notification = /*@__PURE__*/ (function () {
	    function Notification(kind, value, error) {
	        this.kind = kind;
	        this.value = value;
	        this.error = error;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.error);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.error);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return of(this.value);
	            case 'E':
	                return throwError(this.error);
	            case 'C':
	                return empty();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return Notification.undefinedValueNotification;
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return Notification.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	function observeOn(scheduler, delay) {
	    if (delay === void 0) {
	        delay = 0;
	    }
	    return function observeOnOperatorFunction(source) {
	        return source.lift(new ObserveOnOperator(scheduler, delay));
	    };
	}
	var ObserveOnOperator = /*@__PURE__*/ (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
	    };
	    return ObserveOnOperator;
	}());
	var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.scheduler = scheduler;
	        _this.delay = delay;
	        return _this;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        var destination = this.destination;
	        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification.createError(err));
	        this.unsubscribe();
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification.createComplete());
	        this.unsubscribe();
	    };
	    return ObserveOnSubscriber;
	}(Subscriber));
	var ObserveOnMessage = /*@__PURE__*/ (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
	var ReplaySubject = /*@__PURE__*/ (function (_super) {
	    __extends$1(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) {
	            bufferSize = Number.POSITIVE_INFINITY;
	        }
	        if (windowTime === void 0) {
	            windowTime = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this) || this;
	        _this.scheduler = scheduler;
	        _this._events = [];
	        _this._infiniteTimeWindow = false;
	        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        _this._windowTime = windowTime < 1 ? 1 : windowTime;
	        if (windowTime === Number.POSITIVE_INFINITY) {
	            _this._infiniteTimeWindow = true;
	            _this.next = _this.nextInfiniteTimeWindow;
	        }
	        else {
	            _this.next = _this.nextTimeWindow;
	        }
	        return _this;
	    }
	    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
	        if (!this.isStopped) {
	            var _events = this._events;
	            _events.push(value);
	            if (_events.length > this._bufferSize) {
	                _events.shift();
	            }
	        }
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype.nextTimeWindow = function (value) {
	        if (!this.isStopped) {
	            this._events.push(new ReplayEvent(this._getNow(), value));
	            this._trimBufferThenGetEvents();
	        }
	        _super.prototype.next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var _infiniteTimeWindow = this._infiniteTimeWindow;
	        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
	        var scheduler = this.scheduler;
	        var len = _events.length;
	        var subscription;
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.isStopped || this.hasError) {
	            subscription = Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            subscription = new SubjectSubscription(this, subscriber);
	        }
	        if (scheduler) {
	            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
	        }
	        if (_infiniteTimeWindow) {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i]);
	            }
	        }
	        else {
	            for (var i = 0; i < len && !subscriber.closed; i++) {
	                subscriber.next(_events[i].value);
	            }
	        }
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	        }
	        return subscription;
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
	        var now = this._getNow();
	        var _bufferSize = this._bufferSize;
	        var _windowTime = this._windowTime;
	        var _events = this._events;
	        var eventsCount = _events.length;
	        var spliceCount = 0;
	        while (spliceCount < eventsCount) {
	            if ((now - _events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount++;
	        }
	        if (eventsCount > _bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
	        }
	        if (spliceCount > 0) {
	            _events.splice(0, spliceCount);
	        }
	        return _events;
	    };
	    return ReplaySubject;
	}(Subject));
	var ReplayEvent = /*@__PURE__*/ (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	}());

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
	var AsyncSubject = /*@__PURE__*/ (function (_super) {
	    __extends$1(AsyncSubject, _super);
	    function AsyncSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.value = null;
	        _this.hasNext = false;
	        _this.hasCompleted = false;
	        return _this;
	    }
	    AsyncSubject.prototype._subscribe = function (subscriber) {
	        if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.hasCompleted && this.hasNext) {
	            subscriber.next(this.value);
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    AsyncSubject.prototype.next = function (value) {
	        if (!this.hasCompleted) {
	            this.value = value;
	            this.hasNext = true;
	        }
	    };
	    AsyncSubject.prototype.error = function (error) {
	        if (!this.hasCompleted) {
	            _super.prototype.error.call(this, error);
	        }
	    };
	    AsyncSubject.prototype.complete = function () {
	        this.hasCompleted = true;
	        if (this.hasNext) {
	            _super.prototype.next.call(this, this.value);
	        }
	        _super.prototype.complete.call(this);
	    };
	    return AsyncSubject;
	}(Subject));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var nextHandle = 1;
	var RESOLVED = /*@__PURE__*/ (function () { return /*@__PURE__*/ Promise.resolve(); })();
	var activeHandles = {};
	function findAndClearHandle(handle) {
	    if (handle in activeHandles) {
	        delete activeHandles[handle];
	        return true;
	    }
	    return false;
	}
	var Immediate = {
	    setImmediate: function (cb) {
	        var handle = nextHandle++;
	        activeHandles[handle] = true;
	        RESOLVED.then(function () { return findAndClearHandle(handle) && cb(); });
	        return handle;
	    },
	    clearImmediate: function (handle) {
	        findAndClearHandle(handle);
	    },
	};

	/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
	var AsapAction = /*@__PURE__*/ (function (_super) {
	    __extends$1(AsapAction, _super);
	    function AsapAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
	    };
	    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            Immediate.clearImmediate(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AsapAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AsapScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1(AsapScheduler, _super);
	    function AsapScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AsapScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsapScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
	var asapScheduler = /*@__PURE__*/ new AsapScheduler(AsapAction);
	var asap = asapScheduler;

	/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var asyncScheduler = /*@__PURE__*/ new AsyncScheduler(AsyncAction);
	var async = asyncScheduler;

	/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
	var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
	    __extends$1(AnimationFrameAction, _super);
	    function AnimationFrameAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        return _this;
	    }
	    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && delay > 0) {
	            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
	        }
	        scheduler.actions.push(this);
	        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
	    };
	    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
	            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
	        }
	        if (scheduler.actions.length === 0) {
	            cancelAnimationFrame(id);
	            scheduler.scheduled = undefined;
	        }
	        return undefined;
	    };
	    return AnimationFrameAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
	var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1(AnimationFrameScheduler, _super);
	    function AnimationFrameScheduler() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    AnimationFrameScheduler.prototype.flush = function (action) {
	        this.active = true;
	        this.scheduled = undefined;
	        var actions = this.actions;
	        var error;
	        var index = -1;
	        var count = actions.length;
	        action = action || actions.shift();
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (++index < count && (action = actions.shift()));
	        this.active = false;
	        if (error) {
	            while (++index < count && (action = actions.shift())) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AnimationFrameScheduler;
	}(AsyncScheduler));

	/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
	var animationFrameScheduler = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);
	var animationFrame = animationFrameScheduler;

	/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1(VirtualTimeScheduler, _super);
	    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
	        if (SchedulerAction === void 0) {
	            SchedulerAction = VirtualAction;
	        }
	        if (maxFrames === void 0) {
	            maxFrames = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
	        _this.maxFrames = maxFrames;
	        _this.frame = 0;
	        _this.index = -1;
	        return _this;
	    }
	    VirtualTimeScheduler.prototype.flush = function () {
	        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
	        var error, action;
	        while ((action = actions[0]) && action.delay <= maxFrames) {
	            actions.shift();
	            this.frame = action.delay;
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        }
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    VirtualTimeScheduler.frameTimeFactor = 10;
	    return VirtualTimeScheduler;
	}(AsyncScheduler));
	var VirtualAction = /*@__PURE__*/ (function (_super) {
	    __extends$1(VirtualAction, _super);
	    function VirtualAction(scheduler, work, index) {
	        if (index === void 0) {
	            index = scheduler.index += 1;
	        }
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.index = index;
	        _this.active = true;
	        _this.index = scheduler.index = index;
	        return _this;
	    }
	    VirtualAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (!this.id) {
	            return _super.prototype.schedule.call(this, state, delay);
	        }
	        this.active = false;
	        var action = new VirtualAction(this.scheduler, this.work);
	        this.add(action);
	        return action.schedule(state, delay);
	    };
	    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        this.delay = scheduler.frame + delay;
	        var actions = scheduler.actions;
	        actions.push(this);
	        actions.sort(VirtualAction.sortActions);
	        return true;
	    };
	    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        return undefined;
	    };
	    VirtualAction.prototype._execute = function (state, delay) {
	        if (this.active === true) {
	            return _super.prototype._execute.call(this, state, delay);
	        }
	    };
	    VirtualAction.sortActions = function (a, b) {
	        if (a.delay === b.delay) {
	            if (a.index === b.index) {
	                return 0;
	            }
	            else if (a.index > b.index) {
	                return 1;
	            }
	            else {
	                return -1;
	            }
	        }
	        else if (a.delay > b.delay) {
	            return 1;
	        }
	        else {
	            return -1;
	        }
	    };
	    return VirtualAction;
	}(AsyncAction));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function noop() { }

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function isObservable(obj) {
	    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
	    function ArgumentOutOfRangeErrorImpl() {
	        Error.call(this);
	        this.message = 'argument out of range';
	        this.name = 'ArgumentOutOfRangeError';
	        return this;
	    }
	    ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ArgumentOutOfRangeErrorImpl;
	})();
	var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var EmptyErrorImpl = /*@__PURE__*/ (function () {
	    function EmptyErrorImpl() {
	        Error.call(this);
	        this.message = 'no elements in sequence';
	        this.name = 'EmptyError';
	        return this;
	    }
	    EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return EmptyErrorImpl;
	})();
	var EmptyError = EmptyErrorImpl;

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var TimeoutErrorImpl = /*@__PURE__*/ (function () {
	    function TimeoutErrorImpl() {
	        Error.call(this);
	        this.message = 'Timeout has occurred';
	        this.name = 'TimeoutError';
	        return this;
	    }
	    TimeoutErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return TimeoutErrorImpl;
	})();
	var TimeoutError = TimeoutErrorImpl;

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function map(project, thisArg) {
	    return function mapOperation(source) {
	        if (typeof project !== 'function') {
	            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	        }
	        return source.lift(new MapOperator(project, thisArg));
	    };
	}
	var MapOperator = /*@__PURE__*/ (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	var MapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.count = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */
	function bindCallback(callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	            };
	        }
	    }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var context = this;
	        var subject;
	        var params = {
	            context: context,
	            subject: subject,
	            callbackFunc: callbackFunc,
	            scheduler: scheduler,
	        };
	        return new Observable(function (subscriber) {
	            if (!scheduler) {
	                if (!subject) {
	                    subject = new AsyncSubject();
	                    var handler = function () {
	                        var innerArgs = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            innerArgs[_i] = arguments[_i];
	                        }
	                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    };
	                    try {
	                        callbackFunc.apply(context, args.concat([handler]));
	                    }
	                    catch (err) {
	                        if (canReportError(subject)) {
	                            subject.error(err);
	                        }
	                        else {
	                            console.warn(err);
	                        }
	                    }
	                }
	                return subject.subscribe(subscriber);
	            }
	            else {
	                var state = {
	                    args: args, subscriber: subscriber, params: params,
	                };
	                return scheduler.schedule(dispatch$6, 0, state);
	            }
	        });
	    };
	}
	function dispatch$6(state) {
	    var _this = this;
	    var args = state.args, subscriber = state.subscriber, params = state.params;
	    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
	    var subject = params.subject;
	    if (!subject) {
	        subject = params.subject = new AsyncSubject();
	        var handler = function () {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i] = arguments[_i];
	            }
	            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
	            _this.add(scheduler.schedule(dispatchNext$3, 0, { value: value, subject: subject }));
	        };
	        try {
	            callbackFunc.apply(context, args.concat([handler]));
	        }
	        catch (err) {
	            subject.error(err);
	        }
	    }
	    this.add(subject.subscribe(subscriber));
	}
	function dispatchNext$3(state) {
	    var value = state.value, subject = state.subject;
	    subject.next(value);
	    subject.complete();
	}

	/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
	function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
	    if (resultSelector) {
	        if (isScheduler(resultSelector)) {
	            scheduler = resultSelector;
	        }
	        else {
	            return function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	            };
	        }
	    }
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var params = {
	            subject: undefined,
	            args: args,
	            callbackFunc: callbackFunc,
	            scheduler: scheduler,
	            context: this,
	        };
	        return new Observable(function (subscriber) {
	            var context = params.context;
	            var subject = params.subject;
	            if (!scheduler) {
	                if (!subject) {
	                    subject = params.subject = new AsyncSubject();
	                    var handler = function () {
	                        var innerArgs = [];
	                        for (var _i = 0; _i < arguments.length; _i++) {
	                            innerArgs[_i] = arguments[_i];
	                        }
	                        var err = innerArgs.shift();
	                        if (err) {
	                            subject.error(err);
	                            return;
	                        }
	                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    };
	                    try {
	                        callbackFunc.apply(context, args.concat([handler]));
	                    }
	                    catch (err) {
	                        if (canReportError(subject)) {
	                            subject.error(err);
	                        }
	                        else {
	                            console.warn(err);
	                        }
	                    }
	                }
	                return subject.subscribe(subscriber);
	            }
	            else {
	                return scheduler.schedule(dispatch$5, 0, { params: params, subscriber: subscriber, context: context });
	            }
	        });
	    };
	}
	function dispatch$5(state) {
	    var _this = this;
	    var params = state.params, subscriber = state.subscriber, context = state.context;
	    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
	    var subject = params.subject;
	    if (!subject) {
	        subject = params.subject = new AsyncSubject();
	        var handler = function () {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i] = arguments[_i];
	            }
	            var err = innerArgs.shift();
	            if (err) {
	                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
	            }
	            else {
	                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
	                _this.add(scheduler.schedule(dispatchNext$2, 0, { value: value, subject: subject }));
	            }
	        };
	        try {
	            callbackFunc.apply(context, args.concat([handler]));
	        }
	        catch (err) {
	            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
	        }
	    }
	    this.add(subject.subscribe(subscriber));
	}
	function dispatchNext$2(arg) {
	    var value = arg.value, subject = arg.subject;
	    subject.next(value);
	    subject.complete();
	}
	function dispatchError(arg) {
	    var err = arg.err, subject = arg.subject;
	    subject.error(err);
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var OuterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var InnerSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.outerValue = outerValue;
	        _this.outerIndex = outerIndex;
	        _this.index = 0;
	        return _this;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
	var subscribeToPromise = function (promise) {
	    return function (subscriber) {
	        promise.then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, hostReportError);
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function getSymbolIterator() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator = /*@__PURE__*/ getSymbolIterator();

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	var subscribeToIterable = function (iterable) {
	    return function (subscriber) {
	        var iterator$1 = iterable[iterator]();
	        do {
	            var item = void 0;
	            try {
	                item = iterator$1.next();
	            }
	            catch (err) {
	                subscriber.error(err);
	                return subscriber;
	            }
	            if (item.done) {
	                subscriber.complete();
	                break;
	            }
	            subscriber.next(item.value);
	            if (subscriber.closed) {
	                break;
	            }
	        } while (true);
	        if (typeof iterator$1.return === 'function') {
	            subscriber.add(function () {
	                if (iterator$1.return) {
	                    iterator$1.return();
	                }
	            });
	        }
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	var subscribeToObservable = function (obj) {
	    return function (subscriber) {
	        var obs = obj[observable]();
	        if (typeof obs.subscribe !== 'function') {
	            throw new TypeError('Provided object does not correctly implement Symbol.observable');
	        }
	        else {
	            return obs.subscribe(subscriber);
	        }
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isPromise(value) {
	    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}

	/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
	var subscribeTo = function (result) {
	    if (!!result && typeof result[observable] === 'function') {
	        return subscribeToObservable(result);
	    }
	    else if (isArrayLike(result)) {
	        return subscribeToArray(result);
	    }
	    else if (isPromise(result)) {
	        return subscribeToPromise(result);
	    }
	    else if (!!result && typeof result[iterator] === 'function') {
	        return subscribeToIterable(result);
	    }
	    else {
	        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = "You provided " + value + " where a stream was expected."
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        throw new TypeError(msg);
	    }
	};

	/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
	    if (innerSubscriber === void 0) {
	        innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    }
	    if (innerSubscriber.closed) {
	        return undefined;
	    }
	    if (result instanceof Observable) {
	        return result.subscribe(innerSubscriber);
	    }
	    return subscribeTo(result)(innerSubscriber);
	}

	/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
	var NONE = {};
	function combineLatest$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var resultSelector = undefined;
	    var scheduler = undefined;
	    if (isScheduler(observables[observables.length - 1])) {
	        scheduler = observables.pop();
	    }
	    if (typeof observables[observables.length - 1] === 'function') {
	        resultSelector = observables.pop();
	    }
	    if (observables.length === 1 && isArray(observables[0])) {
	        observables = observables[0];
	    }
	    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
	}
	var CombineLatestOperator = /*@__PURE__*/ (function () {
	    function CombineLatestOperator(resultSelector) {
	        this.resultSelector = resultSelector;
	    }
	    CombineLatestOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
	    };
	    return CombineLatestOperator;
	}());
	var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(CombineLatestSubscriber, _super);
	    function CombineLatestSubscriber(destination, resultSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.resultSelector = resultSelector;
	        _this.active = 0;
	        _this.values = [];
	        _this.observables = [];
	        return _this;
	    }
	    CombineLatestSubscriber.prototype._next = function (observable) {
	        this.values.push(NONE);
	        this.observables.push(observable);
	    };
	    CombineLatestSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            this.active = len;
	            this.toRespond = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(subscribeToResult(this, observable, undefined, i));
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
	        var values = this.values;
	        var oldVal = values[outerIndex];
	        var toRespond = !this.toRespond
	            ? 0
	            : oldVal === NONE ? --this.toRespond : this.toRespond;
	        values[outerIndex] = innerValue;
	        if (toRespond === 0) {
	            if (this.resultSelector) {
	                this._tryResultSelector(values);
	            }
	            else {
	                this.destination.next(values.slice());
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, values);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return CombineLatestSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
	function scheduleObservable(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            var observable$1 = input[observable]();
	            sub.add(observable$1.subscribe({
	                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
	                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
	                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
	            }));
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function schedulePromise(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            return input.then(function (value) {
	                sub.add(scheduler.schedule(function () {
	                    subscriber.next(value);
	                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
	                }));
	            }, function (err) {
	                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
	            });
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
	function scheduleIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var iterator$1;
	        sub.add(function () {
	            if (iterator$1 && typeof iterator$1.return === 'function') {
	                iterator$1.return();
	            }
	        });
	        sub.add(scheduler.schedule(function () {
	            iterator$1 = input[iterator]();
	            sub.add(scheduler.schedule(function () {
	                if (subscriber.closed) {
	                    return;
	                }
	                var value;
	                var done;
	                try {
	                    var result = iterator$1.next();
	                    value = result.value;
	                    done = result.done;
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                    this.schedule();
	                }
	            }));
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	function isInteropObservable(input) {
	    return input && typeof input[observable] === 'function';
	}

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	function isIterable(input) {
	    return input && typeof input[iterator] === 'function';
	}

	/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
	function scheduled(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return scheduleObservable(input, scheduler);
	        }
	        else if (isPromise(input)) {
	            return schedulePromise(input, scheduler);
	        }
	        else if (isArrayLike(input)) {
	            return scheduleArray(input, scheduler);
	        }
	        else if (isIterable(input) || typeof input === 'string') {
	            return scheduleIterable(input, scheduler);
	        }
	    }
	    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
	}

	/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
	function from(input, scheduler) {
	    if (!scheduler) {
	        if (input instanceof Observable) {
	            return input;
	        }
	        return new Observable(subscribeTo(input));
	    }
	    else {
	        return scheduled(input, scheduler);
	    }
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_util_subscribeTo PURE_IMPORTS_END */
	var SimpleInnerSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SimpleInnerSubscriber, _super);
	    function SimpleInnerSubscriber(parent) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        return _this;
	    }
	    SimpleInnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(value);
	    };
	    SimpleInnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error);
	        this.unsubscribe();
	    };
	    SimpleInnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete();
	        this.unsubscribe();
	    };
	    return SimpleInnerSubscriber;
	}(Subscriber));
	var SimpleOuterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SimpleOuterSubscriber, _super);
	    function SimpleOuterSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SimpleOuterSubscriber.prototype.notifyNext = function (innerValue) {
	        this.destination.next(innerValue);
	    };
	    SimpleOuterSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SimpleOuterSubscriber.prototype.notifyComplete = function () {
	        this.destination.complete();
	    };
	    return SimpleOuterSubscriber;
	}(Subscriber));
	function innerSubscribe(result, innerSubscriber) {
	    if (innerSubscriber.closed) {
	        return undefined;
	    }
	    if (result instanceof Observable) {
	        return result.subscribe(innerSubscriber);
	    }
	    var subscription;
	    try {
	        subscription = subscribeTo(result)(innerSubscriber);
	    }
	    catch (error) {
	        innerSubscriber.error(error);
	    }
	    return subscription;
	}

	/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
	}
	var MergeMapOperator = /*@__PURE__*/ (function () {
	    function MergeMapOperator(project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        this.project = project;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish) {
	        var innerSubscriber = new SimpleInnerSubscriber(this);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = innerSubscribe(ish, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {
	        this.destination.next(innerValue);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function () {
	        var buffer = this.buffer;
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(SimpleOuterSubscriber));
	var flatMap = mergeMap;

	/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return mergeMap(identity, concurrent);
	}

	/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
	function concatAll() {
	    return mergeAll(1);
	}

	/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
	function concat$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return concatAll()(of.apply(void 0, observables));
	}

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
	function defer(observableFactory) {
	    return new Observable(function (subscriber) {
	        var input;
	        try {
	            input = observableFactory();
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var source = input ? from(input) : empty();
	        return source.subscribe(subscriber);
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */
	function forkJoin() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    if (sources.length === 1) {
	        var first_1 = sources[0];
	        if (isArray(first_1)) {
	            return forkJoinInternal(first_1, null);
	        }
	        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
	            var keys = Object.keys(first_1);
	            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
	        }
	    }
	    if (typeof sources[sources.length - 1] === 'function') {
	        var resultSelector_1 = sources.pop();
	        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;
	        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));
	    }
	    return forkJoinInternal(sources, null);
	}
	function forkJoinInternal(sources, keys) {
	    return new Observable(function (subscriber) {
	        var len = sources.length;
	        if (len === 0) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(len);
	        var completed = 0;
	        var emitted = 0;
	        var _loop_1 = function (i) {
	            var source = from(sources[i]);
	            var hasValue = false;
	            subscriber.add(source.subscribe({
	                next: function (value) {
	                    if (!hasValue) {
	                        hasValue = true;
	                        emitted++;
	                    }
	                    values[i] = value;
	                },
	                error: function (err) { return subscriber.error(err); },
	                complete: function () {
	                    completed++;
	                    if (completed === len || !hasValue) {
	                        if (emitted === len) {
	                            subscriber.next(keys ?
	                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
	                                values);
	                        }
	                        subscriber.complete();
	                    }
	                }
	            }));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
	function fromEvent(target, eventName, options, resultSelector) {
	    if (isFunction(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	    }
	    return new Observable(function (subscriber) {
	        function handler(e) {
	            if (arguments.length > 1) {
	                subscriber.next(Array.prototype.slice.call(arguments));
	            }
	            else {
	                subscriber.next(e);
	            }
	        }
	        setupSubscription(target, eventName, handler, subscriber, options);
	    });
	}
	function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
	    var unsubscribe;
	    if (isEventTarget(sourceObj)) {
	        var source_1 = sourceObj;
	        sourceObj.addEventListener(eventName, handler, options);
	        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
	    }
	    else if (isJQueryStyleEventEmitter(sourceObj)) {
	        var source_2 = sourceObj;
	        sourceObj.on(eventName, handler);
	        unsubscribe = function () { return source_2.off(eventName, handler); };
	    }
	    else if (isNodeStyleEventEmitter(sourceObj)) {
	        var source_3 = sourceObj;
	        sourceObj.addListener(eventName, handler);
	        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	    }
	    else if (sourceObj && sourceObj.length) {
	        for (var i = 0, len = sourceObj.length; i < len; i++) {
	            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	        }
	    }
	    else {
	        throw new TypeError('Invalid event target');
	    }
	    subscriber.add(unsubscribe);
	}
	function isNodeStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isEventTarget(sourceObj) {
	    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
	function fromEventPattern(addHandler, removeHandler, resultSelector) {
	    if (resultSelector) {
	        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	    }
	    return new Observable(function (subscriber) {
	        var handler = function () {
	            var e = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                e[_i] = arguments[_i];
	            }
	            return subscriber.next(e.length === 1 ? e[0] : e);
	        };
	        var retValue;
	        try {
	            retValue = addHandler(handler);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        if (!isFunction(removeHandler)) {
	            return undefined;
	        }
	        return function () { return removeHandler(handler, retValue); };
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */
	function generate$2(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
	    var resultSelector;
	    var initialState;
	    if (arguments.length == 1) {
	        var options = initialStateOrOptions;
	        initialState = options.initialState;
	        condition = options.condition;
	        iterate = options.iterate;
	        resultSelector = options.resultSelector || identity;
	        scheduler = options.scheduler;
	    }
	    else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {
	        initialState = initialStateOrOptions;
	        resultSelector = identity;
	        scheduler = resultSelectorOrObservable;
	    }
	    else {
	        initialState = initialStateOrOptions;
	        resultSelector = resultSelectorOrObservable;
	    }
	    return new Observable(function (subscriber) {
	        var state = initialState;
	        if (scheduler) {
	            return scheduler.schedule(dispatch$4, 0, {
	                subscriber: subscriber,
	                iterate: iterate,
	                condition: condition,
	                resultSelector: resultSelector,
	                state: state
	            });
	        }
	        do {
	            if (condition) {
	                var conditionResult = void 0;
	                try {
	                    conditionResult = condition(state);
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return undefined;
	                }
	                if (!conditionResult) {
	                    subscriber.complete();
	                    break;
	                }
	            }
	            var value = void 0;
	            try {
	                value = resultSelector(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return undefined;
	            }
	            subscriber.next(value);
	            if (subscriber.closed) {
	                break;
	            }
	            try {
	                state = iterate(state);
	            }
	            catch (err) {
	                subscriber.error(err);
	                return undefined;
	            }
	        } while (true);
	        return undefined;
	    });
	}
	function dispatch$4(state) {
	    var subscriber = state.subscriber, condition = state.condition;
	    if (subscriber.closed) {
	        return undefined;
	    }
	    if (state.needIterate) {
	        try {
	            state.state = state.iterate(state.state);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	    }
	    else {
	        state.needIterate = true;
	    }
	    if (condition) {
	        var conditionResult = void 0;
	        try {
	            conditionResult = condition(state.state);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        if (!conditionResult) {
	            subscriber.complete();
	            return undefined;
	        }
	        if (subscriber.closed) {
	            return undefined;
	        }
	    }
	    var value;
	    try {
	        value = state.resultSelector(state.state);
	    }
	    catch (err) {
	        subscriber.error(err);
	        return undefined;
	    }
	    if (subscriber.closed) {
	        return undefined;
	    }
	    subscriber.next(value);
	    if (subscriber.closed) {
	        return undefined;
	    }
	    return this.schedule(state);
	}

	/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */
	function iif(condition, trueResult, falseResult) {
	    if (trueResult === void 0) {
	        trueResult = EMPTY;
	    }
	    if (falseResult === void 0) {
	        falseResult = EMPTY;
	    }
	    return defer(function () { return condition() ? trueResult : falseResult; });
	}

	/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
	function isNumeric(val) {
	    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
	}

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
	function interval(period, scheduler) {
	    if (period === void 0) {
	        period = 0;
	    }
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    if (!isNumeric(period) || period < 0) {
	        period = 0;
	    }
	    if (!scheduler || typeof scheduler.schedule !== 'function') {
	        scheduler = async;
	    }
	    return new Observable(function (subscriber) {
	        subscriber.add(scheduler.schedule(dispatch$3, period, { subscriber: subscriber, counter: 0, period: period }));
	        return subscriber;
	    });
	}
	function dispatch$3(state) {
	    var subscriber = state.subscriber, counter = state.counter, period = state.period;
	    subscriber.next(counter);
	    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
	}

	/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
	function merge$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
	        return observables[0];
	    }
	    return mergeAll(concurrent)(fromArray(observables, scheduler));
	}

	/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
	var NEVER = /*@__PURE__*/ new Observable(noop);
	function never() {
	    return NEVER;
	}

	/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */
	function onErrorResumeNext$1() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    if (sources.length === 0) {
	        return EMPTY;
	    }
	    var first = sources[0], remainder = sources.slice(1);
	    if (sources.length === 1 && isArray(first)) {
	        return onErrorResumeNext$1.apply(void 0, first);
	    }
	    return new Observable(function (subscriber) {
	        var subNext = function () { return subscriber.add(onErrorResumeNext$1.apply(void 0, remainder).subscribe(subscriber)); };
	        return from(first).subscribe({
	            next: function (value) { subscriber.next(value); },
	            error: subNext,
	            complete: subNext,
	        });
	    });
	}

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function pairs(obj, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) {
	            var keys = Object.keys(obj);
	            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
	                var key = keys[i];
	                if (obj.hasOwnProperty(key)) {
	                    subscriber.next([key, obj[key]]);
	                }
	            }
	            subscriber.complete();
	        });
	    }
	    else {
	        return new Observable(function (subscriber) {
	            var keys = Object.keys(obj);
	            var subscription = new Subscription();
	            subscription.add(scheduler.schedule(dispatch$2, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
	            return subscription;
	        });
	    }
	}
	function dispatch$2(state) {
	    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
	    if (!subscriber.closed) {
	        if (index < keys.length) {
	            var key = keys[index];
	            subscriber.next([key, obj[key]]);
	            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
	        }
	        else {
	            subscriber.complete();
	        }
	    }
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function not(pred, thisArg) {
	    function notPred() {
	        return !(notPred.pred.apply(notPred.thisArg, arguments));
	    }
	    notPred.pred = pred;
	    notPred.thisArg = thisArg;
	    return notPred;
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function filter(predicate, thisArg) {
	    return function filterOperatorFunction(source) {
	        return source.lift(new FilterOperator(predicate, thisArg));
	    };
	}
	var FilterOperator = /*@__PURE__*/ (function () {
	    function FilterOperator(predicate, thisArg) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
	    };
	    return FilterOperator;
	}());
	var FilterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.count = 0;
	        return _this;
	    }
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */
	function partition$1(source, predicate, thisArg) {
	    return [
	        filter(predicate, thisArg)(new Observable(subscribeTo(source))),
	        filter(not(predicate, thisArg))(new Observable(subscribeTo(source)))
	    ];
	}

	/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function race$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    if (observables.length === 1) {
	        if (isArray(observables[0])) {
	            observables = observables[0];
	        }
	        else {
	            return observables[0];
	        }
	    }
	    return fromArray(observables, undefined).lift(new RaceOperator());
	}
	var RaceOperator = /*@__PURE__*/ (function () {
	    function RaceOperator() {
	    }
	    RaceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RaceSubscriber(subscriber));
	    };
	    return RaceOperator;
	}());
	var RaceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RaceSubscriber, _super);
	    function RaceSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasFirst = false;
	        _this.observables = [];
	        _this.subscriptions = [];
	        return _this;
	    }
	    RaceSubscriber.prototype._next = function (observable) {
	        this.observables.push(observable);
	    };
	    RaceSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            for (var i = 0; i < len && !this.hasFirst; i++) {
	                var observable = observables[i];
	                var subscription = subscribeToResult(this, observable, undefined, i);
	                if (this.subscriptions) {
	                    this.subscriptions.push(subscription);
	                }
	                this.add(subscription);
	            }
	            this.observables = null;
	        }
	    };
	    RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
	        if (!this.hasFirst) {
	            this.hasFirst = true;
	            for (var i = 0; i < this.subscriptions.length; i++) {
	                if (i !== outerIndex) {
	                    var subscription = this.subscriptions[i];
	                    subscription.unsubscribe();
	                    this.remove(subscription);
	                }
	            }
	            this.subscriptions = null;
	        }
	        this.destination.next(innerValue);
	    };
	    return RaceSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function range(start, count, scheduler) {
	    if (start === void 0) {
	        start = 0;
	    }
	    return new Observable(function (subscriber) {
	        if (count === undefined) {
	            count = start;
	            start = 0;
	        }
	        var index = 0;
	        var current = start;
	        if (scheduler) {
	            return scheduler.schedule(dispatch$1, 0, {
	                index: index, count: count, start: start, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                if (index++ >= count) {
	                    subscriber.complete();
	                    break;
	                }
	                subscriber.next(current++);
	                if (subscriber.closed) {
	                    break;
	                }
	            } while (true);
	        }
	        return undefined;
	    });
	}
	function dispatch$1(state) {
	    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
	    if (index >= count) {
	        subscriber.complete();
	        return;
	    }
	    subscriber.next(start);
	    if (subscriber.closed) {
	        return;
	    }
	    state.index = index + 1;
	    state.start = start + 1;
	    this.schedule(state);
	}

	/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
	function timer(dueTime, periodOrScheduler, scheduler) {
	    if (dueTime === void 0) {
	        dueTime = 0;
	    }
	    var period = -1;
	    if (isNumeric(periodOrScheduler)) {
	        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
	    }
	    else if (isScheduler(periodOrScheduler)) {
	        scheduler = periodOrScheduler;
	    }
	    if (!isScheduler(scheduler)) {
	        scheduler = async;
	    }
	    return new Observable(function (subscriber) {
	        var due = isNumeric(dueTime)
	            ? dueTime
	            : (+dueTime - scheduler.now());
	        return scheduler.schedule(dispatch, due, {
	            index: 0, period: period, subscriber: subscriber
	        });
	    });
	}
	function dispatch(state) {
	    var index = state.index, period = state.period, subscriber = state.subscriber;
	    subscriber.next(index);
	    if (subscriber.closed) {
	        return;
	    }
	    else if (period === -1) {
	        return subscriber.complete();
	    }
	    state.index = index + 1;
	    this.schedule(state, period);
	}

	/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
	function using(resourceFactory, observableFactory) {
	    return new Observable(function (subscriber) {
	        var resource;
	        try {
	            resource = resourceFactory();
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var result;
	        try {
	            result = observableFactory(resource);
	        }
	        catch (err) {
	            subscriber.error(err);
	            return undefined;
	        }
	        var source = result ? from(result) : EMPTY;
	        var subscription = source.subscribe(subscriber);
	        return function () {
	            subscription.unsubscribe();
	            if (resource) {
	                resource.unsubscribe();
	            }
	        };
	    });
	}

	/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_.._internal_symbol_iterator,_innerSubscribe PURE_IMPORTS_END */
	function zip$1() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var resultSelector = observables[observables.length - 1];
	    if (typeof resultSelector === 'function') {
	        observables.pop();
	    }
	    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
	}
	var ZipOperator = /*@__PURE__*/ (function () {
	    function ZipOperator(resultSelector) {
	        this.resultSelector = resultSelector;
	    }
	    ZipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
	    };
	    return ZipOperator;
	}());
	var ZipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ZipSubscriber, _super);
	    function ZipSubscriber(destination, resultSelector, values) {
	        var _this = _super.call(this, destination) || this;
	        _this.resultSelector = resultSelector;
	        _this.iterators = [];
	        _this.active = 0;
	        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;
	        return _this;
	    }
	    ZipSubscriber.prototype._next = function (value) {
	        var iterators = this.iterators;
	        if (isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        }
	        else if (typeof value[iterator] === 'function') {
	            iterators.push(new StaticIterator(value[iterator]()));
	        }
	        else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value));
	        }
	    };
	    ZipSubscriber.prototype._complete = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        this.unsubscribe();
	        if (len === 0) {
	            this.destination.complete();
	            return;
	        }
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (iterator.stillUnsubscribed) {
	                var destination = this.destination;
	                destination.add(iterator.subscribe());
	            }
	            else {
	                this.active--;
	            }
	        }
	    };
	    ZipSubscriber.prototype.notifyInactive = function () {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ZipSubscriber.prototype.checkIterators = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            var result = iterator.next();
	            if (iterator.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        if (this.resultSelector) {
	            this._tryresultSelector(args);
	        }
	        else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };
	    ZipSubscriber.prototype._tryresultSelector = function (args) {
	        var result;
	        try {
	            result = this.resultSelector.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return ZipSubscriber;
	}(Subscriber));
	var StaticIterator = /*@__PURE__*/ (function () {
	    function StaticIterator(iterator) {
	        this.iterator = iterator;
	        this.nextResult = iterator.next();
	    }
	    StaticIterator.prototype.hasValue = function () {
	        return true;
	    };
	    StaticIterator.prototype.next = function () {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };
	    StaticIterator.prototype.hasCompleted = function () {
	        var nextResult = this.nextResult;
	        return Boolean(nextResult && nextResult.done);
	    };
	    return StaticIterator;
	}());
	var StaticArrayIterator = /*@__PURE__*/ (function () {
	    function StaticArrayIterator(array) {
	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }
	    StaticArrayIterator.prototype[iterator] = function () {
	        return this;
	    };
	    StaticArrayIterator.prototype.next = function (value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
	    };
	    StaticArrayIterator.prototype.hasValue = function () {
	        return this.array.length > this.index;
	    };
	    StaticArrayIterator.prototype.hasCompleted = function () {
	        return this.array.length === this.index;
	    };
	    return StaticArrayIterator;
	}());
	var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
	    __extends$1(ZipBufferIterator, _super);
	    function ZipBufferIterator(destination, parent, observable) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        _this.observable = observable;
	        _this.stillUnsubscribed = true;
	        _this.buffer = [];
	        _this.isComplete = false;
	        return _this;
	    }
	    ZipBufferIterator.prototype[iterator] = function () {
	        return this;
	    };
	    ZipBufferIterator.prototype.next = function () {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { value: null, done: true };
	        }
	        else {
	            return { value: buffer.shift(), done: false };
	        }
	    };
	    ZipBufferIterator.prototype.hasValue = function () {
	        return this.buffer.length > 0;
	    };
	    ZipBufferIterator.prototype.hasCompleted = function () {
	        return this.buffer.length === 0 && this.isComplete;
	    };
	    ZipBufferIterator.prototype.notifyComplete = function () {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ZipBufferIterator.prototype.notifyNext = function (innerValue) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };
	    ZipBufferIterator.prototype.subscribe = function () {
	        return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));
	    };
	    return ZipBufferIterator;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	var _esm5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Observable: Observable,
		ConnectableObservable: ConnectableObservable,
		GroupedObservable: GroupedObservable,
		observable: observable,
		Subject: Subject,
		BehaviorSubject: BehaviorSubject,
		ReplaySubject: ReplaySubject,
		AsyncSubject: AsyncSubject,
		asap: asap,
		asapScheduler: asapScheduler,
		async: async,
		asyncScheduler: asyncScheduler,
		queue: queue,
		queueScheduler: queueScheduler,
		animationFrame: animationFrame,
		animationFrameScheduler: animationFrameScheduler,
		VirtualTimeScheduler: VirtualTimeScheduler,
		VirtualAction: VirtualAction,
		Scheduler: Scheduler,
		Subscription: Subscription,
		Subscriber: Subscriber,
		Notification: Notification,
		get NotificationKind () { return NotificationKind; },
		pipe: pipe,
		noop: noop,
		identity: identity,
		isObservable: isObservable,
		ArgumentOutOfRangeError: ArgumentOutOfRangeError,
		EmptyError: EmptyError,
		ObjectUnsubscribedError: ObjectUnsubscribedError,
		UnsubscriptionError: UnsubscriptionError,
		TimeoutError: TimeoutError,
		bindCallback: bindCallback,
		bindNodeCallback: bindNodeCallback,
		combineLatest: combineLatest$1,
		concat: concat$1,
		defer: defer,
		empty: empty,
		forkJoin: forkJoin,
		from: from,
		fromEvent: fromEvent,
		fromEventPattern: fromEventPattern,
		generate: generate$2,
		iif: iif,
		interval: interval,
		merge: merge$1,
		never: never,
		of: of,
		onErrorResumeNext: onErrorResumeNext$1,
		pairs: pairs,
		partition: partition$1,
		race: race$1,
		range: range,
		throwError: throwError,
		timer: timer,
		using: using,
		zip: zip$1,
		scheduled: scheduled,
		EMPTY: EMPTY,
		NEVER: NEVER,
		config: config
	});

	var require$$4 = /*@__PURE__*/getAugmentedNamespace(_esm5);

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function audit(durationSelector) {
	    return function auditOperatorFunction(source) {
	        return source.lift(new AuditOperator(durationSelector));
	    };
	}
	var AuditOperator = /*@__PURE__*/ (function () {
	    function AuditOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    AuditOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
	    };
	    return AuditOperator;
	}());
	var AuditSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(AuditSubscriber, _super);
	    function AuditSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        return _this;
	    }
	    AuditSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	        if (!this.throttled) {
	            var duration = void 0;
	            try {
	                var durationSelector = this.durationSelector;
	                duration = durationSelector(value);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	            var innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));
	            if (!innerSubscription || innerSubscription.closed) {
	                this.clearThrottle();
	            }
	            else {
	                this.add(this.throttled = innerSubscription);
	            }
	        }
	    };
	    AuditSubscriber.prototype.clearThrottle = function () {
	        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
	        if (throttled) {
	            this.remove(throttled);
	            this.throttled = undefined;
	            throttled.unsubscribe();
	        }
	        if (hasValue) {
	            this.value = undefined;
	            this.hasValue = false;
	            this.destination.next(value);
	        }
	    };
	    AuditSubscriber.prototype.notifyNext = function () {
	        this.clearThrottle();
	    };
	    AuditSubscriber.prototype.notifyComplete = function () {
	        this.clearThrottle();
	    };
	    return AuditSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */
	function auditTime(duration, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return audit(function () { return timer(duration, scheduler); });
	}

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function buffer(closingNotifier) {
	    return function bufferOperatorFunction(source) {
	        return source.lift(new BufferOperator(closingNotifier));
	    };
	}
	var BufferOperator = /*@__PURE__*/ (function () {
	    function BufferOperator(closingNotifier) {
	        this.closingNotifier = closingNotifier;
	    }
	    BufferOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
	    };
	    return BufferOperator;
	}());
	var BufferSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferSubscriber, _super);
	    function BufferSubscriber(destination, closingNotifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.buffer = [];
	        _this.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(_this)));
	        return _this;
	    }
	    BufferSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferSubscriber.prototype.notifyNext = function () {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	    };
	    return BufferSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function bufferCount(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) {
	        startBufferEvery = null;
	    }
	    return function bufferCountOperatorFunction(source) {
	        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
	    };
	}
	var BufferCountOperator = /*@__PURE__*/ (function () {
	    function BufferCountOperator(bufferSize, startBufferEvery) {
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	        if (!startBufferEvery || bufferSize === startBufferEvery) {
	            this.subscriberClass = BufferCountSubscriber;
	        }
	        else {
	            this.subscriberClass = BufferSkipCountSubscriber;
	        }
	    }
	    BufferCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
	    };
	    return BufferCountOperator;
	}());
	var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferCountSubscriber, _super);
	    function BufferCountSubscriber(destination, bufferSize) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.buffer = [];
	        return _this;
	    }
	    BufferCountSubscriber.prototype._next = function (value) {
	        var buffer = this.buffer;
	        buffer.push(value);
	        if (buffer.length == this.bufferSize) {
	            this.destination.next(buffer);
	            this.buffer = [];
	        }
	    };
	    BufferCountSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer.length > 0) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferCountSubscriber;
	}(Subscriber));
	var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferSkipCountSubscriber, _super);
	    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferSize = bufferSize;
	        _this.startBufferEvery = startBufferEvery;
	        _this.buffers = [];
	        _this.count = 0;
	        return _this;
	    }
	    BufferSkipCountSubscriber.prototype._next = function (value) {
	        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
	        this.count++;
	        if (count % startBufferEvery === 0) {
	            buffers.push([]);
	        }
	        for (var i = buffers.length; i--;) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                buffers.splice(i, 1);
	                this.destination.next(buffer);
	            }
	        }
	    };
	    BufferSkipCountSubscriber.prototype._complete = function () {
	        var _a = this, buffers = _a.buffers, destination = _a.destination;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    return BufferSkipCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
	function bufferTime(bufferTimeSpan) {
	    var length = arguments.length;
	    var scheduler = async;
	    if (isScheduler(arguments[arguments.length - 1])) {
	        scheduler = arguments[arguments.length - 1];
	        length--;
	    }
	    var bufferCreationInterval = null;
	    if (length >= 2) {
	        bufferCreationInterval = arguments[1];
	    }
	    var maxBufferSize = Number.POSITIVE_INFINITY;
	    if (length >= 3) {
	        maxBufferSize = arguments[2];
	    }
	    return function bufferTimeOperatorFunction(source) {
	        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
	    };
	}
	var BufferTimeOperator = /*@__PURE__*/ (function () {
	    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.maxBufferSize = maxBufferSize;
	        this.scheduler = scheduler;
	    }
	    BufferTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
	    };
	    return BufferTimeOperator;
	}());
	var Context = /*@__PURE__*/ (function () {
	    function Context() {
	        this.buffer = [];
	    }
	    return Context;
	}());
	var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferTimeSubscriber, _super);
	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.bufferTimeSpan = bufferTimeSpan;
	        _this.bufferCreationInterval = bufferCreationInterval;
	        _this.maxBufferSize = maxBufferSize;
	        _this.scheduler = scheduler;
	        _this.contexts = [];
	        var context = _this.openContext();
	        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
	        if (_this.timespanOnly) {
	            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	        else {
	            var closeState = { subscriber: _this, context: context };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        }
	        return _this;
	    }
	    BufferTimeSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        var filledBufferContext;
	        for (var i = 0; i < len; i++) {
	            var context_1 = contexts[i];
	            var buffer = context_1.buffer;
	            buffer.push(value);
	            if (buffer.length == this.maxBufferSize) {
	                filledBufferContext = context_1;
	            }
	        }
	        if (filledBufferContext) {
	            this.onBufferFull(filledBufferContext);
	        }
	    };
	    BufferTimeSubscriber.prototype._error = function (err) {
	        this.contexts.length = 0;
	        _super.prototype._error.call(this, err);
	    };
	    BufferTimeSubscriber.prototype._complete = function () {
	        var _a = this, contexts = _a.contexts, destination = _a.destination;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            destination.next(context_2.buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferTimeSubscriber.prototype._unsubscribe = function () {
	        this.contexts = null;
	    };
	    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
	        this.closeContext(context);
	        var closeAction = context.closeAction;
	        closeAction.unsubscribe();
	        this.remove(closeAction);
	        if (!this.closed && this.timespanOnly) {
	            context = this.openContext();
	            var bufferTimeSpan = this.bufferTimeSpan;
	            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
	            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    };
	    BufferTimeSubscriber.prototype.openContext = function () {
	        var context = new Context();
	        this.contexts.push(context);
	        return context;
	    };
	    BufferTimeSubscriber.prototype.closeContext = function (context) {
	        this.destination.next(context.buffer);
	        var contexts = this.contexts;
	        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
	        if (spliceIndex >= 0) {
	            contexts.splice(contexts.indexOf(context), 1);
	        }
	    };
	    return BufferTimeSubscriber;
	}(Subscriber));
	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevContext = state.context;
	    if (prevContext) {
	        subscriber.closeContext(prevContext);
	    }
	    if (!subscriber.closed) {
	        state.context = subscriber.openContext();
	        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
	    var context = subscriber.openContext();
	    var action = this;
	    if (!subscriber.closed) {
	        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(arg) {
	    var subscriber = arg.subscriber, context = arg.context;
	    subscriber.closeContext(context);
	}

	/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
	function bufferToggle(openings, closingSelector) {
	    return function bufferToggleOperatorFunction(source) {
	        return source.lift(new BufferToggleOperator(openings, closingSelector));
	    };
	}
	var BufferToggleOperator = /*@__PURE__*/ (function () {
	    function BufferToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    BufferToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return BufferToggleOperator;
	}());
	var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferToggleSubscriber, _super);
	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(subscribeToResult(_this, openings));
	        return _this;
	    }
	    BufferToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };
	    BufferToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_1 = contexts.shift();
	            context_1.subscription.unsubscribe();
	            context_1.buffer = null;
	            context_1.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._error.call(this, err);
	    };
	    BufferToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context_2 = contexts.shift();
	            this.destination.next(context_2.buffer);
	            context_2.subscription.unsubscribe();
	            context_2.buffer = null;
	            context_2.subscription = null;
	        }
	        this.contexts = null;
	        _super.prototype._complete.call(this);
	    };
	    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
	        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
	    };
	    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.closeBuffer(innerSub.context);
	    };
	    BufferToggleSubscriber.prototype.openBuffer = function (value) {
	        try {
	            var closingSelector = this.closingSelector;
	            var closingNotifier = closingSelector.call(this, value);
	            if (closingNotifier) {
	                this.trySubscribe(closingNotifier);
	            }
	        }
	        catch (err) {
	            this._error(err);
	        }
	    };
	    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
	        var contexts = this.contexts;
	        if (contexts && context) {
	            var buffer = context.buffer, subscription = context.subscription;
	            this.destination.next(buffer);
	            contexts.splice(contexts.indexOf(context), 1);
	            this.remove(subscription);
	            subscription.unsubscribe();
	        }
	    };
	    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
	        var contexts = this.contexts;
	        var buffer = [];
	        var subscription = new Subscription();
	        var context = { buffer: buffer, subscription: subscription };
	        contexts.push(context);
	        var innerSubscription = subscribeToResult(this, closingNotifier, context);
	        if (!innerSubscription || innerSubscription.closed) {
	            this.closeBuffer(context);
	        }
	        else {
	            innerSubscription.context = context;
	            this.add(innerSubscription);
	            subscription.add(innerSubscription);
	        }
	    };
	    return BufferToggleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscription,_innerSubscribe PURE_IMPORTS_END */
	function bufferWhen(closingSelector) {
	    return function (source) {
	        return source.lift(new BufferWhenOperator(closingSelector));
	    };
	}
	var BufferWhenOperator = /*@__PURE__*/ (function () {
	    function BufferWhenOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    BufferWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
	    };
	    return BufferWhenOperator;
	}());
	var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(BufferWhenSubscriber, _super);
	    function BufferWhenSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.closingSelector = closingSelector;
	        _this.subscribing = false;
	        _this.openBuffer();
	        return _this;
	    }
	    BufferWhenSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferWhenSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        _super.prototype._complete.call(this);
	    };
	    BufferWhenSubscriber.prototype._unsubscribe = function () {
	        this.buffer = undefined;
	        this.subscribing = false;
	    };
	    BufferWhenSubscriber.prototype.notifyNext = function () {
	        this.openBuffer();
	    };
	    BufferWhenSubscriber.prototype.notifyComplete = function () {
	        if (this.subscribing) {
	            this.complete();
	        }
	        else {
	            this.openBuffer();
	        }
	    };
	    BufferWhenSubscriber.prototype.openBuffer = function () {
	        var closingSubscription = this.closingSubscription;
	        if (closingSubscription) {
	            this.remove(closingSubscription);
	            closingSubscription.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (this.buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier;
	        try {
	            var closingSelector = this.closingSelector;
	            closingNotifier = closingSelector();
	        }
	        catch (err) {
	            return this.error(err);
	        }
	        closingSubscription = new Subscription();
	        this.closingSubscription = closingSubscription;
	        this.add(closingSubscription);
	        this.subscribing = true;
	        closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));
	        this.subscribing = false;
	    };
	    return BufferWhenSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function catchError(selector) {
	    return function catchErrorOperatorFunction(source) {
	        var operator = new CatchOperator(selector);
	        var caught = source.lift(operator);
	        return (operator.caught = caught);
	    };
	}
	var CatchOperator = /*@__PURE__*/ (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
	    };
	    return CatchOperator;
	}());
	var CatchSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        var _this = _super.call(this, destination) || this;
	        _this.selector = selector;
	        _this.caught = caught;
	        return _this;
	    }
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err2) {
	                _super.prototype.error.call(this, err2);
	                return;
	            }
	            this._unsubscribeAndRecycle();
	            var innerSubscriber = new SimpleInnerSubscriber(this);
	            this.add(innerSubscriber);
	            var innerSubscription = innerSubscribe(result, innerSubscriber);
	            if (innerSubscription !== innerSubscriber) {
	                this.add(innerSubscription);
	            }
	        }
	    };
	    return CatchSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */
	function combineAll(project) {
	    return function (source) { return source.lift(new CombineLatestOperator(project)); };
	}

	/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var project = null;
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    if (observables.length === 1 && isArray(observables[0])) {
	        observables = observables[0].slice();
	    }
	    return function (source) { return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project)); };
	}

	/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function (source) { return source.lift.call(concat$1.apply(void 0, [source].concat(observables))); };
	}

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
	function concatMap(project, resultSelector) {
	    return mergeMap(project, resultSelector, 1);
	}

	/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */
	function concatMapTo(innerObservable, resultSelector) {
	    return concatMap(function () { return innerObservable; }, resultSelector);
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function count(predicate) {
	    return function (source) { return source.lift(new CountOperator(predicate, source)); };
	}
	var CountOperator = /*@__PURE__*/ (function () {
	    function CountOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    CountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
	    };
	    return CountOperator;
	}());
	var CountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(CountSubscriber, _super);
	    function CountSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.count = 0;
	        _this.index = 0;
	        return _this;
	    }
	    CountSubscriber.prototype._next = function (value) {
	        if (this.predicate) {
	            this._tryPredicate(value);
	        }
	        else {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._tryPredicate = function (value) {
	        var result;
	        try {
	            result = this.predicate(value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.count++;
	        }
	    };
	    CountSubscriber.prototype._complete = function () {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };
	    return CountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function debounce(durationSelector) {
	    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };
	}
	var DebounceOperator = /*@__PURE__*/ (function () {
	    function DebounceOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    DebounceOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
	    };
	    return DebounceOperator;
	}());
	var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DebounceSubscriber, _super);
	    function DebounceSubscriber(destination, durationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.durationSelector = durationSelector;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceSubscriber.prototype._next = function (value) {
	        try {
	            var result = this.durationSelector.call(this, value);
	            if (result) {
	                this._tryNext(value, result);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DebounceSubscriber.prototype._complete = function () {
	        this.emitValue();
	        this.destination.complete();
	    };
	    DebounceSubscriber.prototype._tryNext = function (value, duration) {
	        var subscription = this.durationSubscription;
	        this.value = value;
	        this.hasValue = true;
	        if (subscription) {
	            subscription.unsubscribe();
	            this.remove(subscription);
	        }
	        subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));
	        if (subscription && !subscription.closed) {
	            this.add(this.durationSubscription = subscription);
	        }
	    };
	    DebounceSubscriber.prototype.notifyNext = function () {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    DebounceSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            var value = this.value;
	            var subscription = this.durationSubscription;
	            if (subscription) {
	                this.durationSubscription = undefined;
	                subscription.unsubscribe();
	                this.remove(subscription);
	            }
	            this.value = undefined;
	            this.hasValue = false;
	            _super.prototype._next.call(this, value);
	        }
	    };
	    return DebounceSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
	}
	var DebounceTimeOperator = /*@__PURE__*/ (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
	    };
	    return DebounceTimeOperator;
	}());
	var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.dueTime = dueTime;
	        _this.scheduler = scheduler;
	        _this.debouncedSubscription = null;
	        _this.lastValue = null;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$1, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            var lastValue = this.lastValue;
	            this.lastValue = null;
	            this.hasValue = false;
	            this.destination.next(lastValue);
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber));
	function dispatchNext$1(subscriber) {
	    subscriber.debouncedNext();
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function defaultIfEmpty(defaultValue) {
	    if (defaultValue === void 0) {
	        defaultValue = null;
	    }
	    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };
	}
	var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
	    function DefaultIfEmptyOperator(defaultValue) {
	        this.defaultValue = defaultValue;
	    }
	    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
	    };
	    return DefaultIfEmptyOperator;
	}());
	var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DefaultIfEmptySubscriber, _super);
	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        var _this = _super.call(this, destination) || this;
	        _this.defaultValue = defaultValue;
	        _this.isEmpty = true;
	        return _this;
	    }
	    DefaultIfEmptySubscriber.prototype._next = function (value) {
	        this.isEmpty = false;
	        this.destination.next(value);
	    };
	    DefaultIfEmptySubscriber.prototype._complete = function () {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };
	    return DefaultIfEmptySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isDate(value) {
	    return value instanceof Date && !isNaN(+value);
	}

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
	function delay(delay, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    var absoluteDelay = isDate(delay);
	    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
	    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };
	}
	var DelayOperator = /*@__PURE__*/ (function () {
	    function DelayOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    DelayOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
	    };
	    return DelayOperator;
	}());
	var DelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DelaySubscriber, _super);
	    function DelaySubscriber(destination, delay, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.delay = delay;
	        _this.scheduler = scheduler;
	        _this.queue = [];
	        _this.active = false;
	        _this.errored = false;
	        return _this;
	    }
	    DelaySubscriber.dispatch = function (state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, delay_1);
	        }
	        else {
	            this.unsubscribe();
	            source.active = false;
	        }
	    };
	    DelaySubscriber.prototype._schedule = function (scheduler) {
	        this.active = true;
	        var destination = this.destination;
	        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };
	    DelaySubscriber.prototype.scheduleNotification = function (notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };
	    DelaySubscriber.prototype._next = function (value) {
	        this.scheduleNotification(Notification.createNext(value));
	    };
	    DelaySubscriber.prototype._error = function (err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    DelaySubscriber.prototype._complete = function () {
	        this.scheduleNotification(Notification.createComplete());
	        this.unsubscribe();
	    };
	    return DelaySubscriber;
	}(Subscriber));
	var DelayMessage = /*@__PURE__*/ (function () {
	    function DelayMessage(time, notification) {
	        this.time = time;
	        this.notification = notification;
	    }
	    return DelayMessage;
	}());

	/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function delayWhen(delayDurationSelector, subscriptionDelay) {
	    if (subscriptionDelay) {
	        return function (source) {
	            return new SubscriptionDelayObservable(source, subscriptionDelay)
	                .lift(new DelayWhenOperator(delayDurationSelector));
	        };
	    }
	    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };
	}
	var DelayWhenOperator = /*@__PURE__*/ (function () {
	    function DelayWhenOperator(delayDurationSelector) {
	        this.delayDurationSelector = delayDurationSelector;
	    }
	    DelayWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
	    };
	    return DelayWhenOperator;
	}());
	var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DelayWhenSubscriber, _super);
	    function DelayWhenSubscriber(destination, delayDurationSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.delayDurationSelector = delayDurationSelector;
	        _this.completed = false;
	        _this.delayNotifierSubscriptions = [];
	        _this.index = 0;
	        return _this;
	    }
	    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
	        this.destination.next(outerValue);
	        this.removeSubscription(innerSub);
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
	        this._error(error);
	    };
	    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
	        var value = this.removeSubscription(innerSub);
	        if (value) {
	            this.destination.next(value);
	        }
	        this.tryComplete();
	    };
	    DelayWhenSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        try {
	            var delayNotifier = this.delayDurationSelector(value, index);
	            if (delayNotifier) {
	                this.tryDelay(delayNotifier, value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    DelayWhenSubscriber.prototype._complete = function () {
	        this.completed = true;
	        this.tryComplete();
	        this.unsubscribe();
	    };
	    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
	        subscription.unsubscribe();
	        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
	        if (subscriptionIdx !== -1) {
	            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
	        }
	        return subscription.outerValue;
	    };
	    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
	        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
	        if (notifierSubscription && !notifierSubscription.closed) {
	            var destination = this.destination;
	            destination.add(notifierSubscription);
	            this.delayNotifierSubscriptions.push(notifierSubscription);
	        }
	    };
	    DelayWhenSubscriber.prototype.tryComplete = function () {
	        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
	            this.destination.complete();
	        }
	    };
	    return DelayWhenSubscriber;
	}(OuterSubscriber));
	var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
	    __extends$1(SubscriptionDelayObservable, _super);
	    function SubscriptionDelayObservable(source, subscriptionDelay) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subscriptionDelay = subscriptionDelay;
	        return _this;
	    }
	    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
	        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
	    };
	    return SubscriptionDelayObservable;
	}(Observable));
	var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SubscriptionDelaySubscriber, _super);
	    function SubscriptionDelaySubscriber(parent, source) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.source = source;
	        _this.sourceSubscribed = false;
	        return _this;
	    }
	    SubscriptionDelaySubscriber.prototype._next = function (unused) {
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype._error = function (err) {
	        this.unsubscribe();
	        this.parent.error(err);
	    };
	    SubscriptionDelaySubscriber.prototype._complete = function () {
	        this.unsubscribe();
	        this.subscribeToSource();
	    };
	    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
	        if (!this.sourceSubscribed) {
	            this.sourceSubscribed = true;
	            this.unsubscribe();
	            this.source.subscribe(this.parent);
	        }
	    };
	    return SubscriptionDelaySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function dematerialize() {
	    return function dematerializeOperatorFunction(source) {
	        return source.lift(new DeMaterializeOperator());
	    };
	}
	var DeMaterializeOperator = /*@__PURE__*/ (function () {
	    function DeMaterializeOperator() {
	    }
	    DeMaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DeMaterializeSubscriber(subscriber));
	    };
	    return DeMaterializeOperator;
	}());
	var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DeMaterializeSubscriber, _super);
	    function DeMaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    DeMaterializeSubscriber.prototype._next = function (value) {
	        value.observe(this.destination);
	    };
	    return DeMaterializeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function distinct(keySelector, flushes) {
	    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };
	}
	var DistinctOperator = /*@__PURE__*/ (function () {
	    function DistinctOperator(keySelector, flushes) {
	        this.keySelector = keySelector;
	        this.flushes = flushes;
	    }
	    DistinctOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
	    };
	    return DistinctOperator;
	}());
	var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DistinctSubscriber, _super);
	    function DistinctSubscriber(destination, keySelector, flushes) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.values = new Set();
	        if (flushes) {
	            _this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(_this)));
	        }
	        return _this;
	    }
	    DistinctSubscriber.prototype.notifyNext = function () {
	        this.values.clear();
	    };
	    DistinctSubscriber.prototype.notifyError = function (error) {
	        this._error(error);
	    };
	    DistinctSubscriber.prototype._next = function (value) {
	        if (this.keySelector) {
	            this._useKeySelector(value);
	        }
	        else {
	            this._finalizeNext(value, value);
	        }
	    };
	    DistinctSubscriber.prototype._useKeySelector = function (value) {
	        var key;
	        var destination = this.destination;
	        try {
	            key = this.keySelector(value);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this._finalizeNext(key, value);
	    };
	    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
	        var values = this.values;
	        if (!values.has(key)) {
	            values.add(key);
	            this.destination.next(value);
	        }
	    };
	    return DistinctSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function distinctUntilChanged(compare, keySelector) {
	    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
	}
	var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
	    function DistinctUntilChangedOperator(compare, keySelector) {
	        this.compare = compare;
	        this.keySelector = keySelector;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
	    };
	    return DistinctUntilChangedOperator;
	}());
	var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.hasKey = false;
	        if (typeof compare === 'function') {
	            _this.compare = compare;
	        }
	        return _this;
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            var keySelector = this.keySelector;
	            key = keySelector ? keySelector(value) : value;
	        }
	        catch (err) {
	            return this.destination.error(err);
	        }
	        var result = false;
	        if (this.hasKey) {
	            try {
	                var compare = this.compare;
	                result = compare(this.key, key);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (!result) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */
	function distinctUntilKeyChanged(key, compare) {
	    return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
	}

	/** PURE_IMPORTS_START tslib,_util_EmptyError,_Subscriber PURE_IMPORTS_END */
	function throwIfEmpty(errorFactory) {
	    if (errorFactory === void 0) {
	        errorFactory = defaultErrorFactory;
	    }
	    return function (source) {
	        return source.lift(new ThrowIfEmptyOperator(errorFactory));
	    };
	}
	var ThrowIfEmptyOperator = /*@__PURE__*/ (function () {
	    function ThrowIfEmptyOperator(errorFactory) {
	        this.errorFactory = errorFactory;
	    }
	    ThrowIfEmptyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
	    };
	    return ThrowIfEmptyOperator;
	}());
	var ThrowIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ThrowIfEmptySubscriber, _super);
	    function ThrowIfEmptySubscriber(destination, errorFactory) {
	        var _this = _super.call(this, destination) || this;
	        _this.errorFactory = errorFactory;
	        _this.hasValue = false;
	        return _this;
	    }
	    ThrowIfEmptySubscriber.prototype._next = function (value) {
	        this.hasValue = true;
	        this.destination.next(value);
	    };
	    ThrowIfEmptySubscriber.prototype._complete = function () {
	        if (!this.hasValue) {
	            var err = void 0;
	            try {
	                err = this.errorFactory();
	            }
	            catch (e) {
	                err = e;
	            }
	            this.destination.error(err);
	        }
	        else {
	            return this.destination.complete();
	        }
	    };
	    return ThrowIfEmptySubscriber;
	}(Subscriber));
	function defaultErrorFactory() {
	    return new EmptyError();
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	function take(count) {
	    return function (source) {
	        if (count === 0) {
	            return empty();
	        }
	        else {
	            return source.lift(new TakeOperator(count));
	        }
	    };
	}
	var TakeOperator = /*@__PURE__*/ (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeSubscriber(subscriber, this.total));
	    };
	    return TakeOperator;
	}());
	var TakeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */
	function elementAt(index, defaultValue) {
	    if (index < 0) {
	        throw new ArgumentOutOfRangeError();
	    }
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) {
	        return source.pipe(filter(function (v, i) { return i === index; }), take(1), hasDefaultValue
	            ? defaultIfEmpty(defaultValue)
	            : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); }));
	    };
	}

	/** PURE_IMPORTS_START _observable_concat,_observable_of PURE_IMPORTS_END */
	function endWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i] = arguments[_i];
	    }
	    return function (source) { return concat$1(source, of.apply(void 0, array)); };
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function every(predicate, thisArg) {
	    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };
	}
	var EveryOperator = /*@__PURE__*/ (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
	    };
	    return EveryOperator;
	}());
	var EverySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.source = source;
	        _this.index = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function exhaust() {
	    return function (source) { return source.lift(new SwitchFirstOperator()); };
	}
	var SwitchFirstOperator = /*@__PURE__*/ (function () {
	    function SwitchFirstOperator() {
	    }
	    SwitchFirstOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchFirstSubscriber(subscriber));
	    };
	    return SwitchFirstOperator;
	}());
	var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SwitchFirstSubscriber, _super);
	    function SwitchFirstSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasCompleted = false;
	        _this.hasSubscription = false;
	        return _this;
	    }
	    SwitchFirstSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.hasSubscription = true;
	            this.add(innerSubscribe(value, new SimpleInnerSubscriber(this)));
	        }
	    };
	    SwitchFirstSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	    };
	    SwitchFirstSubscriber.prototype.notifyComplete = function () {
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return SwitchFirstSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
	function exhaustMap(project, resultSelector) {
	    if (resultSelector) {
	        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
	    }
	    return function (source) {
	        return source.lift(new ExhaustMapOperator(project));
	    };
	}
	var ExhaustMapOperator = /*@__PURE__*/ (function () {
	    function ExhaustMapOperator(project) {
	        this.project = project;
	    }
	    ExhaustMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
	    };
	    return ExhaustMapOperator;
	}());
	var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ExhaustMapSubscriber, _super);
	    function ExhaustMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.hasSubscription = false;
	        _this.hasCompleted = false;
	        _this.index = 0;
	        return _this;
	    }
	    ExhaustMapSubscriber.prototype._next = function (value) {
	        if (!this.hasSubscription) {
	            this.tryNext(value);
	        }
	    };
	    ExhaustMapSubscriber.prototype.tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.hasSubscription = true;
	        this._innerSub(result);
	    };
	    ExhaustMapSubscriber.prototype._innerSub = function (result) {
	        var innerSubscriber = new SimpleInnerSubscriber(this);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = innerSubscribe(result, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    ExhaustMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (!this.hasSubscription) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    ExhaustMapSubscriber.prototype.notifyNext = function (innerValue) {
	        this.destination.next(innerValue);
	    };
	    ExhaustMapSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    ExhaustMapSubscriber.prototype.notifyComplete = function () {
	        this.hasSubscription = false;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return ExhaustMapSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function expand(project, concurrent, scheduler) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
	    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };
	}
	var ExpandOperator = /*@__PURE__*/ (function () {
	    function ExpandOperator(project, concurrent, scheduler) {
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	    }
	    ExpandOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
	    };
	    return ExpandOperator;
	}());
	var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ExpandSubscriber, _super);
	    function ExpandSubscriber(destination, project, concurrent, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.scheduler = scheduler;
	        _this.index = 0;
	        _this.active = 0;
	        _this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            _this.buffer = [];
	        }
	        return _this;
	    }
	    ExpandSubscriber.dispatch = function (arg) {
	        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
	        subscriber.subscribeToProjection(result, value, index);
	    };
	    ExpandSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.closed) {
	            this._complete();
	            return;
	        }
	        var index = this.index++;
	        if (this.active < this.concurrent) {
	            destination.next(value);
	            try {
	                var project = this.project;
	                var result = project(value, index);
	                if (!this.scheduler) {
	                    this.subscribeToProjection(result, value, index);
	                }
	                else {
	                    var state = { subscriber: this, result: result, value: value, index: index };
	                    var destination_1 = this.destination;
	                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
	                }
	            }
	            catch (e) {
	                destination.error(e);
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
	        this.active++;
	        var destination = this.destination;
	        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));
	    };
	    ExpandSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    ExpandSubscriber.prototype.notifyNext = function (innerValue) {
	        this._next(innerValue);
	    };
	    ExpandSubscriber.prototype.notifyComplete = function () {
	        var buffer = this.buffer;
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return ExpandSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
	function finalize(callback) {
	    return function (source) { return source.lift(new FinallyOperator(callback)); };
	}
	var FinallyOperator = /*@__PURE__*/ (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	var FinallySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        var _this = _super.call(this, destination) || this;
	        _this.add(new Subscription(callback));
	        return _this;
	    }
	    return FinallySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function find(predicate, thisArg) {
	    if (typeof predicate !== 'function') {
	        throw new TypeError('predicate is not a function');
	    }
	    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };
	}
	var FindValueOperator = /*@__PURE__*/ (function () {
	    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
	        this.predicate = predicate;
	        this.source = source;
	        this.yieldIndex = yieldIndex;
	        this.thisArg = thisArg;
	    }
	    FindValueOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
	    };
	    return FindValueOperator;
	}());
	var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(FindValueSubscriber, _super);
	    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.yieldIndex = yieldIndex;
	        _this.thisArg = thisArg;
	        _this.index = 0;
	        return _this;
	    }
	    FindValueSubscriber.prototype.notifyComplete = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	        this.unsubscribe();
	    };
	    FindValueSubscriber.prototype._next = function (value) {
	        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
	        var index = this.index++;
	        try {
	            var result = predicate.call(thisArg || this, value, index, this.source);
	            if (result) {
	                this.notifyComplete(this.yieldIndex ? index : value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    FindValueSubscriber.prototype._complete = function () {
	        this.notifyComplete(this.yieldIndex ? -1 : undefined);
	    };
	    return FindValueSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */
	function findIndex(predicate, thisArg) {
	    return function (source) { return source.lift(new FindValueOperator(predicate, source, true, thisArg)); };
	}

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
	function first(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function ignoreElements() {
	    return function ignoreElementsOperatorFunction(source) {
	        return source.lift(new IgnoreElementsOperator());
	    };
	}
	var IgnoreElementsOperator = /*@__PURE__*/ (function () {
	    function IgnoreElementsOperator() {
	    }
	    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
	    };
	    return IgnoreElementsOperator;
	}());
	var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(IgnoreElementsSubscriber, _super);
	    function IgnoreElementsSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    IgnoreElementsSubscriber.prototype._next = function (unused) {
	    };
	    return IgnoreElementsSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function isEmpty() {
	    return function (source) { return source.lift(new IsEmptyOperator()); };
	}
	var IsEmptyOperator = /*@__PURE__*/ (function () {
	    function IsEmptyOperator() {
	    }
	    IsEmptyOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new IsEmptySubscriber(observer));
	    };
	    return IsEmptyOperator;
	}());
	var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(IsEmptySubscriber, _super);
	    function IsEmptySubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
	        var destination = this.destination;
	        destination.next(isEmpty);
	        destination.complete();
	    };
	    IsEmptySubscriber.prototype._next = function (value) {
	        this.notifyComplete(false);
	    };
	    IsEmptySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return IsEmptySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	function takeLast(count) {
	    return function takeLastOperatorFunction(source) {
	        if (count === 0) {
	            return empty();
	        }
	        else {
	            return source.lift(new TakeLastOperator(count));
	        }
	    };
	}
	var TakeLastOperator = /*@__PURE__*/ (function () {
	    function TakeLastOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    TakeLastOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
	    };
	    return TakeLastOperator;
	}());
	var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TakeLastSubscriber, _super);
	    function TakeLastSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.ring = new Array();
	        _this.count = 0;
	        return _this;
	    }
	    TakeLastSubscriber.prototype._next = function (value) {
	        var ring = this.ring;
	        var total = this.total;
	        var count = this.count++;
	        if (ring.length < total) {
	            ring.push(value);
	        }
	        else {
	            var index = count % total;
	            ring[index] = value;
	        }
	    };
	    TakeLastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var count = this.count;
	        if (count > 0) {
	            var total = this.count >= this.total ? this.total : this.count;
	            var ring = this.ring;
	            for (var i = 0; i < total; i++) {
	                var idx = (count++) % total;
	                destination.next(ring[idx]);
	            }
	        }
	        destination.complete();
	    };
	    return TakeLastSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */
	function last(predicate, defaultValue) {
	    var hasDefaultValue = arguments.length >= 2;
	    return function (source) { return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); })); };
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function mapTo(value) {
	    return function (source) { return source.lift(new MapToOperator(value)); };
	}
	var MapToOperator = /*@__PURE__*/ (function () {
	    function MapToOperator(value) {
	        this.value = value;
	    }
	    MapToOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapToSubscriber(subscriber, this.value));
	    };
	    return MapToOperator;
	}());
	var MapToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(MapToSubscriber, _super);
	    function MapToSubscriber(destination, value) {
	        var _this = _super.call(this, destination) || this;
	        _this.value = value;
	        return _this;
	    }
	    MapToSubscriber.prototype._next = function (x) {
	        this.destination.next(this.value);
	    };
	    return MapToSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
	function materialize() {
	    return function materializeOperatorFunction(source) {
	        return source.lift(new MaterializeOperator());
	    };
	}
	var MaterializeOperator = /*@__PURE__*/ (function () {
	    function MaterializeOperator() {
	    }
	    MaterializeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MaterializeSubscriber(subscriber));
	    };
	    return MaterializeOperator;
	}());
	var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(MaterializeSubscriber, _super);
	    function MaterializeSubscriber(destination) {
	        return _super.call(this, destination) || this;
	    }
	    MaterializeSubscriber.prototype._next = function (value) {
	        this.destination.next(Notification.createNext(value));
	    };
	    MaterializeSubscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        destination.next(Notification.createError(err));
	        destination.complete();
	    };
	    MaterializeSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        destination.next(Notification.createComplete());
	        destination.complete();
	    };
	    return MaterializeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function scan(accumulator, seed) {
	    var hasSeed = false;
	    if (arguments.length >= 2) {
	        hasSeed = true;
	    }
	    return function scanOperatorFunction(source) {
	        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
	    };
	}
	var ScanOperator = /*@__PURE__*/ (function () {
	    function ScanOperator(accumulator, seed, hasSeed) {
	        if (hasSeed === void 0) {
	            hasSeed = false;
	        }
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.hasSeed = hasSeed;
	    }
	    ScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
	    };
	    return ScanOperator;
	}());
	var ScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ScanSubscriber, _super);
	    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this._seed = _seed;
	        _this.hasSeed = hasSeed;
	        _this.index = 0;
	        return _this;
	    }
	    Object.defineProperty(ScanSubscriber.prototype, "seed", {
	        get: function () {
	            return this._seed;
	        },
	        set: function (value) {
	            this.hasSeed = true;
	            this._seed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScanSubscriber.prototype._next = function (value) {
	        if (!this.hasSeed) {
	            this.seed = value;
	            this.destination.next(value);
	        }
	        else {
	            return this._tryNext(value);
	        }
	    };
	    ScanSubscriber.prototype._tryNext = function (value) {
	        var index = this.index++;
	        var result;
	        try {
	            result = this.accumulator(this.seed, value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	        this.seed = result;
	        this.destination.next(result);
	    };
	    return ScanSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */
	function reduce(accumulator, seed) {
	    if (arguments.length >= 2) {
	        return function reduceOperatorFunctionWithSeed(source) {
	            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);
	        };
	    }
	    return function reduceOperatorFunction(source) {
	        return pipe(scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast(1))(source);
	    };
	}

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function max(comparer) {
	    var max = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }
	        : function (x, y) { return x > y ? x : y; };
	    return reduce(max);
	}

	/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function (source) { return source.lift.call(merge$1.apply(void 0, [source].concat(observables))); };
	}

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
	function mergeMapTo(innerObservable, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
	    }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return mergeMap(function () { return innerObservable; }, concurrent);
	}

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function mergeScan(accumulator, seed, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };
	}
	var MergeScanOperator = /*@__PURE__*/ (function () {
	    function MergeScanOperator(accumulator, seed, concurrent) {
	        this.accumulator = accumulator;
	        this.seed = seed;
	        this.concurrent = concurrent;
	    }
	    MergeScanOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
	    };
	    return MergeScanOperator;
	}());
	var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(MergeScanSubscriber, _super);
	    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
	        var _this = _super.call(this, destination) || this;
	        _this.accumulator = accumulator;
	        _this.acc = acc;
	        _this.concurrent = concurrent;
	        _this.hasValue = false;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeScanSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var destination = this.destination;
	            var ish = void 0;
	            try {
	                var accumulator = this.accumulator;
	                ish = accumulator(this.acc, value, index);
	            }
	            catch (e) {
	                return destination.error(e);
	            }
	            this.active++;
	            this._innerSub(ish);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeScanSubscriber.prototype._innerSub = function (ish) {
	        var innerSubscriber = new SimpleInnerSubscriber(this);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = innerSubscribe(ish, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    MergeScanSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    MergeScanSubscriber.prototype.notifyNext = function (innerValue) {
	        var destination = this.destination;
	        this.acc = innerValue;
	        this.hasValue = true;
	        destination.next(innerValue);
	    };
	    MergeScanSubscriber.prototype.notifyComplete = function () {
	        var buffer = this.buffer;
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            if (this.hasValue === false) {
	                this.destination.next(this.acc);
	            }
	            this.destination.complete();
	        }
	    };
	    return MergeScanSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function min(comparer) {
	    var min = (typeof comparer === 'function')
	        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }
	        : function (x, y) { return x < y ? x : y; };
	    return reduce(min);
	}

	/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
	function multicast(subjectOrSubjectFactory, selector) {
	    return function multicastOperatorFunction(source) {
	        var subjectFactory;
	        if (typeof subjectOrSubjectFactory === 'function') {
	            subjectFactory = subjectOrSubjectFactory;
	        }
	        else {
	            subjectFactory = function subjectFactory() {
	                return subjectOrSubjectFactory;
	            };
	        }
	        if (typeof selector === 'function') {
	            return source.lift(new MulticastOperator(subjectFactory, selector));
	        }
	        var connectable = Object.create(source, connectableObservableDescriptor);
	        connectable.source = source;
	        connectable.subjectFactory = subjectFactory;
	        return connectable;
	    };
	}
	var MulticastOperator = /*@__PURE__*/ (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());

	/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_innerSubscribe PURE_IMPORTS_END */
	function onErrorResumeNext() {
	    var nextSources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        nextSources[_i] = arguments[_i];
	    }
	    if (nextSources.length === 1 && isArray(nextSources[0])) {
	        nextSources = nextSources[0];
	    }
	    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };
	}
	var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
	    function OnErrorResumeNextOperator(nextSources) {
	        this.nextSources = nextSources;
	    }
	    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
	    };
	    return OnErrorResumeNextOperator;
	}());
	var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(OnErrorResumeNextSubscriber, _super);
	    function OnErrorResumeNextSubscriber(destination, nextSources) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.nextSources = nextSources;
	        return _this;
	    }
	    OnErrorResumeNextSubscriber.prototype.notifyError = function () {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype.notifyComplete = function () {
	        this.subscribeToNextSource();
	    };
	    OnErrorResumeNextSubscriber.prototype._error = function (err) {
	        this.subscribeToNextSource();
	        this.unsubscribe();
	    };
	    OnErrorResumeNextSubscriber.prototype._complete = function () {
	        this.subscribeToNextSource();
	        this.unsubscribe();
	    };
	    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
	        var next = this.nextSources.shift();
	        if (!!next) {
	            var innerSubscriber = new SimpleInnerSubscriber(this);
	            var destination = this.destination;
	            destination.add(innerSubscriber);
	            var innerSubscription = innerSubscribe(next, innerSubscriber);
	            if (innerSubscription !== innerSubscriber) {
	                destination.add(innerSubscription);
	            }
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return OnErrorResumeNextSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function pairwise() {
	    return function (source) { return source.lift(new PairwiseOperator()); };
	}
	var PairwiseOperator = /*@__PURE__*/ (function () {
	    function PairwiseOperator() {
	    }
	    PairwiseOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new PairwiseSubscriber(subscriber));
	    };
	    return PairwiseOperator;
	}());
	var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(PairwiseSubscriber, _super);
	    function PairwiseSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasPrev = false;
	        return _this;
	    }
	    PairwiseSubscriber.prototype._next = function (value) {
	        var pair;
	        if (this.hasPrev) {
	            pair = [this.prev, value];
	        }
	        else {
	            this.hasPrev = true;
	        }
	        this.prev = value;
	        if (pair) {
	            this.destination.next(pair);
	        }
	    };
	    return PairwiseSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */
	function partition(predicate, thisArg) {
	    return function (source) {
	        return [
	            filter(predicate, thisArg)(source),
	            filter(not(predicate, thisArg))(source)
	        ];
	    };
	}

	/** PURE_IMPORTS_START _map PURE_IMPORTS_END */
	function pluck() {
	    var properties = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        properties[_i] = arguments[_i];
	    }
	    var length = properties.length;
	    if (length === 0) {
	        throw new Error('list of properties cannot be empty.');
	    }
	    return function (source) { return map(plucker(properties, length))(source); };
	}
	function plucker(props, length) {
	    var mapper = function (x) {
	        var currentProp = x;
	        for (var i = 0; i < length; i++) {
	            var p = currentProp != null ? currentProp[props[i]] : undefined;
	            if (p !== void 0) {
	                currentProp = p;
	            }
	            else {
	                return undefined;
	            }
	        }
	        return currentProp;
	    };
	    return mapper;
	}

	/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */
	function publish(selector) {
	    return selector ?
	        multicast(function () { return new Subject(); }, selector) :
	        multicast(new Subject());
	}

	/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */
	function publishBehavior(value) {
	    return function (source) { return multicast(new BehaviorSubject(value))(source); };
	}

	/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */
	function publishLast() {
	    return function (source) { return multicast(new AsyncSubject())(source); };
	}

	/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */
	function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
	    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
	        scheduler = selectorOrScheduler;
	    }
	    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
	    var subject = new ReplaySubject(bufferSize, windowTime, scheduler);
	    return function (source) { return multicast(function () { return subject; }, selector)(source); };
	}

	/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */
	function race() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function raceOperatorFunction(source) {
	        if (observables.length === 1 && isArray(observables[0])) {
	            observables = observables[0];
	        }
	        return source.lift.call(race$1.apply(void 0, [source].concat(observables)));
	    };
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
	function repeat(count) {
	    if (count === void 0) {
	        count = -1;
	    }
	    return function (source) {
	        if (count === 0) {
	            return empty();
	        }
	        else if (count < 0) {
	            return source.lift(new RepeatOperator(-1, source));
	        }
	        else {
	            return source.lift(new RepeatOperator(count - 1, source));
	        }
	    };
	}
	var RepeatOperator = /*@__PURE__*/ (function () {
	    function RepeatOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RepeatOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
	    };
	    return RepeatOperator;
	}());
	var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RepeatSubscriber, _super);
	    function RepeatSubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RepeatSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.complete.call(this);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RepeatSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */
	function repeatWhen(notifier) {
	    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };
	}
	var RepeatWhenOperator = /*@__PURE__*/ (function () {
	    function RepeatWhenOperator(notifier) {
	        this.notifier = notifier;
	    }
	    RepeatWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
	    };
	    return RepeatWhenOperator;
	}());
	var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RepeatWhenSubscriber, _super);
	    function RepeatWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        _this.sourceIsBeingSubscribedTo = true;
	        return _this;
	    }
	    RepeatWhenSubscriber.prototype.notifyNext = function () {
	        this.sourceIsBeingSubscribedTo = true;
	        this.source.subscribe(this);
	    };
	    RepeatWhenSubscriber.prototype.notifyComplete = function () {
	        if (this.sourceIsBeingSubscribedTo === false) {
	            return _super.prototype.complete.call(this);
	        }
	    };
	    RepeatWhenSubscriber.prototype.complete = function () {
	        this.sourceIsBeingSubscribedTo = false;
	        if (!this.isStopped) {
	            if (!this.retries) {
	                this.subscribeToRetries();
	            }
	            if (!this.retriesSubscription || this.retriesSubscription.closed) {
	                return _super.prototype.complete.call(this);
	            }
	            this._unsubscribeAndRecycle();
	            this.notifications.next(undefined);
	        }
	    };
	    RepeatWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
	        if (notifications) {
	            notifications.unsubscribe();
	            this.notifications = undefined;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = undefined;
	        }
	        this.retries = undefined;
	    };
	    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        _super.prototype._unsubscribeAndRecycle.call(this);
	        this._unsubscribe = _unsubscribe;
	        return this;
	    };
	    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
	        this.notifications = new Subject();
	        var retries;
	        try {
	            var notifier = this.notifier;
	            retries = notifier(this.notifications);
	        }
	        catch (e) {
	            return _super.prototype.complete.call(this);
	        }
	        this.retries = retries;
	        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));
	    };
	    return RepeatWhenSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function retry(count) {
	    if (count === void 0) {
	        count = -1;
	    }
	    return function (source) { return source.lift(new RetryOperator(count, source)); };
	}
	var RetryOperator = /*@__PURE__*/ (function () {
	    function RetryOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RetryOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
	    };
	    return RetryOperator;
	}());
	var RetrySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RetrySubscriber, _super);
	    function RetrySubscriber(destination, count, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.count = count;
	        _this.source = source;
	        return _this;
	    }
	    RetrySubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _a = this, source = _a.source, count = _a.count;
	            if (count === 0) {
	                return _super.prototype.error.call(this, err);
	            }
	            else if (count > -1) {
	                this.count = count - 1;
	            }
	            source.subscribe(this._unsubscribeAndRecycle());
	        }
	    };
	    return RetrySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */
	function retryWhen(notifier) {
	    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };
	}
	var RetryWhenOperator = /*@__PURE__*/ (function () {
	    function RetryWhenOperator(notifier, source) {
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RetryWhenOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
	    };
	    return RetryWhenOperator;
	}());
	var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(RetryWhenSubscriber, _super);
	    function RetryWhenSubscriber(destination, notifier, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.notifier = notifier;
	        _this.source = source;
	        return _this;
	    }
	    RetryWhenSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var errors = this.errors;
	            var retries = this.retries;
	            var retriesSubscription = this.retriesSubscription;
	            if (!retries) {
	                errors = new Subject();
	                try {
	                    var notifier = this.notifier;
	                    retries = notifier(errors);
	                }
	                catch (e) {
	                    return _super.prototype.error.call(this, e);
	                }
	                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));
	            }
	            else {
	                this.errors = undefined;
	                this.retriesSubscription = undefined;
	            }
	            this._unsubscribeAndRecycle();
	            this.errors = errors;
	            this.retries = retries;
	            this.retriesSubscription = retriesSubscription;
	            errors.next(err);
	        }
	    };
	    RetryWhenSubscriber.prototype._unsubscribe = function () {
	        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
	        if (errors) {
	            errors.unsubscribe();
	            this.errors = undefined;
	        }
	        if (retriesSubscription) {
	            retriesSubscription.unsubscribe();
	            this.retriesSubscription = undefined;
	        }
	        this.retries = undefined;
	    };
	    RetryWhenSubscriber.prototype.notifyNext = function () {
	        var _unsubscribe = this._unsubscribe;
	        this._unsubscribe = null;
	        this._unsubscribeAndRecycle();
	        this._unsubscribe = _unsubscribe;
	        this.source.subscribe(this);
	    };
	    return RetryWhenSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function sample(notifier) {
	    return function (source) { return source.lift(new SampleOperator(notifier)); };
	}
	var SampleOperator = /*@__PURE__*/ (function () {
	    function SampleOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SampleOperator.prototype.call = function (subscriber, source) {
	        var sampleSubscriber = new SampleSubscriber(subscriber);
	        var subscription = source.subscribe(sampleSubscriber);
	        subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));
	        return subscription;
	    };
	    return SampleOperator;
	}());
	var SampleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SampleSubscriber, _super);
	    function SampleSubscriber() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.hasValue = false;
	        return _this;
	    }
	    SampleSubscriber.prototype._next = function (value) {
	        this.value = value;
	        this.hasValue = true;
	    };
	    SampleSubscriber.prototype.notifyNext = function () {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.notifyComplete = function () {
	        this.emitValue();
	    };
	    SampleSubscriber.prototype.emitValue = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.value);
	        }
	    };
	    return SampleSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function sampleTime(period, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };
	}
	var SampleTimeOperator = /*@__PURE__*/ (function () {
	    function SampleTimeOperator(period, scheduler) {
	        this.period = period;
	        this.scheduler = scheduler;
	    }
	    SampleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
	    };
	    return SampleTimeOperator;
	}());
	var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, period, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.period = period;
	        _this.scheduler = scheduler;
	        _this.hasValue = false;
	        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
	        return _this;
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	}(Subscriber));
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, period = state.period;
	    subscriber.notifyNext();
	    this.schedule(state, period);
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function sequenceEqual(compareTo, comparator) {
	    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparator)); };
	}
	var SequenceEqualOperator = /*@__PURE__*/ (function () {
	    function SequenceEqualOperator(compareTo, comparator) {
	        this.compareTo = compareTo;
	        this.comparator = comparator;
	    }
	    SequenceEqualOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
	    };
	    return SequenceEqualOperator;
	}());
	var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SequenceEqualSubscriber, _super);
	    function SequenceEqualSubscriber(destination, compareTo, comparator) {
	        var _this = _super.call(this, destination) || this;
	        _this.compareTo = compareTo;
	        _this.comparator = comparator;
	        _this._a = [];
	        _this._b = [];
	        _this._oneComplete = false;
	        _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
	        return _this;
	    }
	    SequenceEqualSubscriber.prototype._next = function (value) {
	        if (this._oneComplete && this._b.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._a.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype._complete = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	        this.unsubscribe();
	    };
	    SequenceEqualSubscriber.prototype.checkValues = function () {
	        var _c = this, _a = _c._a, _b = _c._b, comparator = _c.comparator;
	        while (_a.length > 0 && _b.length > 0) {
	            var a = _a.shift();
	            var b = _b.shift();
	            var areEqual = false;
	            try {
	                areEqual = comparator ? comparator(a, b) : a === b;
	            }
	            catch (e) {
	                this.destination.error(e);
	            }
	            if (!areEqual) {
	                this.emit(false);
	            }
	        }
	    };
	    SequenceEqualSubscriber.prototype.emit = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	    };
	    SequenceEqualSubscriber.prototype.nextB = function (value) {
	        if (this._oneComplete && this._a.length === 0) {
	            this.emit(false);
	        }
	        else {
	            this._b.push(value);
	            this.checkValues();
	        }
	    };
	    SequenceEqualSubscriber.prototype.completeB = function () {
	        if (this._oneComplete) {
	            this.emit(this._a.length === 0 && this._b.length === 0);
	        }
	        else {
	            this._oneComplete = true;
	        }
	    };
	    return SequenceEqualSubscriber;
	}(Subscriber));
	var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SequenceEqualCompareToSubscriber, _super);
	    function SequenceEqualCompareToSubscriber(destination, parent) {
	        var _this = _super.call(this, destination) || this;
	        _this.parent = parent;
	        return _this;
	    }
	    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
	        this.parent.nextB(value);
	    };
	    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	        this.unsubscribe();
	    };
	    SequenceEqualCompareToSubscriber.prototype._complete = function () {
	        this.parent.completeB();
	        this.unsubscribe();
	    };
	    return SequenceEqualCompareToSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
	function shareSubjectFactory() {
	    return new Subject();
	}
	function share() {
	    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
	}

	/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */
	function shareReplay(configOrBufferSize, windowTime, scheduler) {
	    var config;
	    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
	        config = configOrBufferSize;
	    }
	    else {
	        config = {
	            bufferSize: configOrBufferSize,
	            windowTime: windowTime,
	            refCount: false,
	            scheduler: scheduler,
	        };
	    }
	    return function (source) { return source.lift(shareReplayOperator(config)); };
	}
	function shareReplayOperator(_a) {
	    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;
	    var subject;
	    var refCount = 0;
	    var subscription;
	    var hasError = false;
	    var isComplete = false;
	    return function shareReplayOperation(source) {
	        refCount++;
	        var innerSub;
	        if (!subject || hasError) {
	            hasError = false;
	            subject = new ReplaySubject(bufferSize, windowTime, scheduler);
	            innerSub = subject.subscribe(this);
	            subscription = source.subscribe({
	                next: function (value) {
	                    subject.next(value);
	                },
	                error: function (err) {
	                    hasError = true;
	                    subject.error(err);
	                },
	                complete: function () {
	                    isComplete = true;
	                    subscription = undefined;
	                    subject.complete();
	                },
	            });
	            if (isComplete) {
	                subscription = undefined;
	            }
	        }
	        else {
	            innerSub = subject.subscribe(this);
	        }
	        this.add(function () {
	            refCount--;
	            innerSub.unsubscribe();
	            innerSub = undefined;
	            if (subscription && !isComplete && useRefCount && refCount === 0) {
	                subscription.unsubscribe();
	                subscription = undefined;
	                subject = undefined;
	            }
	        });
	    };
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
	function single(predicate) {
	    return function (source) { return source.lift(new SingleOperator(predicate, source)); };
	}
	var SingleOperator = /*@__PURE__*/ (function () {
	    function SingleOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    SingleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
	    };
	    return SingleOperator;
	}());
	var SingleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SingleSubscriber, _super);
	    function SingleSubscriber(destination, predicate, source) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.source = source;
	        _this.seenValue = false;
	        _this.index = 0;
	        return _this;
	    }
	    SingleSubscriber.prototype.applySingleValue = function (value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        }
	        else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };
	    SingleSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this.tryNext(value, index);
	        }
	        else {
	            this.applySingleValue(value);
	        }
	    };
	    SingleSubscriber.prototype.tryNext = function (value, index) {
	        try {
	            if (this.predicate(value, index, this.source)) {
	                this.applySingleValue(value);
	            }
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    SingleSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError);
	        }
	    };
	    return SingleSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function skip(count) {
	    return function (source) { return source.lift(new SkipOperator(count)); };
	}
	var SkipOperator = /*@__PURE__*/ (function () {
	    function SkipOperator(total) {
	        this.total = total;
	    }
	    SkipOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipSubscriber(subscriber, this.total));
	    };
	    return SkipOperator;
	}());
	var SkipSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SkipSubscriber, _super);
	    function SkipSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    SkipSubscriber.prototype._next = function (x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };
	    return SkipSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
	function skipLast(count) {
	    return function (source) { return source.lift(new SkipLastOperator(count)); };
	}
	var SkipLastOperator = /*@__PURE__*/ (function () {
	    function SkipLastOperator(_skipCount) {
	        this._skipCount = _skipCount;
	        if (this._skipCount < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    SkipLastOperator.prototype.call = function (subscriber, source) {
	        if (this._skipCount === 0) {
	            return source.subscribe(new Subscriber(subscriber));
	        }
	        else {
	            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
	        }
	    };
	    return SkipLastOperator;
	}());
	var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SkipLastSubscriber, _super);
	    function SkipLastSubscriber(destination, _skipCount) {
	        var _this = _super.call(this, destination) || this;
	        _this._skipCount = _skipCount;
	        _this._count = 0;
	        _this._ring = new Array(_skipCount);
	        return _this;
	    }
	    SkipLastSubscriber.prototype._next = function (value) {
	        var skipCount = this._skipCount;
	        var count = this._count++;
	        if (count < skipCount) {
	            this._ring[count] = value;
	        }
	        else {
	            var currentIndex = count % skipCount;
	            var ring = this._ring;
	            var oldValue = ring[currentIndex];
	            ring[currentIndex] = value;
	            this.destination.next(oldValue);
	        }
	    };
	    return SkipLastSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function skipUntil(notifier) {
	    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };
	}
	var SkipUntilOperator = /*@__PURE__*/ (function () {
	    function SkipUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SkipUntilOperator.prototype.call = function (destination, source) {
	        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
	    };
	    return SkipUntilOperator;
	}());
	var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SkipUntilSubscriber, _super);
	    function SkipUntilSubscriber(destination, notifier) {
	        var _this = _super.call(this, destination) || this;
	        _this.hasValue = false;
	        var innerSubscriber = new SimpleInnerSubscriber(_this);
	        _this.add(innerSubscriber);
	        _this.innerSubscription = innerSubscriber;
	        var innerSubscription = innerSubscribe(notifier, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            _this.add(innerSubscription);
	            _this.innerSubscription = innerSubscription;
	        }
	        return _this;
	    }
	    SkipUntilSubscriber.prototype._next = function (value) {
	        if (this.hasValue) {
	            _super.prototype._next.call(this, value);
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyNext = function () {
	        this.hasValue = true;
	        if (this.innerSubscription) {
	            this.innerSubscription.unsubscribe();
	        }
	    };
	    SkipUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return SkipUntilSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function skipWhile(predicate) {
	    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
	}
	var SkipWhileOperator = /*@__PURE__*/ (function () {
	    function SkipWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    SkipWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
	    };
	    return SkipWhileOperator;
	}());
	var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.skipping = true;
	        _this.index = 0;
	        return _this;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping) {
	            this.tryCallPredicate(value);
	        }
	        if (!this.skipping) {
	            destination.next(value);
	        }
	    };
	    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
	        try {
	            var result = this.predicate(value, this.index++);
	            this.skipping = Boolean(result);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    return SkipWhileSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler(scheduler)) {
	        array.pop();
	        return function (source) { return concat$1(array, source, scheduler); };
	    }
	    else {
	        return function (source) { return concat$1(array, source); };
	    }
	}

	/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
	var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
	    __extends$1(SubscribeOnObservable, _super);
	    function SubscribeOnObservable(source, delayTime, scheduler) {
	        if (delayTime === void 0) {
	            delayTime = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.delayTime = delayTime;
	        _this.scheduler = scheduler;
	        if (!isNumeric(delayTime) || delayTime < 0) {
	            _this.delayTime = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            _this.scheduler = asap;
	        }
	        return _this;
	    }
	    SubscribeOnObservable.create = function (source, delay, scheduler) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (scheduler === void 0) {
	            scheduler = asap;
	        }
	        return new SubscribeOnObservable(source, delay, scheduler);
	    };
	    SubscribeOnObservable.dispatch = function (arg) {
	        var source = arg.source, subscriber = arg.subscriber;
	        return this.add(source.subscribe(subscriber));
	    };
	    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        });
	    };
	    return SubscribeOnObservable;
	}(Observable));

	/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */
	function subscribeOn(scheduler, delay) {
	    if (delay === void 0) {
	        delay = 0;
	    }
	    return function subscribeOnOperatorFunction(source) {
	        return source.lift(new SubscribeOnOperator(scheduler, delay));
	    };
	}
	var SubscribeOnOperator = /*@__PURE__*/ (function () {
	    function SubscribeOnOperator(scheduler, delay) {
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    SubscribeOnOperator.prototype.call = function (subscriber, source) {
	        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
	    };
	    return SubscribeOnOperator;
	}());

	/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */
	function switchMap(project, resultSelector) {
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };
	    }
	    return function (source) { return source.lift(new SwitchMapOperator(project)); };
	}
	var SwitchMapOperator = /*@__PURE__*/ (function () {
	    function SwitchMapOperator(project) {
	        this.project = project;
	    }
	    SwitchMapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
	    };
	    return SwitchMapOperator;
	}());
	var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.index = 0;
	        return _this;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (error) {
	            this.destination.error(error);
	            return;
	        }
	        this._innerSub(result);
	    };
	    SwitchMapSubscriber.prototype._innerSub = function (result) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        var innerSubscriber = new SimpleInnerSubscriber(this);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        this.innerSubscription = innerSubscribe(result, innerSubscriber);
	        if (this.innerSubscription !== innerSubscriber) {
	            destination.add(this.innerSubscription);
	        }
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	        this.unsubscribe();
	    };
	    SwitchMapSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = undefined;
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function () {
	        this.innerSubscription = undefined;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (innerValue) {
	        this.destination.next(innerValue);
	    };
	    return SwitchMapSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */
	function switchAll() {
	    return switchMap(identity);
	}

	/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */
	function switchMapTo(innerObservable, resultSelector) {
	    return resultSelector ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
	}

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	function takeUntil(notifier) {
	    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
	}
	var TakeUntilOperator = /*@__PURE__*/ (function () {
	    function TakeUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    TakeUntilOperator.prototype.call = function (subscriber, source) {
	        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
	        var notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));
	        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
	            takeUntilSubscriber.add(notifierSubscription);
	            return source.subscribe(takeUntilSubscriber);
	        }
	        return takeUntilSubscriber;
	    };
	    return TakeUntilOperator;
	}());
	var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.seenValue = false;
	        return _this;
	    }
	    TakeUntilSubscriber.prototype.notifyNext = function () {
	        this.seenValue = true;
	        this.complete();
	    };
	    TakeUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return TakeUntilSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function takeWhile(predicate, inclusive) {
	    if (inclusive === void 0) {
	        inclusive = false;
	    }
	    return function (source) {
	        return source.lift(new TakeWhileOperator(predicate, inclusive));
	    };
	}
	var TakeWhileOperator = /*@__PURE__*/ (function () {
	    function TakeWhileOperator(predicate, inclusive) {
	        this.predicate = predicate;
	        this.inclusive = inclusive;
	    }
	    TakeWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
	    };
	    return TakeWhileOperator;
	}());
	var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TakeWhileSubscriber, _super);
	    function TakeWhileSubscriber(destination, predicate, inclusive) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.inclusive = inclusive;
	        _this.index = 0;
	        return _this;
	    }
	    TakeWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var result;
	        try {
	            result = this.predicate(value, this.index++);
	        }
	        catch (err) {
	            destination.error(err);
	            return;
	        }
	        this.nextOrComplete(value, result);
	    };
	    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
	        var destination = this.destination;
	        if (Boolean(predicateResult)) {
	            destination.next(value);
	        }
	        else {
	            if (this.inclusive) {
	                destination.next(value);
	            }
	            destination.complete();
	        }
	    };
	    return TakeWhileSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
	function tap(nextOrObserver, error, complete) {
	    return function tapOperatorFunction(source) {
	        return source.lift(new DoOperator(nextOrObserver, error, complete));
	    };
	}
	var DoOperator = /*@__PURE__*/ (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	var TapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TapSubscriber, _super);
	    function TapSubscriber(destination, observerOrNext, error, complete) {
	        var _this = _super.call(this, destination) || this;
	        _this._tapNext = noop;
	        _this._tapError = noop;
	        _this._tapComplete = noop;
	        _this._tapError = error || noop;
	        _this._tapComplete = complete || noop;
	        if (isFunction(observerOrNext)) {
	            _this._context = _this;
	            _this._tapNext = observerOrNext;
	        }
	        else if (observerOrNext) {
	            _this._context = observerOrNext;
	            _this._tapNext = observerOrNext.next || noop;
	            _this._tapError = observerOrNext.error || noop;
	            _this._tapComplete = observerOrNext.complete || noop;
	        }
	        return _this;
	    }
	    TapSubscriber.prototype._next = function (value) {
	        try {
	            this._tapNext.call(this._context, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(value);
	    };
	    TapSubscriber.prototype._error = function (err) {
	        try {
	            this._tapError.call(this._context, err);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.error(err);
	    };
	    TapSubscriber.prototype._complete = function () {
	        try {
	            this._tapComplete.call(this._context);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        return this.destination.complete();
	    };
	    return TapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */
	var defaultThrottleConfig = {
	    leading: true,
	    trailing: false
	};
	function throttle(durationSelector, config) {
	    if (config === void 0) {
	        config = defaultThrottleConfig;
	    }
	    return function (source) { return source.lift(new ThrottleOperator(durationSelector, !!config.leading, !!config.trailing)); };
	}
	var ThrottleOperator = /*@__PURE__*/ (function () {
	    function ThrottleOperator(durationSelector, leading, trailing) {
	        this.durationSelector = durationSelector;
	        this.leading = leading;
	        this.trailing = trailing;
	    }
	    ThrottleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
	    };
	    return ThrottleOperator;
	}());
	var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ThrottleSubscriber, _super);
	    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.durationSelector = durationSelector;
	        _this._leading = _leading;
	        _this._trailing = _trailing;
	        _this._hasValue = false;
	        return _this;
	    }
	    ThrottleSubscriber.prototype._next = function (value) {
	        this._hasValue = true;
	        this._sendValue = value;
	        if (!this._throttled) {
	            if (this._leading) {
	                this.send();
	            }
	            else {
	                this.throttle(value);
	            }
	        }
	    };
	    ThrottleSubscriber.prototype.send = function () {
	        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
	        if (_hasValue) {
	            this.destination.next(_sendValue);
	            this.throttle(_sendValue);
	        }
	        this._hasValue = false;
	        this._sendValue = undefined;
	    };
	    ThrottleSubscriber.prototype.throttle = function (value) {
	        var duration = this.tryDurationSelector(value);
	        if (!!duration) {
	            this.add(this._throttled = innerSubscribe(duration, new SimpleInnerSubscriber(this)));
	        }
	    };
	    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
	        try {
	            return this.durationSelector(value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return null;
	        }
	    };
	    ThrottleSubscriber.prototype.throttlingDone = function () {
	        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
	        if (_throttled) {
	            _throttled.unsubscribe();
	        }
	        this._throttled = undefined;
	        if (_trailing) {
	            this.send();
	        }
	    };
	    ThrottleSubscriber.prototype.notifyNext = function () {
	        this.throttlingDone();
	    };
	    ThrottleSubscriber.prototype.notifyComplete = function () {
	        this.throttlingDone();
	    };
	    return ThrottleSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
	function throttleTime(duration, scheduler, config) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    if (config === void 0) {
	        config = defaultThrottleConfig;
	    }
	    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };
	}
	var ThrottleTimeOperator = /*@__PURE__*/ (function () {
	    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
	        this.duration = duration;
	        this.scheduler = scheduler;
	        this.leading = leading;
	        this.trailing = trailing;
	    }
	    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
	    };
	    return ThrottleTimeOperator;
	}());
	var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(ThrottleTimeSubscriber, _super);
	    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
	        var _this = _super.call(this, destination) || this;
	        _this.duration = duration;
	        _this.scheduler = scheduler;
	        _this.leading = leading;
	        _this.trailing = trailing;
	        _this._hasTrailingValue = false;
	        _this._trailingValue = null;
	        return _this;
	    }
	    ThrottleTimeSubscriber.prototype._next = function (value) {
	        if (this.throttled) {
	            if (this.trailing) {
	                this._trailingValue = value;
	                this._hasTrailingValue = true;
	            }
	        }
	        else {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
	            if (this.leading) {
	                this.destination.next(value);
	            }
	            else if (this.trailing) {
	                this._trailingValue = value;
	                this._hasTrailingValue = true;
	            }
	        }
	    };
	    ThrottleTimeSubscriber.prototype._complete = function () {
	        if (this._hasTrailingValue) {
	            this.destination.next(this._trailingValue);
	            this.destination.complete();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            if (this.trailing && this._hasTrailingValue) {
	                this.destination.next(this._trailingValue);
	                this._trailingValue = null;
	                this._hasTrailingValue = false;
	            }
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleTimeSubscriber;
	}(Subscriber));
	function dispatchNext(arg) {
	    var subscriber = arg.subscriber;
	    subscriber.clearThrottle();
	}

	/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */
	function timeInterval(scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) {
	        return defer(function () {
	            return source.pipe(scan(function (_a, value) {
	                var current = _a.current;
	                return ({ value: value, current: scheduler.now(), last: current });
	            }, { current: scheduler.now(), value: undefined, last: undefined }), map(function (_a) {
	                var current = _a.current, last = _a.last, value = _a.value;
	                return new TimeInterval(value, current - last);
	            }));
	        });
	    };
	}
	var TimeInterval = /*@__PURE__*/ (function () {
	    function TimeInterval(value, interval) {
	        this.value = value;
	        this.interval = interval;
	    }
	    return TimeInterval;
	}());

	/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_innerSubscribe PURE_IMPORTS_END */
	function timeoutWith(due, withObservable, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) {
	        var absoluteTimeout = isDate(due);
	        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
	        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
	    };
	}
	var TimeoutWithOperator = /*@__PURE__*/ (function () {
	    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	    }
	    TimeoutWithOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
	    };
	    return TimeoutWithOperator;
	}());
	var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(TimeoutWithSubscriber, _super);
	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.absoluteTimeout = absoluteTimeout;
	        _this.waitFor = waitFor;
	        _this.withObservable = withObservable;
	        _this.scheduler = scheduler;
	        _this.scheduleTimeout();
	        return _this;
	    }
	    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
	        var withObservable = subscriber.withObservable;
	        subscriber._unsubscribeAndRecycle();
	        subscriber.add(innerSubscribe(withObservable, new SimpleInnerSubscriber(subscriber)));
	    };
	    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
	        var action = this.action;
	        if (action) {
	            this.action = action.schedule(this, this.waitFor);
	        }
	        else {
	            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
	        }
	    };
	    TimeoutWithSubscriber.prototype._next = function (value) {
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	        _super.prototype._next.call(this, value);
	    };
	    TimeoutWithSubscriber.prototype._unsubscribe = function () {
	        this.action = undefined;
	        this.scheduler = null;
	        this.withObservable = null;
	    };
	    return TimeoutWithSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */
	function timeout(due, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return timeoutWith(due, throwError(new TimeoutError()), scheduler);
	}

	/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */
	function timestamp(scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return map(function (value) { return new Timestamp(value, scheduler.now()); });
	}
	var Timestamp = /*@__PURE__*/ (function () {
	    function Timestamp(value, timestamp) {
	        this.value = value;
	        this.timestamp = timestamp;
	    }
	    return Timestamp;
	}());

	/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
	function toArrayReducer(arr, item, index) {
	    if (index === 0) {
	        return [item];
	    }
	    arr.push(item);
	    return arr;
	}
	function toArray() {
	    return reduce(toArrayReducer, []);
	}

	/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */
	function window$1(windowBoundaries) {
	    return function windowOperatorFunction(source) {
	        return source.lift(new WindowOperator$1(windowBoundaries));
	    };
	}
	var WindowOperator$1 = /*@__PURE__*/ (function () {
	    function WindowOperator(windowBoundaries) {
	        this.windowBoundaries = windowBoundaries;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        var windowSubscriber = new WindowSubscriber$1(subscriber);
	        var sourceSubscription = source.subscribe(windowSubscriber);
	        if (!sourceSubscription.closed) {
	            windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));
	        }
	        return sourceSubscription;
	    };
	    return WindowOperator;
	}());
	var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
	    __extends$1(WindowSubscriber, _super);
	    function WindowSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.window = new Subject();
	        destination.next(_this.window);
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function () {
	        this.openWindow();
	    };
	    WindowSubscriber.prototype.notifyError = function (error) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function () {
	        this._complete();
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	    };
	    WindowSubscriber.prototype._unsubscribe = function () {
	        this.window = null;
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var destination = this.destination;
	        var newWindow = this.window = new Subject();
	        destination.next(newWindow);
	    };
	    return WindowSubscriber;
	}(SimpleOuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
	function windowCount(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) {
	        startWindowEvery = 0;
	    }
	    return function windowCountOperatorFunction(source) {
	        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
	    };
	}
	var WindowCountOperator = /*@__PURE__*/ (function () {
	    function WindowCountOperator(windowSize, startWindowEvery) {
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	    }
	    WindowCountOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
	    };
	    return WindowCountOperator;
	}());
	var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(WindowCountSubscriber, _super);
	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowSize = windowSize;
	        _this.startWindowEvery = startWindowEvery;
	        _this.windows = [new Subject()];
	        _this.count = 0;
	        destination.next(_this.windows[0]);
	        return _this;
	    }
	    WindowCountSubscriber.prototype._next = function (value) {
	        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
	        var destination = this.destination;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len && !this.closed; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0 && !this.closed) {
	            var window_1 = new Subject();
	            windows.push(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowCountSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().error(err);
	            }
	        }
	        this.destination.error(err);
	    };
	    WindowCountSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        if (windows) {
	            while (windows.length > 0 && !this.closed) {
	                windows.shift().complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowCountSubscriber.prototype._unsubscribe = function () {
	        this.count = 0;
	        this.windows = null;
	    };
	    return WindowCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
	function windowTime(windowTimeSpan) {
	    var scheduler = async;
	    var windowCreationInterval = null;
	    var maxWindowSize = Number.POSITIVE_INFINITY;
	    if (isScheduler(arguments[3])) {
	        scheduler = arguments[3];
	    }
	    if (isScheduler(arguments[2])) {
	        scheduler = arguments[2];
	    }
	    else if (isNumeric(arguments[2])) {
	        maxWindowSize = Number(arguments[2]);
	    }
	    if (isScheduler(arguments[1])) {
	        scheduler = arguments[1];
	    }
	    else if (isNumeric(arguments[1])) {
	        windowCreationInterval = Number(arguments[1]);
	    }
	    return function windowTimeOperatorFunction(source) {
	        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
	    };
	}
	var WindowTimeOperator = /*@__PURE__*/ (function () {
	    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.maxWindowSize = maxWindowSize;
	        this.scheduler = scheduler;
	    }
	    WindowTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
	    };
	    return WindowTimeOperator;
	}());
	var CountedSubject = /*@__PURE__*/ (function (_super) {
	    __extends$1(CountedSubject, _super);
	    function CountedSubject() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._numberOfNextedValues = 0;
	        return _this;
	    }
	    CountedSubject.prototype.next = function (value) {
	        this._numberOfNextedValues++;
	        _super.prototype.next.call(this, value);
	    };
	    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
	        get: function () {
	            return this._numberOfNextedValues;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return CountedSubject;
	}(Subject));
	var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(WindowTimeSubscriber, _super);
	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.windowTimeSpan = windowTimeSpan;
	        _this.windowCreationInterval = windowCreationInterval;
	        _this.maxWindowSize = maxWindowSize;
	        _this.scheduler = scheduler;
	        _this.windows = [];
	        var window = _this.openWindow();
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var closeState = { subscriber: _this, window: window, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
	            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        }
	        else {
	            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
	            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	        return _this;
	    }
	    WindowTimeSubscriber.prototype._next = function (value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            var window_1 = windows[i];
	            if (!window_1.closed) {
	                window_1.next(value);
	                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
	                    this.closeWindow(window_1);
	                }
	            }
	        }
	    };
	    WindowTimeSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowTimeSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            var window_2 = windows.shift();
	            if (!window_2.closed) {
	                window_2.complete();
	            }
	        }
	        this.destination.complete();
	    };
	    WindowTimeSubscriber.prototype.openWindow = function () {
	        var window = new CountedSubject();
	        this.windows.push(window);
	        var destination = this.destination;
	        destination.next(window);
	        return window;
	    };
	    WindowTimeSubscriber.prototype.closeWindow = function (window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };
	    return WindowTimeSubscriber;
	}(Subscriber));
	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
	    if (window) {
	        subscriber.closeWindow(window);
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(state) {
	    var subscriber = state.subscriber, window = state.window, context = state.context;
	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}

	/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function windowToggle(openings, closingSelector) {
	    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };
	}
	var WindowToggleOperator = /*@__PURE__*/ (function () {
	    function WindowToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    WindowToggleOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
	    };
	    return WindowToggleOperator;
	}());
	var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(WindowToggleSubscriber, _super);
	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.openings = openings;
	        _this.closingSelector = closingSelector;
	        _this.contexts = [];
	        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
	        return _this;
	    }
	    WindowToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        if (contexts) {
	            var len = contexts.length;
	            for (var i = 0; i < len; i++) {
	                contexts[i].window.next(value);
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_1 = contexts[index];
	                context_1.window.error(err);
	                context_1.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._error.call(this, err);
	    };
	    WindowToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_2 = contexts[index];
	                context_2.window.complete();
	                context_2.subscription.unsubscribe();
	            }
	        }
	        _super.prototype._complete.call(this);
	    };
	    WindowToggleSubscriber.prototype._unsubscribe = function () {
	        var contexts = this.contexts;
	        this.contexts = null;
	        if (contexts) {
	            var len = contexts.length;
	            var index = -1;
	            while (++index < len) {
	                var context_3 = contexts[index];
	                context_3.window.unsubscribe();
	                context_3.subscription.unsubscribe();
	            }
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (outerValue === this.openings) {
	            var closingNotifier = void 0;
	            try {
	                var closingSelector = this.closingSelector;
	                closingNotifier = closingSelector(innerValue);
	            }
	            catch (e) {
	                return this.error(e);
	            }
	            var window_1 = new Subject();
	            var subscription = new Subscription();
	            var context_4 = { window: window_1, subscription: subscription };
	            this.contexts.push(context_4);
	            var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
	            if (innerSubscription.closed) {
	                this.closeWindow(this.contexts.length - 1);
	            }
	            else {
	                innerSubscription.context = context_4;
	                subscription.add(innerSubscription);
	            }
	            this.destination.next(window_1);
	        }
	        else {
	            this.closeWindow(this.contexts.indexOf(outerValue));
	        }
	    };
	    WindowToggleSubscriber.prototype.notifyError = function (err) {
	        this.error(err);
	    };
	    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
	        if (inner !== this.openSubscription) {
	            this.closeWindow(this.contexts.indexOf(inner.context));
	        }
	    };
	    WindowToggleSubscriber.prototype.closeWindow = function (index) {
	        if (index === -1) {
	            return;
	        }
	        var contexts = this.contexts;
	        var context = contexts[index];
	        var window = context.window, subscription = context.subscription;
	        contexts.splice(index, 1);
	        window.complete();
	        subscription.unsubscribe();
	    };
	    return WindowToggleSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function windowWhen(closingSelector) {
	    return function windowWhenOperatorFunction(source) {
	        return source.lift(new WindowOperator(closingSelector));
	    };
	}
	var WindowOperator = /*@__PURE__*/ (function () {
	    function WindowOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    WindowOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
	    };
	    return WindowOperator;
	}());
	var WindowSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingSelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        _this.closingSelector = closingSelector;
	        _this.openWindow();
	        return _this;
	    }
	    WindowSubscriber.prototype.notifyNext = function (_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype.notifyError = function (error) {
	        this._error(error);
	    };
	    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.openWindow(innerSub);
	    };
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	        this.unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
	        if (this.closingNotification) {
	            this.closingNotification.unsubscribe();
	        }
	    };
	    WindowSubscriber.prototype.openWindow = function (innerSub) {
	        if (innerSub === void 0) {
	            innerSub = null;
	        }
	        if (innerSub) {
	            this.remove(innerSub);
	            innerSub.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var window = this.window = new Subject();
	        this.destination.next(window);
	        var closingNotifier;
	        try {
	            var closingSelector = this.closingSelector;
	            closingNotifier = closingSelector();
	        }
	        catch (e) {
	            this.destination.error(e);
	            this.window.error(e);
	            return;
	        }
	        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
	    };
	    return WindowSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function withLatestFrom() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    return function (source) {
	        var project;
	        if (typeof args[args.length - 1] === 'function') {
	            project = args.pop();
	        }
	        var observables = args;
	        return source.lift(new WithLatestFromOperator(observables, project));
	    };
	}
	var WithLatestFromOperator = /*@__PURE__*/ (function () {
	    function WithLatestFromOperator(observables, project) {
	        this.observables = observables;
	        this.project = project;
	    }
	    WithLatestFromOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
	    };
	    return WithLatestFromOperator;
	}());
	var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1(WithLatestFromSubscriber, _super);
	    function WithLatestFromSubscriber(destination, observables, project) {
	        var _this = _super.call(this, destination) || this;
	        _this.observables = observables;
	        _this.project = project;
	        _this.toRespond = [];
	        var len = observables.length;
	        _this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            _this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            _this.add(subscribeToResult(_this, observable, undefined, i));
	        }
	        return _this;
	    }
	    WithLatestFromSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {
	        this.values[outerIndex] = innerValue;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype.notifyComplete = function () {
	    };
	    WithLatestFromSubscriber.prototype._next = function (value) {
	        if (this.toRespond.length === 0) {
	            var args = [value].concat(this.values);
	            if (this.project) {
	                this._tryProject(args);
	            }
	            else {
	                this.destination.next(args);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype._tryProject = function (args) {
	        var result;
	        try {
	            result = this.project.apply(this, args);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return WithLatestFromSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
	function zip() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return function zipOperatorFunction(source) {
	        return source.lift.call(zip$1.apply(void 0, [source].concat(observables)));
	    };
	}

	/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
	function zipAll(project) {
	    return function (source) { return source.lift(new ZipOperator(project)); };
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */

	var operators$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		audit: audit,
		auditTime: auditTime,
		buffer: buffer,
		bufferCount: bufferCount,
		bufferTime: bufferTime,
		bufferToggle: bufferToggle,
		bufferWhen: bufferWhen,
		catchError: catchError,
		combineAll: combineAll,
		combineLatest: combineLatest,
		concat: concat,
		concatAll: concatAll,
		concatMap: concatMap,
		concatMapTo: concatMapTo,
		count: count,
		debounce: debounce,
		debounceTime: debounceTime,
		defaultIfEmpty: defaultIfEmpty,
		delay: delay,
		delayWhen: delayWhen,
		dematerialize: dematerialize,
		distinct: distinct,
		distinctUntilChanged: distinctUntilChanged,
		distinctUntilKeyChanged: distinctUntilKeyChanged,
		elementAt: elementAt,
		endWith: endWith,
		every: every,
		exhaust: exhaust,
		exhaustMap: exhaustMap,
		expand: expand,
		filter: filter,
		finalize: finalize,
		find: find,
		findIndex: findIndex,
		first: first,
		groupBy: groupBy,
		ignoreElements: ignoreElements,
		isEmpty: isEmpty,
		last: last,
		map: map,
		mapTo: mapTo,
		materialize: materialize,
		max: max,
		merge: merge,
		mergeAll: mergeAll,
		mergeMap: mergeMap,
		flatMap: flatMap,
		mergeMapTo: mergeMapTo,
		mergeScan: mergeScan,
		min: min,
		multicast: multicast,
		observeOn: observeOn,
		onErrorResumeNext: onErrorResumeNext,
		pairwise: pairwise,
		partition: partition,
		pluck: pluck,
		publish: publish,
		publishBehavior: publishBehavior,
		publishLast: publishLast,
		publishReplay: publishReplay,
		race: race,
		reduce: reduce,
		repeat: repeat,
		repeatWhen: repeatWhen,
		retry: retry,
		retryWhen: retryWhen,
		refCount: refCount,
		sample: sample,
		sampleTime: sampleTime,
		scan: scan,
		sequenceEqual: sequenceEqual,
		share: share,
		shareReplay: shareReplay,
		single: single,
		skip: skip,
		skipLast: skipLast,
		skipUntil: skipUntil,
		skipWhile: skipWhile,
		startWith: startWith,
		subscribeOn: subscribeOn,
		switchAll: switchAll,
		switchMap: switchMap,
		switchMapTo: switchMapTo,
		take: take,
		takeLast: takeLast,
		takeUntil: takeUntil,
		takeWhile: takeWhile,
		tap: tap,
		throttle: throttle,
		throttleTime: throttleTime,
		throwIfEmpty: throwIfEmpty,
		timeInterval: timeInterval,
		timeout: timeout,
		timeoutWith: timeoutWith,
		timestamp: timestamp,
		toArray: toArray,
		window: window$1,
		windowCount: windowCount,
		windowTime: windowTime,
		windowToggle: windowToggle,
		windowWhen: windowWhen,
		withLatestFrom: withLatestFrom,
		zip: zip,
		zipAll: zipAll
	});

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(operators$5);

	Object.defineProperty(rpcTransport_cjs_production_min,"__esModule",{value:!0});var t$7=require$$4$1,r$6=require$$4,e$7=require$$2;function n$6(t,r,e,n,o,i,a){try{var u=t[i](a),c=u.value;}catch(t){return void e(t)}u.done?r(c):Promise.resolve(c).then(n,o);}function o$5(t){return function(){var r=this,e=arguments;return new Promise((function(o,i){var a=t.apply(r,e);function u(t){n$6(a,o,i,u,c,"next",t);}function c(t){n$6(a,o,i,u,c,"throw",t);}u(void 0);}))}}function i$4(t,r){return t(r={exports:{}},r.exports),r.exports}var a$4=i$4((function(t){var r=function(t){var r=Object.prototype,e=r.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{u({},"");}catch(t){u=function(t,r,e){return t[r]=e};}function c(t,r,e,n){var o=Object.create((r&&r.prototype instanceof h?r:h).prototype),i=new E(n||[]);return o._invoke=function(t,r,e){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return {value:void 0,done:!0}}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=x(a,e);if(u){if(u===f)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===n)throw n="completed",e.arg;e.dispatchException(e.arg);}else "return"===e.method&&e.abrupt("return",e.arg);n="executing";var c=s(t,r,e);if("normal"===c.type){if(n=e.done?"completed":"suspendedYield",c.arg===f)continue;return {value:c.arg,done:e.done}}"throw"===c.type&&(n="completed",e.method="throw",e.arg=c.arg);}}}(t,e,i),o}function s(t,r,e){try{return {type:"normal",arg:t.call(r,e)}}catch(t){return {type:"throw",arg:t}}}t.wrap=c;var f={};function h(){}function l(){}function p(){}var v={};v[o]=function(){return this};var d=Object.getPrototypeOf,y=d&&d(d(_([])));y&&y!==r&&e.call(y,o)&&(v=y);var g=p.prototype=h.prototype=Object.create(v);function m(t){["next","throw","return"].forEach((function(r){u(t,r,(function(t){return this._invoke(r,t)}));}));}function w(t,r){var n;this._invoke=function(o,i){function a(){return new r((function(n,a){!function n(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,h=f.value;return h&&"object"==typeof h&&e.call(h,"__await")?r.resolve(h.__await).then((function(t){n("next",t,a,u);}),(function(t){n("throw",t,a,u);})):r.resolve(h).then((function(t){f.value=t,a(f);}),(function(t){return n("throw",t,a,u)}))}u(c.arg);}(o,i,n,a);}))}return n=n?n.then(a,a):a()};}function x(t,r){var e=t.iterator[r.method];if(void 0===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=void 0,x(t,r),"throw"===r.method))return f;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method");}return f}var n=s(e,t.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,f;var o=n.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,f):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,f)}function L(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r);}function b(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r;}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0);}function _(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function r(){for(;++n<t.length;)if(e.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=void 0,r.done=!0,r};return i.next=i}}return {next:j}}function j(){return {value:void 0,done:!0}}return l.prototype=g.constructor=p,p.constructor=l,l.displayName=u(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return !!r&&(r===l||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,u(t,a,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return {__await:t}},m(w.prototype),w.prototype[i]=function(){return this},t.AsyncIterator=w,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new w(c(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},m(g),u(g,a,"Generator"),g[o]=function(){return this},g.toString=function(){return "[object Generator]"},t.keys=function(t){var r=[];for(var e in t)r.push(e);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=_,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(e,n){return a.type="throw",a.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else {if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),f},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),b(e),f}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;b(e);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:_(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=r;}catch(t){Function("r","regeneratorRuntime = r")(r);}}));function u$3(t){return function(){var r=o$5(a$4.mark((function r(n){var o;return a$4.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return o=t.pipe(e$7.first((function(t){return t.id===n.id}))).toPromise(),t.next(n),r.next=4,o;case 4:return r.abrupt("return",r.sent);case 5:case"end":return r.stop()}}),r)})));return function(t){return r.apply(this,arguments)}}()}function c$2(n,i,u){var c=t$7.createHandler(i,u);return r$6.pipe(e$7.mergeMap(function(){var t=o$5(a$4.mark((function t(r){return a$4.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,c(n,r);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})));return function(r){return t.apply(this,arguments)}}()))}rpcTransport_cjs_production_min.createClient=function(r){var e=u$3(r);return new t$7.RPCClient({send:e})},rpcTransport_cjs_production_min.createHandlerOperator=c$2,rpcTransport_cjs_production_min.createSendRequest=u$3,rpcTransport_cjs_production_min.serve=function(t,r,n,o){return t.pipe(c$2(r,n,o),e$7.filter((function(t){return null!=t}))).subscribe(t)};

	var rpcTransport_cjs_development = {};

	Object.defineProperty(rpcTransport_cjs_development, '__esModule', { value: true });

	var rpcUtils$1 = require$$4$1;
	var rxjs$3 = require$$4;
	var operators$4 = require$$2;

	function asyncGeneratorStep$4(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$4(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$4(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$4(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function createCommonjsModule$4(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$4 = /*#__PURE__*/createCommonjsModule$4(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};

	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);

	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };

	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	function createSendRequest(transport) {
	  return /*#__PURE__*/function () {
	    var _send = _asyncToGenerator$4( /*#__PURE__*/runtime_1$4.mark(function _callee(req) {
	      var res;
	      return runtime_1$4.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              res = transport.pipe(operators$4.first(function (res) {
	                return res.id === req.id;
	              })).toPromise();
	              transport.next(req);
	              _context.next = 4;
	              return res;

	            case 4:
	              return _context.abrupt("return", _context.sent);

	            case 5:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    function send(_x) {
	      return _send.apply(this, arguments);
	    }

	    return send;
	  }();
	}
	function createClient$1(transport) {
	  var send = createSendRequest(transport);
	  return new rpcUtils$1.RPCClient({
	    send: send
	  });
	}
	function createHandlerOperator(context, methods, options) {
	  var handleRequest = rpcUtils$1.createHandler(methods, options);
	  return rxjs$3.pipe(operators$4.mergeMap( /*#__PURE__*/function () {
	    var _ref = _asyncToGenerator$4( /*#__PURE__*/runtime_1$4.mark(function _callee2(req) {
	      return runtime_1$4.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return handleRequest(context, req);

	            case 2:
	              return _context2.abrupt("return", _context2.sent);

	            case 3:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    return function (_x2) {
	      return _ref.apply(this, arguments);
	    };
	  }()));
	}
	function serve$1(transport, context, methods, options) {
	  return transport.pipe(createHandlerOperator(context, methods, options), operators$4.filter(function (res) {
	    return res != null;
	  })).subscribe(transport);
	}

	rpcTransport_cjs_development.createClient = createClient$1;
	rpcTransport_cjs_development.createHandlerOperator = createHandlerOperator;
	rpcTransport_cjs_development.createSendRequest = createSendRequest;
	rpcTransport_cjs_development.serve = serve$1;

	if (process.env.NODE_ENV === 'production') {
	  dist$3.exports = rpcTransport_cjs_production_min;
	} else {
	  dist$3.exports = rpcTransport_cjs_development;
	}

	var dist$2 = {exports: {}};

	var transportSubject_cjs_production_min = {};

	Object.defineProperty(transportSubject_cjs_production_min,"__esModule",{value:!0});var r$5=require$$4,t$6=require$$2;function e$6(r,t){return (e$6=Object.setPrototypeOf||function(r,t){return r.__proto__=t,r})(r,t)}var n$5=function(t){var n,o;function p(r,e){var n;return (n=t.call(this)||this)._source=r,n._sink=e,n}o=t,(n=p).prototype=Object.create(o.prototype),n.prototype.constructor=n,e$6(n,o);var u=p.prototype;return u.next=function(r){var t,e;null==(t=(e=this._sink).next)||t.call(e,r);},u.error=function(r){var t,e;null==(t=(e=this._sink).error)||t.call(e,r);},u.complete=function(){var r,t;null==(r=(t=this._sink).complete)||r.call(t);},u._subscribe=function(t){var e;return null!=(e=this._source.subscribe(t))?e:r$5.Subscription.EMPTY},p}(r$5.Subject);function o$4(r){return function(t){return {__tw:!0,ns:r,msg:t}}}function p$1(r){return function(t){if(!0!==t.__tw)throw new Error("Input is not a wrapped message");if("string"!=typeof t.ns)throw new Error("Invalid namespace type for wrapped message: expected a string, got "+typeof t.ns);if(t.ns!==r)throw new Error("Invalid namespace for wrapped message: expected "+r+", got "+t.ns);return t.msg}}function u$2(r){return {wrap:o$4(r),unwrap:p$1(r)}}function a$3(e,n){if(void 0===n&&(n={}),n.throwWhenInvalid)return r$5.pipe(t$6.map(e));var o="function"==typeof n.onInvalidInput?n.onInvalidInput:function(r,t){console.warn("Invalid transport input",r,t);};return r$5.pipe(t$6.map((function(r){try{return e(r)}catch(t){return o(r,t),null}})),t$6.filter((function(r){return null!==r})))}function i$3(t,e){return new r$5.Subscriber((function(r){null!=r&&t.next(e(r));}))}function s$3(r,t,e){var o=t.wrap;void 0===e&&(e={});var p=r.pipe(a$3(t.unwrap,e)),u=i$3(r,o);return new n$5(p,u)}transportSubject_cjs_production_min.TransportSubject=n$5,transportSubject_cjs_production_min.createNamespacedTransport=function(r,t,e){return s$3(r,u$2(t),e)},transportSubject_cjs_production_min.createUnwrap=p$1,transportSubject_cjs_production_min.createUnwrapOperator=a$3,transportSubject_cjs_production_min.createWrap=o$4,transportSubject_cjs_production_min.createWrapObserver=i$3,transportSubject_cjs_production_min.createWrappedTransport=s$3,transportSubject_cjs_production_min.createWrapper=u$2;

	var transportSubject_cjs_development = {};

	Object.defineProperty(transportSubject_cjs_development, '__esModule', { value: true });

	var rxjs$2 = require$$4;
	var operators$3 = require$$2;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;

	  _setPrototypeOf(subClass, superClass);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	var TransportSubject = /*#__PURE__*/function (_Subject) {
	  _inheritsLoose(TransportSubject, _Subject);

	  function TransportSubject(source, sink) {
	    var _this;

	    _this = _Subject.call(this) || this;
	    _this._source = source;
	    _this._sink = sink;
	    return _this;
	  } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	  // @ts-ignore MsgOut can be different from MsgIn


	  var _proto = TransportSubject.prototype;

	  _proto.next = function next(message) {
	    var _this$_sink$next, _this$_sink;

	    (_this$_sink$next = (_this$_sink = this._sink).next) == null ? void 0 : _this$_sink$next.call(_this$_sink, message);
	  } // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	  ;

	  _proto.error = function error(err) {
	    var _this$_sink$error, _this$_sink2;

	    (_this$_sink$error = (_this$_sink2 = this._sink).error) == null ? void 0 : _this$_sink$error.call(_this$_sink2, err);
	  };

	  _proto.complete = function complete() {
	    var _this$_sink$complete, _this$_sink3;

	    (_this$_sink$complete = (_this$_sink3 = this._sink).complete) == null ? void 0 : _this$_sink$complete.call(_this$_sink3);
	  };

	  _proto._subscribe = function _subscribe(subscriber) {
	    var _this$_source$subscri;

	    return (_this$_source$subscri = this._source.subscribe(subscriber)) != null ? _this$_source$subscri : rxjs$2.Subscription.EMPTY;
	  };

	  return TransportSubject;
	}(rxjs$2.Subject);
	function createWrap(namespace) {
	  return function wrap(msg) {
	    return {
	      __tw: true,
	      ns: namespace,
	      msg: msg
	    };
	  };
	}
	function createUnwrap(namespace) {
	  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
	  return function unwrap(input) {
	    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
	    if (input.__tw !== true) {
	      throw new Error('Input is not a wrapped message');
	    }

	    if (typeof input.ns !== 'string') {
	      throw new Error("Invalid namespace type for wrapped message: expected a string, got " + typeof input.ns);
	    }

	    if (input.ns !== namespace) {
	      throw new Error("Invalid namespace for wrapped message: expected " + namespace + ", got " + input.ns);
	    }

	    return input.msg;
	    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
	  };
	}
	function createWrapper(namespace) {
	  return {
	    wrap: createWrap(namespace),
	    unwrap: createUnwrap(namespace)
	  };
	}
	function createUnwrapOperator(unwrap, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  if (options.throwWhenInvalid) {
	    return rxjs$2.pipe(operators$3.map(unwrap));
	  }

	  var onInvalid = typeof options.onInvalidInput === 'function' ? options.onInvalidInput : function onInvalid(input, error) {
	    console.warn('Invalid transport input', input, error);
	  };
	  return rxjs$2.pipe(operators$3.map(function (input) {
	    try {
	      return unwrap(input);
	    } catch (err) {
	      onInvalid(input, err);
	      return null;
	    }
	  }), operators$3.filter(function (msg) {
	    return msg !== null;
	  }));
	}
	function createWrapObserver(observer, wrap) {
	  return new rxjs$2.Subscriber(function (msg) {
	    if (msg != null) {
	      observer.next(wrap(msg));
	    }
	  });
	}
	function createWrappedTransport(transport, _ref, options) {
	  var wrap = _ref.wrap,
	      unwrap = _ref.unwrap;

	  if (options === void 0) {
	    options = {};
	  }

	  var source = transport.pipe(createUnwrapOperator(unwrap, options));
	  var sink = createWrapObserver(transport, wrap);
	  return new TransportSubject(source, sink);
	}
	function createNamespacedTransport(transport, namespace, options) {
	  return createWrappedTransport(transport, createWrapper(namespace), options);
	}

	transportSubject_cjs_development.TransportSubject = TransportSubject;
	transportSubject_cjs_development.createNamespacedTransport = createNamespacedTransport;
	transportSubject_cjs_development.createUnwrap = createUnwrap;
	transportSubject_cjs_development.createUnwrapOperator = createUnwrapOperator;
	transportSubject_cjs_development.createWrap = createWrap;
	transportSubject_cjs_development.createWrapObserver = createWrapObserver;
	transportSubject_cjs_development.createWrappedTransport = createWrappedTransport;
	transportSubject_cjs_development.createWrapper = createWrapper;

	if (process.env.NODE_ENV === 'production') {
	  dist$2.exports = transportSubject_cjs_production_min;
	} else {
	  dist$2.exports = transportSubject_cjs_development;
	}

	var dist$1 = {exports: {}};

	var transportPostmessage_cjs_production_min = {};

	Object.defineProperty(transportPostmessage_cjs_production_min,"__esModule",{value:!0});var e$5=dist$2.exports,r$4=require$$4,t$5=require$$2;function n$4(e){return Array.isArray(e)||(e=[e]),function(r){return e.includes(r.origin)}}function s$2(e,s){var o=r$4.fromEvent(e,"message");if(null==s)return o;var a="function"==typeof s?s:n$4(s);return o.pipe(t$5.filter(a))}function o$3(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),s=1;s<t;s++)n[s-1]=arguments[s];return r$4.Subscriber.create((function(r){null!=r&&e.postMessage.apply(e,[r].concat(n));}))}transportPostmessage_cjs_production_min.createMessageObservable=s$2,transportPostmessage_cjs_production_min.createOriginFilter=n$4,transportPostmessage_cjs_production_min.createPostMessageObserver=o$3,transportPostmessage_cjs_production_min.createPostMessageTransport=function(r,t,n){void 0===t&&(t=r);var a=void 0===n?{}:n,i=a.postMessageArguments,u=void 0===i?[]:i,c=s$2(r,a.filter),p=o$3.apply(void 0,[t].concat(u));return new e$5.TransportSubject(c,p)};

	var transportPostmessage_cjs_development = {};

	Object.defineProperty(transportPostmessage_cjs_development, '__esModule', { value: true });

	var transportSubject$1 = dist$2.exports;
	var rxjs$1 = require$$4;
	var operators$2 = require$$2;

	function createOriginFilter(allowedOrigin) {
	  if (!Array.isArray(allowedOrigin)) {
	    allowedOrigin = [allowedOrigin];
	  }

	  return function (event) {
	    return allowedOrigin.includes(event.origin);
	  };
	}
	function createMessageObservable(target, originOrFilter) {
	  var source = rxjs$1.fromEvent(target, 'message');

	  if (originOrFilter == null) {
	    return source;
	  }

	  var messageFilter = typeof originOrFilter === 'function' ? originOrFilter : createOriginFilter(originOrFilter);
	  return source.pipe(operators$2.filter(messageFilter));
	}
	function createPostMessageObserver(target) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return rxjs$1.Subscriber.create(function (message) {
	    if (message != null) {
	      target.postMessage.apply(target, [message].concat(args));
	    }
	  });
	}
	function createPostMessageTransport(from, to, _temp) {
	  if (to === void 0) {
	    to = from;
	  }

	  var _ref = _temp === void 0 ? {} : _temp,
	      filter = _ref.filter,
	      _ref$postMessageArgum = _ref.postMessageArguments,
	      postMessageArguments = _ref$postMessageArgum === void 0 ? [] : _ref$postMessageArgum;

	  var source = createMessageObservable(from, filter);
	  var sink = createPostMessageObserver.apply(void 0, [to].concat(postMessageArguments));
	  return new transportSubject$1.TransportSubject(source, sink);
	}

	transportPostmessage_cjs_development.createMessageObservable = createMessageObservable;
	transportPostmessage_cjs_development.createOriginFilter = createOriginFilter;
	transportPostmessage_cjs_development.createPostMessageObserver = createPostMessageObserver;
	transportPostmessage_cjs_development.createPostMessageTransport = createPostMessageTransport;

	if (process.env.NODE_ENV === 'production') {
	  dist$1.exports = transportPostmessage_cjs_production_min;
	} else {
	  dist$1.exports = transportPostmessage_cjs_development;
	}

	Object.defineProperty(rpcPostmessage_cjs_production_min,"__esModule",{value:!0});var t$4=dist$3.exports,e$4=dist$2.exports,r$3=dist$1.exports,n$3=require$$4$1,o$2=require$$4,i$2=require$$2;function a$2(t,e,r,n,o,i,a){try{var u=t[i](a),c=u.value;}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o);}function u$1(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function u(t){a$2(i,n,o,u,c,"next",t);}function c(t){a$2(i,n,o,u,c,"throw",t);}u(void 0);}))}}function c$1(t,e){if(null==t)return {};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)e.indexOf(r=i[n])>=0||(o[r]=t[r]);return o}var s$1,f$1=(function(t){var e=function(t){var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"");}catch(t){u=function(t,e,r){return t[e]=r};}function c(t,e,r,n){var o=Object.create((e&&e.prototype instanceof l?e:l).prototype),i=new E(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return {value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=x(a,r);if(u){if(u===f)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg);}else "return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=s(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===f)continue;return {value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg);}}}(t,r,i),o}function s(t,e,r){try{return {type:"normal",arg:t.call(e,r)}}catch(t){return {type:"throw",arg:t}}}t.wrap=c;var f={};function l(){}function p(){}function h(){}var v={};u(v,o,(function(){return this}));var d=Object.getPrototypeOf,y=d&&d(d(O([])));y&&y!==e&&r.call(y,o)&&(v=y);var m=h.prototype=l.prototype=Object.create(v);function g(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}));}));}function w(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u);}),(function(t){n("throw",t,a,u);})):e.resolve(l).then((function(t){f.value=t,a(f);}),(function(t){return n("throw",t,a,u)}))}u(c.arg);}(o,i,n,a);}))}return n=n?n.then(a,a):a()};}function x(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method");}return f}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function b(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e);}function L(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e;}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0);}function O(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return {next:j}}function j(){return {value:void 0,done:!0}}return p.prototype=h,u(m,"constructor",h),u(h,"constructor",p),p.displayName=u(h,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return !!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return {__await:t}},g(w.prototype),u(w.prototype,i,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(c(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),u(m,a,"Generator"),u(m,o,(function(){return this})),u(m,"toString",(function(){return "[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=O,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(L),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else {if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),L(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;L(r);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:O(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=e;}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e);}}(s$1={exports:{}}),s$1.exports),l=["target","methods"],p=["filter","methods","namespace","target"];function h(t,r,a){void 0===a&&(a={});var c=n$3.createHandler(t,a),s=e$4.createUnwrap(r);return o$2.pipe(i$2.map((function(t){try{var e=s(t.data);return e.method?{type:"request",message:t,request:e}:null}catch(t){return null}})),i$2.filter((function(t){return null!==t})),i$2.mergeMap(function(){var t=u$1(f$1.mark((function t(e){return f$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=e.message,t.t1=e.request,t.next=4,c(e.message,e.request);case 4:return t.t2=t.sent,t.abrupt("return",{type:"handled",message:t.t0,request:t.t1,response:t.t2});case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()))}function v(t,r,n){var o=e$4.createWrapper(r),a=e$4.createWrapObserver(t,o.wrap),c=e$4.createUnwrapOperator(o.unwrap,n);return function(){var e=u$1(f$1.mark((function e(r){var n;return f$1.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.pipe(i$2.map((function(t){return t.data})),c,i$2.first((function(t){return null!=t&&t.id===r.id&&("error"in t||"result"in t)}))).toPromise(),a.next(r),e.next=4,n;case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()}rpcPostmessage_cjs_production_min.createNamespaceClient=function(t,e,r){var o=v(t,e,r);return new n$3.RPCClient({send:o})},rpcPostmessage_cjs_production_min.createNamespaceRequestHandlerOperator=h,rpcPostmessage_cjs_production_min.createNamespaceSendRequest=v,rpcPostmessage_cjs_production_min.createNamespaceServer=function(t){var n=t.filter,o=t.methods,a=t.namespace,u=t.target,s=c$1(t,p),f=e$4.createWrap(a);return r$3.createMessageObservable(u,n).pipe(h(o,a,s),i$2.tap((function(t){var e;null!=t.response&&(null!=(e=t.message.source)?e:window).postMessage(f(t.response),t.message.origin||"*");})))},rpcPostmessage_cjs_production_min.serve=function(e){var n=e.target,o=e.methods,a=c$1(e,l),u=r$3.createPostMessageTransport(n);return u.pipe(i$2.map((function(t){return t.data})),t$4.createHandlerOperator(null,o,a),i$2.filter((function(t){return null!=t}))).subscribe(u)};

	var rpcPostmessage_cjs_development = {};

	Object.defineProperty(rpcPostmessage_cjs_development, '__esModule', { value: true });

	var rpcTransport = dist$3.exports;
	var transportSubject = dist$2.exports;
	var transportPostmessage$2 = dist$1.exports;
	var rpcUtils = require$$4$1;
	var rxjs = require$$4;
	var operators$1 = require$$2;

	function asyncGeneratorStep$3(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$3(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$3(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$3(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function createCommonjsModule$3(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$3 = createCommonjsModule$3(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  define(IteratorPrototype, iteratorSymbol, function () {
	    return this;
	  });

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = GeneratorFunctionPrototype;
	  define(Gp, "constructor", GeneratorFunctionPrototype);
	  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	    return this;
	  });
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  define(Gp, iteratorSymbol, function() {
	    return this;
	  });

	  define(Gp, "toString", function() {
	    return "[object Generator]";
	  });

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, in modern engines
	  // we can explicitly access globalThis. In older engines we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  if (typeof globalThis === "object") {
	    globalThis.regeneratorRuntime = runtime;
	  } else {
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	}
	});

	var _excluded = ["target", "methods"],
	    _excluded2 = ["filter", "methods", "namespace", "target"];
	function serve(_ref) {
	  var target = _ref.target,
	      methods = _ref.methods,
	      options = _objectWithoutPropertiesLoose(_ref, _excluded);

	  var transport = transportPostmessage$2.createPostMessageTransport(target);
	  return transport.pipe(operators$1.map(function (event) {
	    return event.data;
	  }), rpcTransport.createHandlerOperator(null, methods, options), operators$1.filter(function (res) {
	    return res != null;
	  })).subscribe(transport);
	}
	function createNamespaceRequestHandlerOperator(methods, namespace, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var handleRequest = rpcUtils.createHandler(methods, options);
	  var unwrap = transportSubject.createUnwrap(namespace);
	  return rxjs.pipe(operators$1.map(function (message) {
	    try {
	      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	      var request = unwrap(message.data); // TS error: semantic error TS2339: Property 'data' does not exist on type 'Message'

	      return request.method ? {
	        type: 'request',
	        message: message,
	        request: request
	      } : null;
	    } catch (_error) {
	      return null;
	    }
	  }), operators$1.filter(function (payload) {
	    return payload !== null;
	  }), operators$1.mergeMap( /*#__PURE__*/function () {
	    var _ref2 = _asyncToGenerator$3( /*#__PURE__*/runtime_1$3.mark(function _callee(payload) {
	      return runtime_1$3.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.t0 = payload.message;
	              _context.t1 = payload.request;
	              _context.next = 4;
	              return handleRequest(payload.message, payload.request);

	            case 4:
	              _context.t2 = _context.sent;
	              return _context.abrupt("return", {
	                type: 'handled',
	                message: _context.t0,
	                request: _context.t1,
	                response: _context.t2
	              });

	            case 6:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    return function (_x) {
	      return _ref2.apply(this, arguments);
	    };
	  }()));
	}
	function createNamespaceServer(_ref3) {
	  var messageFilter = _ref3.filter,
	      methods = _ref3.methods,
	      namespace = _ref3.namespace,
	      target = _ref3.target,
	      options = _objectWithoutPropertiesLoose(_ref3, _excluded2);

	  var wrap = transportSubject.createWrap(namespace);
	  return transportPostmessage$2.createMessageObservable(target, messageFilter).pipe(createNamespaceRequestHandlerOperator(methods, namespace, options), operators$1.tap(function (payload) {
	    if (payload.response != null) {
	      var _payload$message$sour;

	      var source = (_payload$message$sour = payload.message.source) != null ? _payload$message$sour : window;
	      source.postMessage(wrap(payload.response), payload.message.origin || '*');
	    }
	  }));
	}
	function createNamespaceSendRequest(transport, namespace, options) {
	  var wrapper = transportSubject.createWrapper(namespace);
	  var observer = transportSubject.createWrapObserver(transport, wrapper.wrap);
	  var unwrap = transportSubject.createUnwrapOperator(wrapper.unwrap, options);
	  return /*#__PURE__*/function () {
	    var _send = _asyncToGenerator$3( /*#__PURE__*/runtime_1$3.mark(function _callee2(req) {
	      var res;
	      return runtime_1$3.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              res = transport.pipe(operators$1.map(function (message) {
	                return message.data;
	              }), unwrap, operators$1.first(function (res) {
	                return res != null && res.id === req.id && ('error' in res || 'result' in res);
	              })).toPromise();
	              observer.next(req);
	              _context2.next = 4;
	              return res;

	            case 4:
	              return _context2.abrupt("return", _context2.sent);

	            case 5:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2);
	    }));

	    function send(_x2) {
	      return _send.apply(this, arguments);
	    }

	    return send;
	  }();
	}
	function createNamespaceClient(transport, namespace, options) {
	  var send = createNamespaceSendRequest(transport, namespace, options);
	  return new rpcUtils.RPCClient({
	    send: send
	  });
	}

	rpcPostmessage_cjs_development.createNamespaceClient = createNamespaceClient;
	rpcPostmessage_cjs_development.createNamespaceRequestHandlerOperator = createNamespaceRequestHandlerOperator;
	rpcPostmessage_cjs_development.createNamespaceSendRequest = createNamespaceSendRequest;
	rpcPostmessage_cjs_development.createNamespaceServer = createNamespaceServer;
	rpcPostmessage_cjs_development.serve = serve;

	if (process.env.NODE_ENV === 'production') {
	  dist$4.exports = rpcPostmessage_cjs_production_min;
	} else {
	  dist$4.exports = rpcPostmessage_cjs_development;
	}

	Object.defineProperty(rpcWindow_cjs_production_min,"__esModule",{value:!0});var e$3=dist$4.exports,r$2=dist$1.exports,t$3={onInvalidInput:function(e,r){},postMessageArguments:["*"]};rpcWindow_cjs_production_min.createClient=function(s,a,o){void 0===a&&(a=window),void 0===o&&(o=t$3);var n=r$2.createPostMessageTransport(window,a,o);return e$3.createNamespaceClient(n,s,o)},rpcWindow_cjs_production_min.createServer=function(r,t,s){return void 0===s&&(s=window),e$3.createNamespaceServer({methods:t,namespace:r,target:s})};

	var rpcWindow_cjs_development = {};

	Object.defineProperty(rpcWindow_cjs_development, '__esModule', { value: true });

	var rpcPostmessage = dist$4.exports;
	var transportPostmessage$1 = dist$1.exports;

	var DEFAULT_OPTIONS = {
	  onInvalidInput: function onInvalidInput(_input, _error) {// Silence warnings of invalid messages, such as message events sent by third-parties
	  },
	  // Client requests will be sent without origin restriction
	  postMessageArguments: ['*']
	};
	function createClient(namespace, target, options) {
	  if (target === void 0) {
	    target = window;
	  }

	  if (options === void 0) {
	    options = DEFAULT_OPTIONS;
	  }

	  var transport = transportPostmessage$1.createPostMessageTransport(window, target, options);
	  return rpcPostmessage.createNamespaceClient(transport, namespace, options);
	}
	function createServer(namespace, methods, target) {
	  if (target === void 0) {
	    target = window;
	  }

	  return rpcPostmessage.createNamespaceServer({
	    methods: methods,
	    namespace: namespace,
	    target: target
	  });
	}

	rpcWindow_cjs_development.createClient = createClient;
	rpcWindow_cjs_development.createServer = createServer;

	if (process.env.NODE_ENV === 'production') {
	  dist$5.exports = rpcWindow_cjs_production_min;
	} else {
	  dist$5.exports = rpcWindow_cjs_development;
	}

	Object.defineProperty(connectDisplay_cjs_production_min,"__esModule",{value:!0});var t$2=dist$5.exports,e$2=dist$1.exports,r$1=require$$2;function n$2(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value;}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o);}function o$1(t){return function(){var e=this,r=arguments;return new Promise((function(o,i){var a=t.apply(e,r);function c(t){n$2(a,o,i,c,u,"next",t);}function u(t){n$2(a,o,i,c,u,"throw",t);}c(void 0);}))}}function i$1(t,e){return t(e={exports:{}},e.exports),e.exports}var a$1=i$1((function(t){var e=function(t){var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"");}catch(t){c=function(t,e,r){return t[e]=r};}function u(t,e,r,n){var o=Object.create((e&&e.prototype instanceof h?e:h).prototype),i=new E(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return {value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg);}else "return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=s(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===f)continue;return {value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg);}}}(t,r,i),o}function s(t,e,r){try{return {type:"normal",arg:t.call(e,r)}}catch(t){return {type:"throw",arg:t}}}t.wrap=u;var f={};function h(){}function l(){}function p(){}var d={};c(d,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(_([])));y&&y!==e&&r.call(y,o)&&(d=y);var m=p.prototype=h.prototype=Object.create(d);function g(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}));}));}function w(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,c){var u=s(t[o],t,i);if("throw"!==u.type){var f=u.arg,h=f.value;return h&&"object"==typeof h&&r.call(h,"__await")?e.resolve(h.__await).then((function(t){n("next",t,a,c);}),(function(t){n("throw",t,a,c);})):e.resolve(h).then((function(t){f.value=t,a(f);}),(function(t){return n("throw",t,a,c)}))}c(u.arg);}(o,i,n,a);}))}return n=n?n.then(a,a):a()};}function x(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method");}return f}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function b(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e);}function L(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e;}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0);}function _(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return {next:P}}function P(){return {value:void 0,done:!0}}return l.prototype=p,c(m,"constructor",p),c(p,"constructor",l),l.displayName=c(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return !!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,c(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return {__await:t}},g(w.prototype),c(w.prototype,i,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),c(m,a,"Generator"),c(m,o,(function(){return this})),c(m,"toString",(function(){return "[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=_,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(L),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else {if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),L(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;L(r);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:_(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=e;}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e);}})),c="position: fixed; width:0; height:0; border:0; border:none !important",u=function(){function e(e){void 0===e&&(e=window.parent),this.client=t$2.createClient("3id-connect-iframedisplay",e);}var r=e.prototype;return r.hide=function(){var t=o$1(a$1.mark((function t(){return a$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.client.request("hide");case 2:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),r.display=function(){var t=o$1(a$1.mark((function t(e,r,n){return a$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.client.request("display",{mobile:e,height:r,width:n});case 2:case"end":return t.stop()}}),t,this)})));return function(e,r,n){return t.apply(this,arguments)}}(),e}(),s=function(){function e(e){void 0===e&&(e=window.parent),this.client=t$2.createClient("3id-connect-managedisplay",e);}return e.prototype.display=function(){var t=o$1(a$1.mark((function t(e){return a$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.client.request("display",{accountId:e});case 2:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),e}(),f=function(t){var e=document.createElement("iframe");return e.name="threeid-connect-manage",e.className="threeid-connect-manage",e.src=t,e.allowtransparency=!1,e.style="border:none; border:0; z-index: 99998; position: fixed; width: 100%; height: 100%; top: 0; left: 0;",e};connectDisplay_cjs_production_min.DisplayConnectClientRPC=u,connectDisplay_cjs_production_min.DisplayManageClientRPC=s,connectDisplay_cjs_production_min.createConnectIframe=function(t){var e=document.createElement("iframe");return e.name="threeid-connect",e.className="threeid-connect",e.src=t,e.style=c,e.allowTransparency=!0,e.frameBorder=0,e},connectDisplay_cjs_production_min.createDisplayConnectServerRPC=function(e){var r=function(t){return function(e,r,n){void 0===e&&(e=!1),void 0===r&&(r="245px"),void 0===n&&(n="440px"),t.style="border:none; border:0; z-index: 99997; position: fixed; max-width: 100%; width: "+n+"; height: "+r+"; "+(e?"bottom: 0px; left: 0px;":"top: 10px; right: 10px");}}(e),n=function(t){return function(){return t.style=c}}(e);return t$2.createServer("3id-connect-iframedisplay",{hide:function(){n();},display:function(t,e){r(e.mobile,e.height,e.width);}})},connectDisplay_cjs_production_min.createDisplayManageServerRPC=function(n){var i,c;return t$2.createServer("3id-connect-managedisplay",{display:(c=o$1(a$1.mark((function t(o,c){var u,s;return a$1.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=f(n+"?accountId="+c.accountId),document.body.appendChild(i),t.next=5,new Promise((function(t){i.onload=t;}));case 5:return u=e$2.createMessageObservable(window),s=function(t){return "3id-connect-management"===t.data.ns},t.next=9,u.pipe(r$1.first(s)).toPromise();case 9:i.remove();case 10:case"end":return t.stop()}}),t)}))),function(t,e){return c.apply(this,arguments)})})},connectDisplay_cjs_production_min.createManageIframe=f;

	var connectDisplay_cjs_development = {};

	Object.defineProperty(connectDisplay_cjs_development, '__esModule', { value: true });

	var rpcWindow$1 = dist$5.exports;
	var transportPostmessage = dist$1.exports;
	var operators = require$$2;

	function asyncGeneratorStep$2(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$2(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$2(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$2(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function createCommonjsModule$2(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$2 = /*#__PURE__*/createCommonjsModule$2(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};
	    define(IteratorPrototype, iteratorSymbol, function () {
	      return this;
	    });
	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = GeneratorFunctionPrototype;
	    define(Gp, "constructor", GeneratorFunctionPrototype);
	    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);
	    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	      return this;
	    });
	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    define(Gp, iteratorSymbol, function () {
	      return this;
	    });
	    define(Gp, "toString", function () {
	      return "[object Generator]";
	    });

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, in modern engines
	    // we can explicitly access globalThis. In older engines we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    if (typeof globalThis === "object") {
	      globalThis.regeneratorRuntime = runtime;
	    } else {
	      Function("r", "regeneratorRuntime = r")(runtime);
	    }
	  }
	});

	var IFRAME_NAMESPACE = '3id-connect-iframedisplay';
	var MANAGE_NAMESPACE = '3id-connect-managedisplay';
	var TORUS_CONSENT_ZINDEX = 99999;
	var HIDE_IFRAME_STYLE = 'position: fixed; width:0; height:0; border:0; border:none !important';
	var DISPLAY_IFRAME_STYLE = "border:none; border:0; z-index: " + (TORUS_CONSENT_ZINDEX - 2) + "; position: fixed; max-width: 100%;";
	var DISPLAY_MANAGE_STYLE = "border:none; border:0; z-index: " + (TORUS_CONSENT_ZINDEX - 1) + "; position: fixed; width: 100%; height: 100%; top: 0; left: 0;";
	var IFRAME_TOP = "top: 10px; right: 10px";
	var IFRAME_BOTTOM = "bottom: 0px; left: 0px;"; // @ts-ignore

	var hide = function hide(iframe) {
	  return function () {
	    return iframe.style = HIDE_IFRAME_STYLE;
	  };
	};

	var display = function display(iframe) {
	  return function (mobile, height, width) {
	    if (mobile === void 0) {
	      mobile = false;
	    }

	    if (height === void 0) {
	      height = '245px';
	    }

	    if (width === void 0) {
	      width = '440px';
	    }

	    // @ts-ignore
	    iframe.style = DISPLAY_IFRAME_STYLE + " width: " + width + "; height: " + height + "; " + (mobile ? IFRAME_BOTTOM : IFRAME_TOP);
	  };
	};

	var DisplayConnectClientRPC = /*#__PURE__*/function () {
	  function DisplayConnectClientRPC(target) {
	    if (target === void 0) {
	      target = window.parent;
	    }

	    this.client = rpcWindow$1.createClient(IFRAME_NAMESPACE, target);
	  }

	  var _proto = DisplayConnectClientRPC.prototype;

	  _proto.hide = /*#__PURE__*/function () {
	    var _hide = /*#__PURE__*/_asyncToGenerator$2( /*#__PURE__*/runtime_1$2.mark(function _callee() {
	      return runtime_1$2.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.client.request('hide');

	            case 2:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function hide() {
	      return _hide.apply(this, arguments);
	    }

	    return hide;
	  }();

	  _proto.display = /*#__PURE__*/function () {
	    var _display = /*#__PURE__*/_asyncToGenerator$2( /*#__PURE__*/runtime_1$2.mark(function _callee2(mobile, height, width) {
	      return runtime_1$2.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              _context2.next = 2;
	              return this.client.request('display', {
	                mobile: mobile,
	                height: height,
	                width: width
	              });

	            case 2:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function display(_x, _x2, _x3) {
	      return _display.apply(this, arguments);
	    }

	    return display;
	  }();

	  return DisplayConnectClientRPC;
	}();
	function createDisplayConnectServerRPC(iframe) {
	  var callDisplay = display(iframe);
	  var callHide = hide(iframe);
	  return rpcWindow$1.createServer(IFRAME_NAMESPACE, {
	    hide: function hide() {
	      callHide();
	    },
	    display: function display(_event, _ref) {
	      var mobile = _ref.mobile,
	          height = _ref.height,
	          width = _ref.width;
	      callDisplay(mobile, height, width);
	    }
	  });
	}
	var createConnectIframe = function createConnectIframe(iframeUrl) {
	  var iframe = document.createElement('iframe');
	  iframe.name = 'threeid-connect';
	  iframe.className = 'threeid-connect';
	  iframe.src = iframeUrl; // @ts-ignore

	  iframe.style = HIDE_IFRAME_STYLE; // @ts-ignore

	  iframe.allowTransparency = true; // @ts-ignore

	  iframe.frameBorder = 0;
	  return iframe;
	};
	var DisplayManageClientRPC = /*#__PURE__*/function () {
	  function DisplayManageClientRPC(target) {
	    if (target === void 0) {
	      target = window.parent;
	    }

	    this.client = rpcWindow$1.createClient(MANAGE_NAMESPACE, target);
	  }

	  var _proto2 = DisplayManageClientRPC.prototype;

	  _proto2.display = /*#__PURE__*/function () {
	    var _display2 = /*#__PURE__*/_asyncToGenerator$2( /*#__PURE__*/runtime_1$2.mark(function _callee3(accountId) {
	      return runtime_1$2.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              _context3.next = 2;
	              return this.client.request('display', {
	                accountId: accountId
	              });

	            case 2:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));

	    function display(_x4) {
	      return _display2.apply(this, arguments);
	    }

	    return display;
	  }();

	  return DisplayManageClientRPC;
	}();
	function createDisplayManageServerRPC(manageAppUrl) {
	  var app;
	  return rpcWindow$1.createServer(MANAGE_NAMESPACE, {
	    // todo change name
	    display: function () {
	      var _display3 = _asyncToGenerator$2( /*#__PURE__*/runtime_1$2.mark(function _callee4(_event, _ref2) {
	        var accountId, observer, filterEvent;
	        return runtime_1$2.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                accountId = _ref2.accountId;
	                app = createManageIframe(manageAppUrl + "?accountId=" + accountId);
	                document.body.appendChild(app);
	                _context4.next = 5;
	                return new Promise(function (res) {
	                  app.onload = res;
	                });

	              case 5:
	                // @ts-ignore
	                observer = transportPostmessage.createMessageObservable(window);

	                filterEvent = function filterEvent(x) {
	                  return x.data.ns === '3id-connect-management';
	                };

	                _context4.next = 9;
	                return observer.pipe(operators.first(filterEvent)).toPromise();

	              case 9:
	                app.remove();

	              case 10:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4);
	      }));

	      function display(_x5, _x6) {
	        return _display3.apply(this, arguments);
	      }

	      return display;
	    }()
	  });
	}
	var createManageIframe = function createManageIframe(iframeUrl) {
	  var iframe = document.createElement('iframe');
	  iframe.name = 'threeid-connect-manage';
	  iframe.className = 'threeid-connect-manage';
	  iframe.src = iframeUrl; // @ts-ignore

	  iframe.allowtransparency = false; // @ts-ignore

	  iframe.style = DISPLAY_MANAGE_STYLE;
	  return iframe;
	};

	connectDisplay_cjs_development.DisplayConnectClientRPC = DisplayConnectClientRPC;
	connectDisplay_cjs_development.DisplayManageClientRPC = DisplayManageClientRPC;
	connectDisplay_cjs_development.createConnectIframe = createConnectIframe;
	connectDisplay_cjs_development.createDisplayConnectServerRPC = createDisplayConnectServerRPC;
	connectDisplay_cjs_development.createDisplayManageServerRPC = createDisplayManageServerRPC;
	connectDisplay_cjs_development.createManageIframe = createManageIframe;

	if (process.env.NODE_ENV === 'production') {
	  dist$6.exports = connectDisplay_cjs_production_min;
	} else {
	  dist$6.exports = connectDisplay_cjs_development;
	}

	var dist = {exports: {}};

	var windowAuthProvider_cjs_production_min = {};

	Object.defineProperty(windowAuthProvider_cjs_production_min,"__esModule",{value:!0});var t$1=dist$5.exports,r=cjs;function e$1(t,r,e,n,o,i,a){try{var c=t[i](a),u=c.value;}catch(t){return void e(t)}c.done?r(u):Promise.resolve(u).then(n,o);}function n$1(t){return function(){var r=this,n=arguments;return new Promise((function(o,i){var a=t.apply(r,n);function c(t){e$1(a,o,i,c,u,"next",t);}function u(t){e$1(a,o,i,c,u,"throw",t);}c(void 0);}))}}function o(t,r){return t(r={exports:{}},r.exports),r.exports}var i=o((function(t){var r=function(t){var r=Object.prototype,e=r.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function c(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{c({},"");}catch(t){c=function(t,r,e){return t[r]=e};}function u(t,r,e,n){var o=Object.create((r&&r.prototype instanceof f?r:f).prototype),i=new E(n||[]);return o._invoke=function(t,r,e){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return {value:void 0,done:!0}}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=x(a,e);if(c){if(c===h)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===n)throw n="completed",e.arg;e.dispatchException(e.arg);}else "return"===e.method&&e.abrupt("return",e.arg);n="executing";var u=s(t,r,e);if("normal"===u.type){if(n=e.done?"completed":"suspendedYield",u.arg===h)continue;return {value:u.arg,done:e.done}}"throw"===u.type&&(n="completed",e.method="throw",e.arg=u.arg);}}}(t,e,i),o}function s(t,r,e){try{return {type:"normal",arg:t.call(r,e)}}catch(t){return {type:"throw",arg:t}}}t.wrap=u;var h={};function f(){}function p(){}function l(){}var v={};c(v,o,(function(){return this}));var d=Object.getPrototypeOf,y=d&&d(d(k([])));y&&y!==r&&e.call(y,o)&&(v=y);var g=l.prototype=f.prototype=Object.create(v);function w(t){["next","throw","return"].forEach((function(r){c(t,r,(function(t){return this._invoke(r,t)}));}));}function m(t,r){var n;this._invoke=function(o,i){function a(){return new r((function(n,a){!function n(o,i,a,c){var u=s(t[o],t,i);if("throw"!==u.type){var h=u.arg,f=h.value;return f&&"object"==typeof f&&e.call(f,"__await")?r.resolve(f.__await).then((function(t){n("next",t,a,c);}),(function(t){n("throw",t,a,c);})):r.resolve(f).then((function(t){h.value=t,a(h);}),(function(t){return n("throw",t,a,c)}))}c(u.arg);}(o,i,n,a);}))}return n=n?n.then(a,a):a()};}function x(t,r){var e=t.iterator[r.method];if(void 0===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=void 0,x(t,r),"throw"===r.method))return h;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method");}return h}var n=s(e,t.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,h;var o=n.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,h):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,h)}function L(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r);}function b(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r;}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0);}function k(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function r(){for(;++n<t.length;)if(e.call(t,n))return r.value=t[n],r.done=!1,r;return r.value=void 0,r.done=!0,r};return i.next=i}}return {next:_}}function _(){return {value:void 0,done:!0}}return p.prototype=l,c(g,"constructor",l),c(l,"constructor",p),p.displayName=c(l,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return !!r&&(r===p||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,l):(t.__proto__=l,c(t,a,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return {__await:t}},w(m.prototype),c(m.prototype,i,(function(){return this})),t.AsyncIterator=m,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new m(u(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},w(g),c(g,a,"Generator"),c(g,o,(function(){return this})),c(g,"toString",(function(){return "[object Generator]"})),t.keys=function(t){var r=[];for(var e in t)r.push(e);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=k,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function n(e,n){return a.type="throw",a.arg=t,r.next=e,n&&(r.method="next",r.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),u=e.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else {if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,r){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),h},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),b(e),h}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if("throw"===n.type){var o=n.arg;b(e);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:k(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=void 0),h}},t}(t.exports);try{regeneratorRuntime=r;}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r);}})),a="3id-connect-authprovider";"undefined"!=typeof process&&(a=process.env.NAMESPACE||"3id-connect-authprovider"),windowAuthProvider_cjs_production_min.AuthProviderClient=function(){function e(r,e){void 0===r&&(r=window.parent),void 0===e&&(e=a),this.isAuthProvider=!0,this.client=t$1.createClient(e,r);}var o=e.prototype;return o.accountId=function(){var t=n$1(i.mark((function t(){return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.client.request("accountId");case 2:return t.abrupt("return",new r.AccountID(t.sent));case 4:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),o.authenticate=function(){var t=n$1(i.mark((function t(r){return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.client.request("authenticate",{message:r}));case 1:case"end":return t.stop()}}),t,this)})));return function(r){return t.apply(this,arguments)}}(),o.createLink=function(){var t=n$1(i.mark((function t(r){return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",this.client.request("createLink",{did:r}));case 1:case"end":return t.stop()}}),t,this)})));return function(r){return t.apply(this,arguments)}}(),o.withAddress=function(){throw new Error("not implemented")},e}(),windowAuthProvider_cjs_production_min.createAuthProviderServer=function(r,e){return void 0===e&&(e=a),t$1.createServer(e,{accountId:(u=n$1(i.mark((function t(){return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,r.accountId();case 2:return t.abrupt("return",t.sent.toString());case 3:case"end":return t.stop()}}),t)}))),function(){return u.apply(this,arguments)}),authenticate:(c=n$1(i.mark((function t(e,n){var o;return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=n.message,t.next=3,r.authenticate(o);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)}))),function(t,r){return c.apply(this,arguments)}),createLink:(o=n$1(i.mark((function t(e,n){var o;return i.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=n.did,t.next=3,r.createLink(o);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)}))),function(t,r){return o.apply(this,arguments)})});var o,c,u;};

	var windowAuthProvider_cjs_development = {};

	Object.defineProperty(windowAuthProvider_cjs_development, '__esModule', { value: true });

	var rpcWindow = dist$5.exports;
	var caip = cjs;

	function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator$1(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function createCommonjsModule$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1$1 = /*#__PURE__*/createCommonjsModule$1(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};
	    define(IteratorPrototype, iteratorSymbol, function () {
	      return this;
	    });
	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = GeneratorFunctionPrototype;
	    define(Gp, "constructor", GeneratorFunctionPrototype);
	    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);
	    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	      return this;
	    });
	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    define(Gp, iteratorSymbol, function () {
	      return this;
	    });
	    define(Gp, "toString", function () {
	      return "[object Generator]";
	    });

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, in modern engines
	    // we can explicitly access globalThis. In older engines we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    if (typeof globalThis === "object") {
	      globalThis.regeneratorRuntime = runtime;
	    } else {
	      Function("r", "regeneratorRuntime = r")(runtime);
	    }
	  }
	});

	var NAMESPACE = '3id-connect-authprovider';
	typeof process !== 'undefined' && (NAMESPACE = process.env.NAMESPACE || '3id-connect-authprovider');
	var AuthProviderClient = /*#__PURE__*/function () {
	  function AuthProviderClient(target, namespace) {
	    if (target === void 0) {
	      target = window.parent;
	    }

	    if (namespace === void 0) {
	      namespace = NAMESPACE;
	    }

	    this.isAuthProvider = true;
	    this.client = rpcWindow.createClient(namespace, target);
	  }

	  var _proto = AuthProviderClient.prototype;

	  _proto.accountId = /*#__PURE__*/function () {
	    var _accountId = /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee() {
	      var response;
	      return runtime_1$1.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return this.client.request('accountId');

	            case 2:
	              response = _context.sent;
	              return _context.abrupt("return", new caip.AccountID(response));

	            case 4:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function accountId() {
	      return _accountId.apply(this, arguments);
	    }

	    return accountId;
	  }();

	  _proto.authenticate = /*#__PURE__*/function () {
	    var _authenticate = /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee2(message) {
	      return runtime_1$1.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              return _context2.abrupt("return", this.client.request('authenticate', {
	                message: message
	              }));

	            case 1:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function authenticate(_x) {
	      return _authenticate.apply(this, arguments);
	    }

	    return authenticate;
	  }();

	  _proto.createLink = /*#__PURE__*/function () {
	    var _createLink = /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee3(did) {
	      return runtime_1$1.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              return _context3.abrupt("return", this.client.request('createLink', {
	                did: did
	              }));

	            case 1:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));

	    function createLink(_x2) {
	      return _createLink.apply(this, arguments);
	    }

	    return createLink;
	  }();

	  _proto.withAddress = function withAddress() {
	    throw new Error('not implemented');
	  };

	  return AuthProviderClient;
	}();
	function createAuthProviderServer(authProvider, namespace) {
	  if (namespace === void 0) {
	    namespace = NAMESPACE;
	  }

	  return rpcWindow.createServer(namespace, {
	    accountId: function () {
	      var _accountId2 = _asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee4() {
	        return runtime_1$1.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.next = 2;
	                return authProvider.accountId();

	              case 2:
	                return _context4.abrupt("return", _context4.sent.toString());

	              case 3:
	              case "end":
	                return _context4.stop();
	            }
	          }
	        }, _callee4);
	      }));

	      function accountId() {
	        return _accountId2.apply(this, arguments);
	      }

	      return accountId;
	    }(),
	    authenticate: function () {
	      var _authenticate2 = _asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee5(_event, _ref) {
	        var message;
	        return runtime_1$1.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                message = _ref.message;
	                _context5.next = 3;
	                return authProvider.authenticate(message);

	              case 3:
	                return _context5.abrupt("return", _context5.sent);

	              case 4:
	              case "end":
	                return _context5.stop();
	            }
	          }
	        }, _callee5);
	      }));

	      function authenticate(_x3, _x4) {
	        return _authenticate2.apply(this, arguments);
	      }

	      return authenticate;
	    }(),
	    createLink: function () {
	      var _createLink2 = _asyncToGenerator$1( /*#__PURE__*/runtime_1$1.mark(function _callee6(_event, _ref2) {
	        var did;
	        return runtime_1$1.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                did = _ref2.did;
	                _context6.next = 3;
	                return authProvider.createLink(did);

	              case 3:
	                return _context6.abrupt("return", _context6.sent);

	              case 4:
	              case "end":
	                return _context6.stop();
	            }
	          }
	        }, _callee6);
	      }));

	      function createLink(_x5, _x6) {
	        return _createLink2.apply(this, arguments);
	      }

	      return createLink;
	    }()
	  });
	}

	windowAuthProvider_cjs_development.AuthProviderClient = AuthProviderClient;
	windowAuthProvider_cjs_development.createAuthProviderServer = createAuthProviderServer;

	if (process.env.NODE_ENV === 'production') {
	  dist.exports = windowAuthProvider_cjs_production_min;
	} else {
	  dist.exports = windowAuthProvider_cjs_development;
	}

	var lib$1 = {};

	var client = {};

	var lib = {exports: {}};

	// Found this seed-based random generator somewhere
	// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

	var seed = 1;

	/**
	 * return a random number based on a seed
	 * @param seed
	 * @returns {number}
	 */
	function getNextValue() {
	    seed = (seed * 9301 + 49297) % 233280;
	    return seed/(233280.0);
	}

	function setSeed$1(_seed_) {
	    seed = _seed_;
	}

	var randomFromSeed$1 = {
	    nextValue: getNextValue,
	    seed: setSeed$1
	};

	var randomFromSeed = randomFromSeed$1;

	var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
	var alphabet$2;
	var previousSeed;

	var shuffled;

	function reset() {
	    shuffled = false;
	}

	function setCharacters(_alphabet_) {
	    if (!_alphabet_) {
	        if (alphabet$2 !== ORIGINAL) {
	            alphabet$2 = ORIGINAL;
	            reset();
	        }
	        return;
	    }

	    if (_alphabet_ === alphabet$2) {
	        return;
	    }

	    if (_alphabet_.length !== ORIGINAL.length) {
	        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
	    }

	    var unique = _alphabet_.split('').filter(function(item, ind, arr){
	       return ind !== arr.lastIndexOf(item);
	    });

	    if (unique.length) {
	        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
	    }

	    alphabet$2 = _alphabet_;
	    reset();
	}

	function characters(_alphabet_) {
	    setCharacters(_alphabet_);
	    return alphabet$2;
	}

	function setSeed(seed) {
	    randomFromSeed.seed(seed);
	    if (previousSeed !== seed) {
	        reset();
	        previousSeed = seed;
	    }
	}

	function shuffle() {
	    if (!alphabet$2) {
	        setCharacters(ORIGINAL);
	    }

	    var sourceArray = alphabet$2.split('');
	    var targetArray = [];
	    var r = randomFromSeed.nextValue();
	    var characterIndex;

	    while (sourceArray.length > 0) {
	        r = randomFromSeed.nextValue();
	        characterIndex = Math.floor(r * sourceArray.length);
	        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
	    }
	    return targetArray.join('');
	}

	function getShuffled() {
	    if (shuffled) {
	        return shuffled;
	    }
	    shuffled = shuffle();
	    return shuffled;
	}

	/**
	 * lookup shuffled letter
	 * @param index
	 * @returns {string}
	 */
	function lookup(index) {
	    var alphabetShuffled = getShuffled();
	    return alphabetShuffled[index];
	}

	function get () {
	  return alphabet$2 || ORIGINAL;
	}

	var alphabet_1 = {
	    get: get,
	    characters: characters,
	    seed: setSeed,
	    lookup: lookup,
	    shuffled: getShuffled
	};

	var random$1 = {exports: {}};

	var crypto$1 = crypto__default$1["default"];

	if (crypto$1.randomFillSync) {
	  // We reuse buffers with the same size to avoid memory fragmentations
	  // for better performance
	  var buffers = { };
	  random$1.exports = function (bytes) {
	    var buffer = buffers[bytes];
	    if (!buffer) {
	      // `Buffer.allocUnsafe()` faster because it don’t clean memory.
	      // We do not need it, since we will fill memory with new bytes anyway.
	      buffer = Buffer.allocUnsafe(bytes);
	      if (bytes <= 255) buffers[bytes] = buffer;
	    }
	    return crypto$1.randomFillSync(buffer)
	  };
	} else {
	  random$1.exports = crypto$1.randomBytes;
	}

	var randomByte = random$1.exports;

	/**
	 * Secure random string generator with custom alphabet.
	 *
	 * Alphabet must contain 256 symbols or less. Otherwise, the generator
	 * will not be secure.
	 *
	 * @param {generator} random The random bytes generator.
	 * @param {string} alphabet Symbols to be used in new random string.
	 * @param {size} size The number of symbols in new random string.
	 *
	 * @return {string} Random string.
	 *
	 * @example
	 * const format = require('nanoid/format')
	 *
	 * function random (size) {
	 *   const result = []
	 *   for (let i = 0; i < size; i++) {
	 *     result.push(randomByte())
	 *   }
	 *   return result
	 * }
	 *
	 * format(random, "abcdef", 5) //=> "fbaef"
	 *
	 * @name format
	 * @function
	 */

	var format$1 = function (random, alphabet, size) {
	  // We can’t use bytes bigger than the alphabet. To make bytes values closer
	  // to the alphabet, we apply bitmask on them. We look for the closest
	  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have
	  // 30 symbols in the alphabet, we will take 31 (00011111).
	  var mask = (2 << 31 - Math.clz32((alphabet.length - 1) | 1)) - 1;
	  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,
	  // which is bigger than the alphabet). As a result, we will need more bytes,
	  // than ID size, because we will refuse bytes bigger than the alphabet.

	  // Every hardware random generator call is costly,
	  // because we need to wait for entropy collection. This is why often it will
	  // be faster to ask for few extra bytes in advance, to avoid additional calls.

	  // Here we calculate how many random bytes should we call in advance.
	  // It depends on ID length, mask / alphabet size and magic number 1.6
	  // (which was selected according benchmarks).
	  var step = Math.ceil(1.6 * mask * size / alphabet.length);
	  var id = '';

	  while (true) {
	    var bytes = random(step);
	    // Compact alternative for `for (var i = 0; i < step; i++)`
	    var i = step;
	    while (i--) {
	      // If random byte is bigger than alphabet even after bitmask,
	      // we refuse it by `|| ''`.
	      id += alphabet[bytes[i] & mask] || '';
	      // More compact than `id.length + 1 === size`
	      if (id.length === +size) return id
	    }
	  }
	};

	var alphabet$1 = alphabet_1;
	var random = randomByte;
	var format = format$1;

	function generate$1(number) {
	    var loopCounter = 0;
	    var done;

	    var str = '';

	    while (!done) {
	        str = str + format(random, alphabet$1.get(), 1);
	        done = number < (Math.pow(16, loopCounter + 1 ) );
	        loopCounter++;
	    }
	    return str;
	}

	var generate_1 = generate$1;

	var generate = generate_1;

	// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
	// This number should be updated every year or so to keep the generated id short.
	// To regenerate `new Date() - 0` and bump the version. Always bump the version!
	var REDUCE_TIME = 1567752802062;

	// don't change unless we change the algos or REDUCE_TIME
	// must be an integer and less than 16
	var version = 7;

	// Counter is used when shortid is called multiple times in one second.
	var counter;

	// Remember the last time shortid was called in case counter is needed.
	var previousSeconds;

	/**
	 * Generate unique id
	 * Returns string id
	 */
	function build(clusterWorkerId) {
	    var str = '';

	    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

	    if (seconds === previousSeconds) {
	        counter++;
	    } else {
	        counter = 0;
	        previousSeconds = seconds;
	    }

	    str = str + generate(version);
	    str = str + generate(clusterWorkerId);
	    if (counter > 0) {
	        str = str + generate(counter);
	    }
	    str = str + generate(seconds);
	    return str;
	}

	var build_1 = build;

	var alphabet = alphabet_1;

	function isShortId(id) {
	    if (!id || typeof id !== 'string' || id.length < 6 ) {
	        return false;
	    }

	    var nonAlphabetic = new RegExp('[^' +
	      alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
	    ']');
	    return !nonAlphabetic.test(id);
	}

	var isValid = isShortId;

	var cluster = require$$0__default$3["default"];

	var clusterId = 0;
	if (!cluster.isMaster && cluster.worker) {
	    clusterId = cluster.worker.id;
	}
	var clusterWorkerId = parseInt(process.env.NODE_UNIQUE_ID || clusterId, 10);

	(function (module) {

	var alphabet = alphabet_1;
	var build = build_1;
	var isValid$1 = isValid;

	// if you are using cluster or multiple servers use this to make each instance
	// has a unique value for worker
	// Note: I don't know if this is automatically set when using third
	// party cluster solutions such as pm2.
	var clusterWorkerId$1 = clusterWorkerId || 0;

	/**
	 * Set the seed.
	 * Highly recommended if you don't want people to try to figure out your id schema.
	 * exposed as shortid.seed(int)
	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
	 */
	function seed(seedValue) {
	    alphabet.seed(seedValue);
	    return module.exports;
	}

	/**
	 * Set the cluster worker or machine id
	 * exposed as shortid.worker(int)
	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
	 * returns shortid module so it can be chained.
	 */
	function worker(workerId) {
	    clusterWorkerId$1 = workerId;
	    return module.exports;
	}

	/**
	 *
	 * sets new characters to use in the alphabet
	 * returns the shuffled alphabet
	 */
	function characters(newCharacters) {
	    if (newCharacters !== undefined) {
	        alphabet.characters(newCharacters);
	    }

	    return alphabet.shuffled();
	}

	/**
	 * Generate unique id
	 * Returns string id
	 */
	function generate() {
	  return build(clusterWorkerId$1);
	}

	// Export all other functions as properties of the generate function
	module.exports = generate;
	module.exports.generate = generate;
	module.exports.seed = seed;
	module.exports.worker = worker;
	module.exports.characters = characters;
	module.exports.isValid = isValid$1;
	}(lib));

	var shortid = lib.exports;

	Object.defineProperty(client, "__esModule", {
	  value: true
	});
	client.default = caller;
	client.call = call;

	var _shortid = shortid;

	var _shortid2 = _interopRequireDefault(_shortid);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function caller(funcName, opts) {
	  opts = opts || {};

	  var addListener = opts.addListener || window.addEventListener;
	  var removeListener = opts.removeListener || window.removeEventListener;
	  var postMessage = opts.postMessage || window.postMessage;
	  var targetOrigin = opts.targetOrigin || '*';
	  var getMessageData = opts.getMessageData || function (event) {
	    return event.data;
	  };

	  return function () {
	    var msg = {
	      sender: 'postmsg-rpc/client',
	      id: (0, _shortid2.default)(),
	      func: funcName,
	      args: Array.from(arguments)
	    };

	    var cancel = void 0;

	    var response = new Promise(function (resolve, reject) {
	      var handler = function handler() {
	        var data = getMessageData.apply(null, arguments);
	        if (!data) return;
	        if (data.sender !== 'postmsg-rpc/server' || data.id !== msg.id) return;
	        removeListener('message', handler);

	        if (data.err) {
	          var err = new Error('Unexpected error calling ' + funcName);
	          Object.assign(err, data.err);
	          return reject(err);
	        }

	        resolve(data.res);
	      };

	      cancel = function cancel() {
	        removeListener('message', handler);
	        var err = new Error('Canceled call to ' + funcName);
	        err.isCanceled = true;
	        reject(err);
	      };

	      addListener('message', handler);
	      postMessage(msg, targetOrigin);
	    });

	    response.cancel = function () {
	      return cancel();
	    };

	    return response;
	  };
	}

	function call(funcName) {
	  return caller(funcName).apply(null, [].slice.call(arguments, 1));
	}

	var server = {};

	Object.defineProperty(server, "__esModule", {
	  value: true
	});
	server.default = expose;
	function expose(funcName, func, opts) {
	  opts = opts || {};

	  var addListener = opts.addListener || window.addEventListener;
	  var removeListener = opts.removeListener || window.removeEventListener;
	  var postMessage = opts.postMessage || window.postMessage;
	  var targetOrigin = opts.targetOrigin || '*';
	  var getMessageData = opts.getMessageData || function (event) {
	    return event.data;
	  };
	  var isCallback = opts.isCallback || false;

	  var handler = function handler() {
	    var data = getMessageData.apply(null, arguments);
	    if (!data) return;
	    if (data.sender !== 'postmsg-rpc/client' || data.func !== funcName) return;

	    var msg = { sender: 'postmsg-rpc/server', id: data.id };

	    var onSuccess = function onSuccess(res) {
	      msg.res = res;
	      postMessage(msg, targetOrigin);
	    };

	    var onError = function onError(err) {
	      msg.err = Object.assign({ message: err.message }, err.output && err.output.payload);

	      if (process.env.NODE_ENV !== 'production') {
	        msg.err.stack = msg.err.stack || err.stack;
	      }

	      postMessage(msg, targetOrigin);
	    };

	    if (isCallback) {
	      func.apply(null, data.args.concat(function (err, res) {
	        if (err) return onError(err);
	        onSuccess(res);
	      }));
	    } else {
	      var res = func.apply(null, data.args);
	      Promise.resolve(res).then(onSuccess).catch(onError);
	    }
	  };

	  addListener('message', handler);

	  return { close: function close() {
	      return removeListener('message', handler);
	    } };
	}

	(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _client = client;

	Object.defineProperty(exports, 'caller', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_client).default;
	  }
	});
	Object.defineProperty(exports, 'call', {
	  enumerable: true,
	  get: function get() {
	    return _client.call;
	  }
	});

	var _server = server;

	Object.defineProperty(exports, 'expose', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_server).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	}(lib$1));

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});var t=lib$4,e=dist$6.exports,r=dist.exports,n=lib$1,o=require$$4$1;function i(t,e,r,n,o,i,a){try{var c=t[i](a),u=c.value;}catch(t){return void r(t)}c.done?e(u):Promise.resolve(u).then(n,o);}function a(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var a=t.apply(e,r);function c(t){i(a,n,o,c,u,"next",t);}function u(t){i(a,n,o,c,u,"throw",t);}c(void 0);}))}}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}function u(t,e,r){return e&&c(t.prototype,e),r&&c(t,r),t}function s(t,e){return t(e={exports:{}},e.exports),e.exports}var h=s((function(t){var e=function(t){var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function c(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"");}catch(t){c=function(t,e,r){return t[e]=r};}function u(t,e,r,n){var o=Object.create((e&&e.prototype instanceof f?e:f).prototype),i=new L(n||[]);return o._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return {value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=b(a,r);if(c){if(c===h)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg);}else "return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=s(t,e,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===h)continue;return {value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg);}}}(t,r,i),o}function s(t,e,r){try{return {type:"normal",arg:t.call(e,r)}}catch(t){return {type:"throw",arg:t}}}t.wrap=u;var h={};function f(){}function l(){}function p(){}var d={};c(d,o,(function(){return this}));var v=Object.getPrototypeOf,y=v&&v(v(_([])));y&&y!==e&&r.call(y,o)&&(d=y);var m=p.prototype=f.prototype=Object.create(d);function g(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}));}));}function w(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,c){var u=s(t[o],t,i);if("throw"!==u.type){var h=u.arg,f=h.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,c);}),(function(t){n("throw",t,a,c);})):e.resolve(f).then((function(t){h.value=t,a(h);}),(function(t){return n("throw",t,a,c)}))}c(u.arg);}(o,i,n,a);}))}return n=n?n.then(a,a):a()};}function b(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method");}return h}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,h;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function x(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e);}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e;}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(x,this),this.reset(!0);}function _(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return {next:E}}function E(){return {value:void 0,done:!0}}return l.prototype=p,c(m,"constructor",p),c(p,"constructor",l),l.displayName=c(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return !!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,c(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return {__await:t}},g(w.prototype),c(w.prototype,i,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),c(m,a,"Generator"),c(m,o,(function(){return this})),c(m,"toString",(function(){return "[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(P),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0);},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else {if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return "break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),P(r),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r);}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:_(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),h}},t}(t.exports);try{regeneratorRuntime=e;}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e);}})),f=function(){function t(t,e){this.provider=t,this.accountId=e;}return t.prototype.send=function(){var t=a(h.mark((function t(e,r){return h.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.params=Object.assign({},e.params,{accountId:this.accountId}),t.next=3,this.provider.send(e,r);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t,this)})));return function(e,r){return t.apply(this,arguments)}}(),u(t,[{key:"isDidProvider",get:function(){return !0}}]),t}(),l="https://app-clay.3idconnect.org",p=l,d=l+"/management/index.html";"undefined"!=typeof process&&(p=process.env.CONNECT_IFRAME_URL||l),"undefined"!=typeof process&&(d=process.env.CONNECT_MANAGE_URL||l+"/management/index.html");var v=function(t){return {connect_iframe:t,manage_iframe:t+"/management/index.html"}},y={"dev-unstable":v("https://app-dev.3idconnect.org"),"testnet-clay":v(l),mainnet:v("https://app.3idconnect.org"),local:v("http://localhost:30001")},m=function(t){var e,r=n.caller("send",{postMessage:t});return {send:(e=a(h.mark((function t(e){return h.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=JSON,t.next=3,r(e);case 3:return t.t1=t.sent,t.abrupt("return",t.t0.parse.call(t.t0,t.t1));case 5:case"end":return t.stop()}}),t)}))),function(t){return e.apply(this,arguments)})}},g=function(){function t(t,r){var n,o=this;this._authProviderSubscription=null,this._connected=!1,function(){if("undefined"==typeof window||"undefined"==typeof document)throw new Error("ThreeIdConnect not supported in this enviroment")}(),t&&Object.keys(y).includes(t)?(n=y[t].connect_iframe,r=y[t].manage_iframe):n=t,this.iframe=e.createConnectIframe(n||p),this.manageUrl=r||d,this.iframeLoadedPromise=new Promise((function(t){o.iframe.onload=function(){t();};})),document.body.appendChild(this.iframe);}var n=t.prototype;return n.connect=function(){var t=a(h.mark((function t(n){return h.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(this._authProviderSubscription&&this._authProviderSubscription.unsubscribe(),!n){t.next=4;break}return t.next=4,this.setAuthProvider(n);case 4:return t.next=6,this.iframeLoadedPromise;case 6:this.postMessage=this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow),this._authProviderSubscription=r.createAuthProviderServer(n).subscribe(),e.createDisplayConnectServerRPC(this.iframe).subscribe(),e.createDisplayManageServerRPC(this.manageUrl).subscribe(),this.RPCProvider=m(this.postMessage),this.RPCClient=new o.RPCClient(this.RPCProvider),this._connected=!0;case 13:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),n.setAuthProvider=function(){var t=a(h.mark((function t(e){return h.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.authProvider=e,t.next=3,this.authProvider.accountId();case 3:this.accountId=t.sent.toString();case 4:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),n.getDidProvider=function(){if(!this.authProvider)throw new Error("setAuthProvider required");return new f(this.RPCProvider,this.accountId)},u(t,[{key:"connected",get:function(){return this._connected}}]),t}();Object.defineProperty(exports,"EthereumAuthProvider",{enumerable:!0,get:function(){return t.EthereumAuthProvider}}),exports.DidProviderProxy=f,exports.ThreeIdConnect=g;

	}(connect_cjs_production_min));

	var connect_cjs_development = {};

	(function (exports) {

	Object.defineProperty(exports, '__esModule', { value: true });

	var blockchainUtilsLinking = lib$4;
	var connectDisplay = dist$6.exports;
	var windowAuthProvider = dist.exports;
	var postmsgRpc = lib$1;
	var rpcUtils = require$$4$1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};
	    define(IteratorPrototype, iteratorSymbol, function () {
	      return this;
	    });
	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = GeneratorFunctionPrototype;
	    define(Gp, "constructor", GeneratorFunctionPrototype);
	    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);
	    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
	      return this;
	    });
	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    define(Gp, iteratorSymbol, function () {
	      return this;
	    });
	    define(Gp, "toString", function () {
	      return "[object Generator]";
	    });

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, in modern engines
	    // we can explicitly access globalThis. In older engines we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    if (typeof globalThis === "object") {
	      globalThis.regeneratorRuntime = runtime;
	    } else {
	      Function("r", "regeneratorRuntime = r")(runtime);
	    }
	  }
	});

	/**
	 *  A DID provider proxy, DID provider interface that acts as rpc client, to
	 *  relay request to iframe (rpc server)
	 */
	var DidProviderProxy = /*#__PURE__*/function () {
	  function DidProviderProxy(provider, accountId) {
	    this.provider = provider;
	    this.accountId = accountId;
	  }

	  var _proto = DidProviderProxy.prototype;

	  _proto.send = /*#__PURE__*/function () {
	    var _send = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(msg, origin) {
	      return runtime_1.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              msg.params = Object.assign({}, msg.params, {
	                accountId: this.accountId
	              });
	              _context.next = 3;
	              return this.provider.send(msg, origin);

	            case 3:
	              return _context.abrupt("return", _context.sent);

	            case 4:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function send(_x, _x2) {
	      return _send.apply(this, arguments);
	    }

	    return send;
	  }();

	  _createClass(DidProviderProxy, [{
	    key: "isDidProvider",
	    get: function get() {
	      return true;
	    }
	  }]);

	  return DidProviderProxy;
	}();

	var BASE_DEV_URL = 'https://app-dev.3idconnect.org';
	var BASE_CLAY_URL = 'https://app-clay.3idconnect.org';
	var BASE_MAIN_URL = 'https://app.3idconnect.org';
	var BASE_LOCAL_URL = "http://localhost:30001";
	var DEFAULT_MANAGE_PATH = "/management/index.html";
	var CONNECT_IFRAME_URL = BASE_CLAY_URL;
	var CONNECT_MANAGE_URL = BASE_CLAY_URL + "/management/index.html";
	typeof process !== 'undefined' && (CONNECT_IFRAME_URL = process.env.CONNECT_IFRAME_URL || BASE_CLAY_URL);
	typeof process !== 'undefined' && (CONNECT_MANAGE_URL = process.env.CONNECT_MANAGE_URL || BASE_CLAY_URL + "/management/index.html");

	var networkConfig = function networkConfig(base) {
	  return {
	    connect_iframe: base,
	    manage_iframe: "" + base + DEFAULT_MANAGE_PATH
	  };
	}; // Configuration for each network


	var networks = {
	  'dev-unstable': /*#__PURE__*/networkConfig(BASE_DEV_URL),
	  'testnet-clay': /*#__PURE__*/networkConfig(BASE_CLAY_URL),
	  'mainnet': /*#__PURE__*/networkConfig(BASE_MAIN_URL),
	  'local': /*#__PURE__*/networkConfig(BASE_LOCAL_URL)
	};

	var createRPCProvider = function createRPCProvider(postMessage) {
	  var sendRPC = postmsgRpc.caller('send', {
	    postMessage: postMessage
	  });
	  return {
	    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
	    send: function () {
	      var _send = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(req) {
	        return runtime_1.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.t0 = JSON;
	                _context.next = 3;
	                return sendRPC(req);

	              case 3:
	                _context.t1 = _context.sent;
	                return _context.abrupt("return", _context.t0.parse.call(_context.t0, _context.t1));

	              case 5:
	              case "end":
	                return _context.stop();
	            }
	          }
	        }, _callee);
	      }));

	      function send(_x) {
	        return _send.apply(this, arguments);
	      }

	      return send;
	    }()
	  };
	};

	var assertBrowser = function assertBrowser() {
	  if (typeof window === 'undefined' || typeof document === 'undefined') {
	    throw new Error('ThreeIdConnect not supported in this enviroment');
	  }
	};
	/**
	 *  ThreeIdConnect provides interface for loading and instantiating IDW iframe,
	 *  and provides a 3ID provider interface to send requests to iframe. Acts like
	 *  rpc client.
	 */


	var ThreeIdConnect = /*#__PURE__*/function () {
	  /**
	   *  Creates ThreeIdConnect. Create and loads iframe. Should be instantiated
	   *  on page load.
	   *
	   * @param     {String}    network     network name, or iframe url, testnet-clay, dev-unstable, local and mainnet are supported
	   * @param     {String}    iframeUrl   manage iframe url
	   */
	  function ThreeIdConnect(network, manageUrl) {
	    var _this = this;

	    this._authProviderSubscription = null;
	    this._connected = false;
	    assertBrowser();
	    var iframeUrl;

	    if (network && Object.keys(networks).includes(network)) {
	      iframeUrl = networks[network].connect_iframe;
	      manageUrl = networks[network].manage_iframe;
	    } else {
	      iframeUrl = network;
	    }

	    this.iframe = connectDisplay.createConnectIframe(iframeUrl || CONNECT_IFRAME_URL);
	    this.manageUrl = manageUrl || CONNECT_MANAGE_URL;
	    this.iframeLoadedPromise = new Promise(function (resolve) {
	      _this.iframe.onload = function () {
	        resolve();
	      };
	    });
	    document.body.appendChild(this.iframe);
	  }

	  var _proto = ThreeIdConnect.prototype;

	  _proto.connect = /*#__PURE__*/function () {
	    var _connect = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(provider) {
	      return runtime_1.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              if (this._authProviderSubscription) {
	                this._authProviderSubscription.unsubscribe();
	              }

	              if (!provider) {
	                _context2.next = 4;
	                break;
	              }

	              _context2.next = 4;
	              return this.setAuthProvider(provider);

	            case 4:
	              _context2.next = 6;
	              return this.iframeLoadedPromise;

	            case 6:
	              this.postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow); // TODO: this should only be set if there is a provider injected, also need to stop current subscription

	              this._authProviderSubscription = windowAuthProvider.createAuthProviderServer(provider).subscribe();
	              connectDisplay.createDisplayConnectServerRPC(this.iframe).subscribe();
	              connectDisplay.createDisplayManageServerRPC(this.manageUrl).subscribe(); // TODO also change this to use transports

	              this.RPCProvider = createRPCProvider(this.postMessage);
	              this.RPCClient = new rpcUtils.RPCClient(this.RPCProvider);
	              this._connected = true;

	            case 13:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function connect(_x2) {
	      return _connect.apply(this, arguments);
	    }

	    return connect;
	  }();

	  _proto.setAuthProvider = /*#__PURE__*/function () {
	    var _setAuthProvider = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(authProvider) {
	      return runtime_1.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              this.authProvider = authProvider;
	              _context3.next = 3;
	              return this.authProvider.accountId();

	            case 3:
	              this.accountId = _context3.sent.toString();

	            case 4:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));

	    function setAuthProvider(_x3) {
	      return _setAuthProvider.apply(this, arguments);
	    }

	    return setAuthProvider;
	  }();

	  /**
	   *  Returns a DID provider, which can send and receive messages from iframe
	   *
	   * @return    {DidProviderProxy}     A DID provider
	   */
	  _proto.getDidProvider = function getDidProvider() {
	    if (!this.authProvider) throw new Error('setAuthProvider required');
	    return new DidProviderProxy(this.RPCProvider, this.accountId);
	  };

	  _createClass(ThreeIdConnect, [{
	    key: "connected",
	    get: function get() {
	      return this._connected;
	    }
	  }]);

	  return ThreeIdConnect;
	}();

	Object.defineProperty(exports, 'EthereumAuthProvider', {
	  enumerable: true,
	  get: function () {
	    return blockchainUtilsLinking.EthereumAuthProvider;
	  }
	});
	exports.DidProviderProxy = DidProviderProxy;
	exports.ThreeIdConnect = ThreeIdConnect;

	}(connect_cjs_development));

	if (process.env.NODE_ENV === 'production') {
	  dist$7.exports = connect_cjs_production_min;
	} else {
	  dist$7.exports = connect_cjs_development;
	}

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
	  /**
	   * Copyright (c) 2014-present, Facebook, Inc.
	   *
	   * This source code is licensed under the MIT license found in the
	   * LICENSE file in the root directory of this source tree.
	   */
	  var runtime = function (exports) {

	    var Op = Object.prototype;
	    var hasOwn = Op.hasOwnProperty;
	    var undefined$1; // More compressible than void 0.

	    var $Symbol = typeof Symbol === "function" ? Symbol : {};
	    var iteratorSymbol = $Symbol.iterator || "@@iterator";
	    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	    function define(obj, key, value) {
	      Object.defineProperty(obj, key, {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	      return obj[key];
	    }

	    try {
	      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	      define({}, "");
	    } catch (err) {
	      define = function define(obj, key, value) {
	        return obj[key] = value;
	      };
	    }

	    function wrap(innerFn, outerFn, self, tryLocsList) {
	      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	      var generator = Object.create(protoGenerator.prototype);
	      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
	      // .throw, and .return methods.

	      generator._invoke = makeInvokeMethod(innerFn, self, context);
	      return generator;
	    }

	    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
	    // record like context.tryEntries[i].completion. This interface could
	    // have been (and was previously) designed to take a closure to be
	    // invoked without arguments, but in all the cases we care about we
	    // already have an existing method we want to call, so there's no need
	    // to create a new function object. We can even get away with assuming
	    // the method takes exactly one argument, since that happens to be true
	    // in every case, so we don't have to touch the arguments object. The
	    // only additional allocation required is the completion record, which
	    // has a stable shape and so hopefully should be cheap to allocate.

	    function tryCatch(fn, obj, arg) {
	      try {
	        return {
	          type: "normal",
	          arg: fn.call(obj, arg)
	        };
	      } catch (err) {
	        return {
	          type: "throw",
	          arg: err
	        };
	      }
	    }

	    var GenStateSuspendedStart = "suspendedStart";
	    var GenStateSuspendedYield = "suspendedYield";
	    var GenStateExecuting = "executing";
	    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
	    // breaking out of the dispatch switch statement.

	    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
	    // .constructor.prototype properties for functions that return Generator
	    // objects. For full spec compliance, you may wish to configure your
	    // minifier not to mangle the names of these two functions.

	    function Generator() {}

	    function GeneratorFunction() {}

	    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
	    // don't natively support it.


	    var IteratorPrototype = {};

	    IteratorPrototype[iteratorSymbol] = function () {
	      return this;
	    };

	    var getProto = Object.getPrototypeOf;
	    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

	    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	      // This environment has a native %IteratorPrototype%; use it instead
	      // of the polyfill.
	      IteratorPrototype = NativeIteratorPrototype;
	    }

	    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
	    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	    GeneratorFunctionPrototype.constructor = GeneratorFunction;
	    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
	    // Iterator interface in terms of a single ._invoke method.

	    function defineIteratorMethods(prototype) {
	      ["next", "throw", "return"].forEach(function (method) {
	        define(prototype, method, function (arg) {
	          return this._invoke(method, arg);
	        });
	      });
	    }

	    exports.isGeneratorFunction = function (genFun) {
	      var ctor = typeof genFun === "function" && genFun.constructor;
	      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
	      // do is to check its .name property.
	      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	    };

	    exports.mark = function (genFun) {
	      if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	      } else {
	        genFun.__proto__ = GeneratorFunctionPrototype;
	        define(genFun, toStringTagSymbol, "GeneratorFunction");
	      }

	      genFun.prototype = Object.create(Gp);
	      return genFun;
	    }; // Within the body of any async function, `await x` is transformed to
	    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	    // `hasOwn.call(value, "__await")` to determine if the yielded value is
	    // meant to be awaited.


	    exports.awrap = function (arg) {
	      return {
	        __await: arg
	      };
	    };

	    function AsyncIterator(generator, PromiseImpl) {
	      function invoke(method, arg, resolve, reject) {
	        var record = tryCatch(generator[method], generator, arg);

	        if (record.type === "throw") {
	          reject(record.arg);
	        } else {
	          var result = record.arg;
	          var value = result.value;

	          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
	            return PromiseImpl.resolve(value.__await).then(function (value) {
	              invoke("next", value, resolve, reject);
	            }, function (err) {
	              invoke("throw", err, resolve, reject);
	            });
	          }

	          return PromiseImpl.resolve(value).then(function (unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration.
	            result.value = unwrapped;
	            resolve(result);
	          }, function (error) {
	            // If a rejected Promise was yielded, throw the rejection back
	            // into the async generator function so it can be handled there.
	            return invoke("throw", error, resolve, reject);
	          });
	        }
	      }

	      var previousPromise;

	      function enqueue(method, arg) {
	        function callInvokeWithMethodAndArg() {
	          return new PromiseImpl(function (resolve, reject) {
	            invoke(method, arg, resolve, reject);
	          });
	        }

	        return previousPromise = // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
	        // invocations of the iterator.
	        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      } // Define the unified helper method that is used to implement .next,
	      // .throw, and .return (see defineIteratorMethods).


	      this._invoke = enqueue;
	    }

	    defineIteratorMethods(AsyncIterator.prototype);

	    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	      return this;
	    };

	    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
	    // AsyncIterator objects; they just return a Promise for the value of
	    // the final result produced by the iterator.

	    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	      if (PromiseImpl === void 0) PromiseImpl = Promise;
	      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
	      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function (result) {
	        return result.done ? result.value : iter.next();
	      });
	    };

	    function makeInvokeMethod(innerFn, self, context) {
	      var state = GenStateSuspendedStart;
	      return function invoke(method, arg) {
	        if (state === GenStateExecuting) {
	          throw new Error("Generator is already running");
	        }

	        if (state === GenStateCompleted) {
	          if (method === "throw") {
	            throw arg;
	          } // Be forgiving, per 25.3.3.3.3 of the spec:
	          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


	          return doneResult();
	        }

	        context.method = method;
	        context.arg = arg;

	        while (true) {
	          var delegate = context.delegate;

	          if (delegate) {
	            var delegateResult = maybeInvokeDelegate(delegate, context);

	            if (delegateResult) {
	              if (delegateResult === ContinueSentinel) continue;
	              return delegateResult;
	            }
	          }

	          if (context.method === "next") {
	            // Setting context._sent for legacy support of Babel's
	            // function.sent implementation.
	            context.sent = context._sent = context.arg;
	          } else if (context.method === "throw") {
	            if (state === GenStateSuspendedStart) {
	              state = GenStateCompleted;
	              throw context.arg;
	            }

	            context.dispatchException(context.arg);
	          } else if (context.method === "return") {
	            context.abrupt("return", context.arg);
	          }

	          state = GenStateExecuting;
	          var record = tryCatch(innerFn, self, context);

	          if (record.type === "normal") {
	            // If an exception is thrown from innerFn, we leave state ===
	            // GenStateExecuting and loop back for another invocation.
	            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	            if (record.arg === ContinueSentinel) {
	              continue;
	            }

	            return {
	              value: record.arg,
	              done: context.done
	            };
	          } else if (record.type === "throw") {
	            state = GenStateCompleted; // Dispatch the exception by looping back around to the
	            // context.dispatchException(context.arg) call above.

	            context.method = "throw";
	            context.arg = record.arg;
	          }
	        }
	      };
	    } // Call delegate.iterator[context.method](context.arg) and handle the
	    // result, either by returning a { value, done } result from the
	    // delegate iterator, or by modifying context.method and context.arg,
	    // setting context.delegate to null, and returning the ContinueSentinel.


	    function maybeInvokeDelegate(delegate, context) {
	      var method = delegate.iterator[context.method];

	      if (method === undefined$1) {
	        // A .throw or .return when the delegate iterator has no .throw
	        // method always terminates the yield* loop.
	        context.delegate = null;

	        if (context.method === "throw") {
	          // Note: ["return"] must be used for ES3 parsing compatibility.
	          if (delegate.iterator["return"]) {
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            context.method = "return";
	            context.arg = undefined$1;
	            maybeInvokeDelegate(delegate, context);

	            if (context.method === "throw") {
	              // If maybeInvokeDelegate(context) changed context.method from
	              // "return" to "throw", let that override the TypeError below.
	              return ContinueSentinel;
	            }
	          }

	          context.method = "throw";
	          context.arg = new TypeError("The iterator does not provide a 'throw' method");
	        }

	        return ContinueSentinel;
	      }

	      var record = tryCatch(method, delegate.iterator, context.arg);

	      if (record.type === "throw") {
	        context.method = "throw";
	        context.arg = record.arg;
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      var info = record.arg;

	      if (!info) {
	        context.method = "throw";
	        context.arg = new TypeError("iterator result is not an object");
	        context.delegate = null;
	        return ContinueSentinel;
	      }

	      if (info.done) {
	        // Assign the result of the finished delegate to the temporary
	        // variable specified by delegate.resultName (see delegateYield).
	        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

	        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
	        // exception, let the outer generator proceed normally. If
	        // context.method was "next", forget context.arg since it has been
	        // "consumed" by the delegate iterator. If context.method was
	        // "return", allow the original .return call to continue in the
	        // outer generator.

	        if (context.method !== "return") {
	          context.method = "next";
	          context.arg = undefined$1;
	        }
	      } else {
	        // Re-yield the result returned by the delegate method.
	        return info;
	      } // The delegate iterator is finished, so forget it and continue with
	      // the outer generator.


	      context.delegate = null;
	      return ContinueSentinel;
	    } // Define Generator.prototype.{next,throw,return} in terms of the
	    // unified ._invoke helper method.


	    defineIteratorMethods(Gp);
	    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
	    // @@iterator function is called on it. Some browsers' implementations of the
	    // iterator prototype chain incorrectly implement this, causing the Generator
	    // object to not be returned from this call. This ensures that doesn't happen.
	    // See https://github.com/facebook/regenerator/issues/274 for more details.

	    Gp[iteratorSymbol] = function () {
	      return this;
	    };

	    Gp.toString = function () {
	      return "[object Generator]";
	    };

	    function pushTryEntry(locs) {
	      var entry = {
	        tryLoc: locs[0]
	      };

	      if (1 in locs) {
	        entry.catchLoc = locs[1];
	      }

	      if (2 in locs) {
	        entry.finallyLoc = locs[2];
	        entry.afterLoc = locs[3];
	      }

	      this.tryEntries.push(entry);
	    }

	    function resetTryEntry(entry) {
	      var record = entry.completion || {};
	      record.type = "normal";
	      delete record.arg;
	      entry.completion = record;
	    }

	    function Context(tryLocsList) {
	      // The root entry object (effectively a try statement without a catch
	      // or a finally block) gives us a place to store values thrown from
	      // locations where there is no enclosing try statement.
	      this.tryEntries = [{
	        tryLoc: "root"
	      }];
	      tryLocsList.forEach(pushTryEntry, this);
	      this.reset(true);
	    }

	    exports.keys = function (object) {
	      var keys = [];

	      for (var key in object) {
	        keys.push(key);
	      }

	      keys.reverse(); // Rather than returning an object with a next method, we keep
	      // things simple and return the next function itself.

	      return function next() {
	        while (keys.length) {
	          var key = keys.pop();

	          if (key in object) {
	            next.value = key;
	            next.done = false;
	            return next;
	          }
	        } // To avoid creating an additional object, we just hang the .value
	        // and .done properties off the next function object itself. This
	        // also ensures that the minifier will not anonymize the function.


	        next.done = true;
	        return next;
	      };
	    };

	    function values(iterable) {
	      if (iterable) {
	        var iteratorMethod = iterable[iteratorSymbol];

	        if (iteratorMethod) {
	          return iteratorMethod.call(iterable);
	        }

	        if (typeof iterable.next === "function") {
	          return iterable;
	        }

	        if (!isNaN(iterable.length)) {
	          var i = -1,
	              next = function next() {
	            while (++i < iterable.length) {
	              if (hasOwn.call(iterable, i)) {
	                next.value = iterable[i];
	                next.done = false;
	                return next;
	              }
	            }

	            next.value = undefined$1;
	            next.done = true;
	            return next;
	          };

	          return next.next = next;
	        }
	      } // Return an iterator with no values.


	      return {
	        next: doneResult
	      };
	    }

	    exports.values = values;

	    function doneResult() {
	      return {
	        value: undefined$1,
	        done: true
	      };
	    }

	    Context.prototype = {
	      constructor: Context,
	      reset: function reset(skipTempReset) {
	        this.prev = 0;
	        this.next = 0; // Resetting context._sent for legacy support of Babel's
	        // function.sent implementation.

	        this.sent = this._sent = undefined$1;
	        this.done = false;
	        this.delegate = null;
	        this.method = "next";
	        this.arg = undefined$1;
	        this.tryEntries.forEach(resetTryEntry);

	        if (!skipTempReset) {
	          for (var name in this) {
	            // Not sure about the optimal order of these conditions:
	            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
	              this[name] = undefined$1;
	            }
	          }
	        }
	      },
	      stop: function stop() {
	        this.done = true;
	        var rootEntry = this.tryEntries[0];
	        var rootRecord = rootEntry.completion;

	        if (rootRecord.type === "throw") {
	          throw rootRecord.arg;
	        }

	        return this.rval;
	      },
	      dispatchException: function dispatchException(exception) {
	        if (this.done) {
	          throw exception;
	        }

	        var context = this;

	        function handle(loc, caught) {
	          record.type = "throw";
	          record.arg = exception;
	          context.next = loc;

	          if (caught) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            context.method = "next";
	            context.arg = undefined$1;
	          }

	          return !!caught;
	        }

	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];
	          var record = entry.completion;

	          if (entry.tryLoc === "root") {
	            // Exception thrown outside of any try block that could handle
	            // it, so set the completion value of the entire function to
	            // throw the exception.
	            return handle("end");
	          }

	          if (entry.tryLoc <= this.prev) {
	            var hasCatch = hasOwn.call(entry, "catchLoc");
	            var hasFinally = hasOwn.call(entry, "finallyLoc");

	            if (hasCatch && hasFinally) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              } else if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else if (hasCatch) {
	              if (this.prev < entry.catchLoc) {
	                return handle(entry.catchLoc, true);
	              }
	            } else if (hasFinally) {
	              if (this.prev < entry.finallyLoc) {
	                return handle(entry.finallyLoc);
	              }
	            } else {
	              throw new Error("try statement without catch or finally");
	            }
	          }
	        }
	      },
	      abrupt: function abrupt(type, arg) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	            var finallyEntry = entry;
	            break;
	          }
	        }

	        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	          // Ignore the finally entry if control is not jumping to a
	          // location outside the try/catch block.
	          finallyEntry = null;
	        }

	        var record = finallyEntry ? finallyEntry.completion : {};
	        record.type = type;
	        record.arg = arg;

	        if (finallyEntry) {
	          this.method = "next";
	          this.next = finallyEntry.finallyLoc;
	          return ContinueSentinel;
	        }

	        return this.complete(record);
	      },
	      complete: function complete(record, afterLoc) {
	        if (record.type === "throw") {
	          throw record.arg;
	        }

	        if (record.type === "break" || record.type === "continue") {
	          this.next = record.arg;
	        } else if (record.type === "return") {
	          this.rval = this.arg = record.arg;
	          this.method = "return";
	          this.next = "end";
	        } else if (record.type === "normal" && afterLoc) {
	          this.next = afterLoc;
	        }

	        return ContinueSentinel;
	      },
	      finish: function finish(finallyLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.finallyLoc === finallyLoc) {
	            this.complete(entry.completion, entry.afterLoc);
	            resetTryEntry(entry);
	            return ContinueSentinel;
	          }
	        }
	      },
	      "catch": function _catch(tryLoc) {
	        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	          var entry = this.tryEntries[i];

	          if (entry.tryLoc === tryLoc) {
	            var record = entry.completion;

	            if (record.type === "throw") {
	              var thrown = record.arg;
	              resetTryEntry(entry);
	            }

	            return thrown;
	          }
	        } // The context.catch method must only be called with a location
	        // argument that corresponds to a known catch block.


	        throw new Error("illegal catch attempt");
	      },
	      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	        this.delegate = {
	          iterator: values(iterable),
	          resultName: resultName,
	          nextLoc: nextLoc
	        };

	        if (this.method === "next") {
	          // Deliberately forget the last sent value so that we don't
	          // accidentally pass it on to the delegate.
	          this.arg = undefined$1;
	        }

	        return ContinueSentinel;
	      }
	    }; // Regardless of whether this script is executing as a CommonJS module
	    // or not, return the runtime object so that we can declare the variable
	    // regeneratorRuntime in the outer scope, which allows this module to be
	    // injected easily by `bin/regenerator --include-runtime script.js`.

	    return exports;
	  }( // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports );

	  try {
	    regeneratorRuntime = runtime;
	  } catch (accidentalStrictMode) {
	    // This module should not be running in strict mode, so the above
	    // assignment should always work unless something is misconfigured. Just
	    // in case runtime.js accidentally runs in strict mode, we can escape
	    // strict mode using a global Function call. This could conceivably fail
	    // if a Content Security Policy forbids using Function, but in that case
	    // the proper solution is to fix the accidental strict mode problem. If
	    // you've misconfigured your bundler to force strict mode and applied a
	    // CSP to forbid Function, and you're not willing to fix either of those
	    // problems, please detail your unique predicament in a GitHub issue.
	    Function("r", "regeneratorRuntime = r")(runtime);
	  }
	});

	var DoctypeProxy = /*#__PURE__*/function () {
	  function DoctypeProxy(getRemote) {
	    this._getPromise = null;
	    this._queue = [];
	    this._getRemote = getRemote;

	    this._createValuePromise();
	  }

	  var _proto = DoctypeProxy.prototype;

	  _proto._createValuePromise = function _createValuePromise() {
	    var _this = this;

	    this._promiseValue = new Promise(function (resolve, reject) {
	      _this._deferValue = {
	        resolve: resolve,
	        reject: reject
	      };
	    });
	  };

	  _proto.change = function change(mutation) {
	    var _this2 = this;

	    return new Promise(function (resolve, reject) {
	      var run = /*#__PURE__*/function () {
	        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(current) {
	          var next;
	          return runtime_1.wrap(function _callee$(_context) {
	            while (1) {
	              switch (_context.prev = _context.next) {
	                case 0:
	                  _context.prev = 0;
	                  _context.next = 3;
	                  return mutation(current);

	                case 3:
	                  next = _context.sent;
	                  resolve();

	                  _this2._next(next);

	                  _context.next = 12;
	                  break;

	                case 8:
	                  _context.prev = 8;
	                  _context.t0 = _context["catch"](0);
	                  reject(_context.t0);

	                  _this2._next(current);

	                case 12:
	                case "end":
	                  return _context.stop();
	              }
	            }
	          }, _callee, null, [[0, 8]]);
	        }));

	        return function run(_x) {
	          return _ref.apply(this, arguments);
	        };
	      }();

	      _this2._queue.push({
	        reject: reject,
	        run: run
	      });

	      if (_this2._queue.length === 1) {
	        void _this2._start();
	      }
	    });
	  };

	  _proto.changeContent = /*#__PURE__*/function () {
	    var _changeContent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(change) {
	      var mutation;
	      return runtime_1.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              mutation = /*#__PURE__*/function () {
	                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(doc) {
	                  return runtime_1.wrap(function _callee2$(_context2) {
	                    while (1) {
	                      switch (_context2.prev = _context2.next) {
	                        case 0:
	                          _context2.next = 2;
	                          return doc.update(change(doc.content), doc.metadata);

	                        case 2:
	                          return _context2.abrupt("return", doc);

	                        case 3:
	                        case "end":
	                          return _context2.stop();
	                      }
	                    }
	                  }, _callee2);
	                }));

	                return function mutation(_x3) {
	                  return _ref2.apply(this, arguments);
	                };
	              }();

	              _context3.next = 3;
	              return this.change(mutation);

	            case 3:
	              return _context3.abrupt("return", _context3.sent);

	            case 4:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));

	    function changeContent(_x2) {
	      return _changeContent.apply(this, arguments);
	    }

	    return changeContent;
	  }();

	  _proto.get = /*#__PURE__*/function () {
	    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
	      return runtime_1.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              if (!(this._queue.length === 0)) {
	                _context4.next = 6;
	                break;
	              }

	              _context4.next = 3;
	              return this._getRemote();

	            case 3:
	              _context4.t0 = _context4.sent;
	              _context4.next = 9;
	              break;

	            case 6:
	              _context4.next = 8;
	              return this._promiseValue;

	            case 8:
	              _context4.t0 = _context4.sent;

	            case 9:
	              return _context4.abrupt("return", _context4.t0);

	            case 10:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));

	    function get() {
	      return _get.apply(this, arguments);
	    }

	    return get;
	  }();

	  _proto._start = /*#__PURE__*/function () {
	    var _start2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
	      var value;
	      return runtime_1.wrap(function _callee5$(_context5) {
	        while (1) {
	          switch (_context5.prev = _context5.next) {
	            case 0:
	              _context5.prev = 0;
	              _context5.next = 3;
	              return this._getRemote();

	            case 3:
	              value = _context5.sent;

	              this._next(value);

	              _context5.next = 13;
	              break;

	            case 7:
	              _context5.prev = 7;
	              _context5.t0 = _context5["catch"](0);

	              this._queue.forEach(function (item) {
	                item.reject(_context5.t0);
	              });

	              this._queue = [];

	              this._deferValue.reject(_context5.t0);

	              this._createValuePromise();

	            case 13:
	            case "end":
	              return _context5.stop();
	          }
	        }
	      }, _callee5, this, [[0, 7]]);
	    }));

	    function _start() {
	      return _start2.apply(this, arguments);
	    }

	    return _start;
	  }();

	  _proto._next = function _next(value) {
	    var item = this._queue.shift();

	    if (item == null) {
	      this._end(value);
	    } else {
	      void item.run(value);
	    }
	  };

	  _proto._end = function _end(value) {
	    this._deferValue.resolve(value);

	    this._createValuePromise();
	  };

	  return DoctypeProxy;
	}();

	function isCaip10(account) {
	  try {
	    cjs.AccountID.parse(account);
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	var didRegex = /^did:([A-Za-z0-9]+):([A-Za-z0-9.\-:_]+)$/;
	function isDid(did) {
	  return didRegex.test(did);
	}
	function assertDid(did) {
	  if (!isDid(did)) {
	    throw new Error("Invalid DID: " + did);
	  }
	}

	function loadLegacy3BoxProfile(_x) {
	  return _loadLegacy3BoxProfile.apply(this, arguments);
	} // Validation for BasicProfile

	function _loadLegacy3BoxProfile() {
	  _loadLegacy3BoxProfile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(address) {
	    var res;
	    return runtime_1.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.prev = 0;
	            _context.next = 3;
	            return fetch$1("https://ipfs.3box.io/profile?address=" + address);

	          case 3:
	            res = _context.sent;

	            if (!res.ok) {
	              _context.next = 10;
	              break;
	            }

	            _context.next = 7;
	            return res.json();

	          case 7:
	            _context.t0 = _context.sent;
	            _context.next = 11;
	            break;

	          case 10:
	            _context.t0 = null;

	          case 11:
	            return _context.abrupt("return", _context.t0);

	          case 14:
	            _context.prev = 14;
	            _context.t1 = _context["catch"](0);
	            return _context.abrupt("return", null);

	          case 17:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, null, [[0, 14]]);
	  }));
	  return _loadLegacy3BoxProfile.apply(this, arguments);
	}

	var lengthIndex = {
	  name: 150,
	  description: 420,
	  location: 140,
	  website: 240,
	  emoji: 2,
	  employer: 140,
	  school: 140
	};

	var isStrAndLen = function isStrAndLen(obj, key) {
	  if (!lengthIndex[key]) return false;
	  return typeof obj[key] === 'string' && obj[key].length <= lengthIndex[key];
	};

	var transformProfile = function transformProfile(profile) {
	  var _profile$image$;

	  var transform = {};
	  var image, background;
	  if (isStrAndLen(profile, 'name')) transform.name = profile.name;
	  if (isStrAndLen(profile, 'description')) transform.description = profile.description;
	  if (isStrAndLen(profile, 'location')) transform.homeLocation = profile.location;
	  if (isStrAndLen(profile, 'website')) transform.url = profile.website;
	  if (isStrAndLen(profile, 'emoji')) transform.emoji = profile.emoji;
	  if (isStrAndLen(profile, 'employer')) transform.affiliations = [profile.employer];

	  if (isStrAndLen(profile, 'school')) {
	    transform.affiliations = (transform.affiliations || []).concat([profile.school]);
	  } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access


	  if (Array.isArray(profile.image)) image = (_profile$image$ = profile.image[0]) == null ? void 0 : _profile$image$.contentUrl['/'];

	  if (image != null && typeof image === 'string') {
	    transform.image = {
	      original: {
	        src: "ipfs://" + image,
	        mimeType: 'application/octet-stream',
	        width: 170,
	        height: 170
	      }
	    };
	  }

	  if (Array.isArray(profile.coverPhoto)) {
	    var _profile$coverPhoto$;

	    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	    background = (_profile$coverPhoto$ = profile.coverPhoto[0]) == null ? void 0 : _profile$coverPhoto$.contentUrl['/'];
	  }

	  if (background != null && typeof background === 'string') {
	    transform.background = {
	      original: {
	        src: "ipfs://" + background,
	        mimeType: 'application/octet-stream',
	        width: 1000,
	        height: 175
	      }
	    };
	  }

	  return transform;
	};
	function getLegacy3BoxProfileAsBasicProfile(_x2) {
	  return _getLegacy3BoxProfileAsBasicProfile.apply(this, arguments);
	}

	function _getLegacy3BoxProfileAsBasicProfile() {
	  _getLegacy3BoxProfileAsBasicProfile = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(address) {
	    var profile;
	    return runtime_1.wrap(function _callee2$(_context2) {
	      while (1) {
	        switch (_context2.prev = _context2.next) {
	          case 0:
	            _context2.next = 2;
	            return loadLegacy3BoxProfile(address);

	          case 2:
	            profile = _context2.sent;
	            return _context2.abrupt("return", profile ? transformProfile(profile) : null);

	          case 4:
	          case "end":
	            return _context2.stop();
	        }
	      }
	    }, _callee2);
	  }));
	  return _getLegacy3BoxProfileAsBasicProfile.apply(this, arguments);
	}

	var IDX = /*#__PURE__*/function () {
	  function IDX(_ref) {
	    var _ref$aliases = _ref.aliases,
	        aliases = _ref$aliases === void 0 ? {} : _ref$aliases,
	        autopin = _ref.autopin,
	        ceramic = _ref.ceramic;
	    this._aliases = _extends({}, definitions, aliases);
	    this._autopin = autopin !== false;
	    this._ceramic = ceramic;
	    this._indexProxy = new DoctypeProxy(this._getOwnIDXDoc.bind(this));
	  }

	  var _proto = IDX.prototype;

	  // High-level APIs
	  _proto.has =
	  /*#__PURE__*/
	  function () {
	    var _has = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(name, did) {
	      var key, ref;
	      return runtime_1.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              key = this._toIndexKey(name);
	              _context.next = 3;
	              return this._getReference(key, did);

	            case 3:
	              ref = _context.sent;
	              return _context.abrupt("return", ref != null);

	            case 5:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee, this);
	    }));

	    function has(_x, _x2) {
	      return _has.apply(this, arguments);
	    }

	    return has;
	  }();

	  _proto.get = /*#__PURE__*/function () {
	    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(name, did) {
	      var key;
	      return runtime_1.wrap(function _callee2$(_context2) {
	        while (1) {
	          switch (_context2.prev = _context2.next) {
	            case 0:
	              key = this._toIndexKey(name);
	              _context2.next = 3;
	              return this._getRecord(key, did);

	            case 3:
	              return _context2.abrupt("return", _context2.sent);

	            case 4:
	            case "end":
	              return _context2.stop();
	          }
	        }
	      }, _callee2, this);
	    }));

	    function get(_x3, _x4) {
	      return _get.apply(this, arguments);
	    }

	    return get;
	  }();

	  _proto.set = /*#__PURE__*/function () {
	    var _set = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(name, content, options) {
	      var key;
	      return runtime_1.wrap(function _callee3$(_context3) {
	        while (1) {
	          switch (_context3.prev = _context3.next) {
	            case 0:
	              key = this._toIndexKey(name);
	              _context3.next = 3;
	              return this._setRecord(key, content, options);

	            case 3:
	              return _context3.abrupt("return", _context3.sent);

	            case 4:
	            case "end":
	              return _context3.stop();
	          }
	        }
	      }, _callee3, this);
	    }));

	    function set(_x5, _x6, _x7) {
	      return _set.apply(this, arguments);
	    }

	    return set;
	  }();

	  _proto.merge = /*#__PURE__*/function () {
	    var _merge = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(name, content, options) {
	      var key, existing, newContent;
	      return runtime_1.wrap(function _callee4$(_context4) {
	        while (1) {
	          switch (_context4.prev = _context4.next) {
	            case 0:
	              key = this._toIndexKey(name);
	              _context4.next = 3;
	              return this._getRecord(key);

	            case 3:
	              existing = _context4.sent;
	              newContent = existing ? _extends({}, existing, content) : content;
	              _context4.next = 7;
	              return this._setRecord(key, newContent, options);

	            case 7:
	              return _context4.abrupt("return", _context4.sent);

	            case 8:
	            case "end":
	              return _context4.stop();
	          }
	        }
	      }, _callee4, this);
	    }));

	    function merge(_x8, _x9, _x10) {
	      return _merge.apply(this, arguments);
	    }

	    return merge;
	  }();

	  _proto.setAll = /*#__PURE__*/function () {
	    var _setAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(contents, options) {
	      var _this = this;

	      var updates, changes, newReferences;
	      return runtime_1.wrap(function _callee6$(_context6) {
	        while (1) {
	          switch (_context6.prev = _context6.next) {
	            case 0:
	              updates = Object.entries(contents).map( /*#__PURE__*/function () {
	                var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(_ref2) {
	                  var name, content, key, _yield$_this$_setReco, created, id;

	                  return runtime_1.wrap(function _callee5$(_context5) {
	                    while (1) {
	                      switch (_context5.prev = _context5.next) {
	                        case 0:
	                          name = _ref2[0], content = _ref2[1];
	                          key = _this._toIndexKey(name);
	                          _context5.next = 4;
	                          return _this._setRecordOnly(key, content, options);

	                        case 4:
	                          _yield$_this$_setReco = _context5.sent;
	                          created = _yield$_this$_setReco[0];
	                          id = _yield$_this$_setReco[1];
	                          return _context5.abrupt("return", [created, key, id]);

	                        case 8:
	                        case "end":
	                          return _context5.stop();
	                      }
	                    }
	                  }, _callee5);
	                }));

	                return function (_x13) {
	                  return _ref3.apply(this, arguments);
	                };
	              }());
	              _context6.next = 3;
	              return Promise.all(updates);

	            case 3:
	              changes = _context6.sent;
	              newReferences = changes.reduce(function (acc, _ref4) {
	                var created = _ref4[0],
	                    key = _ref4[1],
	                    id = _ref4[2];

	                if (created) {
	                  acc[key] = id.toUrl();
	                }

	                return acc;
	              }, {});
	              _context6.next = 7;
	              return this._setReferences(newReferences);

	            case 7:
	              return _context6.abrupt("return", newReferences);

	            case 8:
	            case "end":
	              return _context6.stop();
	          }
	        }
	      }, _callee6, this);
	    }));

	    function setAll(_x11, _x12) {
	      return _setAll.apply(this, arguments);
	    }

	    return setAll;
	  }();

	  _proto.setDefaults = /*#__PURE__*/function () {
	    var _setDefaults = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(contents, options) {
	      var _yield$this$getIndex,
	          _this2 = this;

	      var index, updates, changes, newReferences;
	      return runtime_1.wrap(function _callee8$(_context8) {
	        while (1) {
	          switch (_context8.prev = _context8.next) {
	            case 0:
	              _context8.next = 2;
	              return this.getIndex();

	            case 2:
	              _context8.t0 = _yield$this$getIndex = _context8.sent;

	              if (!(_context8.t0 != null)) {
	                _context8.next = 7;
	                break;
	              }

	              _context8.t1 = _yield$this$getIndex;
	              _context8.next = 8;
	              break;

	            case 7:
	              _context8.t1 = {};

	            case 8:
	              index = _context8.t1;
	              updates = Object.entries(contents).map(function (_ref5) {
	                var name = _ref5[0],
	                    content = _ref5[1];
	                return [_this2._toIndexKey(name), content];
	              }) // This filter returned the type (string | Record<string, any>)[][]
	              // we need to add a type guard to get the correct type here.
	              .filter(function (entry) {
	                return index[entry[0]] == null;
	              }).map( /*#__PURE__*/function () {
	                var _ref7 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_ref6) {
	                  var _ref8;

	                  var key, content, definition, id;
	                  return runtime_1.wrap(function _callee7$(_context7) {
	                    while (1) {
	                      switch (_context7.prev = _context7.next) {
	                        case 0:
	                          key = _ref6[0], content = _ref6[1];
	                          _context7.next = 3;
	                          return _this2.getDefinition(key);

	                        case 3:
	                          definition = _context7.sent;
	                          _context7.next = 6;
	                          return _this2._createRecord(definition, content, options);

	                        case 6:
	                          id = _context7.sent;
	                          return _context7.abrupt("return", (_ref8 = {}, _ref8[key] = id.toUrl(), _ref8));

	                        case 8:
	                        case "end":
	                          return _context7.stop();
	                      }
	                    }
	                  }, _callee7);
	                }));

	                return function (_x16) {
	                  return _ref7.apply(this, arguments);
	                };
	              }());
	              _context8.next = 12;
	              return Promise.all(updates);

	            case 12:
	              changes = _context8.sent;
	              newReferences = changes.reduce(function (acc, keyToID) {
	                return Object.assign(acc, keyToID);
	              }, {});
	              _context8.next = 16;
	              return this._setReferences(newReferences);

	            case 16:
	              return _context8.abrupt("return", newReferences);

	            case 17:
	            case "end":
	              return _context8.stop();
	          }
	        }
	      }, _callee8, this);
	    }));

	    function setDefaults(_x14, _x15) {
	      return _setDefaults.apply(this, arguments);
	    }

	    return setDefaults;
	  }();

	  _proto.remove = /*#__PURE__*/function () {
	    var _remove = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(name) {
	      var key;
	      return runtime_1.wrap(function _callee9$(_context9) {
	        while (1) {
	          switch (_context9.prev = _context9.next) {
	            case 0:
	              key = this._toIndexKey(name);
	              _context9.next = 3;
	              return this._removeReference(key);

	            case 3:
	            case "end":
	              return _context9.stop();
	          }
	        }
	      }, _callee9, this);
	    }));

	    function remove(_x17) {
	      return _remove.apply(this, arguments);
	    }

	    return remove;
	  }();

	  _proto._toIndexKey = function _toIndexKey(name) {
	    var _this$_aliases$name;

	    return (_this$_aliases$name = this._aliases[name]) != null ? _this$_aliases$name : name;
	  } // Identity Index APIs
	  ;

	  _proto.getIndex =
	  /*#__PURE__*/
	  function () {
	    var _getIndex = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(did) {
	      var rootDoc;
	      return runtime_1.wrap(function _callee10$(_context10) {
	        while (1) {
	          switch (_context10.prev = _context10.next) {
	            case 0:
	              if (!(this.authenticated && (did === this.id || did == null))) {
	                _context10.next = 6;
	                break;
	              }

	              _context10.next = 3;
	              return this._indexProxy.get();

	            case 3:
	              _context10.t0 = _context10.sent;
	              _context10.next = 9;
	              break;

	            case 6:
	              _context10.next = 8;
	              return this._getIDXDoc(did != null ? did : this.id);

	            case 8:
	              _context10.t0 = _context10.sent;

	            case 9:
	              rootDoc = _context10.t0;
	              return _context10.abrupt("return", rootDoc ? rootDoc.content : null);

	            case 11:
	            case "end":
	              return _context10.stop();
	          }
	        }
	      }, _callee10, this);
	    }));

	    function getIndex(_x18) {
	      return _getIndex.apply(this, arguments);
	    }

	    return getIndex;
	  }();

	  _proto.iterator = function iterator(did) {
	    var _this3 = this,
	        _ref9;

	    var list;
	    var cursor = 0;
	    return _ref9 = {}, _ref9[Symbol.asyncIterator] = function () {
	      return this;
	    }, _ref9.next = function () {
	      var _next = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
	        var index, _list$cursor, key, id, doc;

	        return runtime_1.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                if (!(list == null)) {
	                  _context11.next = 5;
	                  break;
	                }

	                _context11.next = 3;
	                return _this3.getIndex(did);

	              case 3:
	                index = _context11.sent;
	                list = Object.entries(index != null ? index : {});

	              case 5:
	                if (!(cursor === list.length)) {
	                  _context11.next = 7;
	                  break;
	                }

	                return _context11.abrupt("return", {
	                  done: true,
	                  value: null
	                });

	              case 7:
	                _list$cursor = list[cursor++], key = _list$cursor[0], id = _list$cursor[1];
	                _context11.next = 10;
	                return _this3._loadDocument(id);

	              case 10:
	                doc = _context11.sent;
	                return _context11.abrupt("return", {
	                  done: false,
	                  value: {
	                    key: key,
	                    id: id,
	                    record: doc.content
	                  }
	                });

	              case 12:
	              case "end":
	                return _context11.stop();
	            }
	          }
	        }, _callee11);
	      }));

	      function next() {
	        return _next.apply(this, arguments);
	      }

	      return next;
	    }(), _ref9;
	  };

	  _proto._createIDXDoc = /*#__PURE__*/function () {
	    var _createIDXDoc2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(did) {
	      return runtime_1.wrap(function _callee12$(_context12) {
	        while (1) {
	          switch (_context12.prev = _context12.next) {
	            case 0:
	              if (!isCaip10(did)) {
	                _context12.next = 4;
	                break;
	              }

	              _context12.next = 3;
	              return this.caip10ToDid(did);

	            case 3:
	              did = _context12.sent;

	            case 4:
	              assertDid(did);
	              _context12.next = 7;
	              return lib$a.TileDocument.create(this._ceramic, null, {
	                deterministic: true,
	                controllers: [did],
	                family: 'IDX'
	              }, {
	                anchor: false,
	                publish: false
	              });

	            case 7:
	              return _context12.abrupt("return", _context12.sent);

	            case 8:
	            case "end":
	              return _context12.stop();
	          }
	        }
	      }, _callee12, this);
	    }));

	    function _createIDXDoc(_x19) {
	      return _createIDXDoc2.apply(this, arguments);
	    }

	    return _createIDXDoc;
	  }();

	  _proto._getIDXDoc = /*#__PURE__*/function () {
	    var _getIDXDoc2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13(did) {
	      var doc;
	      return runtime_1.wrap(function _callee13$(_context13) {
	        while (1) {
	          switch (_context13.prev = _context13.next) {
	            case 0:
	              _context13.next = 2;
	              return this._createIDXDoc(did);

	            case 2:
	              doc = _context13.sent;

	              if (!(doc.metadata.schema == null)) {
	                _context13.next = 5;
	                break;
	              }

	              return _context13.abrupt("return", null);

	            case 5:
	              if (!(doc.metadata.schema !== schemas.IdentityIndex)) {
	                _context13.next = 7;
	                break;
	              }

	              throw new Error('Invalid document: schema is not IdentityIndex');

	            case 7:
	              return _context13.abrupt("return", doc);

	            case 8:
	            case "end":
	              return _context13.stop();
	          }
	        }
	      }, _callee13, this);
	    }));

	    function _getIDXDoc(_x20) {
	      return _getIDXDoc2.apply(this, arguments);
	    }

	    return _getIDXDoc;
	  }();

	  _proto._getOwnIDXDoc = /*#__PURE__*/function () {
	    var _getOwnIDXDoc2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
	      var doc;
	      return runtime_1.wrap(function _callee14$(_context14) {
	        while (1) {
	          switch (_context14.prev = _context14.next) {
	            case 0:
	              _context14.next = 2;
	              return this._createIDXDoc(this.id);

	            case 2:
	              doc = _context14.sent;

	              if (!(doc.metadata.schema == null)) {
	                _context14.next = 11;
	                break;
	              }

	              _context14.next = 6;
	              return doc.update(null, {
	                schema: schemas.IdentityIndex
	              });

	            case 6:
	              if (!this._autopin) {
	                _context14.next = 9;
	                break;
	              }

	              _context14.next = 9;
	              return this._ceramic.pin.add(doc.id);

	            case 9:
	              _context14.next = 13;
	              break;

	            case 11:
	              if (!(doc.metadata.schema !== schemas.IdentityIndex)) {
	                _context14.next = 13;
	                break;
	              }

	              throw new Error('Invalid document: schema is not IdentityIndex');

	            case 13:
	              return _context14.abrupt("return", doc);

	            case 14:
	            case "end":
	              return _context14.stop();
	          }
	        }
	      }, _callee14, this);
	    }));

	    function _getOwnIDXDoc() {
	      return _getOwnIDXDoc2.apply(this, arguments);
	    }

	    return _getOwnIDXDoc;
	  }() // Definition APIs
	  ;

	  _proto.getDefinition =
	  /*#__PURE__*/
	  function () {
	    var _getDefinition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15(idOrKey) {
	      var doc;
	      return runtime_1.wrap(function _callee15$(_context15) {
	        while (1) {
	          switch (_context15.prev = _context15.next) {
	            case 0:
	              _context15.next = 2;
	              return this._loadDocument(idOrKey);

	            case 2:
	              doc = _context15.sent;

	              if (!(doc.metadata.schema !== schemas.Definition)) {
	                _context15.next = 5;
	                break;
	              }

	              throw new Error('Invalid document: schema is not Definition');

	            case 5:
	              return _context15.abrupt("return", _extends({}, doc.content, {
	                id: doc.id
	              }));

	            case 6:
	            case "end":
	              return _context15.stop();
	          }
	        }
	      }, _callee15, this);
	    }));

	    function getDefinition(_x21) {
	      return _getDefinition.apply(this, arguments);
	    }

	    return getDefinition;
	  }() // Record APIs
	  ;

	  _proto.getRecordID =
	  /*#__PURE__*/
	  function () {
	    var _getRecordID = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee16(key, did) {
	      return runtime_1.wrap(function _callee16$(_context16) {
	        while (1) {
	          switch (_context16.prev = _context16.next) {
	            case 0:
	              _context16.next = 2;
	              return this._getReference(key, did);

	            case 2:
	              return _context16.abrupt("return", _context16.sent);

	            case 3:
	            case "end":
	              return _context16.stop();
	          }
	        }
	      }, _callee16, this);
	    }));

	    function getRecordID(_x22, _x23) {
	      return _getRecordID.apply(this, arguments);
	    }

	    return getRecordID;
	  }();

	  _proto.getRecordDocument = /*#__PURE__*/function () {
	    var _getRecordDocument = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(key, did) {
	      var _yield$this$_loadDocu;

	      var id;
	      return runtime_1.wrap(function _callee17$(_context17) {
	        while (1) {
	          switch (_context17.prev = _context17.next) {
	            case 0:
	              _context17.next = 2;
	              return this.getRecordID(key, did);

	            case 2:
	              id = _context17.sent;

	              if (!(id == null)) {
	                _context17.next = 5;
	                break;
	              }

	              return _context17.abrupt("return", null);

	            case 5:
	              _context17.next = 7;
	              return this._loadDocument(id);

	            case 7:
	              _context17.t0 = _yield$this$_loadDocu = _context17.sent;

	              if (!(_context17.t0 != null)) {
	                _context17.next = 12;
	                break;
	              }

	              _context17.t1 = _yield$this$_loadDocu;
	              _context17.next = 13;
	              break;

	            case 12:
	              _context17.t1 = null;

	            case 13:
	              return _context17.abrupt("return", _context17.t1);

	            case 14:
	            case "end":
	              return _context17.stop();
	          }
	        }
	      }, _callee17, this);
	    }));

	    function getRecordDocument(_x24, _x25) {
	      return _getRecordDocument.apply(this, arguments);
	    }

	    return getRecordDocument;
	  }();

	  _proto._getRecord = /*#__PURE__*/function () {
	    var _getRecord2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18(key, did) {
	      var doc;
	      return runtime_1.wrap(function _callee18$(_context18) {
	        while (1) {
	          switch (_context18.prev = _context18.next) {
	            case 0:
	              _context18.next = 2;
	              return this.getRecordDocument(key, did);

	            case 2:
	              doc = _context18.sent;
	              return _context18.abrupt("return", doc ? doc.content : null);

	            case 4:
	            case "end":
	              return _context18.stop();
	          }
	        }
	      }, _callee18, this);
	    }));

	    function _getRecord(_x26, _x27) {
	      return _getRecord2.apply(this, arguments);
	    }

	    return _getRecord;
	  }();

	  _proto._setRecord = /*#__PURE__*/function () {
	    var _setRecord2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(key, content, options) {
	      var _yield$this$_setRecor, created, id;

	      return runtime_1.wrap(function _callee19$(_context19) {
	        while (1) {
	          switch (_context19.prev = _context19.next) {
	            case 0:
	              _context19.next = 2;
	              return this._setRecordOnly(key, content, options);

	            case 2:
	              _yield$this$_setRecor = _context19.sent;
	              created = _yield$this$_setRecor[0];
	              id = _yield$this$_setRecor[1];

	              if (!created) {
	                _context19.next = 8;
	                break;
	              }

	              _context19.next = 8;
	              return this._setReference(key, id);

	            case 8:
	              return _context19.abrupt("return", id);

	            case 9:
	            case "end":
	              return _context19.stop();
	          }
	        }
	      }, _callee19, this);
	    }));

	    function _setRecord(_x28, _x29, _x30) {
	      return _setRecord2.apply(this, arguments);
	    }

	    return _setRecord;
	  }();

	  _proto._setRecordOnly = /*#__PURE__*/function () {
	    var _setRecordOnly2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20(key, content, _temp) {
	      var _ref10, pin, existing, definition, ref, doc;

	      return runtime_1.wrap(function _callee20$(_context20) {
	        while (1) {
	          switch (_context20.prev = _context20.next) {
	            case 0:
	              _ref10 = _temp === void 0 ? {} : _temp, pin = _ref10.pin;
	              _context20.next = 3;
	              return this._getReference(key, this.id);

	            case 3:
	              existing = _context20.sent;

	              if (!(existing == null)) {
	                _context20.next = 14;
	                break;
	              }

	              _context20.next = 7;
	              return this.getDefinition(key);

	            case 7:
	              definition = _context20.sent;
	              _context20.next = 10;
	              return this._createRecord(definition, content, {
	                pin: pin
	              });

	            case 10:
	              ref = _context20.sent;
	              return _context20.abrupt("return", [true, ref]);

	            case 14:
	              _context20.next = 16;
	              return this._loadDocument(existing);

	            case 16:
	              doc = _context20.sent;
	              _context20.next = 19;
	              return doc.update(content);

	            case 19:
	              return _context20.abrupt("return", [false, doc.id]);

	            case 20:
	            case "end":
	              return _context20.stop();
	          }
	        }
	      }, _callee20, this);
	    }));

	    function _setRecordOnly(_x31, _x32, _x33) {
	      return _setRecordOnly2.apply(this, arguments);
	    }

	    return _setRecordOnly;
	  }();

	  _proto._loadDocument = function _loadDocument(id) {
	    return this._ceramic.loadStream(id);
	  };

	  _proto._createRecord = /*#__PURE__*/function () {
	    var _createRecord2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21(definition, content, _temp2) {
	      var _ref11, pin, doc, updated;

	      return runtime_1.wrap(function _callee21$(_context21) {
	        while (1) {
	          switch (_context21.prev = _context21.next) {
	            case 0:
	              _ref11 = _temp2 === void 0 ? {} : _temp2, pin = _ref11.pin;
	              _context21.next = 3;
	              return lib$a.TileDocument.create(this._ceramic, null, {
	                deterministic: true,
	                controllers: [this.id],
	                family: definition.id.toString()
	              }, {
	                anchor: false,
	                publish: false
	              });

	            case 3:
	              doc = _context21.sent;
	              // Then be updated with content and schema
	              updated = doc.update(content, {
	                schema: definition.schema
	              });

	              if (!(pin != null ? pin : this._autopin)) {
	                _context21.next = 10;
	                break;
	              }

	              _context21.next = 8;
	              return Promise.all([updated, this._ceramic.pin.add(doc.id)]);

	            case 8:
	              _context21.next = 12;
	              break;

	            case 10:
	              _context21.next = 12;
	              return updated;

	            case 12:
	              return _context21.abrupt("return", doc.id);

	            case 13:
	            case "end":
	              return _context21.stop();
	          }
	        }
	      }, _callee21, this);
	    }));

	    function _createRecord(_x34, _x35, _x36) {
	      return _createRecord2.apply(this, arguments);
	    }

	    return _createRecord;
	  }() // References APIs
	  ;

	  _proto._getReference =
	  /*#__PURE__*/
	  function () {
	    var _getReference2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee22(key, did) {
	      var _index$key;

	      var index;
	      return runtime_1.wrap(function _callee22$(_context22) {
	        while (1) {
	          switch (_context22.prev = _context22.next) {
	            case 0:
	              _context22.next = 2;
	              return this.getIndex(did != null ? did : this.id);

	            case 2:
	              index = _context22.sent;
	              return _context22.abrupt("return", (_index$key = index == null ? void 0 : index[key]) != null ? _index$key : null);

	            case 4:
	            case "end":
	              return _context22.stop();
	          }
	        }
	      }, _callee22, this);
	    }));

	    function _getReference(_x37, _x38) {
	      return _getReference2.apply(this, arguments);
	    }

	    return _getReference;
	  }();

	  _proto._setReference = /*#__PURE__*/function () {
	    var _setReference2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23(key, id) {
	      return runtime_1.wrap(function _callee23$(_context23) {
	        while (1) {
	          switch (_context23.prev = _context23.next) {
	            case 0:
	              _context23.next = 2;
	              return this._indexProxy.changeContent(function (index) {
	                var _extends2;

	                return _extends({}, index, (_extends2 = {}, _extends2[key] = id.toUrl(), _extends2));
	              });

	            case 2:
	            case "end":
	              return _context23.stop();
	          }
	        }
	      }, _callee23, this);
	    }));

	    function _setReference(_x39, _x40) {
	      return _setReference2.apply(this, arguments);
	    }

	    return _setReference;
	  }();

	  _proto._setReferences = /*#__PURE__*/function () {
	    var _setReferences2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24(references) {
	      return runtime_1.wrap(function _callee24$(_context24) {
	        while (1) {
	          switch (_context24.prev = _context24.next) {
	            case 0:
	              if (!(Object.keys(references).length !== 0)) {
	                _context24.next = 3;
	                break;
	              }

	              _context24.next = 3;
	              return this._indexProxy.changeContent(function (index) {
	                return _extends({}, index, references);
	              });

	            case 3:
	            case "end":
	              return _context24.stop();
	          }
	        }
	      }, _callee24, this);
	    }));

	    function _setReferences(_x41) {
	      return _setReferences2.apply(this, arguments);
	    }

	    return _setReferences;
	  }();

	  _proto._removeReference = /*#__PURE__*/function () {
	    var _removeReference2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25(key) {
	      return runtime_1.wrap(function _callee25$(_context25) {
	        while (1) {
	          switch (_context25.prev = _context25.next) {
	            case 0:
	              _context25.next = 2;
	              return this._indexProxy.changeContent(function (index) {
	                if (index) delete index[key];
	                return index;
	              });

	            case 2:
	            case "end":
	              return _context25.stop();
	          }
	        }
	      }, _callee25, this);
	    }));

	    function _removeReference(_x42) {
	      return _removeReference2.apply(this, arguments);
	    }

	    return _removeReference;
	  }();

	  _proto.caip10ToDid = /*#__PURE__*/function () {
	    var _caip10ToDid = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26(accountId) {
	      var link;
	      return runtime_1.wrap(function _callee26$(_context26) {
	        while (1) {
	          switch (_context26.prev = _context26.next) {
	            case 0:
	              _context26.next = 2;
	              return lib$9.Caip10Link.fromAccount(this._ceramic, accountId);

	            case 2:
	              link = _context26.sent;

	              if (!(link.did == null)) {
	                _context26.next = 5;
	                break;
	              }

	              throw new Error("No DID found for " + accountId);

	            case 5:
	              return _context26.abrupt("return", link.did);

	            case 6:
	            case "end":
	              return _context26.stop();
	          }
	        }
	      }, _callee26, this);
	    }));

	    function caip10ToDid(_x43) {
	      return _caip10ToDid.apply(this, arguments);
	    }

	    return caip10ToDid;
	  }();

	  _createClass(IDX, [{
	    key: "authenticated",
	    get: function get() {
	      return this._ceramic.did != null;
	    }
	  }, {
	    key: "ceramic",
	    get: function get() {
	      return this._ceramic;
	    }
	  }, {
	    key: "id",
	    get: function get() {
	      if (this._ceramic.did == null) {
	        throw new Error('Ceramic instance is not authenticated');
	      }

	      return this._ceramic.did.id;
	    }
	  }]);

	  return IDX;
	}();

	var idx_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		IDX: IDX,
		assertDid: assertDid,
		getLegacy3BoxProfileAsBasicProfile: getLegacy3BoxProfileAsBasicProfile,
		isCaip10: isCaip10,
		isDid: isDid
	});

	var require$$8 = /*@__PURE__*/getAugmentedNamespace(idx_esm);

	var network = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.endpoints = exports.Env = void 0;
	(function (Env) {
	    Env["STAGING"] = "STAGING";
	    Env["PRODUCTION"] = "PRODUCTION";
	})(exports.Env || (exports.Env = {}));
	exports.endpoints = {
	    STAGING: {
	        ceramicUrl: 'https://ceramic.stg.cybertino.io',
	        cyberConnectSchema: 'kjzl6cwe1jw149mvqedik2h3j26y4bmcvucjbbhezwcr7dgdyyg9v0x8xfvlp1j',
	        cyberConnectApi: 'https://api.stg.cybertino.io/connect/',
	    },
	    PRODUCTION: {
	        ceramicUrl: 'https://ceramic.cybertino.io',
	        cyberConnectSchema: 'kjzl6cwe1jw14b3g6d22ze4jaatoikiq62qrmnbzo8hkg68ic7w0smq9ymzsxta',
	        cyberConnectApi: 'https://api.cybertino.io/connect/',
	    },
	};

	}(network));

	var queries = {};

	(function (exports) {
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setAlias = exports.unfollow = exports.follow = exports.handleQuery = exports.request = exports.querySchemas = exports.setAliasQuerySchema = exports.disconnectQuerySchema = exports.connectQuerySchema = void 0;
	var connectQuerySchema = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, signature = _a.signature;
	    return "mutation {\n  follow(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", alias: \"" + alias + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n";
	};
	exports.connectQuerySchema = connectQuerySchema;
	var disconnectQuerySchema = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, signature = _a.signature;
	    return "mutation {\n  unfollow(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n";
	};
	exports.disconnectQuerySchema = disconnectQuerySchema;
	var setAliasQuerySchema = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, signature = _a.signature, alias = _a.alias;
	    return "mutation {\n  setAlias(fromAddr: \"" + fromAddr + "\", toAddr: \"" + toAddr + "\", alias: \"" + alias + "\", namespace: \"" + namespace + "\", signature: \"" + signature + "\") {\n    result\n  }\n}\n";
	};
	exports.setAliasQuerySchema = setAliasQuerySchema;
	exports.querySchemas = {
	    connect: exports.connectQuerySchema,
	    disconnect: exports.disconnectQuerySchema,
	    setAlias: exports.setAliasQuerySchema,
	};
	var request = function (url, data) {
	    if (url === void 0) { url = ''; }
	    if (data === void 0) { data = {}; }
	    return __awaiter(void 0, void 0, void 0, function () {
	        var response;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0: return [4 /*yield*/, fetch(url, {
	                        method: 'POST',
	                        mode: 'cors',
	                        cache: 'no-cache',
	                        headers: {
	                            'Content-Type': 'application/json',
	                        },
	                        referrerPolicy: 'no-referrer',
	                        body: JSON.stringify(data),
	                    })];
	                case 1:
	                    response = _a.sent();
	                    return [2 /*return*/, response.json()];
	            }
	        });
	    });
	};
	exports.request = request;
	var handleQuery = function (query, url, variables) {
	    if (variables === void 0) { variables = {}; }
	    return (0, exports.request)(url, {
	        query: query,
	        variables: variables,
	        operationName: null,
	    });
	};
	exports.handleQuery = handleQuery;
	var follow = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature;
	    var schema = exports.querySchemas['connect']({
	        fromAddr: fromAddr,
	        toAddr: toAddr,
	        alias: alias,
	        namespace: namespace,
	        signature: signature,
	    });
	    return (0, exports.handleQuery)(schema, url);
	};
	exports.follow = follow;
	var unfollow = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, namespace = _a.namespace, url = _a.url, signature = _a.signature;
	    var schema = exports.querySchemas['disconnect']({
	        fromAddr: fromAddr,
	        toAddr: toAddr,
	        namespace: namespace,
	        signature: signature,
	    });
	    return (0, exports.handleQuery)(schema, url);
	};
	exports.unfollow = unfollow;
	var setAlias = function (_a) {
	    var fromAddr = _a.fromAddr, toAddr = _a.toAddr, alias = _a.alias, namespace = _a.namespace, url = _a.url, signature = _a.signature;
	    var schema = exports.querySchemas['setAlias']({
	        fromAddr: fromAddr,
	        toAddr: toAddr,
	        alias: alias,
	        namespace: namespace,
	        signature: signature,
	    });
	    return (0, exports.handleQuery)(schema, url);
	};
	exports.setAlias = setAlias;

	}(queries));

	var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(cyberConnect, "__esModule", { value: true });
	var http_client_1 = ceramicHttpClient;
	var key_did_resolver_1 = __importDefault(lib$8);
	var _3id_did_resolver_1 = __importDefault(lib$7);
	var _3id_did_provider_1 = __importDefault(threeidProvider);
	var connect_1 = dist$7.exports;
	var sha256_1 = sha256$5;
	var uint8arrays_1 = uint8arrays$7;
	var dids_1 = lib$5;
	var idx_1 = require$$8;
	var network_1 = network;
	var queries_1 = queries;
	var CyberConnect$1 = /** @class */ (function () {
	    // ethProvider is an Ethereum provider and addresses an array of strings
	    function CyberConnect(config) {
	        var _this = this;
	        this.address = '';
	        this.signature = '';
	        var ethProvider = config.ethProvider, namespace = config.namespace, env = config.env;
	        if (!namespace) {
	            throw 'Namespace can not be empty';
	        }
	        this.namespace = namespace;
	        this.endpoint = network_1.endpoints[env] || network_1.endpoints.PRODUCTION;
	        this.ceramicClient = new http_client_1.CeramicClient(this.endpoint.ceramicUrl);
	        var keyDidResolver = key_did_resolver_1.default.getResolver();
	        var threeIdResolver = _3id_did_resolver_1.default.getResolver(this.ceramicClient);
	        this.resolverRegistry = __assign(__assign({}, threeIdResolver), keyDidResolver);
	        if (!ethProvider)
	            return;
	        ethProvider.enable().then(function (addresses) {
	            if (addresses[0]) {
	                _this.address = addresses[0];
	                _this.authProvider = new connect_1.EthereumAuthProvider(ethProvider, _this.address);
	            }
	        });
	    }
	    CyberConnect.prototype.authenticate = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var rst;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.idxInstance) {
	                            return [2 /*return*/];
	                        }
	                        if (!this.authProvider) {
	                            console.error('Could not find authProvider');
	                            return [2 /*return*/];
	                        }
	                        return [4 /*yield*/, this.authProvider.authenticate('Allow this account to control your identity')];
	                    case 1:
	                        rst = _a.sent();
	                        this.signature = rst;
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.setupIdx = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var getPermission, authSecret, authId, threeId, threeIdProvider, did;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (this.idxInstance) {
	                            return [2 /*return*/];
	                        }
	                        if (!this.authProvider) {
	                            console.error('Could not find authProvider');
	                            return [2 /*return*/];
	                        }
	                        if (!this.ceramicClient)
	                            return [2 /*return*/];
	                        getPermission = function (request) { return __awaiter(_this, void 0, void 0, function () {
	                            return __generator(this, function (_a) {
	                                return [2 /*return*/, request.payload.paths];
	                            });
	                        }); };
	                        authSecret = (0, sha256_1.hash)((0, uint8arrays_1.fromString)(this.signature.slice(2)));
	                        return [4 /*yield*/, this.authProvider.accountId()];
	                    case 1:
	                        authId = (_a.sent()).toString();
	                        return [4 /*yield*/, _3id_did_provider_1.default.create({
	                                getPermission: getPermission,
	                                authSecret: authSecret,
	                                authId: authId,
	                                ceramic: this.ceramicClient,
	                            })];
	                    case 2:
	                        threeId = _a.sent();
	                        threeIdProvider = threeId.getDidProvider();
	                        did = new dids_1.DID({
	                            provider: threeIdProvider,
	                            resolver: this.resolverRegistry,
	                        });
	                        return [4 /*yield*/, did.authenticate()];
	                    case 3:
	                        _a.sent();
	                        return [4 /*yield*/, this.ceramicClient.setDID(did)];
	                    case 4:
	                        _a.sent();
	                        this.idxInstance = new idx_1.IDX({
	                            ceramic: this.ceramicClient,
	                            aliases: {
	                                cyberConnect: this.endpoint.cyberConnectSchema,
	                            },
	                            autopin: true,
	                        });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.getOutboundLink = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            var result;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.idxInstance) {
	                            console.error('Could not find idx instance');
	                            return [2 /*return*/, null];
	                        }
	                        return [4 /*yield*/, this.idxInstance.get('cyberConnect')];
	                    case 1:
	                        result = (_a.sent());
	                        return [2 /*return*/, (result === null || result === void 0 ? void 0 : result.outboundLink) || null];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.ceramicConnect = function (targetAddr, alias) {
	        if (alias === void 0) { alias = ''; }
	        return __awaiter(this, void 0, void 0, function () {
	            var outboundLink, link, curTimeStr;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.setupIdx()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.getOutboundLink()];
	                    case 2:
	                        outboundLink = _a.sent();
	                        if (!outboundLink) {
	                            console.log('Can not get ceramic outboundLink');
	                            return [2 /*return*/];
	                        }
	                        if (!this.idxInstance) {
	                            console.error('Could not find idx instance');
	                            return [2 /*return*/];
	                        }
	                        link = outboundLink.find(function (link) {
	                            return link.target === targetAddr && link.namespace === _this.namespace;
	                        });
	                        if (!link) {
	                            curTimeStr = String(Date.now());
	                            outboundLink.push({
	                                target: targetAddr,
	                                connectionType: 'follow',
	                                namespace: this.namespace,
	                                alias: alias,
	                                createdAt: curTimeStr,
	                            });
	                            this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
	                        }
	                        else {
	                            console.warn('You have already connected to the target address');
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.ceramicDisconnect = function (targetAddr) {
	        return __awaiter(this, void 0, void 0, function () {
	            var outboundLink, newOutboundLink;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.setupIdx()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.getOutboundLink()];
	                    case 2:
	                        outboundLink = _a.sent();
	                        if (!outboundLink) {
	                            console.log('Can not get ceramic outboundLink');
	                            return [2 /*return*/];
	                        }
	                        if (!this.idxInstance) {
	                            console.error('Could not find idx instance');
	                            return [2 /*return*/];
	                        }
	                        newOutboundLink = outboundLink.filter(function (link) {
	                            return link.target !== targetAddr || link.namespace !== _this.namespace;
	                        });
	                        this.idxInstance.set('cyberConnect', {
	                            outboundLink: newOutboundLink,
	                        });
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.ceramicSetAlias = function (targetAddr, alias) {
	        return __awaiter(this, void 0, void 0, function () {
	            var outboundLink, index;
	            var _this = this;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0: return [4 /*yield*/, this.setupIdx()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.getOutboundLink()];
	                    case 2:
	                        outboundLink = _a.sent();
	                        if (!outboundLink) {
	                            console.log('Can not get ceramic outboundLink');
	                            return [2 /*return*/];
	                        }
	                        if (!this.idxInstance) {
	                            console.error('Could not find idx instance');
	                            return [2 /*return*/];
	                        }
	                        index = outboundLink.findIndex(function (link) {
	                            return link.target === targetAddr && link.namespace === _this.namespace;
	                        });
	                        if (index !== -1) {
	                            outboundLink[index] = __assign(__assign({}, outboundLink[index]), { alias: alias });
	                            this.idxInstance.set('cyberConnect', { outboundLink: outboundLink });
	                        }
	                        else {
	                            console.warn("Couldn't find the target address in the given namespace");
	                        }
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.connect = function (targetAddr, alias) {
	        var _a, _b;
	        if (alias === void 0) { alias = ''; }
	        return __awaiter(this, void 0, void 0, function () {
	            var resp;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, this.authenticate()];
	                    case 1:
	                        _c.sent();
	                        return [4 /*yield*/, (0, queries_1.follow)({
	                                fromAddr: this.address,
	                                toAddr: targetAddr,
	                                alias: alias,
	                                namespace: this.namespace,
	                                url: this.endpoint.cyberConnectApi,
	                                signature: this.signature,
	                            })];
	                    case 2:
	                        resp = _c.sent();
	                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.follow.result) !== 'SUCCESS') {
	                            console.error('follow error: ', (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.follow.result);
	                            return [2 /*return*/];
	                        }
	                        console.log('Connect success');
	                        this.ceramicConnect(targetAddr, alias);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.disconnect = function (targetAddr) {
	        var _a, _b;
	        return __awaiter(this, void 0, void 0, function () {
	            var resp;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, this.authenticate()];
	                    case 1:
	                        _c.sent();
	                        return [4 /*yield*/, (0, queries_1.unfollow)({
	                                fromAddr: this.address,
	                                toAddr: targetAddr,
	                                url: this.endpoint.cyberConnectApi,
	                                namespace: this.namespace,
	                                signature: this.signature,
	                            })];
	                    case 2:
	                        resp = _c.sent();
	                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.unfollow.result) !== 'SUCCESS') {
	                            console.error('unfollow error: ', (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.unfollow.result);
	                            return [2 /*return*/];
	                        }
	                        console.log('Disconnect success');
	                        this.ceramicDisconnect(targetAddr);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    CyberConnect.prototype.setAlias = function (targetAddr, alias) {
	        var _a, _b;
	        return __awaiter(this, void 0, void 0, function () {
	            var resp;
	            return __generator(this, function (_c) {
	                switch (_c.label) {
	                    case 0: return [4 /*yield*/, this.authenticate()];
	                    case 1:
	                        _c.sent();
	                        return [4 /*yield*/, (0, queries_1.setAlias)({
	                                fromAddr: this.address,
	                                toAddr: targetAddr,
	                                url: this.endpoint.cyberConnectApi,
	                                namespace: this.namespace,
	                                signature: this.signature,
	                                alias: alias,
	                            })];
	                    case 2:
	                        resp = _c.sent();
	                        if (((_a = resp === null || resp === void 0 ? void 0 : resp.data) === null || _a === void 0 ? void 0 : _a.setAlias.result) !== 'SUCCESS') {
	                            console.error('setAlias error: ', (_b = resp === null || resp === void 0 ? void 0 : resp.data) === null || _b === void 0 ? void 0 : _b.setAlias.result);
	                            return [2 /*return*/];
	                        }
	                        console.log('Set alias success');
	                        this.ceramicSetAlias(targetAddr, alias);
	                        return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return CyberConnect;
	}());
	cyberConnect.default = CyberConnect$1;

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Env = void 0;
	var cyberConnect_1 = __importDefault(cyberConnect);
	var network_1 = network;
	Object.defineProperty(exports, "Env", { enumerable: true, get: function () { return network_1.Env; } });
	exports.default = cyberConnect_1.default;

	}(lib$g));

	var CyberConnect = /*@__PURE__*/getDefaultExportFromCjs(lib$g);

	const endpoints = {
	  stg: {
	    cyberConnectApi: 'https://api.stg.cybertino.io/connect/',
	  },
	  production: {
	    cyberConnectApi: 'https://api.cybertino.io/connect/',
	  },
	};

	const request = async (url = '', data = {}) => {
	  const response = await fetch(url, {
	    method: 'POST',
	    mode: 'cors',
	    cache: 'no-cache',
	    headers: {
	      'Content-Type': 'application/json',
	      Accept: 'application/json',
	    },
	    body: JSON.stringify(data),
	  });
	  return response.json();
	};

	const followStatusQuerySchema = ({ fromAddr, toAddr, namespace }) => {
	  return `query {\n  followStatus(fromAddr: \"${fromAddr}\", toAddr: \"${toAddr}\", namespace: \"${namespace}\") {\n    isFollowing\n  }\n}\n`;
	};

	const followStatus = ({ fromAddr, toAddr, namespace, env }) => {
	  const schema = followStatusQuerySchema({
	    fromAddr,
	    toAddr,
	    namespace,
	    env,
	  });

	  const url = (endpoints[env] || endpoints['production']).cyberConnectApi;

	  return request(url, {
	    query: schema,
	    variables: {},
	    operationName: null,
	  });
	};

	var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

	var css = ".cyberConnectFollowButtonWrapper {\n  position: relative;\n  width: 141px;\n  height: 44px;\n  box-sizing: border-box;\n  border-radius: 4px;\n  background: #000000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.cyberConnectFollowButtonWrapper .cyberConnectFollowButton {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  padding: 0 20px;\n  transition: background-color 0.3s;\n  background: #000000;\n  box-sizing: border-box;\n  border-radius: 4px;\n}\n\n.cyberConnectFollowButtonWrapper .cyberConnectFollowButton:hover {\n  background: #000000cc;\n}\n\n.cyberConnectFollowButtonWrapper.loading .cyberConnectFollowButton {\n  display: none;\n}\n\n/* Logo */\n.cyberConnectFollowButtonWrapper .cyberConnectLogo {\n  position: relative;\n  display: flex;\n  transition: all 0.3s;\n}\n\n.cyberConnectFollowButtonWrapper .connectLogoPart {\n  width: 8.92px;\n  height: 15.99px;\n  transition: all 0.3s;\n  position: relative;\n}\n\n.connectLogoPart.connectLogoPartLeft {\n  left: -1.115px;\n}\n\n.connectLogoPart.connectLogoPartRight {\n  right: -1.115px;\n}\n\n.cyberConnectFollowButtonWrapper.logoRotate .cyberConnectLogo {\n  transform: rotate(-45deg);\n}\n\n.cyberConnectFollowButtonWrapper.logoRotate\n  .cyberConnectLogo\n  .connectLogoPartLeft {\n  left: 1.115px;\n}\n\n.cyberConnectFollowButtonWrapper.logoRotate\n  .cyberConnectLogo\n  .connectLogoPartRight {\n  right: 1.115px;\n}\n\n/* Button Text */\n.buttonText {\n  font-family: 'Poppins', sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 13px;\n  line-height: 19px;\n  color: #ffffff;\n  margin-left: 19.735px;\n  user-select: none;\n}\n\n/* Loading */\n.cyberConnectFollowButtonWrapper .circleProgress {\n  width: 20px;\n  height: 20px;\n  display: none;\n  color: #000;\n  -webkit-animation: progressLoading 1.4s linear infinite;\n  animation: progressLoading 1.4s linear infinite;\n  box-sizing: border-box;\n}\n\n.cyberConnectFollowButtonWrapper.loading .circleProgress {\n  display: inline-block;\n}\n\n.cyberConnectFollowButtonWrapper .circleProgress-svg {\n  display: block;\n  box-sizing: border-box;\n  color: #fff;\n}\n\n.cyberConnectFollowButtonWrapper .circleProgress-circle {\n  stroke: currentColor;\n  stroke-dasharray: 80 px, 200 px;\n  stroke-dashoffset: 0;\n  -webkit-animation: circleLoading 1.4s ease-in-out infinite;\n  animation: circleLoading 1.4s ease-in-out infinite;\n}\n\n@keyframes progressLoading {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes circleLoading {\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n}\n";
	n(css,{});

	function initApi() {
	  window.capi = window.capi || {
	    follow: {
	      render: cyberConnectFollowButtonRender,
	      relations: {},
	    },
	  };

	  capi = window.capi;
	}

	initApi();

	function initCyberConnect({ ethProvider, namespace, env }) {
	  if (capi.follow.connectInstance) {
	    return;
	  }

	  console.log(CyberConnect);

	  capi.follow.connectInstance = new CyberConnect({
	    ethProvider,
	    namespace,
	    env,
	  });
	}

	async function handleButtonClick(relation, toAddr, buttonWrapper) {
	  console.log('click');
	  const following = capi.follow.relations[relation]?.following;
	  buttonWrapper.classList.add('loading');

	  try {
	    if (following) {
	      await unfollow(toAddr);
	    } else {
	      await follow(toAddr);
	    }
	    updateElementStatus(relation, !following);
	  } catch (e) {
	    console.error(e);
	    buttonWrapper.classList.remove('loading');
	  }
	}

	function handleButtonMouseEnter(relation, buttonWrapper, followStatus) {
	  const following = capi.follow.relations[relation]?.following;

	  if (following) {
	    followStatus.innerHTML = 'Unfollow';
	  } else {
	    buttonWrapper.classList.add('logoRotate');
	  }
	}

	function handleButtonMouseLeave(relation, buttonWrapper, followStatus) {
	  const following = capi.follow.relations[relation]?.following;
	  buttonWrapper.classList.remove('logoRotate');

	  if (following) {
	    followStatus.innerHTML = 'Following';
	  }
	}

	function createLoadingElement() {
	  const circleProgress = document.createElement('div');
	  circleProgress.classList.add('circleProgress');

	  const svgns = 'http://www.w3.org/2000/svg';
	  const svg = document.createElementNS(svgns, 'svg');
	  svg.classList.add('circleProgress-svg');
	  svg.setAttribute('viewBox', '22 22 44 44');

	  const circle = document.createElementNS(svgns, 'circle');
	  svg.classList.add('circleProgress-circle');
	  circle.setAttributeNS(null, 'cx', '44');
	  circle.setAttributeNS(null, 'cy', '44');
	  circle.setAttributeNS(null, 'r', '19.5');
	  circle.setAttributeNS(null, 'style', 'fill: none; stroke-width: 5;');

	  svg.append(circle);
	  circleProgress.append(svg);

	  return circleProgress;
	}

	function addFollowElement({ button, fromAddr, toAddr, namespace, following }) {
	  const relation = fromAddr + toAddr + namespace;
	  const relations = capi.follow.relations;

	  if (relations[relation]) {
	    console.log('already has the relation: ', relation);
	    relations[relation].buttons.push(button);
	  } else {
	    relations[relation] = {
	      buttons: [button],
	      following,
	    };
	  }
	}

	async function cyberConnectFollowButtonRender(
	  id,
	  { fromAddr, toAddr, namespace, ethProvider, env }
	) {
	  const buttonWrapper = document.getElementById(id);
	  if (!buttonWrapper) {
	    console.error('Can not find the target id');
	    return;
	  }

	  if (buttonWrapper.children.length > 0) {
	    console.error('Already render the button');
	    return;
	  }

	  initCyberConnect({ ethProvider, namespace, env });

	  const relation = fromAddr + toAddr + namespace;
	  const relations = capi.follow.relations;
	  let following = false;

	  if (!relations[relation]) {
	    following = await getFollowStatus({
	      fromAddr,
	      toAddr,
	      namespace,
	      env,
	    });
	  }

	  addFollowElement({
	    button: buttonWrapper,
	    fromAddr,
	    toAddr,
	    namespace,
	    following,
	  });

	  buttonWrapper.classList.add('cyberConnectFollowButtonWrapper');

	  // Create elements inside of button
	  const button = document.createElement('div');
	  button.classList.add('cyberConnectFollowButton');

	  const logo = document.createElement('div');
	  logo.classList.add('cyberConnectLogo');

	  const logoLeftIcon = document.createElement('img');
	  logoLeftIcon.classList.add('connectLogoPart', 'connectLogoPartLeft');
	  // logoLeftIcon.src = logoLeftIconSvg;
	  logoLeftIcon.src = '';

	  const logoRightIcon = document.createElement('img');
	  logoRightIcon.classList.add('connectLogoPart', 'connectLogoPartRight');
	  // logoRightIcon.src = logoRightIconSvg;
	  logoRightIcon.src = '';

	  const buttonTextFollowStatus = document.createElement('div');
	  buttonTextFollowStatus.classList.add('buttonText', 'followStatus');
	  if (following) {
	    buttonTextFollowStatus.innerHTML = 'Following';
	  } else {
	    buttonTextFollowStatus.innerHTML = 'Follow';
	  }

	  // Create loading
	  const circleProgress = createLoadingElement();

	  // Add listener
	  buttonWrapper.addEventListener('mouseenter', () =>
	    handleButtonMouseEnter(relation, buttonWrapper, buttonTextFollowStatus)
	  );
	  buttonWrapper.addEventListener('mouseleave', () =>
	    handleButtonMouseLeave(relation, buttonWrapper, buttonTextFollowStatus)
	  );
	  button.addEventListener('click', () => {
	    handleButtonClick(relation, toAddr, buttonWrapper);
	  });

	  // Assmble button
	  logo.append(logoLeftIcon, logoRightIcon);
	  button.append(logo, buttonTextFollowStatus);
	  buttonWrapper.append(button, circleProgress);
	}

	async function getFollowStatus({ fromAddr, toAddr, namespace, env }) {
	  const result = await followStatus({ fromAddr, toAddr, namespace, env });
	  return !!result?.data?.followStatus?.isFollowing;
	}

	function updateElementStatus(relation, following) {
	  const relations = capi.follow.relations;

	  relations[relation].following = following;

	  relations[relation].buttons.forEach((button) => {
	    if (button) {
	      const followStatus = button.querySelector('.followStatus')[0];
	      if (following) {
	        if (followStatus) {
	          followStatus.innerHTML = 'Following';
	        }
	        button.classList.add('logoRotate');
	      } else {
	        if (followStatus) {
	          followStatus.innerHTML = 'Follow';
	        }
	      }
	      button.classList.remove('loading');
	    }
	  });
	}

	async function follow(toAddr) {
	  const connectInstance = capi.follow.connectInstance;
	  if (!connectInstance) {
	    throw 'Can not find the connect instance';
	  }

	  try {
	    const resutl = await connectInstance.connect(toAddr);
	  } catch (e) {
	    throw (e);
	  }
	}

	async function unfollow(toAddr) {
	  const connectInstance = capi.follow.connectInstance;
	  if (!connectInstance) {
	    throw 'Can not find the connect instance';
	  }

	  try {
	    const resutl = await connectInstance.disconnect(toAddr);
	  } catch (e) {
	    throw (e);
	  }
	}

})(crypto$7, require$$0$7, Url, Stream$1, http, https, zlib, require$$2$6, require$$0$8, require$$1$4, require$$1$5, require$$1$6, require$$0$9, require$$0$a);
